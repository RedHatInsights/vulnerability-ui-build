{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/CustomReportFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["BuildExecReport","panelGroups","totalRows","data","intl","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","system_count","mapFields","fields","percentageInfo","arr","field","label","fieldData","value","undefined","count","percentage","formatMessage","messages","push","toString","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","map","severity","x","y","Number","CVSSData","topCvesPerPage","firstPage","secondPage","forEach","cve","rows","Math","ceil","description","length","panel","key","synopsis","title","parseFloat","cvss3_score","toFixed","systems_affected","Fragment","systems","style","styles","cves","withHeader","CVSSHeader","chartType","subTitle","recentCvesHeader","withColumn","insertIf","propTypes","PropTypes","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","dispatch","useDispatch","dataFetch","addNotification","dismissable","variant","getExecutiveReport","report","buildExecReport","Date","toISOString","split","date","onClick","showButton","asyncFunction","buttonProps","isInline","type","fileName","allPagesHaveTitle","onSuccess","clearNotifications","CustomReportFilter","min","max","filterName","filterData","setFilterData","isOpen","setOpen","handleCvssInputChange","inputName","cvss_filter","validateCvssInput","valueThis","valueMin","valueMax","definePlaceholder","currentValue","CVE_REPORT_FILTERS","items","id","find","item","join","filterCheckboxes","options","Select","aria-label","onToggle","placeholderText","direction","width","className","onSelect","event","optionName","optionId","includes","index","indexOf","temp","slice","splice","handleOnCheckboxChange","selections","isCheckboxSelectionBadgeHidden","SelectOption","filterCvssContent","Split","SplitItem","fontSize","TextInput","onChange","v","validated","filterCvssWrapper","customContent","Text","color","name","STATUS_OPTIONS","BUSINESS_RISK_OPTIONS","optionValue","handleOnRadioChange","Radio","isChecked","filterRadios","PUBLIC_DATE_OPTIONS","IMPACT_OPTIONS","RULE_PRESENCE_OPTIONS","filterContent","ReportConfigModal","isModalOpen","handleModalClose","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","toggleSwitch","setToggleSwitch","activeFilters","useEffect","Object","keys","Modal","ouiaId","onClose","actions","Button","isDisabled","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","ToggleGroup","ToggleGroupItem","text","isSelected","Checkbox","entries","newValue","parameter","filter","handleCheckboxChange","helperTextInvalid","TextArea","resizeOrientation","minHeight","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"mappings":"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","file":"js/Reports.fb9bac208c1576290ad2.js","sourcesContent":["\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\nimport { insertIf } from '../../../Helpers/MiscHelper';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                if (percentageInfo === 'number') { // only return number representing percentage\n                    value = fieldData.percentage;\n                }\n                else { // return formatted string including CVE count and percentage\n                    value = intl.formatMessage(messages.executiveReportOfTotal,\n                        { count: value, percentage: fieldData.percentage });\n                }\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'number'\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'string'\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= safeCharLength.rows && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    const topCvesPerPage = calculateTopCves();\n\n    const firstPage = (\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    topCvesPerPage.firstPage\n\n                }\n            </Section>\n        </Fragment>\n    );\n\n    return [\n        firstPage,\n        ...insertIf(topCvesPerPage.secondPage.length > 0, topCvesPerPage.secondPage)\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.downloadExecutiveNotification)\n        }));\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Split, SplitItem, Radio, Text, TextInput, Select, SelectOption } from '@patternfly/react-core';\nimport {\n    CVE_REPORT_FILTERS,\n    BUSINESS_RISK_OPTIONS,\n    STATUS_OPTIONS,\n    PUBLIC_DATE_OPTIONS,\n    IMPACT_OPTIONS,\n    RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nconst CustomReportFilter = ({ filterName, filterData, setFilterData }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnCheckboxChange = (filterName, optionName) => {\n        const optionId = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        if (!filterData[filterName].includes(optionId)) { // uncheck\n            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], optionId] });\n        }\n        else { // check\n            let index = filterData[filterName].indexOf(optionId);\n            let temp = filterData[filterName].slice();\n            temp.splice(index, 1);\n            setFilterData({ ...filterData, [filterName]: temp });\n        }\n    };\n\n    const handleOnRadioChange = (filterName, optionName) => {\n        const optionValue = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        setFilterData({ ...filterData, [filterName]: optionValue });\n    };\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({\n            ...filterData, cvss_filter: {\n                ...filterData.cvss_filter,\n                [inputName]: value\n            }\n        });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const valueThis = +filterData.cvss_filter[inputName];\n        const valueMin = +filterData.cvss_filter.min;\n        const valueMax = +filterData.cvss_filter.max;\n\n        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const definePlaceholder = (filterName) => {\n        let currentValue = filterData[filterName];\n        let { title, items } = CVE_REPORT_FILTERS[filterName];\n\n        if (currentValue.length === 0 || currentValue.length === items.length) {\n            return `${title}: All`;\n        }\n\n        return `${title}: ${currentValue.map(id => items.find(item => item.value === id).label).join(', ')}`;\n\n    };\n\n    const filterCheckboxes = (options, filterName) => (\n        <Select\n            variant=\"checkbox\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={definePlaceholder(filterName)}\n            direction=\"bottom\"\n            key={filterName}\n            width='auto'\n            className=\"pf-u-mr-sm pf-u-mb-sm custom-report-filter-select\"\n            onSelect={(event, optionName) => { handleOnCheckboxChange(filterName, optionName); }}\n            selections={filterData[filterName].map(\n                id => CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label)}\n            isCheckboxSelectionBadgeHidden\n        >\n            {options.map(item =>\n                <SelectOption\n                    key={filterName + item.label}\n                    value={item.label}\n                />\n            )}\n        </Select>\n    );\n\n    const filterRadios = (options, filterName) => (\n        <Select\n            variant=\"single\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}:\n                ${CVE_REPORT_FILTERS[filterName].items.find(item => item.value === filterData[filterName]).label}`}\n            direction=\"bottom\"\n            key={filterName}\n            onSelect={(event, optionName) => { handleOnRadioChange(filterName, optionName); }}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            width=\"auto\"\n        >\n            {options.map(item =>\n                <SelectOption\n                    width=\"100%\"\n                    key={filterName + item.label}\n                    value={item.label}\n                >\n                    <Radio\n                        aria-label=\"Select Input\"\n                        label={item.label}\n                        value={item.label}\n                        isChecked={filterData[filterName] === item.value}\n                    />\n                </SelectOption>\n            )}\n        </Select>\n    );\n\n    const filterCvssContent = (<Split className='pf-u-m-md'>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'min')}\n                validated={validateCvssInput('min')}\n                id=\"cvss-min\"\n                value={filterData.cvss_filter.min}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n        <SplitItem>\n            <br /><span className=\"pf-u-m-sm\">-</span>\n        </SplitItem>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'max')}\n                validated={validateCvssInput('max')}\n                id=\"cvss-max\"\n                value={filterData.cvss_filter.max}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n    </Split>);\n\n    const filterCvssGetLabel = () => {\n        const min = +filterData.cvss_filter.min;\n        const max = +filterData.cvss_filter.max;\n\n        if (min === 0 && max === 10) {\n            return `${CVE_REPORT_FILTERS.cvss_filter.title}: ${intl.formatMessage(messages.optionsAll)}`;\n        }\n        else {\n            return (\n                <Text>\n                    {`${CVE_REPORT_FILTERS.cvss_filter.title}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}\n                    {(min < 0 || max > 10 || min > max) &&\n                        <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className=\"pf-u-ml-xs\" />}\n                </Text>\n            );\n        }\n    };\n\n    const filterCvssWrapper = (\n        <Select\n            variant=\"panel\"\n            aria-label=\"Select Input\"\n            customContent={filterCvssContent}\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={filterCvssGetLabel()}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            direction=\"bottom\"\n            width=\"auto\"\n        />\n    );\n\n    const filterContent = name => {\n        switch (name) {\n            case 'status_id':\n                return filterCheckboxes(STATUS_OPTIONS, 'status_id');\n            case 'business_risk_id':\n                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');\n            case 'publish_date':\n                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');\n            case 'impact':\n                return filterCheckboxes(IMPACT_OPTIONS, 'impact');\n            case 'cvss_filter':\n                return filterCvssWrapper;\n            case 'rule_presence':\n                return filterCheckboxes(RULE_PRESENCE_OPTIONS, 'rule_presence');\n            default:\n                return null;\n        }\n    };\n\n    return (filterContent(filterName));\n};\n\nCustomReportFilter.propTypes = {\n    filterName: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func\n};\n\nexport default CustomReportFilter;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport CustomReportFilter from '../Reports/CustomReportFilter';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n\n}) => {\n    const [toggleSwitch, setToggleSwitch] = useState('all');\n\n    const activeFilters = ['rule_presence', 'impact', 'cvss_filter', 'business_risk_id', 'status_id', 'publish_date'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (toggleSwitch === 'all') {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [toggleSwitch, setColumnsToInclude]);\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            id=\"custom-report-modal\"\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        +filterData.cvss_filter.min < 0 ||\n                        +filterData.cvss_filter.max > 10 ||\n                        +filterData.cvss_filter.min > +filterData.cvss_filter.max ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-filter-wrapper\"> {/* Width of modal minus padding from both sides */}\n                        {activeFilters &&\n                            activeFilters.map((item) => {\n                                return (\n                                    <CustomReportFilter\n                                        key={item}\n                                        filterName={item}\n                                        filterData={filterData}\n                                        setFilterData={setFilterData}\n                                    />\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={toggleSwitch === 'all'}\n                            onChange={() => setToggleSwitch('all')} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={toggleSwitch === 'custom'}\n                            onChange={() => setToggleSwitch('custom')}/>\n                    </ToggleGroup>\n\n                    {toggleSwitch === 'custom' &&\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                type='cves'\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}