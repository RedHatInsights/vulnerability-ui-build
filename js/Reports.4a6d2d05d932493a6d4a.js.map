{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["BuildExecReport","panelGroups","totalRows","data","intl","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","system_count","mapFields","fields","percentageInfo","arr","field","label","fieldData","value","undefined","count","percentage","formatMessage","messages","push","toString","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","map","severity","x","y","Number","CVSSData","topCvesPerPage","firstPage","secondPage","forEach","cve","rows","Math","ceil","description","length","panel","key","synopsis","title","parseFloat","cvss3_score","toFixed","systems_affected","Fragment","systems","style","styles","cves","withHeader","CVSSHeader","chartType","subTitle","recentCvesHeader","withColumn","insertIf","propTypes","PropTypes","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","dispatch","useDispatch","dataFetch","addNotification","dismissable","variant","getExecutiveReport","report","buildExecReport","Date","toISOString","split","date","onClick","showButton","asyncFunction","buttonProps","isInline","type","fileName","allPagesHaveTitle","onSuccess","clearNotifications","ReportConfigModal","isModalOpen","isOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","toggleSwitch","setToggleSwitch","activeFilters","useEffect","Object","keys","CVE_REPORT_FILTERS","Modal","id","ouiaId","onClose","actions","Button","isDisabled","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","filterId","component","selectProps","options","items","filterName","ToggleGroup","aria-label","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","includes","newValue","parameter","filter","item","handleCheckboxChange","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"mappings":"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","file":"js/Reports.4a6d2d05d932493a6d4a.js","sourcesContent":["\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\nimport { insertIf } from '../../../Helpers/MiscHelper';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                if (percentageInfo === 'number') { // only return number representing percentage\n                    value = fieldData.percentage;\n                }\n                else { // return formatted string including CVE count and percentage\n                    value = intl.formatMessage(messages.executiveReportOfTotal,\n                        { count: value, percentage: fieldData.percentage });\n                }\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'number'\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'string'\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= safeCharLength.rows && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    const topCvesPerPage = calculateTopCves();\n\n    const firstPage = (\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    topCvesPerPage.firstPage\n\n                }\n            </Section>\n        </Fragment>\n    );\n\n    return [\n        firstPage,\n        ...insertIf(topCvesPerPage.secondPage.length > 0, topCvesPerPage.secondPage)\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.downloadExecutiveNotification)\n        }));\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n}) => {\n    const [toggleSwitch, setToggleSwitch] = useState('all');\n\n    const activeFilters = ['rule_presence', 'impact', 'cvss_filter', 'business_risk_id', 'status_id', 'publish_date'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (toggleSwitch === 'all') {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [toggleSwitch, setColumnsToInclude]);\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            id=\"custom-report-modal\"\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        filterData.cvss_filter.from < 0 ||\n                        filterData.cvss_filter.to > 10 ||\n                        filterData.cvss_filter.from > filterData.cvss_filter.to ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-filter-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm' },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={toggleSwitch === 'all'}\n                            onChange={() => setToggleSwitch('all')} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={toggleSwitch === 'custom'}\n                            onChange={() => setToggleSwitch('custom')}/>\n                    </ToggleGroup>\n\n                    {toggleSwitch === 'custom' &&\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                type='cves'\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}