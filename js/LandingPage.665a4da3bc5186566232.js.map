{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEs.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/LandingPage/LandingPage.js"],"names":["CVEsTableWithContext","context","header","entity","cves","methods","selectedCves","openedCves","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","Fragment","isLoading","SkeletonTable","colSize","rowSize","Table","canSelectAll","aria-label","cells","heightAuto","props","colSpan","title","filter","item","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","TableHeader","TableBody","TableToolbar","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","affecting","filterByAffecting","values","defaultValues","forEach","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","flatMap","toLowerCase","toString","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","params","expandCveDescription","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","business_risk_id","isDisabled","showStatusModal","status_id","total_items","PrimaryToolbar","pagination","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","impactFilter","cvssBaseScoreFilter","businessRiskFilter","statusFilter","publishDateFilter","affectingFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","extraItems","kebabItemDownloadPDF","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","cveList","useSelector","CVEsStore","parameters","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","errors","clearNotifications","GenericError","Provider","format","DownloadReport","cveNames","selectCve","cvesList","BusinessRiskModal","updateRef","expandCve","Stack","StackItem","VULNERABILITIES_HEADER","Header","showBreadcrumb","Main"],"mappings":"qmCAcA,IAAMA,EAAuB,SAAC,GAAgC,IAA9BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAkCrCC,EAA4CH,EAA5CG,KAAMC,EAAsCJ,EAAtCI,QAASC,EAA6BL,EAA7BK,aAAcC,EAAeN,EAAfM,WAC/BC,EAA+B,IAArBJ,EAAKK,KAAKC,OAEpBC,EAAOP,EAAKK,MAAQL,EAAKK,KAC9BG,KAAI,SAAAC,GAAG,OAAKP,EAAaQ,SAASD,EAAIE,KAA1B,OAAsCF,GAAtC,IAA2CG,UAAU,KAAWH,KAC5ED,KAAI,SAACC,EAAKI,GACP,IAAMC,EAAUD,EAAQ,GAAM,EAAIV,EAAWO,SAASD,EAAIE,SAAMI,EAChE,cAAaN,GAAb,IAAkBO,OAAQF,OAG9B,OACI,kBAAC,EAAAG,SAAD,KACMjB,EAAKkB,UAoCH,kBAACC,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KAnCpC,kBAAC,EAAAJ,SAAD,KACI,kBAAC,EAAAK,MAAD,CACIC,cAAc,EACdC,aAAY,0BACZC,MAAO3B,EACPS,KAAMH,EAlDX,WAAM,IACTJ,EAASH,EAATG,KAYR,MAAQ,CAAC,CACL0B,YAAY,EACZD,MAAO,CACH,CACIE,MAAO,CAAEC,QAAS,GAClBC,MAZiC,IAJxB,CAAC,SAAU,YAAa,UAAW,cAAe,YAAa,SAAU,aAAaC,QACvG,SAAAC,GAAI,OAAIC,OAAOC,UAAUC,eAAeC,KAAKnC,EAAKoC,KAAML,IAAS/B,EAAKoC,KAAKL,MAG7CzB,OAC5B+B,KACAtC,EACIuC,KACqB,IAArBtC,EAAKK,KAAKC,QACLiC,SAuCiBC,GAAWjC,EAC3BkC,SAAWrC,OAA2BW,EAzBnC,SAAC2B,EAAOC,EAAYC,GAAU,IACzC5C,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,QACR4C,EAAU7C,EAAKK,KAAKuC,IAAU5C,EAAKK,KAAKuC,GAAOjC,GACrDV,EAAQ6C,WAAWH,EAAYE,IAuBfE,WAAa3C,OAAyDW,EAA9C,SAAC2B,EAAOM,GAAR,OAAmB/C,EAAQgD,SAASD,IAC5DE,eAAuC,IAArBlD,EAAKK,KAAKC,OACxB,SAAC6C,EAASC,GAAV,OAAuBC,QAAmBpD,EAASmD,EAASA,gBAAYrC,EAC5EuC,OAASlD,OACiFW,GAAtFwC,QAAa,CAAC,CAAEC,IAAK,YAAc,CAAEA,IAAK,aAA9B,WAA+C1D,IAASE,EAAKoC,KAAKqB,MAClFC,OAAStD,OAQGW,EAPR,SAAC2B,EAAOc,EAAKG,GAAb,OACIC,QACIJ,EACAG,EAFY,CAGX,CAAEH,IAAK,YAAc,CAAEA,IAAK,aAHjB,WAGkC1D,IAC9CE,EAAKoC,KAAKqB,KACVxD,EAAQ4D,QAGpBC,OAAQ,aACRC,gBAAc,GAEd,kBAAC,EAAA9C,SAAD,KACI,kBAAC,EAAA+C,YAAD,MACA,kBAAC,EAAAC,UAAD,QAGR,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmB/B,KAAMpC,EAAKoC,KAAMyB,MAAO5D,EAAQ4D,YAW3EjE,EAAqBwE,UAAY,CAC7BvE,QAASuE,QACTtE,OAAQsE,UACRrE,OAAQqE,YASZ,QANkB,SAAAzC,GAAK,OACnB,kBAAC0C,GAAgBC,SAAjB,MACK,SAAAzE,GAAO,OAAI,kBAACD,EAAD,KAAsBC,QAASA,GAAa8B,Q,gFClFhE,QAxBwB,SAACkC,GAA8B,IAAvBU,EAAuB,uDAAP,GAC3BC,EAAiBD,EAA5BE,UAEAC,EAAoB,SAACC,GACvB,IAAMC,EAAgB,EAAC,GAAO,GAC9BD,EAAOE,SAAQ,SAAA9C,GAAU6C,EAAc7C,IAAQ,KAC/C,IAAMD,EAAS8C,EAAcE,KAAK,KAClCjB,EAAM,CAAEY,UAAsB,gBAAX3C,EAA2B,GAAKA,EAAQiD,KAAM,KAGrE,MAAO,CACHC,MAAOC,kBAAmBC,oBAC1BC,KAAMC,iCACNC,SAAU,YACVC,aAAc,CACVC,SAAU,SAAC7C,EAAO8C,GACdd,EAAkBc,IAEtBC,MAAOC,UAA6B,SAAA3D,GAAI,MAAK,CAAEiD,MAAOjD,EAAKiD,MAAOQ,MAAOzD,EAAKyD,UAC9EA,MAAOhB,aAAF,EAAEA,EAAcmB,MAAM,KAAKC,SAAQ,SAACJ,EAAO3E,GAAR,MAA2C,UAAzB2E,aAAA,EAAAA,EAAOK,eAA2BhF,EAAMiF,WAAa,S,orBCE3H,IAAMC,GAA8B,SAACpE,GAAU,OACTqE,eAAS,GADA,WACpCC,EADoC,KACzBC,EADyB,KAWnCrG,EAAY8B,EAAZ9B,QACAG,EAA8DH,EAA9DG,KAAMmG,EAAwDtG,EAAxDsG,OAAQlG,EAAgDJ,EAAhDI,QAASC,EAAuCL,EAAvCK,aAAckG,EAAyBvG,EAAzBuG,qBACrCtE,EAAWqE,EAAXrE,OACFuE,EAAoBnG,GAAgBA,EAAaI,OAEjDgG,GAAiBC,OAAkB,CACrCC,cAAetG,EACfuG,gBAAiBxG,EAAQ6C,WACzB2C,MAAOzF,EACP0G,cAAe,SAAAC,GAAG,OAAIC,QAAa,SAAKT,GAAWQ,KACnDE,UAAU,IAGRC,EAAU,CACZ,GACA,CACI9B,MAAOrD,EAAMsD,KAAK8B,cAAc7B,sBAChC8B,QAAS,kBAAM/G,EAAQgH,sBAAsB/G,EAAaM,KAAI,SAAAuB,GAAI,MAAK,CAAEpB,GAAIoB,EAAMmF,iBAAkB,UACrGvF,MAAO,CAAEwF,YAAad,IAE1B,CACIrB,MAAOrD,EAAMsD,KAAK8B,cAAc7B,gBAChC8B,QAAS,kBAAM/G,EAAQmH,gBAAgBlH,EAAaM,KAAI,SAAAuB,GAAI,MAAK,CAAEpB,GAAIoB,EAAMsF,UAAW,OAAQ,MAChG1F,MAAO,CAAEwF,YAAad,IAE1B,CACIrB,MAAOoB,EAAuBzE,EAAMsD,KAAK8B,cAAc7B,uBACjDvD,EAAMsD,KAAK8B,cAAc7B,qBAC/B8B,QApCqB,WAAM,IACvBnH,EAAY8B,EAAZ9B,QACAG,EAAwCH,EAAxCG,KAAMC,EAAkCJ,EAAlCI,QAERE,EAF0CN,EAAzBuG,qBAEyE,GAArDpG,EAAKK,KAAKyB,QAAO,SAAArB,GAAG,OAAIA,EAAIE,MAAIH,KAAI,SAAAC,GAAG,OAAIA,EAAIE,MAC1FV,EAAQgD,SAAS9C,IAgCbwB,MAAO,CAAEwF,WAAsC,IAA1BnH,EAAKoC,KAAKkF,eAIvC,OACI,kBAAC,aAAD,KACI,kBAACC,EAAA,EAAD,CACIC,WAAY,CACRC,UAAWzH,EAAKoC,KAAKkF,aAAe,EACpCvC,KAAM/E,EAAKoC,KAAK2C,MAAQ,EACxB2C,QAAS1H,EAAKoC,KAAKuF,WAAa,EAChC7D,OAAQ,iBACR8D,UAAW,SAACC,EAAQ9C,GAAT,OAAkB+C,QAAiBD,EAAQ9C,EAAM9E,EAAQ4D,QACpEkE,gBAAiB,SAACF,EAAQH,GAAT,OAAqBM,QAAkBH,EAAQH,EAASzH,EAAQ4D,SAErFoE,cAAe,CACXnB,UACAoB,cAAe,CAAEpE,OAAQ,oBAE7BqE,WAAY,CACRC,MAAO/B,EACPZ,MAAOa,EAAcb,MACrB0B,WAAsC,IAA1BnH,EAAKoC,KAAKkF,aAA2C,IAAtBjB,EAC3CgC,QAASC,QAAQjC,GACjBvC,OAAQ,cACRrB,SAAU,kBAAK6D,EAAciC,2BAEjCC,aAAc,CACV/C,MAAO,EACHgD,OAAa,SAAUvD,QAAcA,wBAA8BpD,EAAQ7B,EAAQ4D,QACnF6E,OAAmBzI,EAAQ4D,MAAOsC,IAClCwC,OAAa1I,EAAQ4D,MAAOsC,IAC5ByC,OAAoB3I,EAAQ4D,MAAOsC,IACnC0C,OAAmB5I,EAAQ4D,MAAOsC,IAClC2C,OAAa7I,EAAQ4D,MAAOsC,IAC5B4C,OAAkB9I,EAAQ4D,MAAOsC,GACjC6C,EAAgB/I,EAAQ4D,MAAOsC,KAGvC8C,oBAAqB,CACjBC,SAASC,QAAmBhD,GAC5BiD,SAAU,SAACC,EAAGC,GAAJ,OAAUC,QAAcD,EAAGrJ,EAAQ4D,SAEjD2F,aAAY,IACRrC,WAAsC,IAA1BnH,EAAKoC,KAAKkF,YACtBmC,WAAY,EAACC,QAAqBzD,EAAWC,IAC7CpC,OAAQ,WACL0F,QAAavJ,MAGtBgG,GACE,kBAAC0D,EAAA,EAAD,CACIC,YAAY,EACZzE,KAAK,OACLgB,OAAQA,EACR+C,SAASC,QAAmBhD,GAC5B0D,UAAW,kBAAM3D,GAAa,QAQlDH,GAA4B3B,UAAY,CACpCvE,QAASuE,WACTa,KAAMb,YAGV2B,GAA4B+D,aAAe,CACvCC,YAAa,EACblG,MAAO,aACPmG,eAAgB,cAQpB,UAAeC,SALU,SAAAtI,GAAK,OAC1B,kBAAC0C,GAAgBC,SAAjB,MACK,SAAAzE,GAAO,OAAI,kBAACkG,GAAD,KAA6BlG,QAASA,GAAa8B,U,2PCxHhE,IAAM0C,GAAkB6F,kBAAoB,IAyHnD,SAvHoB,WAChB,IAAMC,GAAWC,mBADK,GAEmBpE,eAAS,kBAAM,kBAAM,SAFxC,WAEfqE,EAFe,KAECC,EAFD,QAG+BtE,eAAS,kBAAM,kBAAM,SAHpD,WAGfuE,EAHe,KAGOC,EAHP,QAI0BxE,eAAS,GAJnC,WAIfyE,EAJe,KAIGC,EAJH,QAKgB1E,eAAS,GALzB,WAKf2E,EALe,KAKFC,EALE,KAOhBC,GAAUC,kBACZ,qBAAGC,UAA2BF,WAE5BG,GAAaF,kBACf,qBAAGC,UAA0BC,cAE3B9K,GAAe4K,kBACjB,qBAAGC,UAA0B7K,gBAE3BC,GAAa2K,kBACf,qBAAGC,UAA0B5K,cAE3BiG,GAAuB0E,kBACzB,qBAAGC,UAA0B3E,wBAG3BpG,GAAOiL,cAAQ,kBAAMC,QAAuBL,KAAU,CAACA,IAvBvC,GAwBeM,QAAa,CAAC,mBAAF,WAAwBC,QAxBnD,WAwBfC,EAxBe,KAwBAC,EAxBA,KA0BhBzH,EAAQ,WAAuB,IAAtB0H,EAAsB,uDAAP,GACpBpF,GAASqF,QAA0BD,GACzCpB,GAASsB,QAAwBtF,KAqDrC,OAlDAuF,gBAAU,WACFf,GACA9G,EAAMwH,GACNT,GAAe,KAGfT,GAASwB,QAAsBX,IAC/BP,GACOa,E,mWAAY,IAAKN,KACjBN,GAAoB,MAEhC,CAACM,KAEJU,gBAAU,WACN,OAAO,WACHvB,GAASyB,cAEd,IAiCE5L,EAAK6L,QA9BN1B,GAAS2B,4BACFC,MA+BH,kBAAC1H,GAAgB2H,SAAjB,CACIxG,MAAO,CACHxF,OACAmG,OAAQ6E,EACR9K,eACAC,aACAiG,uBACAnG,QAAS,CACL4D,QACAmG,eAjCG,SAAAiC,GACnBC,UAAoBP,KAAuBX,EAAYiB,EAAQ,SAiC/CnJ,WAtCI,SAACH,EAAYwJ,GACjChC,GAASiC,QAAUD,GAAY,MAsCflF,sBA/BU,SAAAoF,GAAY,IAC7BjK,EAASpC,EAAToC,KACToI,GAAqB,kBAAM,kBACtB,kBAAC8B,EAAA,EAAD,CAAmBtM,KAAMqM,EAAUE,UAAW,kBAAMA,OAAUnK,EAAMyB,WA6BzDuD,gBAzBI,SAAAiF,GAAY,IACvBjK,EAASpC,EAAToC,KACTkI,GAAe,kBAAM,kBAChB,kBAAC,IAAD,CAAatK,KAAMqM,EAAUE,UAAW,kBAAMA,OAAUnK,EAAMyB,WAuBnDZ,SAnBH,SAACjD,GACdmK,GAASqC,QAAUxM,QAsBX,kBAACuK,EAAD,MACA,kBAACF,EAAD,MAEA,kBAACoC,QAAD,KACI,kBAACC,YAAD,KACI,kBAAC,GAAD,OAEJ,kBAACA,YAAD,KACI,kBAAC,EAAD,CAAW5M,OAAQ6M,WCrH3C,GAXoB,WAChB,OACI,kBAAC,EAAA1L,SAAD,KACI,kBAAC2L,EAAA,EAAD,CAAQC,gBAAgB,IACxB,kBAACC,EAAA,EAAD,KACI,kBAAC,GAAD","file":"js/LandingPage.665a4da3bc5186566232.js","sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        ouiaId={'cves-table'}\n                        isStickyHeader\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={7} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ affecting: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.affectsSystems),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, expandCveDescription } = context;\n\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    type='cves'\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && setUrlParam({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n        };\n    }, []);\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    params: parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={VULNERABILITIES_HEADER} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError();\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    return (\n        <Fragment>\n            <Header showBreadcrumb={false} />\n            <Main>\n                <CVEs/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"sourceRoot":""}