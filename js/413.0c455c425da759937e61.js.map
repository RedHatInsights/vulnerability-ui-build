{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Store/Reducers/InventoryEntitiesReducer.js"],"names":["initialState","columns","rows","entities","selectedRows","modifyInventory","state","loaded","hasPatchAccess","some","patchAccess","nameColumn","restColumns","lastSeenColumn","filter","key","tagsColumn","props","width","transforms","sortable","cellTransforms","nowrap","mergedColumns","splice","SYSTEMS_ADVISORY_COLUMN","map","item","selected","system","id","selectEntities","myRows","slice","inventoryEntitiesReducer","action","type","payload","row","isOpen"],"mappings":"k4BAGO,IAAMA,EAAe,CACxBC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,aAAc,IAGlB,SAASC,EAAgBJ,EAASK,GAG9B,GAFKA,EAAMF,eAAeE,EAAMF,aAAe,IAE3CE,EAAMC,OAAQ,CACd,IAAIC,EAAiBF,EAAMJ,KAAKO,MAAK,qBAAGC,eAD1B,MAEkBT,EAFlB,GAETU,EAFS,KAEGC,EAFH,KAGVC,EAAiBP,EAAML,QAAQa,QAAO,kBAAqB,YAArB,EAAGC,OACzCC,EAAaV,EAAML,QAAQa,QAAO,kBAAqB,SAArB,EAAGC,OACzCC,EAAa,CAAC,EAAD,KAAMA,EAAW,IAAjB,IAAqBC,MAAO,CAAEC,MAAO,OAClDL,EAAiB,CAAC,EAAD,KAAMA,EAAe,IAArB,IAAyBM,WAAY,CAACC,YAAWC,eAAgB,CAACC,UAASL,MAAO,CAAEC,MAAO,OAE5G,IAAIK,EAAgB,CAACZ,GAAJ,WAAmBK,GAAnB,CAA+BJ,GAA/B,IAA+CC,IAMhE,OAJIL,GACAe,EAAcC,OAAO,EAAG,EAAGC,MAG/B,OACOnB,GADP,IAEIJ,KAAMI,EAAMJ,KAAKwB,KAAI,SAAAC,GAAI,cAAUA,GAAV,IAAgBC,SAAUtB,EAAMF,aAAaK,MAAK,SAAAoB,GAAM,OAAIA,IAAWF,EAAKG,WACrG7B,QAASsB,IAIjB,OAAOjB,EAGX,SAASyB,EAAezB,EAAOsB,GAC3B,IAAMI,EAAS1B,EAAMJ,KAAK+B,QAY1B,OAXK3B,EAAMF,eAAeE,EAAMF,aAAe,IAEhC,EAAH,KACLE,GADK,IAERJ,KAAM8B,EACLN,KAAI,SAAAC,GAED,OADiB,EAAH,KAASA,GAAT,IAAeC,SAAUA,EAASnB,MAAK,SAAAoB,GAAM,OAAIA,IAAWF,EAAKG,WAGnF1B,aAAc,IAAIwB,KAKnB,IAAMM,EAA2B,SAACjC,GAAD,OAAa,WAAkC,IAAjCK,EAAiC,uDAAzBN,EAAcmC,EAAW,uCACnF,OAAQA,EAAOC,MACX,IAAK,0BACD,OAAO/B,EAAgBJ,EAASK,GACpC,IAAK,2BACD,OAAOyB,EAAezB,EAAO6B,EAAOE,SACxC,IAAK,aACD,cACO/B,GADP,IAEIJ,KAAMI,EAAMJ,KAAKwB,KAAI,SAAAY,GAAG,cACjBA,GADiB,IAEpBC,OAAQD,EAAIR,KAAOK,EAAOE,QAAQP,GAAKK,EAAOE,QAAQE,OAASD,EAAIC,cAG/E,IAAK,wBACD,OAAOvC,EACX,QACI,OAAOM","file":"js/413.0c455c425da759937e61.js","sourcesContent":["import { nowrap, sortable } from '@patternfly/react-table';\nimport { SYSTEMS_ADVISORY_COLUMN } from '../../Helpers/constants';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n        let [nameColumn, restColumns] = columns;\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        let tagsColumn = state.columns.filter(({ key }) => key === 'tags');\n        tagsColumn = [{ ...tagsColumn[0], props: { width: 20 } }];\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable], cellTransforms: [nowrap], props: { width: 20 } }];\n\n        let mergedColumns = [nameColumn, ...tagsColumn, restColumns, ...lastSeenColumn];\n\n        if (hasPatchAccess) {\n            mergedColumns.splice(2, 0, SYSTEMS_ADVISORY_COLUMN);\n        }\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: mergedColumns\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}