{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Remediation/Remediation.js"],"names":["CvePairStatusModal","cveList","updateRef","inventoryList","intl","type","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","item","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","successNotification","variant","title","formatMessage","messages","modalTitle","count","length","items","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","Stack","hasGutter","some","showDifferentStatusesWarning","StackItem","isInline","cveCount","cveId","systemCount","systemName","b","chunks","key","fieldId","Split","SplitItem","Checkbox","label","name","isChecked","onChange","checked","Tooltip","content","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","baseIssueTemplate","description","cveHasRule","rules","someSystemsHaveRule","systems","s","rule","filterRules","filter","value","rule_id","remediationProvider","cves","manyRules","concat","issues","reduce","acc","issue","system","nextProps","this","props","dispatchNotification","addNotification","dataProvider","onRemediationCreated","result","getNotification","size","globalBackgroundColor100","Component","connect","dispatch","notification","routerParams"],"mappings":"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","file":"js/20.1a347a5490464dfcb24f.js","sourcesContent":["import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0].status_id && item.justification === cveList[0].justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0].status_id && item.justification === arr[0].justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0].status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0].cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0].status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0].justification);\n\n                    return sameAsEachOther ? inventoryList[0].justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0].cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0].cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0].justification);\n\n                    return sameAsEachOther ? cveList[0].justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0].status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0].status_id);\n            }\n        }\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={modalTitle}\n            ouiaId={'status-modal'}\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { RemediationButton } from '@redhat-cloud-services/frontend-components-remediations';\nimport { AnsibeTowerIcon }  from '@patternfly/react-icons';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nclass Remediation extends Component {\n    static propTypes = {\n        cves: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        systems: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        addNotification: propTypes.func,\n        manyRules: propTypes.bool\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.cves !== this.props.cves) {\n            return true;\n        }\n\n        if (nextProps.systems !== this.props.systems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    baseIssueTemplate = (id) => (\n        {\n            id: `vulnerabilities:${id}`,\n            description: id\n        }\n    )\n\n    cveHasRule = (cve) => cve.rules?.length > 0;\n\n    someSystemsHaveRule = (systems) => systems.some(s => s.rule)\n\n    filterRules = (cve, systems) => (\n        cve.rules.filter(({ value }) => systems.some(({ rule }) => rule ? rule?.rule?.rule_id === value : value))\n    )\n\n    remediationProvider = (cves = [], systems = [], manyRules = false) => {\n        cves = [].concat(cves);\n        systems = [].concat(systems);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n\n            // both cve and at least one of the systems have linked rule\n            if (this.cveHasRule(cve) && this.someSystemsHaveRule(systems)) {\n                let rules = this.filterRules(cve, systems);\n                issues = rules.reduce((acc, rule) => {\n                    let issue = this.baseIssueTemplate(cve.id);\n                    issue.id = `${issue.id}:${rule.value}`;\n\n                    return [...acc, issue];\n                }, []);\n            } else {\n                issues = [this.baseIssueTemplate(cve.id)];\n            }\n\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            issues = cves.reduce((acc, cve) => {\n                let issue = this.baseIssueTemplate(cve.id);\n\n                if (cve.rules?.rule_id) {\n                    issue.id = `${issue.id}:${cve.rules.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length\n            ? {\n                issues,\n                systems: systems.map(system => system.id || system)\n            }\n            : false;\n    };\n\n    render() {\n        const { cves, systems, manyRules, addNotification: dispatchNotification } = this.props;\n        return (\n            <div>\n                <RemediationButton\n                    dataProvider={() => this.remediationProvider(cves, systems, manyRules)}\n                    isDisabled={this.remediationProvider(cves, systems) === false}\n                    onRemediationCreated={result => dispatchNotification(result.getNotification())}\n                >\n                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />\n                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}\n                </RemediationButton>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n"],"sourceRoot":""}