{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js"],"names":["FilterNotFoundForCVE","Bullseye","style","height","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","messages","TextContent","EmptyStateBody","whiteSpace","Text","component","TextVariants","href","target","rel","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyExcludedSystem","buttonAction","EmptyStateIcon","icon","SecurityIcon","Button","onClick","propTypes","EmptyCVEList","EmptyVulnerabilityData","CubesIcon","GenericError","ExclamationCircleIcon","color","values","statusPageLink","history","back","apply","currentFilter","currentValue","business_risk_id","filterByBusinessRisk","length","filter","value","join","page","label","intl","type","conditionalFilterType","urlParam","filterValues","onChange","event","items","BUSINESS_RISK_OPTIONS","item","split","React","searchValue","setSearchValue","debounce","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","filterByCvssRange","children","key","filterId","filterData","setFilterData","className","selectProps","placeholderText","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","publish_date","filterByPublishDate","PUBLIC_DATE_OPTIONS","PaginationWrapper","handleChangePage","_event","pageNumber","props","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","Pagination","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","ouiaId","concat","Component","defaultProps"],"mappings":"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","file":"js/478.0befa5aede2eb72374b3.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, ExclamationCircleIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={ExclamationCircleIcon} color={'var(--pf-global--danger-color--100)'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.somethingWrong} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.tryRefreshing} />\n                <br/><br/>\n                <FormattedMessage {...messages.ifProblemPersists}\n                    values = {{\n                        statusPageLink:\n                                <a href=\"https://status.redhat.com\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                    <FormattedMessage {...messages.statusPage} />\n                                </a>\n                    }}\n                />\n                <br/><br/>\n                <Button variant=\"primary\" onClick={ () => history.back() }>\n                    <FormattedMessage {...messages.returnPreviousPage} />\n                </Button>\n\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CheckboxCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst CvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CheckboxCustomFilter\n                key={'cvss_filter'}\n                filterId={'cvss_filter'}\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className={'pf-u-mb-0'}\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default CvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'bottom'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                    ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n"],"sourceRoot":""}