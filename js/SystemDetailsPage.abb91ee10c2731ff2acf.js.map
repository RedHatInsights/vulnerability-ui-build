{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Store/Reducers/SystemDetailsPageStore.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"names":["SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","isStickyHeader","canSelectAll","aria-label","cells","heightAuto","props","colSpan","title","Object","prototype","hasOwnProperty","call","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","TableToolbar","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","messages","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","total_items","selectedCvesData","flatMap","PrimaryToolbar","pagination","itemCount","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","impactFilter","cvssBaseScoreFilter","businessRiskFilter","statusFilter","publishDateFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","defaultProps","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","clearNotifications","payload","errors","parseInt","EmptyVulnerabilityData","ErrorHandler","code","Provider","value","format","DownloadReport","iSelected","selectSystemCve","expandSystemCve","cvesList","Array","from","some","element","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","customRouter","RouterWrapper","Router","Wrapper","IntlProvider","locale","navigator","language","slice","basename","window","location","pathname","SystemDetails","this","isOptOut","optOutSystemHandler","loaded","buttonAction","React","connect","entityDetails","opt_out","initialState","InventoryDetail","optOutSystem","state","inventoryId","then","fetchSystemDetails","addNotification","description","match","systemDetails","DetailWrapper","breadcrumbs","PATHS","to","isActive","InventoryDetailHead","onLoad","mergeWithEntities","mergeWithDetail","INVENTORY_ACTION_TYPES","ReducerRegistry","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","LOAD_ENTITY_REJECTED","systemDetailsPageStore","hideBack","Main","AppInfo","optOutSystemAction","notification"],"mappings":"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","file":"js/SystemDetailsPage.abb91ee10c2731ff2acf.js","sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : !cves.data || cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : []),\n        {\n            label: isAllExpanded\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        searchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return EmptyVulnerabilityData;\n        }\n        else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && setUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, customRouter, ...props }) => {\n    const RouterWrapper = customRouter ? Router : Fragment;\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <RouterWrapper\n            {...customRouter && { basename: `${window.location.pathname}` } }\n        >\n            <ConnectedSystemCves { ...props } />\n        </RouterWrapper>\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves\n                        entity={{ id: entity.id, display_name: entity.display_name }}\n                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n                        showHeaderLabel\n                        setPageTitle\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nimport { AppInfo, DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any,\n        errors: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n    }\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { systemDetails = {}, errors } = this.props;\n        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n        return (\n            <React.Fragment>\n                <DetailWrapper>\n                    <Header\n                        title=\"\"\n                        breadcrumbs={[\n                            {\n                                title: PATHS.systemsPage.title,\n                                to: PATHS.systemsPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),\n                                isActive: true,\n                                loaded\n                            }\n                        ]}\n                    >\n                        {!errors && (\n                            <InventoryDetailHead\n                                onLoad={({ mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(),\n                                        ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n                                    });\n                                }}\n                                hideBack\n                                actions={\n                                    entity && [\n                                        isOptOut\n                                            ? {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                                onClick: () => this.optOutSystem(false)\n                                            }\n                                            : {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                                onClick: () => this.optOutSystem(true)\n                                            }\n                                    ]\n                                }\n                            />\n                        )}\n                    </Header>\n\n                    {(\n                        <Main>\n                            <React.Fragment>\n                                <AppInfo optOutSystemHandler={this.optOutSystem} />\n                            </React.Fragment>\n                        </Main>\n                    )}\n                </DetailWrapper>\n            </React.Fragment>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}