{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./static/images/chart-pie-solid.svg","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["CounterItem","counter","label","style","styles","propTypes","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","date","dateFormat","Date","type","props","children","systems","cves","rules","withColumn","SecondPage","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","legendHeader","numberOfCvesHeader","titleProps","title","chartType","subTitle","colorSchema","withHeader","rows","flex","map","value","cve","synopsis","labels","hasRule","security_rule","icon","width","description","length","Number","parseFloat","cvss3_score","toFixed","systems_affected","toString","ThirdPage","rulesDesc","rule","associatedCves","join","topRules","rulesHeader","rulesBySeverityMap","rulesChart","legend","name","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","na","count","CVSSMapping","Object","keys","reverse","EXEC_RULES_SEVERITY_MAP","values","percentage","mapFields","fields","percentageInfo","arr","field","fieldData","undefined","push","recentCvesMapping","x","y","coverPageData","cvesData","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","securityRulesPresent","setSecurityRulesPresent","addNotification","useNotification","dispatch","useDispatch","dataFetch","msg","getExecutiveReport","report","buildExecReport","some","toISOString","split","onClick","groupName","showButton","asyncFunction","buttonProps","isInline","fileName","allPagesHaveTitle","onSuccess","clearNotifications","footer","ReportConfigModal","isModalOpen","isOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","toggleSwitch","setToggleSwitch","activeFilters","useEffect","CVE_REPORT_FILTERS","Modal","ouiaId","onClose","actions","Button","isDisabled","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","id","filterId","component","selectProps","options","items","filterName","ToggleGroup","aria-label","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","includes","newValue","parameter","filter","item","handleCheckboxChange","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","insights","chrome","hideGlobalFilter","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"mappings":"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","file":"js/Reports.321b3593b31f975b9e63.js","sourcesContent":["import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;\n    const cveLabels = (hasRule) => (\n        hasRule && <InsightsLabel icon={false} label={intl.formatMessage(messages.securityRuleLabel)} width={63} />\n    );\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    const [legendHeader, numberOfCvesHeader] = CVSSHeader;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}\n            >\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                        colorSchema=\"orange\"\n                        legendHeader={legendHeader}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[[numberOfCvesHeader], ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}\n            >\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3)}\n                withColumn={false}\n            >\n                {\n                    topCves.map(cve => (\n                        <Panel\n                            key={cve.synopsis}\n                            title={cve.synopsis}\n                            labels={cveLabels(cve.security_rule)}\n                            description={cveDesc(cve.description)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {cve.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}> {truncate(rule, { length: 300 })}</Text>\n            <Text >\n                {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n            </Text>\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap, rulesChart } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRulesSection)}\n            >\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"bar\"\n                        subTitle=\"rules\"\n                        title=\"Rules\"\n                        data={rulesChart}\n                        colorSchema=\"orange\"\n                        legend={false}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}\n            >\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity - 1 }/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array,\n        rulesChart: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    // if there's no CVE with N/A CVSS do not display N/A in graph/table\n    if (cvesBySeverity?.na?.count === 0) {\n        delete cvesBySeverity.na;\n        delete CVSSMapping.na;\n    }\n\n    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const CVSSData = Object.values(cvesBySeverity).map(({ count, percentage }) =>\n        [intl.formatMessage(messages.executiveReportOfTotal,\n            {\n                count,\n                percentage\n            }\n        )]\n    );\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n\n            if (percentageInfo && fieldData.percentage) {\n                value = fieldData.percentage;\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });\n\n    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);\n\n    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));\n\n    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));\n\n    const coverPageData = { totalSystems, totalCves, totalRules };\n\n    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };\n\n    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@react-pdf/renderer';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nimport styles from './Common/styles';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const addNotification = useNotification();\n\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.downloadExecutiveNotification) });\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.security_rule === true));\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            groupName=\"Red Hat Insights\"\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n            footer={\n                securityRulesPresent && (\n                    <Text style={styles.footer}>\n                        {intl.formatMessage(messages.customReportFooter)}\n                    </Text>\n                )\n            }\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n}) => {\n    const [toggleSwitch, setToggleSwitch] = useState('all');\n\n    const activeFilters = ['rule_presence', 'impact', 'cvss_filter', 'business_risk_id', 'status_id', 'publish_date'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (toggleSwitch === 'all') {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [toggleSwitch, setColumnsToInclude]);\n\n    return (\n        <Modal\n            width='50rem'\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        filterData.cvss_filter.from < 0 ||\n                        filterData.cvss_filter.to > 10 ||\n                        filterData.cvss_filter.from > filterData.cvss_filter.to ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-filter-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm' },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={toggleSwitch === 'all'}\n                            onChange={() => setToggleSwitch('all')} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={toggleSwitch === 'custom'}\n                            onChange={() => setToggleSwitch('custom')}/>\n                    </ToggleGroup>\n\n                    {toggleSwitch === 'custom' &&\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","export default __webpack_public_path__ + \"fonts/chart-pie-solid.svg\";","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={ style } src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React,  { useState, useEffect } from 'react';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    useEffect(() => {\n        insights?.chrome?.hideGlobalFilter?.();\n    });\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}