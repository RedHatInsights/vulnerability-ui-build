{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/PopUp/popup.scss","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/PopUp/PopUp.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/CVEs/CVEs.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/LandingPage/LandingPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/PopUp/popup.scss?7256"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","id","PopUp","body","title","page","useState","hidden","setHidden","popupsStore","useSelector","AppStore","popup","pop","Fragment","Card","className","CardHeader","TextContent","Text","component","TextVariants","color","CardActions","onClick","CardBody","propTypes","PropTypes","defaultProps","CVEsTableWithContext","context","header","entity","cves","methods","selectedCves","openedCves","isEmpty","data","length","rows","map","cve","includes","selected","index","current","undefined","isOpen","isLoading","SkeletonTable","colSize","rowSize","Table","isStickyHeader","canSelectAll","aria-label","cells","heightAuto","props","colSpan","filter","item","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","TableHeader","TableBody","TableToolbar","PaginationWrapper","CVETableContext","Consumer","currentFilter","currentValue","affecting","filterByAffecting","values","defaultValues","forEach","join","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","flatMap","toLowerCase","toString","CVEsTableToolbarWithContext","exportPDF","setExportPDF","params","expandCveDescription","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","showBusinessRiskModal","business_risk_id","isDisabled","showStatusModal","status_id","total_items","PrimaryToolbar","pagination","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","impactFilter","cvssBaseScoreFilter","businessRiskFilter","statusFilter","publishDateFilter","affectingFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","extraItems","kebabItemDownloadPDF","DownloadCVEsReport","showButton","onSuccess","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","cveList","CVEsStore","parameters","useMemo","createCveListByAccount","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","errors","clearNotifications","GenericError","Provider","format","DownloadReport","cveNames","selectCve","cvesList","BusinessRiskModal","updateRef","expandCve","Stack","StackItem","VULNERABILITIES_HEADER","unsupported","togglePopup","Header","showBreadcrumb","Main","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/LandingPage.dcf70ffc319b4bce8c19.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".vulnerability .popup{position:absolute;z-index:10000;bottom:40px;right:0px;width:550px}.popup .actions{cursor:pointer}.popup .icon{margin-right:12px}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport {\n    TextContent,\n    Text,\n    TextVariants,\n    Card,\n    CardBody,\n    CardActions,\n    CardHeader\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, TimesIcon } from '@patternfly/react-icons';\nimport './popup.scss';\n\nconst PopUp = ({ body, title, page }) => {\n    const [hidden, setHidden] = useState(false);\n\n    const popupsStore = useSelector(\n        ({ AppStore }) =>  AppStore.popup\n    );\n\n    const pop =  popupsStore?.[page];\n\n    return  <Fragment>\n        {\n            !hidden && pop &&\n            <Card className=\"popup\">\n                <CardHeader>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            <ExclamationTriangleIcon className=\"icon\" color={'var(--pf-global--warning-color--100)'} />\n                            {title}\n                        </Text>\n                    </TextContent>\n                    <CardActions className=\"actions\">\n                        <TimesIcon onClick={() => setHidden(true)}/>\n                    </CardActions>\n                </CardHeader>\n                <CardBody>{body}</CardBody>\n            </Card>\n        }\n    </Fragment>;\n};\n\nPopUp.propTypes = {\n    body: PropTypes.string,\n    title: PropTypes.string,\n    page: PropTypes.string\n};\n\nPopUp.defaultProps = {\n    title: 'Tag and workload filtration temporarily unavailable',\n    body: 'Tag and workload filtration is temporarily unavailable on this page. We\\'re working to resolve this soon.'\n};\n\nexport default PopUp;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={7} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ affecting: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.affectsSystems),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, expandCveDescription } = context;\n\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    type='cves'\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useCreateUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n        };\n    }, []);\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    params: parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={VULNERABILITIES_HEADER} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError();\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { togglePopup } from '../../../Store/Actions/Actions';\nimport PopUp from '../../PresentationalComponents/PopUp/PopUp';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    const dispatch = useDispatch();\n\n    const unsupported = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.unsupported\n    );\n\n    useEffect(() => {\n        if (unsupported) {\n            dispatch(togglePopup('landing', true));\n        }\n    }, [unsupported, dispatch]);\n\n    return (\n        <Fragment>\n            <Header showBreadcrumb={false} />\n            <Main>\n                <CVEs/>\n                <PopUp page=\"landing\"/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../../node_modules/sass-loader/dist/cjs.js!./popup.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/@redhat-cloud-services/frontend-components-config/src/css-prefix-loader.js??ruleSet[1].rules[3].use[2]!../../../../node_modules/sass-loader/dist/cjs.js!./popup.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}