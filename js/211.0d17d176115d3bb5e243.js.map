{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"names":["tablePage","data","page","intl","header","type","isReportDynamic","POSSIBLE_HEADERS","name","value","formatMessage","messages","hit","columnBuilder","style","key","hitColumns","headerContent","push","forEach","item","includes","concat","map","hasRules","cve","hasRule","rules","length","cveRows","attributes","cveCellStyle","styles","synopsis","src","CVES_PATH","public_date","processDate","systemRows","system","display_name","opt_out","cve_count","formatDate","updated","Fragment","withHeader","rows","propTypes","PropTypes","firstPagePDF","meta","filters","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","val","chips","timespan_label","join","filterStringSegments","msg","i","hasOwnProperty","isLast","formatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","total_items","toString","system_count","userNotes","identity","first_name","last_name","defaultProps","undefined","DownloadCVEsReport","params","buttonProps","label","props","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","dispatch","useDispatch","useEffect","clearNotifications","otherPagesPDF","resultArray","index","chunkIndex","Math","floor","PDF_REPORT_PER_PAGE","cvesFetch","addNotification","dismissable","variant","title","getCveListByAccount","DownloadReport","sort","affecting","insights","chrome","auth","getUser","status","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","some","firstPage","splice","otherPages","cvePage","systemsFetch","getSystems","systemPage","asyncFunction","component","reportName","reportTitle","fileName","allPagesHaveTitle","size","orientation","footer"],"mappings":"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","file":"js/211.0d17d176115d3bb5e243.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            let cveCellStyle = (\n                hasRules(cve)\n                    ? [styles.cveCellAlign, styles.bodyCell, styles.cveCell]\n                    : [styles.bodyCell, styles.cveCell]\n            );\n\n            const synopsisCell = (\n                <View key={cve.synopsis}>\n                    { hasRules(cve) && <CSAwIcon style={{ ...styles.bodyCell, ...styles.cveCell }}/> }\n                    <Text style={cveCellStyle}>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersSecurityRule },\n        // #FIXME cve report - security_rule will be deprecated\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                formatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                             DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || formatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter =>\n                    filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg,\n                        {\n                            values: filtersBuilder[filter.name].values.toLowerCase(),\n                            prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    )\n                )\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {\n                filtersBuilder.filter\n                    ? formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values })\n                    : ''\n            }\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE, STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    type,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const otherPagesPDF = data =>\n        data.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / PDF_REPORT_PER_PAGE.otherPages);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationCve)\n        }));\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true,false'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                status: STATUS_OPTIONS.find(item =>\n                    item.value === cve.attributes.status_id.toString()).label,\n                business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                    item.value === cve.attributes.business_risk_id.toString()).label,\n                impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(() => {\n            const hasRule = data.some(cve => cve.attributes.rules.length > 0);\n            return isReportDynamic ? hasRule && reportData && reportData.header?.includes('rule_presence') : hasRule;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((cvePage, index) =>\n            tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type, isReportDynamic }))];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationSystem)\n        }));\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((systemPage, index) =>\n            tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header }))];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text>*</Text>\n                            <CSAwIcon style={styles.footerIcon}/>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n"],"sourceRoot":""}