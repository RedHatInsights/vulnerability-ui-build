{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["apply","currentFilter","currentValue","excluded","filterByExcluded","values","defaultValues","forEach","item","filter","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","flatMap","index","toLowerCase","toString","SystemsTableToolbar","selectedHosts","parameters","systems","methods","useState","exportPDF","setExportPDF","handleSelect","doOptOut","middlewareListener","on","callback","payload","newSelected","data","selected","id","onSelect","kebabProps","useMemo","selectedHostsData","s","includes","selectedExcluded","some","attributes","opt_out","selectedIncluded","kebabOptions","formatMessage","count","length","onClick","props","isDisabled","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","bulkSelect","meta","total_items","checked","Boolean","ouiaId","handleOnCheckboxChange","actionsConfig","actions","dropdownProps","filterConfig","searchFilter","excludedFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","params","DownloadReport","fetchSystems","DownloadCVEsReport","showButton","onSuccess","propTypes","dataShape","withRouter","injectIntl","SystemsPage","undefined","setSelectedHosts","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","inventory","React","dispatch","useDispatch","useSelector","SystemsPageStore","metadata","error","isLoading","map","cveCount","cve_count","rest","inventory_id","useEffect","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","clearNotifications","current","systemId","optOut","optOutSystemsAction","then","addNotification","variant","title","description","Header","showBreadcrumb","Main","Inventory","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sort","sortBy","createSortBy","actionResolver","rowData","systemTableRowActions","showTags","isFullView","ref","perPage","page_size","total","onRefresh","pageSize","per_page","limit","onRefreshData","isLoaded","hasCheckbox","isChecked","GenericError"],"mappings":"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","file":"js/Systems.70d1f2e851d6fad6e33b.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ excluded: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.systemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { apply, handleSelect, doOptOut } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const kebabProps = useMemo(() => {\n        const selectedHostsData = systems?.data.filter(s => selectedHosts.includes(s.id));\n        return {\n            selectedExcluded: selectedHostsData.some(s => s.attributes.opt_out === true),\n            selectedIncluded: selectedHostsData.some(s => s.attributes.opt_out === false)\n        };\n    }, [selectedHosts, systems]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, true),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, false),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadCVEsReport\n                type='systems'\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\n\nconst createRows = ({ data }) => {\n    const items = data?.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const error = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => createRows(systems), [systems]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    useEffect(() => {\n        dispatch(clearNotifications());\n    }, [error, dispatch]);\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current) {\n            apply(urlParameters);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            createUrlParams({ ...parameters });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null, optOut) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            metadata.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { !error && (\n                    <InventoryTable\n                        onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(SYSTEMS_HEADER)\n                                ),\n                                ...mergeWithDetail()\n                            });\n                        }}\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy(),\n                            actionResolver: (rowData) => systemTableRowActions(rowData,  doOptOut)\n                        }}\n                        showTags\n                        isFullView\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                            actions\n                        />)}\n                    </InventoryTable>\n                ) || processError() }\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n"],"sourceRoot":""}