{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/styles/sizes.js","webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Grid/Grid.js","webpack:///./node_modules/@patternfly/react-core/dist/js/layouts/Grid/GridItem.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/TextArea/TextArea.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardTitle.js","webpack:///./node_modules/@patternfly/react-core/dist/js/components/Card/CardFooter.js","webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/file-alt-icon.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/SmartComponents/Reports/CustomReportFilter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["Object","defineProperty","exports","value","DeviceSizes","BaseSizes","Grid","tslib_1","React","__importStar","grid_1","__importDefault","react_styles_1","sizes_1","_a","children","className","hasGutter","span","props","__rest","classes","default","grid","modifiers","entries","forEach","propKey","gridSpanModifier","key","propValue","push","createElement","assign","css","gutter","displayName","GridItem","rowSpan","offset","gridItem","classModifier","rowSpanKey","offsetKey","spanValue","rowSpanValue","offsetValue","TextArea","TextAreaBase","TextAreResizeOrientation","form_control_1","helpers_1","Component","super","this","handleChange","event","onChange","currentTarget","id","console","error","validated","isRequired","resizeOrientation","innerRef","orientation","capitalize","formControl","both","ValidatedOptions","success","warning","defaultValue","required","ref","defaultProps","createRef","forwardRef","CardTitle","card_1","component","cardTitle","CardFooter","cardFooter","__esModule","FileAltIconConfig","name","height","width","svgPath","yOffset","xOffset","FileAltIcon","createIcon","BuildExecReport","panelGroups","totalRows","data","intl","safeCharLength","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","system_count","mapFields","fields","percentageInfo","arr","field","label","fieldData","undefined","count","percentage","formatMessage","messages","executiveReportOfTotal","toString","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","map","severity","x","y","Number","CVSSData","topCvesPerPage","firstPage","secondPage","cve","rows","Math","ceil","description","length","panel","synopsis","title","executiveReportPanelTitle","parseFloat","cvss3_score","toFixed","systemsExposed","systems_affected","executiveReportHeader","executiveReportSubHeader","systems","style","styles","bold","executiveReportHeaderSystems","cves","executiveReportHeaderCVEs","executiveReportCvesBySeverity","withHeader","CVSSHeader","chartType","subTitle","executiveReportRecentlyPublishedCves","recentCvesHeader","executiveReportTop3","withColumn","insertIf","propTypes","PropTypes","exact","object","array","number","any","DownloadExecutive","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","dispatch","useDispatch","dataFetch","a","addNotification","dismissable","variant","downloadExecutiveNotification","getExecutiveReport","report","buildExecReport","Date","toISOString","split","date","onClick","executiveReportCardButton","showButton","loading","asyncFunction","buttonProps","isInline","type","vulnerabilitiesHeader","fileName","allPagesHaveTitle","onSuccess","clearNotifications","CustomReportFilter","min","max","filterName","filterData","setFilterData","isOpen","setOpen","handleCvssInputChange","inputName","cvss_filter","validateCvssInput","valueThis","valueMin","valueMax","filterCheckboxes","options","Select","aria-label","onToggle","placeholderText","CVE_REPORT_FILTERS","items","find","item","join","direction","onSelect","optionName","optionId","includes","index","indexOf","temp","slice","splice","handleOnCheckboxChange","selections","isCheckboxSelectionBadgeHidden","SelectOption","filterRadios","optionValue","handleOnRadioChange","Radio","isChecked","filterCvssContent","Split","SplitItem","fontSize","customReportCvssMinLabel","TextInput","v","customReportCvssMaxLabel","filterCvssWrapper","customContent","optionsAll","Text","color","STATUS_OPTIONS","BUSINESS_RISK_OPTIONS","PUBLIC_DATE_OPTIONS","IMPACT_OPTIONS","filterContent","string","func","ReportConfigModal","isModalOpen","handleModalClose","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","activeFilters","Modal","configModalTitle","ouiaId","onClose","actions","Button","isDisabled","PDF_REPORT_USER_NOTE_MAX_LENGTH","configModalExportReport","cancel","Form","FormGroup","customReportTitleLabel","fieldId","Checkbox","customOnlyCvesWithRulesLabel","security_rule","newValue","customReportDataToIncludeLabel","columnCount","parameter","filter","handleCheckboxChange","customReportFilterDataByLabel","customReportUserNotesLabel","helperTextInvalid","customReportUserNoteTooLong","minHeight","bool","ReportsPage","setModalOpen","downloadCVEReport","setDownloadCVEReport","customReportDefaultTitle","keys","DEFAULT_FILTER_DATA","Fragment","Header","reportsPageTitle","showBreadcrumb","Main","lg","md","sm","Card","pieChartIcon","executiveReportCardTitle","CardBody","executiveReportCardDescription","size","customReportCardTitle","customReportCardDescription","customReportCardButton","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"mappings":"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","file":"js/Reports.21a6055748a8b343b37a.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeviceSizes = exports.BaseSizes = void 0;\nvar BaseSizes;\n(function (BaseSizes) {\n    BaseSizes[\"xs\"] = \"xs\";\n    BaseSizes[\"sm\"] = \"sm\";\n    BaseSizes[\"md\"] = \"md\";\n    BaseSizes[\"lg\"] = \"lg\";\n    BaseSizes[\"xl\"] = \"xl\";\n    BaseSizes[\"2xl\"] = \"2xl\";\n    BaseSizes[\"3xl\"] = \"3xl\";\n    BaseSizes[\"4xl\"] = \"4xl\";\n})(BaseSizes = exports.BaseSizes || (exports.BaseSizes = {}));\nvar DeviceSizes;\n(function (DeviceSizes) {\n    DeviceSizes[\"sm\"] = \"Sm\";\n    DeviceSizes[\"md\"] = \"Md\";\n    DeviceSizes[\"lg\"] = \"Lg\";\n    DeviceSizes[\"xl\"] = \"Xl\";\n    DeviceSizes[\"xl2\"] = \"_2xl\";\n})(DeviceSizes = exports.DeviceSizes || (exports.DeviceSizes = {}));\n//# sourceMappingURL=sizes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst grid_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/layouts/Grid/grid\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst sizes_1 = require(\"../../styles/sizes\");\nexports.Grid = (_a) => {\n    var { children = null, className = '', hasGutter, span = null } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"hasGutter\", \"span\"]);\n    const classes = [grid_1.default.grid, span && grid_1.default.modifiers[`all_${span}Col`]];\n    Object.entries(sizes_1.DeviceSizes).forEach(([propKey, gridSpanModifier]) => {\n        const key = propKey;\n        const propValue = props[key];\n        if (propValue) {\n            classes.push(grid_1.default.modifiers[`all_${propValue}ColOn${gridSpanModifier}`]);\n        }\n        delete props[key];\n    });\n    return (React.createElement(\"div\", Object.assign({ className: react_styles_1.css(...classes, hasGutter && grid_1.default.modifiers.gutter, className) }, props), children));\n};\nexports.Grid.displayName = 'Grid';\n//# sourceMappingURL=Grid.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GridItem = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst grid_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/layouts/Grid/grid\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst sizes_1 = require(\"../../styles/sizes\");\nexports.GridItem = (_a) => {\n    var { children = null, className = '', span = null, rowSpan = null, offset = null } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"span\", \"rowSpan\", \"offset\"]);\n    const classes = [\n        grid_1.default.gridItem,\n        span && grid_1.default.modifiers[`${span}Col`],\n        rowSpan && grid_1.default.modifiers[`${rowSpan}Row`],\n        offset && grid_1.default.modifiers[`offset_${offset}Col`]\n    ];\n    Object.entries(sizes_1.DeviceSizes).forEach(([propKey, classModifier]) => {\n        const key = propKey;\n        const rowSpanKey = `${key}RowSpan`;\n        const offsetKey = `${key}Offset`;\n        const spanValue = props[key];\n        const rowSpanValue = props[rowSpanKey];\n        const offsetValue = props[offsetKey];\n        if (spanValue) {\n            classes.push(grid_1.default.modifiers[`${spanValue}ColOn${classModifier}`]);\n        }\n        if (rowSpanValue) {\n            classes.push(grid_1.default.modifiers[`${rowSpanValue}RowOn${classModifier}`]);\n        }\n        if (offsetValue) {\n            classes.push(grid_1.default.modifiers[`offset_${offsetValue}ColOn${classModifier}`]);\n        }\n        delete props[key];\n        delete props[rowSpanKey];\n        delete props[offsetKey];\n    });\n    return (React.createElement(\"div\", Object.assign({ className: react_styles_1.css(...classes, className) }, props), children));\n};\nexports.GridItem.displayName = 'GridItem';\n//# sourceMappingURL=GridItem.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextArea = exports.TextAreaBase = exports.TextAreResizeOrientation = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst form_control_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/FormControl/form-control\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst helpers_1 = require(\"../../helpers\");\nvar TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation = exports.TextAreResizeOrientation || (exports.TextAreResizeOrientation = {}));\nclass TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = (event) => {\n            if (this.props.onChange) {\n                this.props.onChange(event.currentTarget.value, event);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { className, value, onChange, validated, isRequired, resizeOrientation, innerRef } = _a, props = tslib_1.__rest(_a, [\"className\", \"value\", \"onChange\", \"validated\", \"isRequired\", \"resizeOrientation\", \"innerRef\"]);\n        const orientation = `resize${helpers_1.capitalize(resizeOrientation)}`;\n        return (React.createElement(\"textarea\", Object.assign({ className: react_styles_1.css(form_control_1.default.formControl, className, resizeOrientation !== TextAreResizeOrientation.both && form_control_1.default.modifiers[orientation], validated === helpers_1.ValidatedOptions.success && form_control_1.default.modifiers.success, validated === helpers_1.ValidatedOptions.warning && form_control_1.default.modifiers.warning), onChange: this.handleChange }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === helpers_1.ValidatedOptions.error, required: isRequired, ref: innerRef }, props)));\n    }\n}\nexports.TextAreaBase = TextAreaBase;\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexports.TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nexports.TextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardTitle = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nexports.CardTitle = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardTitle, className) }, props), children));\n};\nexports.CardTitle.displayName = 'CardTitle';\n//# sourceMappingURL=CardTitle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CardFooter = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst card_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Card/card\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nexports.CardFooter = (_a) => {\n    var { children = null, className = '', component = 'div' } = _a, props = tslib_1.__rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(card_1.default.cardFooter, className) }, props), children));\n};\nexports.CardFooter.displayName = 'CardFooter';\n//# sourceMappingURL=CardFooter.js.map","\"use strict\"\nexports.__esModule = true;\nexports.FileAltIconConfig = {\n  name: 'FileAltIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 236c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-64c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-72v8c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm96-114.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.FileAltIcon = require('../createIcon').createIcon(exports.FileAltIconConfig);\nexports[\"default\"] = exports.FileAltIcon;","\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\nimport { insertIf } from '../../../Helpers/MiscHelper';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                if (percentageInfo === 'number') { // only return number representing percentage\n                    value = fieldData.percentage;\n                }\n                else { // return formatted string including CVE count and percentage\n                    value = intl.formatMessage(messages.executiveReportOfTotal,\n                        { count: value, percentage: fieldData.percentage });\n                }\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'number'\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'string'\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= safeCharLength.rows && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    const topCvesPerPage = calculateTopCves();\n\n    const firstPage = (\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    topCvesPerPage.firstPage\n\n                }\n            </Section>\n        </Fragment>\n    );\n\n    return [\n        firstPage,\n        ...insertIf(topCvesPerPage.secondPage.length > 0, topCvesPerPage.secondPage)\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.downloadExecutiveNotification)\n        }));\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Split, SplitItem, Radio, Text, TextInput, Select, SelectOption } from '@patternfly/react-core';\nimport {\n    CVE_REPORT_FILTERS,\n    BUSINESS_RISK_OPTIONS,\n    STATUS_OPTIONS,\n    PUBLIC_DATE_OPTIONS,\n    IMPACT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nconst CustomReportFilter = ({ filterName, filterData, setFilterData }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnCheckboxChange = (filterName, optionName) => {\n        const optionId = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        if (!filterData[filterName].includes(optionId)) { // uncheck\n            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], optionId] });\n        }\n        else { // check\n            let index = filterData[filterName].indexOf(optionId);\n            let temp = filterData[filterName].slice();\n            temp.splice(index, 1);\n            setFilterData({ ...filterData, [filterName]: temp });\n        }\n    };\n\n    const handleOnRadioChange = (filterName, optionName) => {\n        const optionValue = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        setFilterData({ ...filterData, [filterName]: optionValue });\n    };\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({\n            ...filterData, cvss_filter: {\n                ...filterData.cvss_filter,\n                [inputName]: value\n            }\n        });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const valueThis = +filterData.cvss_filter[inputName];\n        const valueMin = +filterData.cvss_filter.min;\n        const valueMax = +filterData.cvss_filter.max;\n\n        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const filterCheckboxes = (options, filterName) => (\n        <Select\n            variant=\"checkbox\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}: ${filterData[filterName].length === 0\n                || filterData[filterName].length === CVE_REPORT_FILTERS[filterName].items.length ? `All` :\n                filterData[filterName].map(id =>\n                    CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label).join(', ')}`}\n            direction=\"up\"\n            key={filterName}\n            width='auto'\n            className=\"pf-u-mr-sm pf-u-mb-sm custom-report-filter-select\"\n            onSelect={(event, optionName) => { handleOnCheckboxChange(filterName, optionName); }}\n            selections={filterData[filterName].map(\n                id => CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label)}\n            isCheckboxSelectionBadgeHidden\n        >\n            {options.map(item =>\n                <SelectOption\n                    key={filterName + item.label}\n                    value={item.label}\n                />\n            )}\n        </Select>\n    );\n\n    const filterRadios = (options, filterName) => (\n        <Select\n            variant=\"single\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}:\n                ${CVE_REPORT_FILTERS[filterName].items.find(item => item.value === filterData[filterName]).label}`}\n            direction=\"up\"\n            key={filterName}\n            onSelect={(event, optionName) => { handleOnRadioChange(filterName, optionName); }}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            width=\"auto\"\n        >\n            {options.map(item =>\n                <SelectOption\n                    width=\"100%\"\n                    key={filterName + item.label}\n                    value={item.label}\n                >\n                    <Radio\n                        aria-label=\"Select Input\"\n                        label={item.label}\n                        value={item.label}\n                        isChecked={filterData[filterName] === item.value}\n                    />\n                </SelectOption>\n            )}\n        </Select>\n    );\n\n    const filterCvssContent = (<Split className='pf-u-m-md'>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'min')}\n                validated={validateCvssInput('min')}\n                id=\"cvss-min\"\n                value={filterData.cvss_filter.min}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n        <SplitItem>\n            <br /><span className=\"pf-u-m-sm\">-</span>\n        </SplitItem>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'max')}\n                validated={validateCvssInput('max')}\n                id=\"cvss-max\"\n                value={filterData.cvss_filter.max}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n    </Split>);\n\n    const filterCvssGetLabel = () => {\n        const min = +filterData.cvss_filter.min;\n        const max = +filterData.cvss_filter.max;\n\n        if (min === 0 && max === 10) {\n            return `${CVE_REPORT_FILTERS.cvss_filter.title}: ${intl.formatMessage(messages.optionsAll)}`;\n        }\n        else {\n            return (\n                <Text>\n                    {`${CVE_REPORT_FILTERS.cvss_filter.title}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}\n                    {(min < 0 || max > 10 || min > max) &&\n                        <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className=\"pf-u-ml-xs\" />}\n                </Text>\n            );\n        }\n    };\n\n    const filterCvssWrapper = (\n        <Select\n            variant=\"panel\"\n            aria-label=\"Select Input\"\n            customContent={filterCvssContent}\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={filterCvssGetLabel()}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            direction=\"up\"\n            width=\"auto\"\n        />\n    );\n\n    const filterContent = name => {\n        switch (name) {\n            case 'status_id':\n                return filterCheckboxes(STATUS_OPTIONS, 'status_id');\n            case 'business_risk_id':\n                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');\n            case 'publish_date':\n                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');\n            case 'impact':\n                return filterCheckboxes(IMPACT_OPTIONS, 'impact');\n            case 'cvss_filter':\n                return filterCvssWrapper;\n            default:\n                return null;\n        }\n    };\n\n    return (filterContent(filterName));\n};\n\nCustomReportFilter.propTypes = {\n    filterName: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func\n};\n\nexport default CustomReportFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea\n} from '@patternfly/react-core';\nimport CustomReportFilter from '../Reports/CustomReportFilter';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n\n}) => {\n\n    const activeFilters = ['publish_date', 'impact',  'cvss_filter', 'status_id', 'business_risk_id'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            id=\"custom-report-modal\"\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        +filterData.cvss_filter.min < 0 ||\n                        +filterData.cvss_filter.max > 10 ||\n                        +filterData.cvss_filter.min > +filterData.cvss_filter.max ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                    />\n                    <Checkbox\n                        id=\"hasRule\"\n                        key=\"hasRule\"\n                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}\n                        isChecked={filterData.security_rule === 'true'}\n                        onChange={(newValue) =>\n                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : undefined })\n                        }\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div style={{ columnCount: 2 }}>\n                        <Checkbox\n                            id=\"cve_id\"\n                            label=\"CVE ID\"\n                            isChecked\n                            isDisabled\n                            className=\"pf-u-mb-md\"\n                        />\n                        {\n                            Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                key !== 'security_rule' &&\n                                <Checkbox\n                                    id={key}\n                                    key={key}\n                                    label={value.title}\n                                    isChecked={columnsToInclude.includes(key)}\n                                    onChange={(newValue) =>\n                                        handleCheckboxChange(key, newValue)\n                                    }\n                                    className='pf-u-mb-md'\n                                />\n                            )\n                        }\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div className=\"custom-report-filter-wrapper\"> {/* Width of modal minus padding from both sides */}\n                        {activeFilters &&\n                            activeFilters.map((item) => {\n                                return (\n                                    <CustomReportFilter\n                                        key={item}\n                                        filterName={item}\n                                        filterData={filterData}\n                                        setFilterData={setFilterData}\n                                    />\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                type='cves'\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}