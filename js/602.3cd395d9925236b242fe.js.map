{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"names":["DownloadCVEsReport","filters","params","reportData","buttonProps","isReportDynamic","label","props","intl","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","addNotification","useNotification","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","cvesFetch","msg","messages","getCveListByAccount","DownloadReport","sort","affecting","meta","userNotes","insights","chrome","auth","getUser","user","map","cve","attributes","status","STATUS_OPTIONS","item","value","status_id","toString","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","title","formatMessage","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","hasRule","some","rules","length","header","includes","firstPage","firstPagePDF","splice","type","otherPages","cvePage","index","tablePage","page","asyncFunction","component","reportName","reportTitle","fileName","allPagesHaveTitle","size","orientation","footer","style","styles","defaultProps","propTypes"],"mappings":"smCAgBA,IAAMA,EAAqB,SAAC,GAQtB,IAPFC,EAOE,EAPFA,QACAC,EAME,EANFA,OAME,IALFC,kBAKE,MALW,GAKX,EAJFC,EAIE,EAJFA,YAIE,IAHFC,uBAGE,SAFFC,EAEE,EAFFA,MACGC,EACD,iFACIC,GAAOC,SADX,GAE4BC,eAAS,GAFrC,WAEKC,EAFL,KAEcC,EAFd,QAGsDF,eAAS,GAH/D,WAGKG,EAHL,KAG2BC,EAH3B,KAIIC,GAAkBC,SAElBC,EAAgB,SAAAC,GAAI,OAAIC,QAAWD,EAAME,iBAAgC,IAEzEC,EAAS,+BAAG,qGACdT,GAAW,GAEXG,EAAgB,CAAEO,IAAKC,kCAHT,UAKaC,QAAoB,EAAD,OACvCtB,GACAuB,mBAFuC,IAG1CC,KAAMxB,EAAOwB,MAAQ,cACrBC,UAAW,gBATD,mBAKRT,EALQ,EAKRA,KAAMU,EALE,EAKFA,MAQRzB,IAAcA,EAAW0B,UAbf,kCAcGC,SAASC,OAAOC,KAAKC,UAdxB,QAcVC,EAdU,sBAiBdhB,EAAOA,EAAKiB,KAAI,SAAAC,GAAG,oBACZA,GADY,IAEfC,WAAY,EAAF,KACHD,EAAIC,YADD,IAENC,OAAQC,WAAoB,SAAAC,GAAI,OAC5BA,EAAKC,QAAUL,EAAIC,WAAWK,UAAUC,cAAYrC,MACxDsC,cAAeC,WAA2B,SAAAL,GAAI,OAC1CA,EAAKC,QAAUL,EAAIC,WAAWS,iBAAiBH,cAAYrC,MAC/DyC,QAAQ,UAAAC,KAAWZ,EAAIC,WAAWU,eAA1B,eAAmCE,QAASzC,EAAK0C,cAAc3B,uBACvE4B,WAAYC,WAAWhB,EAAIC,WAAWgB,aAAejB,EAAIC,WAAWiB,aAAaC,QAAQ,UAIjGzC,GAAwB,WAAM,MACpB0C,EAAUtC,EAAKuC,MAAK,SAAArB,GAAG,OAAIA,EAAIC,WAAWqB,MAAMC,OAAS,KAC/D,OAAOtD,EAAkBmD,GAAWrD,IAAX,UAAyBA,EAAWyD,cAApC,aAAyB,EAAmBC,SAAS,kBAAmBL,KAG/FM,GAAYC,OAAa,CAC3B7C,KAAMA,EAAK8C,OAAO,EACd7D,EAAW0B,UAAYT,uBAAwCA,2BAEnEQ,OACA3B,UACAO,OACAH,kBACAF,aACA+B,OACA+B,KAAM,SAGJC,EAAajD,EAAcC,GAEjCN,GAAW,GAlDG,mBAqDVkD,GArDU,WAsDPI,EAAW/B,KAAI,SAACgC,EAASC,GAAV,OACdC,OAAU,CACNnD,KAAMiD,EACNG,KAAMF,EACN5D,OACAoD,OAAQzD,GAAcA,EAAWyD,OACjCK,KAAM,OACN5D,0BA7DE,4CAAH,qDAmEf,OACI,6BACI,kBAAC,KAAD,OACQE,EADR,CAEID,MAAOK,EAAUH,EAAK0C,cAAc3B,aAAoBf,EAAK0C,cAAc5C,GAC3EiE,cAAelD,EACfjB,YAAW,GAAIoE,UAAW,UAAapE,GACvCqE,WAAYpE,EAAkBF,EAAWuE,YAAclE,EAAK0C,cAAc3B,sBAC1E0C,KAAM,GACNU,SAAQ,UAAKlD,aAAwBpB,EAAkB,UAAY,IAA3D,QACRuE,mBAAmB,EACnBC,KAAM,KACNC,YAAa,YACbC,OACIlE,GACI,kBAAC,KAAD,CAAMmE,MAAOC,YACRzE,EAAK0C,cAAc3B,8BAShDvB,EAAmBkF,aAAe,CAC9B5E,MAAOiB,sBAGXvB,EAAmBmF,UAAY,CAC3BlF,QAASkF,cAAoB,CACzBA,UACAA,aAEJjF,OAAQiF,WACRhF,WAAYgF,WACZ/E,YAAa+E,WACb7E,MAAO6E,cAAoB,CACvBA,UACAA,aAEJ9E,gBAAiB8E,UAGrB","file":"js/602.3cd395d9925236b242fe.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE, STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './Common/styles';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.otherPages, true);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: messages.customReportNotificationCve });\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true,false'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                status: STATUS_OPTIONS.find(item =>\n                    item.value === cve.attributes.status_id.toString()).label,\n                business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                    item.value === cve.attributes.business_risk_id.toString()).label,\n                impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(() => {\n            const hasRule = data.some(cve => cve.attributes.rules.length > 0);\n            return isReportDynamic ? hasRule && reportData && reportData.header?.includes('rule_presence') : hasRule;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0,\n                reportData.userNotes ? PDF_REPORT_PER_PAGE.firstPageWithNote : PDF_REPORT_PER_PAGE.firstPageWithoutNote\n            ),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={cvesFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : intl.formatMessage(messages.cvePDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <Text style={styles.footer}>\n                            {intl.formatMessage(messages.customReportFooter)}\n                        </Text>\n                    )\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"sourceRoot":""}