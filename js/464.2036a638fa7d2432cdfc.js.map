{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Helpers/Hooks.js"],"names":["firstPagePDF","data","meta","filters","intl","isReportDynamic","reportData","user","type","filtersBuilder","reduce","obj","item","key","filter","category","values","PUBLIC_DATE_OPTIONS","val","value","chips","timespan_label","map","name","join","filterStringSegments","msg","messages","i","length","hasOwnProperty","isLast","Fragment","formatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","formatMessage","cve_count","total_items","toString","system_count","userNotes","style","styles","identity","first_name","last_name","tablePage","header","defaultProps","undefined","propTypes","PropTypes","page","POSSIBLE_HEADERS","hit","columnBuilder","hitColumns","headerContent","push","forEach","includes","concat","cveRows","cve","attributes","src","CVES_PATH","synopsis","hasRule","rules","hasRules","icon","width","label","public_date","processDate","systemRows","system","display_name","opt_out","formatDate","updated","withHeader","rows","useNotification","config","dispatch","useDispatch","useIntl","globalConfig","variant","dismissable","useEffect","clearNotifications","addNotificationFEC","title"],"mappings":"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","file":"js/464.2036a638fa7d2432cdfc.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersSecurityRule },\n        // #FIXME cve report - security_rule will be deprecated\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                formatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                             DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || formatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter =>\n                    filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg,\n                        {\n                            values: filtersBuilder[filter.name].values.toLowerCase(),\n                            prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    )\n                )\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {\n                filtersBuilder.filter\n                    ? formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values })\n                    : ''\n            }\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <Fragment>\n                    <View style={[styles.bodyCell, styles.cveCell]}>\n                        <View>\n                            <Text>\n                                <Link\n                                    style={styles.link}\n                                    src={`${CVES_PATH}/${cve.synopsis}`}\n                                >\n                                    {cve.synopsis}\n                                </Link>\n                            </Text>\n                        </View>\n                        <View style={styles.securityRuleLabel}>\n                            { hasRules(cve) &&\n                                <InsightsLabel\n                                    icon={false}\n                                    width={63}\n                                    label={intl.formatMessage(messages.securityRuleLabel)}\n                                />\n                            }\n                        </View>\n                    </View>\n                </Fragment>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport {\n    addNotification as addNotificationFEC,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const useNotification = (config) => {\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const globalConfig = {\n        variant: 'info',\n        dismissable: true,\n        ...config\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const addNotification = ({ msg, ...config }) =>\n        dispatch(\n            addNotificationFEC({\n                title: intl.formatMessage(msg),\n                ...globalConfig,\n                ...config\n            })\n        );\n\n    return addNotification;\n};\n\n"],"sourceRoot":""}