{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"names":["tablePage","data","page","intl","header","type","isReportDynamic","POSSIBLE_HEADERS","name","value","formatMessage","messages","hit","columnBuilder","style","key","hitColumns","headerContent","push","forEach","item","includes","concat","map","cveRows","cve","attributes","Fragment","styles","src","CVES_PATH","synopsis","hasRule","rules","length","hasRules","icon","width","label","public_date","processDate","systemRows","system","display_name","opt_out","cve_count","formatDate","updated","withHeader","rows","propTypes","PropTypes","firstPagePDF","meta","filters","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","val","chips","timespan_label","join","filterStringSegments","msg","i","hasOwnProperty","isLast","formatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","total_items","toString","system_count","userNotes","identity","first_name","last_name","defaultProps","undefined","DownloadCVEsReport","params","buttonProps","props","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","dispatch","useDispatch","useEffect","clearNotifications","otherPagesPDF","chunkArrayWithRules","PDF_REPORT_PER_PAGE","cvesFetch","addNotification","dismissable","variant","title","getCveListByAccount","DownloadReport","sort","affecting","insights","chrome","auth","getUser","status","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","some","firstPage","splice","otherPages","cvePage","index","systemsFetch","getSystems","systemPage","asyncFunction","component","reportName","reportTitle","fileName","allPagesHaveTitle","size","orientation","footer"],"mappings":"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","file":"js/139.7790773beb507d60e40b.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <Fragment>\n                    <View style={[styles.bodyCell, styles.cveCell]}>\n                        <View>\n                            <Text>\n                                <Link\n                                    style={styles.link}\n                                    src={`${CVES_PATH}/${cve.synopsis}`}\n                                >\n                                    {cve.synopsis}\n                                </Link>\n                            </Text>\n                        </View>\n                        <View style={styles.securityRuleLabel}>\n                            { hasRules(cve) &&\n                                <InsightsLabel\n                                    icon={false}\n                                    width=\"60\"\n                                    label={intl.formatMessage(messages.securityRuleLabel)}\n                                />\n                            }\n                        </View>\n                    </View>\n                </Fragment>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersSecurityRule },\n        // #FIXME cve report - security_rule will be deprecated\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                formatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                             DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || formatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter =>\n                    filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg,\n                        {\n                            values: filtersBuilder[filter.name].values.toLowerCase(),\n                            prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    )\n                )\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {\n                filtersBuilder.filter\n                    ? formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values })\n                    : ''\n            }\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch } from 'react-redux';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArrayWithRules } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE, STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    type,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const otherPagesPDF = data => chunkArrayWithRules(data, PDF_REPORT_PER_PAGE.otherPages);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationCve)\n        }));\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true,false'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                status: STATUS_OPTIONS.find(item =>\n                    item.value === cve.attributes.status_id.toString()).label,\n                business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                    item.value === cve.attributes.business_risk_id.toString()).label,\n                impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(() => {\n            const hasRule = data.some(cve => cve.attributes.rules.length > 0);\n            return isReportDynamic ? hasRule && reportData && reportData.header?.includes('rule_presence') : hasRule;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type, isReportDynamic })\n            )\n        ];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationSystem)\n        }));\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n"],"sourceRoot":""}