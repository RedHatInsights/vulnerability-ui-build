{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./static/images/chart-pie-solid.svg","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./static/images/csawIcon.svg","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["CounterItem","counter","label","style","styles","propTypes","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","date","dateFormat","Date","type","props","children","systems","cves","rules","withColumn","SecondPage","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","title","chartType","subTitle","withHeader","rows","flex","map","value","cve","synopsis","description","rule","length","Number","parseFloat","cvss3_score","toFixed","systems_affected","toString","ThirdPage","rulesDesc","associatedCves","join","topRules","rulesHeader","rulesBySeverityMap","name","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","Object","keys","EXEC_RULES_SEVERITY_MAP","values","mapFields","fields","percentageInfo","arr","field","fieldData","undefined","count","percentage","push","coverPageData","cvesData","recentCvesMapping","CVSSMapping","x","y","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","dispatch","useDispatch","dataFetch","addNotification","dismissable","getExecutiveReport","report","buildExecReport","toISOString","split","onClick","showButton","asyncFunction","buttonProps","isInline","fileName","allPagesHaveTitle","onSuccess","clearNotifications","ReportConfigModal","isModalOpen","isOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","toggleSwitch","setToggleSwitch","activeFilters","useEffect","CVE_REPORT_FILTERS","Modal","id","ouiaId","onClose","actions","Button","isDisabled","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","filterId","component","selectProps","options","items","filterName","ToggleGroup","aria-label","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","includes","newValue","parameter","filter","item","handleCheckboxChange","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"mappings":"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","file":"js/Reports.f17cfbe3691bc376b593.js","sourcesContent":["import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Section, Column, Chart, Table, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (rule) => <Text style={styles.mb8}> {truncate(rule, { length: 300 })}</Text>;\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section title={intl.formatMessage(messages.executiveReportCvesByCVSS)}>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    topCves.map(cve => (\n                        <Panel key={cve.synopsis} title={cve.synopsis} description={cveDesc(cve.description)}>\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {cve.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}> {truncate(rule, { length: 300 })}</Text>\n            <Text >\n                {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n            </Text>\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section title={intl.formatMessage(messages.executiveReportRulesSection)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}>\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity - 1 }/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    let rulesBySeverityMap = Object.keys(rulesBySeverity).map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                if (percentageInfo === 'number') { // only return number representing percentage\n                    value = fieldData.percentage;\n                }\n                else { // return formatted string including CVE count and percentage\n                    value = intl.formatMessage(messages.executiveReportOfTotal,\n                        { count: value, percentage: fieldData.percentage });\n                }\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'number'\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'string'\n    );\n\n    const coverPageData = {\n        totalSystems,\n        totalCves,\n        totalRules\n    };\n\n    const cvesData = {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    };\n\n    const rulesData = {\n        topRules,\n        rulesHeader,\n        rulesBySeverityMap\n    };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.downloadExecutiveNotification)\n        }));\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n}) => {\n    const [toggleSwitch, setToggleSwitch] = useState('all');\n\n    const activeFilters = ['rule_presence', 'impact', 'cvss_filter', 'business_risk_id', 'status_id', 'publish_date'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (toggleSwitch === 'all') {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [toggleSwitch, setColumnsToInclude]);\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            id=\"custom-report-modal\"\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        filterData.cvss_filter.from < 0 ||\n                        filterData.cvss_filter.to > 10 ||\n                        filterData.cvss_filter.from > filterData.cvss_filter.to ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-filter-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm' },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={toggleSwitch === 'all'}\n                            onChange={() => setToggleSwitch('all')} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={toggleSwitch === 'custom'}\n                            onChange={() => setToggleSwitch('custom')}/>\n                    </ToggleGroup>\n\n                    {toggleSwitch === 'custom' &&\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","export default __webpack_public_path__ + \"fonts/chart-pie-solid.svg\";","export default __webpack_public_path__ + \"fonts/csawIcon.svg\";","import React from 'react';\nimport csawIcon from '../../../../static/images/csawIcon.svg';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const CSAwIcon = ({ style }) => (\n    <img className=\"csaw-icon\" style={ style } src={csawIcon} alt=\"Customer security awareness icon\" />\n);\n\nCSAwIcon.propTypes = {\n    style: PropTypes.object\n};\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={ style } src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React,  { useState } from 'react';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                type='cves'\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}