{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/CveStatusModal.js"],"names":["BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","length","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","value","currentTarget","successNotification","variant","title","formatMessage","messages","count","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","ouiaId","hasGutter","fieldId","BUSINESS_RISK_OPTIONS","className","isChecked","onChange","key","name","aria-label","type","resizeOrientation","propTypes","injectIntl","CveStatusModal","useStatusSelect","every","status_id","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","filter","exposed_systems_count","setCveStatus","status_text","setSystemCveStatus","cveId","b","chunks","fontSize","color","content","style","verticalAlign","checked"],"mappings":"saASaA,EAAoB,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAAW,GAC1CC,cAASH,GAApBI,EADqD,eAEhBD,cAAS,KAFO,WAErDE,EAFqD,KAErCC,EAFqC,QAGlCH,gBAHkC,WAGrDI,EAHqD,KAG9CC,EAH8C,KAKtDC,GAAkBC,kBAAY,WAChCF,EAAUJ,GAA8B,IAAnBA,EAAQO,QAAgBP,EAAQ,GAAGQ,eAAkB,MAC3E,CAACR,KAEJS,gBAAU,WAEFP,EAAmBF,GAA8B,IAAnBA,EAAQO,QAAgBP,EAAQ,GAAGU,iBAAiBC,YAAe,KAIrGN,MACD,CAACT,EAAMS,EAAiBL,KAE3BS,eAAUJ,EAAiB,CAACT,IAE5B,IAAMgB,EAAsB,SAACC,EAAGC,GAAU,IAC9BC,EAAUD,EAAME,cAAhBD,MACRb,EAAkBa,IAehBE,EAAsB,CACxBC,QAAS,UACTC,MAAOrB,EAAKsB,cAAcC,iCAAuC,CAAEC,MAAOtB,EAAQO,QAAU,KAGhG,OACI,kBAAC,KAAD,CACIgB,MAAOvB,EACPwB,OAhBW,WACf,OAAOC,QAAgB,CACnBf,iBAAkBgB,SAASzB,GAC3B0B,IAAK3B,EAAQ4B,KAAI,SAAAC,GAAI,OAAIA,EAAKC,MAC9BC,mBAAoB5B,IACrB6B,KAAKnC,IAYJoC,sBAAuBhB,EACvBE,MAAOrB,EAAKsB,cAAcC,4BAC1Ba,OAAQ,uBAER,kBAAC,IAAD,CAAOC,WAAS,GACZ,kBAAC,IAAD,KACKrC,EAAKsB,cAAcC,4BAExB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWlB,MAAOL,EAAKsB,cAAcC,uBAA6Be,QAAS,kBACtEC,UAA0B,SAAAR,GAAI,OAC3B,kBAAC,IAAD,CACIS,UAAW,sBACXvB,MAAOc,EAAKd,MACZwB,UAAWtC,IAAmB4B,EAAKd,MACnCyB,SAAU5B,EACVT,MAAO0B,EAAK1B,MACZsC,IAAKZ,EAAKd,MACVe,GAAID,EAAKd,MACT2B,KAAMb,EAAK1B,MACXwC,aAAYd,EAAK1B,MACjB+B,OAAQ,4BAIpB,kBAAC,IAAD,CAAW/B,MAAOL,EAAKsB,cAAcC,wBAA8Be,QAAS,SACxE,kBAAC,KAAD,CACIQ,KAAK,OACLJ,SAlDA,SAAAzB,GACxBX,EAASW,IAkDeA,MAAOZ,EACP0C,kBAAkB,WAClBF,aAAY,wBAU5ChD,EAAkBmD,UAAY,CAC1BlD,KAAMkD,UACNjD,UAAWiD,SACXhD,KAAMgD,SAGV,SAAeC,QAAWpD,I,wQC9FbqD,EAAiB,SAAC,GAA8B,IAA5BpD,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAAW,GACvCC,cAASH,GAApBI,EADkD,eAEIiD,QAqBjDjD,GAAWA,EAAQkD,OAAM,SAAArB,GAAI,OAAIA,EAAKsB,YAAcnD,EAAQ,GAAGmD,cAChEnD,EAAQ,GAAGmD,UAAUxC,YAAe,KAtBvCyC,EAFiD,EAEjDA,aAAcC,EAFmC,EAEnCA,SAAoBC,EAFe,EAEzBC,SAFyB,GAGXC,QAyBlCxD,GAAWA,EAAQkD,OAAM,SAAArB,GAAI,OAAIA,EAAKrB,gBAAkBR,EAAQ,GAAGQ,kBACpER,EAAQ,GAAGQ,eAAkB,IA1BhCiD,EAHiD,EAGjDA,mBAAoBjD,EAH6B,EAG7BA,cAH6B,GAIfT,eAAS,GAJM,WAIlD2D,EAJkD,KAInCC,EAJmC,KAMnDC,EAAyB5D,EAAQ6D,QAAO,SAAAhC,GAAI,OAAIA,EAAKiC,sBAAwB,KAAGlC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAEvGrB,gBAAU,WACN6C,EAAe,CAAEpB,OAAQ,oBAC1B,CAACoB,IAsBJ,IAAMrC,EAAsB,CACxBC,QAAS,UACTC,MAAOrB,EAAKsB,cAAcC,mCAAyC,CAAEC,MAAOtB,EAAQO,QAAU,KAE5FY,EAAQrB,EAAKsB,cAAcC,wBAA8B,CAAEC,MAAOtB,EAAQO,QAAU,IAE1F,OACI,kBAAC,KAAD,CACIgB,MAAOvB,EACPwB,OA7BW,WACf,OAAOuC,QAAa,CAChBZ,UAAWzB,SAAS2B,GACpB1B,IAAK3B,EAAQ4B,KAAI,SAAAC,GAAI,OAAIA,EAAKC,MAC9BkC,YAAaxD,IAEhBwB,MAAK,kBAAO0B,GAAiBE,EAAuBrD,OAAS,IAAK0D,QAAmB,CAAEtC,IAAKiC,OAC5F5B,KAAKnC,IAuBFoC,sBAAuBhB,EACvBE,MAAOA,EACPe,OAAQ,gBAER,kBAAC,IAAD,CAAOC,WAAS,GACZ,kBAAC,IAAD,KACKrC,EAAKsB,cACFC,2BACA,CACIC,MAAOtB,EAAQO,QAAU,EACzB2D,MAAOlE,EAAQ,GAAG8B,GAClBqC,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,OAIlC,kBAAC,IAAD,KACI,kBAAC,KAAD,CACI9B,UAAU,aACV+B,SAAS,iCACTC,MAAM,wCAETxE,EAAKsB,cAAcC,uBAA6B,CAAEC,MAAOtB,EAAQO,QAAU,IAC5E,kBAAC,IAAD,CACIgE,QAASzE,EAAKsB,cAAcC,gCAE5B,kBAAC,aAAD,KACI,kBAAC,KAAD,CACIiB,UAAU,aACVgC,MAAM,+BACNE,MAAO,CAAEC,cAAe,iBAKxC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMhC,IAAI,OACLW,EACAK,EACAG,EAAuBrD,OAAS,GAC7B,kBAAC,IAAD,CAAW6B,QAAS,aAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIjC,MAAOL,EAAKsB,cAAcC,qCAC1BS,GAAG,sBACHY,KAAK,sBACLH,UAAWmB,EACXlB,SAAU,SAAAkC,GAAO,OAAIf,EAAiBe,OAG9C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIH,QAASzE,EAAKsB,cAAcC,qCAE5B,kBAAC,KAAD,CACIiB,UAAU,aACVgC,MAAM,+BACNE,MAAO,CAAEC,cAAe,gBAcxEzB,EAAeF,UAAY,CACvBlD,KAAMkD,UACNjD,UAAWiD,SACXhD,KAAMgD,SAGV,SAAeC,QAAWC","file":"js/129.647e7c79fd8c37e7e4e6.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId={'business-risk-modal'}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId={'business-risk-radio'}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveList.map(item => item.id),\n            status_text: justification\n        })\n        .then(() => !checkboxState && cvesWithExposedSystems.length > 0 && setSystemCveStatus({ cve: cvesWithExposedSystems }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={title}\n            ouiaId={'status-modal'}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 &&\n                            <FormGroup fieldId={'overwrite'}>\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n"],"sourceRoot":""}