{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/components/cjs/TableToolbar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/components/cjs/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"names":["exports","__esModule","ExclamationCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","ExclamationCircleIcon","createIcon","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","variant","totalItems","total_items","pageSize","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","ouiaId","concat","Component","propTypes","func","object","string","defaultProps","_interopDefault","e","default","Object","defineProperty","value","_extends","objectWithoutProperties","React","React__default","PropTypes__default","classNames","Toolbar_js","TableToolbar","t","isFooter","r","results","a","className","o","selected","s","children","l","_objectWithoutProperties","c","_defineProperty","createElement","Toolbar","generateCount","bool","number","any","toConsumableArray","getPrototypeOf","pfReactTable","Skeleton","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","prototype","toString","call","SkeletonTable","_inherits","_getPrototypeOf","constructor","arguments","_possibleConstructorReturn","_createSuper","_classCallCheck","length","Array","_assertThisInitialized","colSize","_toConsumableArray","map","title","size","SkeletonSize","sm","paddingColumnSize","columns","newArray","createColumns","rowSize","n","disableSelection","cells","md","hasRadio","RowSelectVariant","radio","checkbox","_createClass","key","canSelectAll","isSelectable","sortBy","Table","getColumns","rows","createRows","onSelect","selectVariant","TableHeader","TableBody","array","shape","index","direction","oneOf","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","label","intl","formatMessage","messages","publishDate","type","conditionalFilterType","urlParam","filterValues","onChange","event","items","PUBLIC_DATE_OPTIONS","item","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","values","filter","join","IMPACT_OPTIONS","hasIcon","color","iconColor","split","businessRiskFilter","business_risk_id","filterByBusinessRisk","businessRisk","BUSINESS_RISK_OPTIONS","SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","openedCves","canEditStatus","patch_access","isEmpty","data","cve","includes","id","current","find","opened","isOpen","undefined","isLoading","isStickyHeader","aria-label","heightAuto","colSpan","hasOwnProperty","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","noCves","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","createSortBy","sort","onCollapse","rowKey","expandCveDescription","openCves","handleOnCollapse","onSort","handleSortColumn","gridBreakPoint","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","actions","editStatus","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","kebabCollapseCves","kebabExpandCves","selectedCvesData","flatMap","PrimaryToolbar","pagination","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","securityRuleFilter","statusFilter","search","activeFiltersConfig","filters","buildActiveFilters","onDelete","i","removeFilters","exportConfig","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","systemsHeader","pageTitleSuffix","fetchCveListBySystem","system","clearSystemCvesStore","error","status","payload","errors","parseInt","EmptyVulnerabilityData","clearNotifications","GenericError","Provider","format","DownloadReport","exec","iSelected","selectSystemCve","expandSystemCve","cvesList","from","some","element","CvePairStatusModal","updateRef","inventoryList","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","h2","cvesHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","customRouter","RouterWrapper","Router","Wrapper","IntlProvider","locale","navigator","language","slice","basename","window","location","pathname","SystemDetails","isOptOut","optOutSystemHandler","loaded","buttonAction","connect","entityDetails","opt_out","initialState","systemDetailsPageStore","INVENTORY_ACTION_TYPES","state","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","optOutSystem","inventoryId","then","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","ReactRedux","react","reactRouterDom","PfTable","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","setState","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","InvWrapper","DetailWrapper","systemDetails","Header","breadcrumbs","PATHS","systemsPage","to","invalidSystem","isActive","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","Main","optOutSystemAction","notification"],"mappings":"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","file":"js/SystemDetailsPage.b704858f4a823e3b290a.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'bottom'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                    ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0}),require(\"./_commonjsHelpers-32c5d30b.js\");var _extends=require(\"./extends-7fa7e501.js\"),defineProperty=require(\"./defineProperty-cf06dcaa.js\"),objectWithoutProperties=require(\"./objectWithoutProperties-9e2b4e81.js\"),React=require(\"react\"),React__default=_interopDefault(React),PropTypes=require(\"prop-types\"),PropTypes__default=_interopDefault(PropTypes),classNames=_interopDefault(require(\"classnames\")),Toolbar_js=require(\"@patternfly/react-core/dist/js/components/Toolbar/Toolbar.js\");function generateCount(e){return\"\".concat(e,e>1||e<1?\" Results\":\" Result\")}var TableToolbar=function TableToolbar(e){var t=e.isFooter,r=e.results,a=e.className,o=e.selected,s=e.children,l=objectWithoutProperties._objectWithoutProperties(e,[\"isFooter\",\"results\",\"className\",\"selected\",\"children\"]),c=classNames(\"ins-c-table__toolbar\",defineProperty._defineProperty({},\"ins-m-footer\",t),a);return React__default.createElement(React.Fragment,null,React__default.createElement(Toolbar_js.Toolbar,_extends._extends({className:c},l),\" \",s),(r>=0||o>=0)&&React__default.createElement(\"div\",{className:\"ins-c-table__toolbar-results\"},r>=0&&React__default.createElement(\"span\",{className:\"ins-c-table__toolbar-results-count\"},\" \",generateCount(r),\" \"),o>=0&&React__default.createElement(\"span\",{className:\"ins-c-table__toolbar-results-selected\"},\" \",o,\" Selected \")))};TableToolbar.propTypes={isFooter:PropTypes__default.bool,results:PropTypes__default.number,children:PropTypes__default.any,className:PropTypes__default.string,selected:PropTypes__default.number},TableToolbar.defaultProps={isFooter:!1},exports.TableToolbar=TableToolbar;\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0}),require(\"./_commonjsHelpers-32c5d30b.js\"),require(\"./extends-7fa7e501.js\");var defineProperty=require(\"./defineProperty-cf06dcaa.js\");require(\"./objectWithoutProperties-9e2b4e81.js\");var React=require(\"react\"),React__default=_interopDefault(React),PropTypes=require(\"prop-types\"),PropTypes__default=_interopDefault(PropTypes);require(\"classnames\"),require(\"./unsupportedIterableToArray-abf8a1bc.js\");var toConsumableArray=require(\"./toConsumableArray-d88d1361.js\"),getPrototypeOf=require(\"./getPrototypeOf-c749744b.js\"),pfReactTable=require(\"@patternfly/react-table\"),Skeleton=require(\"./Skeleton.js\");function _createSuper(e){return function(){var t,r=getPrototypeOf._getPrototypeOf(e);if(_isNativeReflectConstruct()){var o=getPrototypeOf._getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return getPrototypeOf._possibleConstructorReturn(this,t)}}function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SkeletonTable=function(e){getPrototypeOf._inherits(SkeletonTable,e);var t=_createSuper(SkeletonTable);function SkeletonTable(){var e;getPrototypeOf._classCallCheck(this,SkeletonTable);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return e=t.call.apply(t,[this].concat(o)),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"createColumns\",(function(){var t=e.props.colSize;return toConsumableArray._toConsumableArray(Array(t)).map((function(){return{title:React__default.createElement(Skeleton.Skeleton,{size:Skeleton.SkeletonSize.sm})}}))})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"getColumns\",(function(){var t=e.props,r=t.paddingColumnSize,o=t.columns;return e.newArray(r).map((function(){return\"\"})).concat(o||e.createColumns())})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"createRows\",(function(){var t=e.props,r=t.colSize,o=t.rowSize,a=t.columns,n=t.paddingColumnSize,l=a?a.length:r;return e.newArray(o).map((function(){return{disableSelection:!0,cells:e.newArray(n).map((function(){return\"\"})).concat(e.newArray(l).map((function(){return{title:React__default.createElement(Skeleton.Skeleton,{size:Skeleton.SkeletonSize.md})}})))}}))})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"selectVariant\",(function(){return e.props.hasRadio?(null===pfReactTable.RowSelectVariant||void 0===pfReactTable.RowSelectVariant?void 0:pfReactTable.RowSelectVariant.radio)||\"radio\":(null===pfReactTable.RowSelectVariant||void 0===pfReactTable.RowSelectVariant?void 0:pfReactTable.RowSelectVariant.checkbox)||\"checkbox\"})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"newArray\",(function(e){return toConsumableArray._toConsumableArray(Array(e))})),e}return getPrototypeOf._createClass(SkeletonTable,[{key:\"render\",value:function render(){var e=this.props,t=e.canSelectAll,r=e.isSelectable,o=e.sortBy;return(React__default.createElement(pfReactTable.Table,{cells:this.getColumns(),rows:this.createRows(),sortBy:o,\"aria-label\":\"Loading\",onSelect:r,selectVariant:r?this.selectVariant():null,canSelectAll:t},React__default.createElement(pfReactTable.TableHeader,null),React__default.createElement(pfReactTable.TableBody,null)))}}]),SkeletonTable}(React__default.Component);SkeletonTable.propTypes={colSize:PropTypes__default.number,rowSize:PropTypes__default.number,columns:PropTypes__default.array,paddingColumnSize:PropTypes__default.number,sortBy:PropTypes__default.shape({index:PropTypes__default.number,direction:PropTypes__default.oneOf([\"asc\",\"desc\"])}),isSelectable:PropTypes__default.bool,canSelectAll:PropTypes__default.bool,hasRadio:PropTypes__default.bool},SkeletonTable.defaultProps={rowSize:0,paddingColumnSize:0,canSelectAll:!1,isSelectable:!1,hasRadio:!1},exports.SkeletonTable=SkeletonTable;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, openedCves, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : !cves.data || cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : []),\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        searchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useCreateUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return EmptyVulnerabilityData;\n        }\n        else {\n            dispatch(clearNotifications());\n            return GenericError;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, customRouter, ...props }) => {\n    const RouterWrapper = customRouter ? Router : Fragment;\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <RouterWrapper\n            {...customRouter && { basename: `${window.location.pathname}` } }\n        >\n            <ConnectedSystemCves { ...props } />\n        </RouterWrapper>\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves\n                        entity={{ id: entity.id, display_name: entity.display_name }}\n                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n                        showHeaderLabel\n                        setPageTitle\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any,\n        errors: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {}\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo,\n            InvWrapper: inventoryConnector(ReducerRegistry.getStore()).DetailWrapper\n        });\n        this.state.removeListener();\n    }\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody, InvWrapper } = this.state;\n        const { systemDetails = {}, errors } = this.props;\n        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n        const Wrapper = InvWrapper || React.Fragment;\n        return (\n            <React.Fragment>\n                <Wrapper>\n                    <Header\n                        title=''\n                        breadcrumbs={[\n                            {\n                                title: PATHS.systemsPage.title,\n                                to: PATHS.systemsPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),\n                                isActive: true,\n                                loaded\n                            }\n                        ]}\n                    >\n                        {InventoryHeader && !errors && (\n                            <InventoryHeader\n                                hideBack\n                                actions={\n                                    entity && [\n                                        isOptOut\n                                            ? {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                                onClick: () => this.optOutSystem(false)\n                                            }\n                                            : {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                                onClick: () => this.optOutSystem(true)\n                                            }\n                                    ]\n                                }\n                            />\n                        )}\n                    </Header>\n\n                    {InventoryBody && (\n                        <Main>\n                            <React.Fragment>\n                                <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                            </React.Fragment>\n                        </Main>\n                    )}\n                </Wrapper>\n            </React.Fragment>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}