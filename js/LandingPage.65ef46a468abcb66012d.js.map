{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/PopUp/popup.scss","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/PopUp/popup.scss?f1f5","webpack:///./src/Components/PresentationalComponents/PopUp/PopUp.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","ExclamationCircleIcon","color","somethingWrong","tryRefreshing","ifProblemPersists","values","statusPageLink","statusPage","history","back","returnPreviousPage","useStatusSelect","initialValue","useState","statusId","setStatusId","props","setProps","StatusSelect","label","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","map","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","type","resizeOrientation","BaseModal","items","title","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","undefined","useEffect","clearNotifications","Fragment","isOpen","Boolean","onClose","actions","then","notification","addNotification","save","cancel","children","any","array","updateRef","string","object","connect","dispatch","data","kebabItemDownloadPDF","loading","downloadReport","kebabExportAsPDF","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabEditBusinessRisk","kebabItemEditStatus","showStatusModal","inventoryIds","kebabEditStatus","securityRuleFilter","apply","currentFilter","dynamicFilters","currentValue","rule_presence","concat","split","rule_key","filterBySecurityRule","filter","includes","join","page","intl","formatMessage","securityRules","conditionalFilterType","checkbox","filterValues","event","unionWith","RULE_PRESENCE_OPTIONS","isEqual","item","statusFilter","status_id","filterByStatus","length","status","exports","___CSS_LOADER_API_IMPORT___","push","module","i","BusinessRiskModal","cveList","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","business_risk_id","toString","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","count","setBusinessRisk","parseInt","cve","id","business_risk_text","businessRiskModalTitle","hasGutter","businessRiskModalInfo","businessRiskLabel","BUSINESS_RISK_OPTIONS","className","isChecked","name","injectIntl","CveStatusModal","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","cveStatusModalInfo","trigger","content","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","PaginationWrapper","handleChangePage","_event","pageNumber","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","radio","urlParam","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","options","update","locals","hot","invalidate","oldLocals","accept","a","isNamedExport","isEqualLocals","dispose","PopUp","body","hidden","setHidden","popupsStore","useSelector","AppStore","popup","pop","Card","CardHeader","TextContent","Text","h3","CardActions","CardBody","PropTypes","CVEsTableWithContext","context","header","entity","methods","selectedCves","openedCves","isEmpty","rows","selected","index","current","isLoading","SkeletonTable","colSize","rowSize","Table","isStickyHeader","canSelectAll","cells","heightAuto","colSpan","Object","prototype","hasOwnProperty","call","noCves","onSelect","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","TableToolbar","CVEsTable","CVETableContext","Consumer","affectingFilter","affecting","filterByAffecting","defaultValues","forEach","affectsSystems","AFFECTING_FILTER_OPTIONS","flatMap","toLowerCase","CVEsTableToolbarWithContext","exportPDF","setExportPDF","params","expandCveDescription","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","editBusinessRisk","isDisabled","editStatus","kebabCollapseCves","kebabExpandCves","PrimaryToolbar","pagination","actionsConfig","bulkSelect","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","extraItems","DownloadCVEsReport","showButton","onSuccess","totalNumber","React","createContext","CVEs","useDispatch","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","CVEsStore","parameters","useMemo","createCveListByAccount","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","constructFilterParameters","changeCveListParameters","fetchCveListByAccount","clearCVEsStore","errors","Provider","format","DownloadReport","exec","cveNames","selectCve","cvesList","expandCve","Stack","StackItem","VULNERABILITIES_HEADER","LandingPage","unsupported","togglePopup","Header","showBreadcrumb","Main"],"mappings":"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","file":"js/LandingPage.65ef46a468abcb66012d.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, ExclamationCircleIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={ExclamationCircleIcon} color={'var(--pf-global--danger-color--100)'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.somethingWrong} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.tryRefreshing} />\n                <br/><br/>\n                <FormattedMessage {...messages.ifProblemPersists}\n                    values = {{\n                        statusPageLink:\n                                <a href=\"https://status.redhat.com\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                    <FormattedMessage {...messages.statusPage} />\n                                </a>\n                    }}\n                />\n                <br/><br/>\n                <Button variant=\"primary\" onClick={ () => history.back() }>\n                    <FormattedMessage {...messages.returnPreviousPage} />\n                </Button>\n\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    useEffect(() => {\n        return () => {\n            props.clearNotifications();\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    clearNotifications: propTypes.func\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let currentValue = [];\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule_key) {\n        currentValue = currentValue.concat(currentFilter.rule_key.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            rule_presence: values.filter(value => ['true', 'false'].includes(value)).join(',') || undefined,\n            rule_key: values.filter(value => !['true', 'false'].includes(value)).join(',') || undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(RULE_PRESENCE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".popup {\\n  position: absolute;\\n  z-index: 10000;\\n  bottom: 40px;\\n  right: 0px;\\n  width: 550px; }\\n  .popup .actions {\\n    cursor: pointer; }\\n  .popup .icon {\\n    margin-right: 12px; }\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        trigger='mouseenter focus click'\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        trigger='mouseenter focus click'\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./popup.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/lib/loader.js!./popup.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};","import React, { useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport {\n    TextContent,\n    Text,\n    TextVariants,\n    Card,\n    CardBody,\n    CardActions,\n    CardHeader\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, TimesIcon } from '@patternfly/react-icons';\nimport './popup.scss';\n\nconst PopUp = ({ body, title, page }) => {\n    const [hidden, setHidden] = useState(false);\n\n    const popupsStore = useSelector(\n        ({ AppStore }) =>  AppStore.popup\n    );\n\n    const pop =  popupsStore?.[page];\n\n    return  <Fragment>\n        {\n            !hidden && pop &&\n            <Card className=\"popup\">\n                <CardHeader>\n                    <TextContent>\n                        <Text component={TextVariants.h3}>\n                            <ExclamationTriangleIcon className=\"icon\" color={'var(--pf-global--warning-color--100)'} />\n                            {title}\n                        </Text>\n                    </TextContent>\n                    <CardActions className=\"actions\">\n                        <TimesIcon onClick={() => setHidden(true)}/>\n                    </CardActions>\n                </CardHeader>\n                <CardBody>{body}</CardBody>\n            </Card>\n        }\n    </Fragment>;\n};\n\nPopUp.propTypes = {\n    body: PropTypes.string,\n    title: PropTypes.string,\n    page: PropTypes.string\n};\n\nPopUp.defaultProps = {\n    title: 'Tag and workload filtration temporarily unavailable',\n    body: 'Tag and workload filtration is temporarily unavailable on this page. We\\'re working to resolve this soon.'\n};\n\nexport default PopUp;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={7} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/components/cjs/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ affecting: filter === 'false,false' ? '' : filter });\n    };\n\n    return {\n        label: intl.formatMessage(messages.affectsSystems),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, expandCveDescription } = context;\n\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ...exportConfig(methods)\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    type='cves'\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useCreateUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n        };\n    }, []);\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    params: parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={VULNERABILITIES_HEADER} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError();\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { togglePopup } from '../../../Store/Actions/Actions';\nimport PopUp from '../../PresentationalComponents/PopUp/PopUp';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    const dispatch = useDispatch();\n\n    const unsupported = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.unsupported\n    );\n\n    useEffect(() => {\n        if (unsupported) {\n            dispatch(togglePopup('landing', true));\n        }\n    }, [unsupported, dispatch]);\n\n    return (\n        <Fragment>\n            <Header showBreadcrumb={false} />\n            <Main>\n                <CVEs/>\n                <PopUp page=\"landing\"/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"sourceRoot":""}