{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/exclamation-circle-icon.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/components/cjs/TableToolbar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/components/cjs/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"names":["exports","__esModule","ExclamationCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","ExclamationCircleIcon","createIcon","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","variant","totalItems","total_items","pageSize","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","ouiaId","concat","Component","propTypes","func","object","string","defaultProps","_interopDefault","e","default","Object","defineProperty","value","_extends","objectWithoutProperties","React","React__default","PropTypes","classNames","Toolbar_js","TableToolbar","t","isFooter","r","results","a","className","o","selected","s","children","l","_objectWithoutProperties","c","_defineProperty","createElement","Toolbar","generateCount","bool","number","any","toConsumableArray","getPrototypeOf","reactTable","Skeleton","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","prototype","toString","call","SkeletonTable","_inherits","_getPrototypeOf","constructor","arguments","_possibleConstructorReturn","_createSuper","_classCallCheck","length","Array","n","_assertThisInitialized","colSize","_toConsumableArray","map","title","size","SkeletonSize","sm","paddingColumnSize","columns","newArray","createColumns","rowSize","cells","md","_createClass","key","Table","getColumns","rows","createRows","sortBy","TableHeader","TableBody","array","shape","index","direction","oneOf","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","label","intl","formatMessage","messages","publishDate","type","conditionalFilterType","radio","urlParam","filterValues","onChange","event","items","PUBLIC_DATE_OPTIONS","item","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","values","filter","join","checkbox","IMPACT_OPTIONS","hasIcon","color","iconColor","split","businessRiskFilter","business_risk_id","filterByBusinessRisk","businessRisk","BUSINESS_RISK_OPTIONS","SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","openedCves","canEditStatus","patch_access","isEmpty","data","cve","includes","id","current","find","opened","isOpen","undefined","isLoading","isStickyHeader","canSelectAll","aria-label","heightAuto","colSpan","hasOwnProperty","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","createSortBy","sort","onCollapse","rowKey","expandCveDescription","openCves","handleOnCollapse","onSort","handleSortColumn","gridBreakPoint","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","actions","editStatus","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","kebabCollapseCves","kebabExpandCves","selectedCvesData","flatMap","PrimaryToolbar","pagination","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","securityRuleFilter","statusFilter","search","activeFiltersConfig","filters","buildActiveFilters","onDelete","i","removeFilters","exportConfig","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","systemsHeader","pageTitleSuffix","fetchCveListBySystem","system","clearSystemCvesStore","error","status","payload","errors","parseInt","EmptyVulnerabilityData","clearNotifications","GenericError","Provider","format","DownloadReport","exec","iSelected","selectSystemCve","expandSystemCve","cvesList","from","some","element","CvePairStatusModal","updateRef","inventoryList","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","h2","cvesHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","customRouter","RouterWrapper","Router","Wrapper","IntlProvider","locale","navigator","language","slice","basename","window","location","pathname","SystemDetails","isOptOut","optOutSystemHandler","loaded","buttonAction","connect","entityDetails","opt_out","initialState","systemDetailsPageStore","INVENTORY_ACTION_TYPES","state","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","optOutSystem","inventoryId","then","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","ReactRedux","react","reactRouterDom","pfReactTable","PfTable","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","setState","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","InvWrapper","DetailWrapper","systemDetails","Header","breadcrumbs","PATHS","systemsPage","to","invalidSystem","isActive","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","Main","optOutSystemAction","notification"],"mappings":"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","file":"js/SystemDetailsPage.f697c146660e201275c9.js","sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.ExclamationCircleIconConfig = {\n  name: 'ExclamationCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.ExclamationCircleIcon = require('../createIcon').createIcon(exports.ExclamationCircleIconConfig);\nexports[\"default\"] = exports.ExclamationCircleIcon;","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'bottom'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                    ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0}),require(\"./_commonjsHelpers-32c5d30b.js\");var _extends=require(\"./extends-7fa7e501.js\"),defineProperty=require(\"./defineProperty-cf06dcaa.js\"),objectWithoutProperties=require(\"./objectWithoutProperties-9e2b4e81.js\"),React=require(\"react\"),React__default=_interopDefault(React),PropTypes=_interopDefault(require(\"prop-types\")),classNames=_interopDefault(require(\"classnames\")),Toolbar_js=require(\"@patternfly/react-core/dist/js/components/Toolbar/Toolbar.js\");function generateCount(e){return\"\".concat(e,e>1||e<1?\" Results\":\" Result\")}var TableToolbar=function TableToolbar(e){var t=e.isFooter,r=e.results,a=e.className,o=e.selected,s=e.children,l=objectWithoutProperties._objectWithoutProperties(e,[\"isFooter\",\"results\",\"className\",\"selected\",\"children\"]),c=classNames(\"ins-c-table__toolbar\",defineProperty._defineProperty({},\"ins-m-footer\",t),a);return React__default.createElement(React.Fragment,null,React__default.createElement(Toolbar_js.Toolbar,_extends._extends({className:c},l),\" \",s),(r>=0||o>=0)&&React__default.createElement(\"div\",{className:\"ins-c-table__toolbar-results\"},r>=0&&React__default.createElement(\"span\",{className:\"ins-c-table__toolbar-results-count\"},\" \",generateCount(r),\" \"),o>=0&&React__default.createElement(\"span\",{className:\"ins-c-table__toolbar-results-selected\"},\" \",o,\" Selected \")))};TableToolbar.propTypes={isFooter:PropTypes.bool,results:PropTypes.number,children:PropTypes.any,className:PropTypes.string,selected:PropTypes.number},TableToolbar.defaultProps={isFooter:!1},exports.TableToolbar=TableToolbar;\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0}),require(\"./_commonjsHelpers-32c5d30b.js\"),require(\"./extends-7fa7e501.js\");var defineProperty=require(\"./defineProperty-cf06dcaa.js\");require(\"./objectWithoutProperties-9e2b4e81.js\");var React=require(\"react\"),React__default=_interopDefault(React),PropTypes=_interopDefault(require(\"prop-types\"));require(\"classnames\");var toConsumableArray=require(\"./toConsumableArray-017cf31e.js\"),getPrototypeOf=require(\"./getPrototypeOf-c749744b.js\"),reactTable=require(\"@patternfly/react-table\"),Skeleton=require(\"./Skeleton.js\");function _createSuper(e){return function(){var t,r=getPrototypeOf._getPrototypeOf(e);if(_isNativeReflectConstruct()){var o=getPrototypeOf._getPrototypeOf(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return getPrototypeOf._possibleConstructorReturn(this,t)}}function _isNativeReflectConstruct(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SkeletonTable=function(e){getPrototypeOf._inherits(SkeletonTable,e);var t=_createSuper(SkeletonTable);function SkeletonTable(){var e;getPrototypeOf._classCallCheck(this,SkeletonTable);for(var r=arguments.length,o=new Array(r),n=0;n<r;n++)o[n]=arguments[n];return e=t.call.apply(t,[this].concat(o)),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"createColumns\",(function(){var t=e.props.colSize;return toConsumableArray._toConsumableArray(Array(t)).map((function(){return{title:React__default.createElement(Skeleton.Skeleton,{size:Skeleton.SkeletonSize.sm})}}))})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"getColumns\",(function(){var t=e.props,r=t.paddingColumnSize,o=t.columns;return e.newArray(r).map((function(){return\"\"})).concat(o||e.createColumns())})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"createRows\",(function(){var t=e.props,r=t.colSize,o=t.rowSize,n=t.columns,a=t.paddingColumnSize,l=n?n.length:r;return e.newArray(o).map((function(){return{cells:e.newArray(a).map((function(){return\"\"})).concat(e.newArray(l).map((function(){return{title:React__default.createElement(Skeleton.Skeleton,{size:Skeleton.SkeletonSize.md})}})))}}))})),defineProperty._defineProperty(getPrototypeOf._assertThisInitialized(e),\"newArray\",(function(e){return toConsumableArray._toConsumableArray(Array(e))})),e}return getPrototypeOf._createClass(SkeletonTable,[{key:\"render\",value:function render(){return React__default.createElement(reactTable.Table,{cells:this.getColumns(),rows:this.createRows(),sortBy:this.props.sortBy,\"aria-label\":\"Loading\"},React__default.createElement(reactTable.TableHeader,null),React__default.createElement(reactTable.TableBody,null))}}]),SkeletonTable}(React__default.Component);SkeletonTable.propTypes={colSize:PropTypes.number,rowSize:PropTypes.number,columns:PropTypes.array,paddingColumnSize:PropTypes.number,sortBy:PropTypes.shape({index:PropTypes.number,direction:PropTypes.oneOf([\"asc\",\"desc\"])})},SkeletonTable.defaultProps={rowSize:0,paddingColumnSize:0},exports.SkeletonTable=SkeletonTable;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, openedCves, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : !cves.data || cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : []),\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        searchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useCreateUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return EmptyVulnerabilityData;\n        }\n        else {\n            dispatch(clearNotifications());\n            return GenericError;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, customRouter, ...props }) => {\n    const RouterWrapper = customRouter ? Router : Fragment;\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <RouterWrapper\n            {...customRouter && { basename: `${window.location.pathname}` } }\n        >\n            <ConnectedSystemCves { ...props } />\n        </RouterWrapper>\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves\n                        entity={{ id: entity.id, display_name: entity.display_name }}\n                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n                        showHeaderLabel\n                        setPageTitle\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any,\n        errors: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {}\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo,\n            InvWrapper: inventoryConnector(ReducerRegistry.getStore()).DetailWrapper\n        });\n        this.state.removeListener();\n    }\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody, InvWrapper } = this.state;\n        const { systemDetails = {}, errors } = this.props;\n        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n        const Wrapper = InvWrapper || React.Fragment;\n        return (\n            <React.Fragment>\n                <Wrapper>\n                    <Header\n                        title=''\n                        breadcrumbs={[\n                            {\n                                title: PATHS.systemsPage.title,\n                                to: PATHS.systemsPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),\n                                isActive: true,\n                                loaded\n                            }\n                        ]}\n                    >\n                        {InventoryHeader && !errors && (\n                            <InventoryHeader\n                                hideBack\n                                actions={\n                                    entity && [\n                                        isOptOut\n                                            ? {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                                onClick: () => this.optOutSystem(false)\n                                            }\n                                            : {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                                onClick: () => this.optOutSystem(true)\n                                            }\n                                    ]\n                                }\n                            />\n                        )}\n                    </Header>\n\n                    {InventoryBody && (\n                        <Main>\n                            <React.Fragment>\n                                <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                            </React.Fragment>\n                        </Main>\n                    )}\n                </Wrapper>\n            </React.Fragment>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}