{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js"],"names":["apply","currentFilter","currentValue","business_risk_id","filterByBusinessRisk","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","event","items","BUSINESS_RISK_OPTIONS","item","split","cvss_filter","filterByCvssScore","CVSS_OPTIONS","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","className","color","iconColor","publish_date","filterByPublishDate","PUBLIC_DATE_OPTIONS","PaginationWrapper","handleChangePage","_event","pageNumber","props","handleSetPageSize","perPage","page_size","nextProps","meta","this","variant","totalItems","total_items","pageSize","Pagination","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","ouiaId","concat","Component","propTypes","defaultProps"],"mappings":"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","file":"js/498.6dd1db7160db7118e278.js","sourcesContent":["\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'bottom'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                    ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n"],"sourceRoot":""}