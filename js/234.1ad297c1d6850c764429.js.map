{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"names":["tablePage","data","page","intl","header","type","POSSIBLE_HEADERS","name","value","formatMessage","messages","hit","columnBuilder","style","key","hitColumns","headerContent","push","forEach","item","includes","concat","map","cveRows","cve","attributes","cveCellStyle","rules","length","styles","synopsis","src","CVES_PATH","public_date","processDate","systemRows","system","display_name","opt_out","cve_count","formatDate","updated","Fragment","withHeader","rows","propTypes","PropTypes","firstPagePDF","meta","filters","isReportDynamic","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","val","chips","timespan_label","join","filterStringSegments","msg","i","hasOwnProperty","isLast","formatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","total_items","toString","system_count","userNotes","identity","first_name","last_name","defaultProps","undefined","DownloadCVEsReport","params","buttonProps","label","props","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","dispatch","useDispatch","useEffect","clearNotifications","otherPagesPDF","resultArray","index","chunkIndex","Math","floor","PDF_REPORT_PER_PAGE","cvesFetch","addNotification","dismissable","variant","title","getCveListByAccount","DownloadReport","sort","affecting","insights","chrome","auth","getUser","status","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","some","firstPage","splice","otherPages","cvePage","systemsFetch","getSystems","systemPage","asyncFunction","component","reportName","reportTitle","fileName","allPagesHaveTitle","size","orientation","footer"],"mappings":"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","file":"js/234.1ad297c1d6850c764429.js","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            let cveCellStyle = (\n                cve.rules && cve.rules.length > 0\n                    ? [styles.cveCellAlign, styles.bodyCell, styles.cveCell]\n                    : [styles.bodyCell, styles.cveCell]\n            );\n\n            const synopsisCell = (\n                <View key={cve.synopsis}>\n                    { cve.rules && cve.rules.length > 0 && <CSAwIcon style={{ ...styles.bodyCell, ...styles.cveCell }}/> }\n                    <Text style={cveCellStyle}>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {formatWithBold(messages.customReportSearchTermCvssAndPublishDate, {\n                hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                score: (filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values)\n                    || DEFAULT_FILTER_DATA.cvss_filter.min.toFixed(1) + ' - ' + DEFAULT_FILTER_DATA.cvss_filter.max.toFixed(1),\n                published: (filtersBuilder.publish_date && filtersBuilder.publish_date.values)\n                    || formatWithBold(messages.customReportTimespanAnytime)\n            })}\n            {filterStringSegments.map(filter =>\n                filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg, {\n                    values: filtersBuilder[filter.name].values.toLowerCase(),\n                    prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')  })\n            )}\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {filtersBuilder.filter ?\n                formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values }) : ''}\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE, STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    type,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const otherPagesPDF = data =>\n        data.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / PDF_REPORT_PER_PAGE.otherPages);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationCve)\n        }));\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true,false'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                status: STATUS_OPTIONS.find(item =>\n                    item.value === cve.attributes.status_id.toString()).label,\n                business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                    item.value === cve.attributes.business_risk_id.toString()).label,\n                impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(data.some(cve => cve.attributes.rules.length > 0));\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((cvePage, index) =>\n            tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type }))];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationSystem)\n        }));\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((systemPage, index) =>\n            tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header }))];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text>*</Text>\n                            <CSAwIcon style={styles.footerIcon}/>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n"],"sourceRoot":""}