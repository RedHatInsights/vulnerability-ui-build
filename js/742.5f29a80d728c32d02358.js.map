{"version":3,"sources":["webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack://@redhat-cloud-services/frontend-components-inventory-vulnerabilities/./src/Components/SmartComponents/Modals/BaseModal.js"],"names":["apply","currentFilter","dynamicFilters","currentValue","rule_presence","concat","split","rule_key","filterBySecurityRule","values","filter","value","includes","join","undefined","page","label","intl","messages","type","conditionalFilterType","filterValues","onChange","event","items","unionWith","RULE_PRESENCE_OPTIONS","isEqual","map","item","status_id","filterByStatus","length","STATUS_OPTIONS","useStatusSelect","initialValue","useState","statusId","setStatusId","props","setProps","StatusSelect","fieldId","aria-label","selection","key","useJustificationInput","justification","setJustification","JustificationInput","resizeOrientation","BaseModal","title","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","useEffect","clearNotifications","variant","isOpen","Boolean","onClose","actions","ouiaId","onClick","then","notification","addNotification","children","propTypes","updateRef","connect","dispatch","data"],"mappings":"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","file":"js/742.5f29a80d728c32d02358.js","sourcesContent":["\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let currentValue = [];\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule_key) {\n        currentValue = currentValue.concat(currentFilter.rule_key.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            rule_presence: values.filter(value => ['true', 'false'].includes(value)).join(',') || undefined,\n            rule_key: values.filter(value => !['true', 'false'].includes(value)).join(',') || undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(RULE_PRESENCE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    useEffect(() => {\n        return () => {\n            props.clearNotifications();\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" ouiaId='save' onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" ouiaId='close' onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n                ouiaId={props.ouiaId}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    clearNotifications: propTypes.func,\n    ouiaId: propTypes.string\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n"],"sourceRoot":""}