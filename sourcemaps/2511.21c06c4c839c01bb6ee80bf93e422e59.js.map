{"version":3,"file":"js/2511.79b231836039b8fe3a6d.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst Breadcrumb = ({ breadcrumbs }) => {\n    return (\n        <PfBreadcrumb key=\"PfBreadcrumb\" className=\"pf-u-mb-md\">\n            {breadcrumbs?.map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {\n                        item.isLoaded\n                            ? item.isActive\n                                ? item.title\n                                : <InsightsLink to={`/${item.to}`}>{item.title}</InsightsLink>\n                            : <Skeleton className=\"breadcrumb-skeleton\" />\n                    }\n                </BreadcrumbItem>\n            ))}\n        </PfBreadcrumb>\n    );\n};\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.arrayOf(propTypes.shape({\n        title: propTypes.string,\n        to: propTypes.string,\n        isActive: propTypes.bool,\n        isLoaded: propTypes.bool\n    }))\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => (\n    <View style={styles.labelsWrapper}>\n        {hasExploit &&\n            <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 62 : 75}\n                    variant={4}\n                    label={intl.formatMessage(messages.knownExploit)}\n                    textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#c9190b',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n        {hasRule &&\n            <View style={styles.label}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 59 : 63}\n                    label={intl.formatMessage(messages.securityRuleLabel)}\n                    textStyle={isSmall ? styles.smallText : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#bee1f4',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n    </View>\n);\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        },\n        {\n            name: 'advisory_available',\n            header: { value: intl.formatMessage(messages.advisory) },\n            hit: 'advisory_available'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve, id }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <Text>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            const affectedCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <Text>\n                        <Link\n                            aria-label=\"Affected systems column\"\n                            style={styles.link}\n                            src={`${CVES_PATH}/${id}`}\n                        >\n                            {cve.systems_affected}\n                        </Link>\n                    </Text>\n                </View>\n            );\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => {\n                    return item === 'systems_affected'\n                        ? affectedCell\n                        : columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] });\n                })\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableDisabled)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    getFilters, getCveReportFilters,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type, shouldUseHybridSystemFilter }) => {\n    const CVE_REPORT_FILTERS = getCveReportFilters(shouldUseHybridSystemFilter);\n    const FILTERS = getFilters(shouldUseHybridSystemFilter);\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cveFilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'advisory_available', msg: messages.CVEsPDFreportFiltersAdvisoryAvailable, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cveFilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            {filtersBuilder.tags ? '.\\n\\n' : ''}\n            {\n                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +\n                filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''\n            }\n            {\n                filtersBuilder.tags?.values.length > 10 && ' '\n                + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })\n            }\n            {'.\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersDisabled)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersEnabled))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength } from '../../../Helpers/ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    STATUS_OPTIONS,\n    BUSINESS_RISK_OPTIONS,\n    PDF_REPORT_PER_PAGE,\n    impactList,\n    NotAuthorizedNotification\n} from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const chrome = useChrome();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(\n        data,\n        PDF_REPORT_PER_PAGE.otherPages,\n        ({ attributes }) => (attributes.rules.length > 0 || attributes.known_exploit)\n            ? PDF_REPORT_PER_PAGE.labelsHeightMultiplier\n            : 1\n    );\n    const cvesFetch = async () => {\n        let cves;\n        let meta;\n\n        try {\n            ({ data: cves, meta } = await getCveListByAccount({\n                ...params,\n                ...DownloadReport.defaultParams,\n                sort: params.sort || '-cvss_score',\n                affecting: 'true',\n                ...isReportDynamic\n                    ? { advanced_report: 'true' }\n                    : { report: 'true' }\n            }));\n        }\n        catch (error) {\n            clearNotifications();\n\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1),\n                        advisory_available: cve.attributes.advisory_available\n                            ? intl.formatMessage(messages.available)\n                            : intl.formatMessage(messages.notAvailable)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                fallback={null}\n                orientation=\"landscape\"\n                size=\"A4\"\n                type=\"\"\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"names":["Breadcrumb","_ref","breadcrumbs","React","PfBreadcrumb","key","className","map","item","BreadcrumbItem","title","isActive","isLoaded","InsightsLink","to","concat","Skeleton","propTypes","BaseDropdown","dropdownItems","disabled","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","intl","useIntl","Dropdown","_extends","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","formatMessage","messages","actions","PropTypes","Header","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","index","isFilled","length","position","ouiaId","defaultProps","cvesHeader","CVElabels","hasRule","hasExploit","_ref$isSmall","isSmall","View","style","styles","labelsWrapper","_objectSpread","label","width","InsightsLabel","icon","variant","knownExploit","textStyle","smallText","left","undefined","labelStyle","border","borderWidth","borderColor","height","securityRuleLabel","FooterPDF","Text","footer","intlFormatWithBold","knownExploitPDFFooter","securityRulePDFFooter","tablePage","data","page","header","type","_ref$isReportDynamic","isReportDynamic","POSSIBLE_HEADERS","name","value","publishDate","cvssBaseScore","hit","impact","systemsExposed","businessRisk","status","advisory","columnBuilder","_ref2","hitColumns","headerContent","push","cveId","forEach","includes","systemsColumnHeaderName","id","systemsColumnHeaderOSFull","systemsColumnHeaderCveCount","systemsColumnHeaderUpdated","hasRules","cve","rules","cveRows","_toConsumableArray","_ref4","_ref3","attributes","synopsisCell","bodyCell","cveCell","Link","link","src","CVES_PATH","synopsis","known_exploit","publishDateCell","public_date","processDate","affectedCell","systems_affected","systemRows","_ref5","system","display_name","systemNameCell","os","systemCell","opt_out","systemsTableDisabled","cve_count","formatDate","updated","Fragment","Table","withHeader","rows","headerCell","customReportNoItems","firstPagePDF","_reportData$header","meta","filters","reportData","user","shouldUseHybridSystemFilter","CVE_REPORT_FILTERS","getCveReportFilters","FILTERS","getFilters","filtersBuilder","reduce","obj","_item$key","_FILTERS$item$key","_FILTERS$item$key$ite","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","chips","timespan_label","join","isAllChosen","SYSTEM_REPORT_FILTERS","component","CheckboxCustomFilter","items","allChosen","cveFilterStringSegments","msg","CVEsPDFreportFiltersSeverity","lowercase","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersDefinedValue","CVEsPDFreportFiltersAdvisoryAvailable","CVEsPDFreportFiltersOsVersion","systemsFilterStringSegments","systemsPDFreportFiltersSearchTerm","systemsPDFreportFiltersOsVersion","filterStringSegments","i","hasOwnProperty","isFirst","isLast","_filters$find","_Object$values","_Object$values$filter","includedValues","_filtersBuilder$tags","Paragraph","customReportIntroductionText","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","from","toFixed","published","publish_date","customReportTimespanAnytime","_filtersBuilder$filte","toLowerCase","prefix","customReportAnd","tags","tagFilterParagraph","tag","namespace","slice","tagFilterParagraphAndMore","count","multiValue","Object","systemsPDFreportSubHeader","systemsPDFreportFiltersDisabled","systemsPDFreportFiltersEnabled","_filtersBuilder$filte2","CVEsPDFreportSubHeader","total_items","toString","system_count","CVEsPDFreportSubHeaderExploit","knownExploitCount","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","customReportUserNotesGenerated","first_name","last_name","mt16","DownloadCVEsReport","params","_ref$reportData","buttonProps","chrome","useChrome","loading","setLoading","_useState3","_useState4","setSecurityRulesPresent","_useState5","_useState6","setExploit","_useNotification","useNotification","_useNotification2","addNotification","clearNotifications","useEffect","notificationReportDownloadStart","otherPagesPDF","chunkArray","PDF_REPORT_PER_PAGE","otherPages","labelsHeightMultiplier","cvesFetch","_asyncToGenerator","_regeneratorRuntime","_callee","cves","_yield$getCveListByAc","processData","firstPage","_context","prev","next","getCveListByAccount","DownloadReport","defaultParams","sort","affecting","advanced_report","report","sent","t0","NotAuthorizedNotification","autoDismiss","notificationReportDownloadFailureTitle","description","notificationReportDownloadFailureBody","abrupt","auth","getUser","_impactList$cve$attri","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impactList","impactListUnknown","cvss_score","parseFloat","cvss3_score","cvss2_score","advisory_available","available","notAvailable","_reportData$header2","splice","firstPagePDFLength","notificationReportDownloadSuccess","cvePage","stop","apply","arguments","DownloadButton","fallback","orientation","size","fileName","filename","asyncFunction","allPagesHaveTitle","reportName","reportTitle","cvePDFReportName","kebabExportAsPDF"],"sourceRoot":""}