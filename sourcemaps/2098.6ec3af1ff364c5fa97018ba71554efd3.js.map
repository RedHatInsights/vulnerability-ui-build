{"version":3,"file":"js/2098.1644916023117.7e546d82d44f5f714d1c.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/ErrorHandler/ErrorHandler.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Components/SmartComponents/Modals/ColumnManagementModal.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Helpers/TableToolbarHelper.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst ErrorHandler = ({ code }) => {\n    switch (parseInt(code)) {\n        case 403:\n            return <NotAuthorized />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return <ErrorState />;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.oneOf([propTypes.number, propTypes.string])\n};\n\nexport default ErrorHandler;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst useSearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        key: urlParam,\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default useSearchFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    TextContent,\n    Text,\n    TextVariants,\n    DataListItem,\n    DataList,\n    DataListItemRow,\n    DataListCheck,\n    DataListCell,\n    DataListItemCells,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ColumnManagementModal = ({ appliedColumns, applyColumns, isModalOpen, setModalOpen }) => {\n    const [currentColumns, setCurrentColumns] = useState(\n        appliedColumns.map(column => ({ ...column, isShown: column.isShown ?? column.isShownByDefault }))\n    );\n\n    const handleChange = index => {\n        let newColumns = [...currentColumns];\n        let changedColumn = { ...newColumns[index] };\n\n        changedColumn.isShown = !changedColumn.isShown;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n    };\n\n    const selectAll = () => {\n        let newColumns = [...currentColumns];\n        newColumns = newColumns.map(column => ({ ...column, isShown: true }));\n\n        setCurrentColumns(newColumns);\n    };\n\n    const resetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isShown: column.isShownByDefault ?? false })));\n    };\n\n    const handleSave = () => {\n        setModalOpen(false);\n        applyColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(appliedColumns);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.columnManagementModalTitle)}\n            onClose={() => setModalOpen(false)}\n            isOpen={isModalOpen}\n            variant=\"small\"\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>{intl.formatMessage(messages.columnManagementModalDescription)}</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={selectAll} variant=\"link\">\n                                {intl.formatMessage(messages.columnManagementModalSelectAll)}\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={resetToDefault} variant=\"link\">\n                                {intl.formatMessage(messages.columnManagementModalResetToDefault)}\n                            </Button>\n                        </SplitItem>\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    {intl.formatMessage(messages.save)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Table column management\" id=\"table-column-management\" isCompact>\n                {currentColumns.map((column, index) =>\n                    <DataListItem key={column.key}>\n                        <DataListItemRow>\n                            <DataListCheck\n                                checked={column.isShown}\n                                id={'checkbox-' + index}\n                                onChange={() => handleChange(index)}\n                                isDisabled={column.isUnhidable}\n                            />\n                            <DataListItemCells\n                                dataListCells={[\n                                    <DataListCell key={'table-column-management-item' + index}>\n                                        <label htmlFor={'checkbox-' + index}>\n                                            {column.title}\n                                        </label>\n                                    </DataListCell>\n                                ]}\n                            />\n                        </DataListItemRow>\n                    </DataListItem>\n                )}\n            </DataList>\n        </Modal>\n    );\n};\n\nColumnManagementModal.propTypes = {\n    appliedColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    applyColumns: propTypes.func.isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired\n};\n\nexport default ColumnManagementModal;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { intl } from '../Utilities/IntlProvider';\nimport messages from '../Messages';\nimport { NotAuthorizedNotification } from './constants';\n\nclass DownloadReport {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: null\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n\n        this.notifications = {\n            start: {\n                variant: 'info',\n                title: intl.formatMessage(messages.notificationReportDownloadStart)\n            },\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationReportDownloadSuccess)\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            }\n        };\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    };\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    };\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page, showNotification, clearNotification) => {\n        showNotification(this.notifications.start);\n\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = params?.id || null;\n\n        try {\n            let { payload } = await fetchData({\n                ...params.id && { id: params.id },\n                ...params,\n                ...this.defaultParams,\n                data_format: format,\n                report: 'true'\n            });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n\n            clearNotification();\n            showNotification(this.notifications.success);\n        } catch (error) {\n            clearNotification();\n            showNotification(error.status === '403' ? NotAuthorizedNotification : this.notifications.failure);\n\n            throw `${error}`;\n        }\n    };\n}\n\nexport default new DownloadReport();\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'rule_presence') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false'].includes(parameter)\n                    ? object.name = FILTERS.rule_presence.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'rule_presence' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule ? currentFilters.rule.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisory),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        removeFilters(chips, apply);\n        apply({ ...defaultFilters, page: 1 });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'rule_presence') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        if (obj[item.key] === '') {\n            obj[item.key] = undefined;\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n"],"names":["ErrorHandler","code","parseInt","propTypes","urlParam","label","placeholder","search","apply","React","searchValue","setSearchValue","debounce","newValue","undefined","handleSearch","type","conditionalFilterType","intl","key","filterValues","id","onChange","event","value","ColumnManagementModal","appliedColumns","applyColumns","isModalOpen","setModalOpen","useState","map","column","isShown","isShownByDefault","currentColumns","setCurrentColumns","title","messages","onClose","isOpen","variant","description","component","TextVariants","hasGutter","isInline","onClick","newColumns","actions","isCompact","index","checked","changedColumn","handleChange","isDisabled","isUnhidable","dataListCells","htmlFor","isRequired","DownloadReport","filename","page","Date","toISOString","split","params","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","showNotification","clearNotification","notifications","start","data_format","report","payload","response","data","JSON","stringify","downloadFile","success","status","NotAuthorizedNotification","failure","this","page_size","Math","min","Number","MAX_SAFE_INTEGER","replace","autoDismiss","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRuleValues","nameFilter","filter","advisoryFilter","advisory","buildChip","parameter","FILTERS","items","reduce","object","item","name","filteredRule","find","e","buildChips","paramValues","values","push","hasValue","filters","Object","keys","filterChips","array","multiValue","concat","rule_presence","rule","category","chips","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","filteredValues","length","removeFilters","reset","defaultFilters","emptyFilter","obj","remainingValues","some","chip","join","cvss_filter","isFilterInDefaultState","currentParams","filterParams","acc","param","isEqual"],"sourceRoot":""}