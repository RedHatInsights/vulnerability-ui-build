{"version":3,"file":"js/CVEDetailsPage.1649673059617.c167b0cf57aa75832e88.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-down-icon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-up-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/CriticalIcon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/equals-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar InventoryLoadError = function InventoryLoadError(_ref) {\n  var component = _ref.component,\n      props = _objectWithoutProperties(_ref, [\"component\"]);\n\n  useEffect(function () {\n    console.error(\"Unable to load iventory component. Failed to load \".concat(component, \".\"), props);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"Unable to load inventory component\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Failed to load \", component), /*#__PURE__*/React.createElement(\"code\", null, \"More info can be found in browser console output.\"));\n};\n\nInventoryLoadError.propTypes = {\n  component: PropTypes.string\n};\nexport default InventoryLoadError;","import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport InventoryLoadError from './InventoryLoadError';\n\nvar BaseInvTable = function BaseInvTable(props) {\n  var history = useHistory();\n  var store = useStore();\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: props.fallback\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    history: history,\n    store: store,\n    appName: \"inventory\",\n    module: \"./InventoryTable\",\n    scope: \"inventory\",\n    ErrorComponent: /*#__PURE__*/React.createElement(InventoryLoadError, _extends({\n      component: \"InventoryDetailHead\",\n      history: history,\n      store: store\n    }, props)),\n    ref: props.innerRef\n  }, props)));\n};\n\nBaseInvTable.propTypes = {\n  fallback: PropTypes.node,\n  innerRef: PropTypes.object\n};\n/**\n * Inventory sub component.\n *\n * This component shows systems table connected to redux.\n */\n\nvar InvTable = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseInvTable, _extends({\n    innerRef: ref\n  }, props));\n});\nInvTable.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node\n};\nInvTable.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, {\n    className: \"pf-u-p-lg\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  }))\n};\nexport default InvTable;","import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant=\"checkbox\"\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label=\"os-version-filter\"\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","import { createIcon } from '../createIcon';\n\nexport const AngleDoubleDownIconConfig = {\n  name: 'AngleDoubleDownIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M143 256.3L7 120.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0L313 86.3c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.4 9.5-24.6 9.5-34 .1zm34 192l136-136c9.4-9.4 9.4-24.6 0-33.9l-22.6-22.6c-9.4-9.4-24.6-9.4-33.9 0L160 352.1l-96.4-96.4c-9.4-9.4-24.6-9.4-33.9 0L7 278.3c-9.4 9.4-9.4 24.6 0 33.9l136 136c9.4 9.5 24.6 9.5 34 .1z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const AngleDoubleDownIcon = createIcon(AngleDoubleDownIconConfig);\n\nexport default AngleDoubleDownIcon;","import { createIcon } from '../createIcon';\n\nexport const AngleDoubleUpIconConfig = {\n  name: 'AngleDoubleUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M177 255.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 351.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 425.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1zm-34-192L7 199.7c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l96.4-96.4 96.4 96.4c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9l-136-136c-9.2-9.4-24.4-9.4-33.8 0z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const AngleDoubleUpIcon = createIcon(AngleDoubleUpIconConfig);\n\nexport default AngleDoubleUpIcon;","import \"../../InsightsLabel/./critical-icon.css\";\nimport React from 'react';\n\nvar CriticalIcon = function CriticalIcon() {\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"ins-c-critical-icon\",\n    viewbox: \"0 0 10 10\"\n  }, /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"10 10, 10 3, 5 0, 0 3, 0 10, 5 8\"\n  }));\n};\n\nexport default CriticalIcon;","import { createIcon } from '../createIcon';\n\nexport const EqualsIconConfig = {\n  name: 'EqualsIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 304H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32zm0-192H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const EqualsIcon = createIcon(EqualsIconConfig);\n\nexport default EqualsIcon;","import _extends from \"@babel/runtime/helpers/extends\";\nimport \"../../InsightsLabel/./labels.css\";\nimport AngleDoubleDownIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-down-icon\";\nimport AngleDoubleUpIcon from \"@patternfly/react-icons/dist/esm/icons/angle-double-up-icon\";\nimport CriticalIcon from './CriticalIcon';\nimport EqualsIcon from \"@patternfly/react-icons/dist/esm/icons/equals-icon\";\nimport { Label } from \"@patternfly/react-core/dist/esm/components/Label/Label.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nvar VALUE_TO_STATE = {\n  1: {\n    icon: /*#__PURE__*/React.createElement(AngleDoubleDownIcon, null),\n    text: 'Low'\n  },\n  2: {\n    icon: /*#__PURE__*/React.createElement(EqualsIcon, null),\n    text: 'Moderate'\n  },\n  3: {\n    icon: /*#__PURE__*/React.createElement(AngleDoubleUpIcon, null),\n    text: 'Important'\n  },\n  4: {\n    icon: /*#__PURE__*/React.createElement(CriticalIcon, null),\n    text: 'Critical'\n  }\n};\n\nvar InsightsLabel = function InsightsLabel(_ref) {\n  var value = _ref.value,\n      text = _ref.text,\n      hideIcon = _ref.hideIcon,\n      className = _ref.className,\n      rest = _ref.rest;\n  return /*#__PURE__*/React.createElement(Label, _extends({}, rest, {\n    className: classNames(className, \"ins-c-label-\".concat(value)),\n    icon: !hideIcon && VALUE_TO_STATE[value].icon\n  }), text || VALUE_TO_STATE[value].text);\n};\n\nInsightsLabel.propTypes = {\n  value: PropTypes.number,\n  text: PropTypes.node,\n  hideIcon: PropTypes.bool,\n  className: PropTypes.string,\n  rest: PropTypes.object\n};\nInsightsLabel.defaultProps = {\n  value: 1\n};\nexport default InsightsLabel;","import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemsIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRowsRawData.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRowsRawData),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemsIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRowsRawData.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_ABSENCE_OPTIONS\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded)\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                selectedRowsRawData={selectedRowsRawData}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n                                <ColumnManagementModal\n                                    appliedColumns={columns}\n                                    applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={setColumnModalOpen}\n                                />\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] || false\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id'),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["InventoryLoadError","_ref","component","props","useEffect","console","error","concat","propTypes","BaseInvTable","history","store","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","InvTable","defaultProps","className","size","renderer","marked","link","this","arguments","replace","CSAwRuleSummary","text","truncate","intl","length","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","filterValue","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","filterValues","children","variant","onToggle","onSelect","_","changedLabel","newValue","changedValue","version","value","includes","splice","indexOf","rhel_version","join","page","selections","map","item","placeholderText","loadingVariant","onClick","style","maxHeight","overflow","slice","option","index","isDisabled","disabled","key","description","currentFilter","dynamicFilters","config","currentValue","rule_presence","rule","filterBySecurityRule","values","isDynamic","undefined","dropdownItems","items","RULE_PRESENCE_OPTIONS","unionWith","isEqual","onChange","event","status_id","filterByStatus","filter","STATUS_OPTIONS","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","content","color","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","grow","default","WithLoader","isLoading","LoaderType","height","width","TextContent","textAlign","Text","TextVariants","V3names","AV","name","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","val","cvssVersion","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","TableVariant","gridBreakPoint","cells","rows","Object","entries","Label","isLarge","substring","SnippetWithHeaderAndPopover","title","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","keys","toString","BusinessRiskPopoverContent","Button","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","createIcon","svgPath","yOffset","xOffset","viewbox","points","VALUE_TO_STATE","icon","InsightsLabel","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","cve","_i","CVES_PATH","reduce","prev","KnownExploitSummary","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","selectedRowsRawData","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","downloadReport","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemsIdsByCve","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","securityRuleFilter","RULE_ABSENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","useSelector","entities","shallowEqual","total","loaded","CVEDetailsPageStore","columns","params","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","Spinner","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","current","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","isActive","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","attributes","Main","useStatusSelect","initialValue","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","handleClose","Boolean","onClose","then","ReadOnlyNotification","NotAuthorizedNotification","initialState","tagsLoaded","allTagsLoaded","invConfig","prevLoadedRows","modifyInventory","state","action","some","patchAccess","selected","unionBy","results","newState","ActionTypes"],"sourceRoot":""}