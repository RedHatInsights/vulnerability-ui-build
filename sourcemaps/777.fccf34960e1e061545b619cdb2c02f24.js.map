{"version":3,"file":"js/777.a2be8f6c82b74d36b218.js","mappings":"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","sources":["webpack:///./src/Helpers/APIHelper.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js"],"sourcesContent":["let BASE_ROUTE = '/api/vulnerability/v1';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\nconst defaultParams = [\n    'filter',\n    'limit',\n    'offset',\n    'page',\n    'page_size',\n    'sort'\n];\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\n/**\n * /cves\n * /cves/ids\n */\nlet cveParams = [\n    'cvss_from',\n    'cvss_to',\n    'public_from',\n    'public_to',\n    'impact',\n    'data_format',\n    'business_risk_id',\n    'status_id',\n    'rule_presence',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'known_exploit',\n    'affecting',\n    'rhel_version'\n];\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...cveParams\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...cveParams\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\n/**\n * /cve/ID/affected_systems\n * /cve/ID/affected_systems/ids\n */\nlet systemsByCVEparams = [\n    'status_id',\n    'data_format',\n    'uuid',\n    'rule_key',\n    'rule_presence',\n    'rule',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'show_advisories',\n    'advisory',\n    'rhel_version',\n    'first_reported_from',\n    'first_reported_to',\n    'advisory_available',\n    'remediation'\n];\n\nexport function getAffectedSystemsByCVE({ id, ...apiProps }) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsByCVEparams\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(id, ...parameterArray);\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve({ id, ...apiProps }) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsByCVEparams\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(id, ...parameterArray);\n    return result;\n}\n\n/**\n * /system/ID/cves\n * /system/ID/cves/ids\n */\nlet cveBySystemParams = [\n    'cvss_from',\n    'cvss_to',\n    'public_from',\n    'public_to',\n    'impact',\n    'status_id',\n    'data_format',\n    'business_risk_id',\n    'rule_presence',\n    'show_advisories',\n    'advisory',\n    'rule_key',\n    'known_exploit',\n    'first_reported_from',\n    'first_reported_to',\n    'advisory_available',\n    'remediation'\n];\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        ...defaultParams,\n        ...cveBySystemParams\n    ];\n    apiProps.show_advisories = true;\n\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        ...defaultParams,\n        ...cveBySystemParams\n    ];\n\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n\n/**\n * /systems/ids\n * /systems\n */\nlet systemsParams = [\n    'data_format',\n    'stale',\n    'uuid',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'excluded',\n    'rhel_version'\n];\n\nexport function getSystems(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsParams\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsParams\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n","/* eslint-disable react/jsx-handler-names */\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport messages from '../locales/en.json';\n\nconst Vulnerabilities = () => {\n    return (\n        <div className=\"vuln-root\">\n            <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages}>\n                <Provider store={ReducerRegistry.getStore()}>\n                    <Router basename={getBaseName(window.location.pathname)}>\n                        <App />\n                    </Router>\n                </Provider>\n            </IntlProvider>\n        </div>\n    );\n};\n\nexport default Vulnerabilities;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Vulnerabilities from './AppEntry';\n\nReactDOM.render(\n    <Vulnerabilities />,\n    document.getElementById('root')\n);\n"],"names":["api","GitApi","undefined","instance","defaultParams","getCveDetails","synopsis","getSystemDetails","system","setSystemCveStatus","params","setStatus","optOutSystems","systems","optOut","data","opt_out","inventory_id","Array","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","cveParams","getCveListByAccount","apiProps","parameterNames","parameterArray","constructParameters","getCveList","getCveIdsList","systemsByCVEparams","getAffectedSystemsByCVE","id","getAffectedSystemsByCve","getAffectedSystemsIdsByCve","cveBySystemParams","getCveListBySystem","show_advisories","Object","keys","forEach","key","map","item","err","status","errors","getCveIdsBySystem","systemsParams","getSystems","getSystemsList","getSystemsIds","className","locale","navigator","language","slice","messages","store","ReducerRegistry","basename","getBaseName","window","location","pathname","App","ReactDOM","document","getElementById"],"sourceRoot":""}