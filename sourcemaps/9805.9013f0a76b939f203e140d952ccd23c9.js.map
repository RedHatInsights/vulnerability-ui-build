{"version":3,"file":"js/9805.14fd3217b9987ac34876.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Snippets/SnippetWithPopover.js","webpack:///./src/Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell.js","webpack:///./src/Helpers/VulnerabilityHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/map.js"],"sourcesContent":["\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterBusinessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        key: 'business_risk',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CvssCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst useCvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        key: 'cvss_score',\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CvssCustomFilter\n                key=\"cvss_filter\"\n                filterId=\"cvss_filter\"\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className=\"pf-u-mb-0\"\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default useCvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSeverity),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        key: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { KNOWN_EXPLOIT_FILTER_OPTIONS  } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst knownExploitFilter = (apply, currentFilter = {}) => {\n    let { known_exploit: currentValue } = currentFilter;\n\n    const filterByKnownExploit = values => {\n        apply({\n            known_exploit: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterKnownExploit),\n        type: conditionalFilterType.checkbox,\n        key: 'known_exploit',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByKnownExploit(value);\n            },\n            items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default knownExploitFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterPublishDate),\n        type: conditionalFilterType.radio,\n        key: 'publish_date',\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst PaginationWrapper = ({ apply, meta, variant }) => {\n    const { page, total_items: totalItems, page_size: pageSize } = meta;\n\n    const handleChangePage = (_event, pageNumber) => apply({ page: pageNumber });\n    const handleSetPageSize = (_event, perPage) => apply({ page_size: perPage, page: 1 });\n\n    return (\n        <Pagination\n            page={page || 1}\n            itemCount={totalItems || 0}\n            perPage={pageSize || DEFAULT_PAGE_SIZE}\n            onSetPage={handleChangePage}\n            onPerPageSelect={handleSetPageSize}\n            variant={PaginationVariant[variant]}\n            ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n            isDisabled={!totalItems}\n        />\n    );\n};\n\nPaginationWrapper.defaultProps = {\n    variant: 'bottom'\n};\n\nPaginationWrapper.propTypes = {\n    apply: propTypes.func.isRequired,\n    meta: propTypes.object.isRequired,\n    variant: propTypes.string\n};\n\nexport default PaginationWrapper;\n","import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport Label from './Label';\n\nconst SnippetWithPopover = ({ type, row }) => {\n    const {\n        business_risk_text: businessRiskJustification,\n        cve_status_id: cveStatusId,\n        status_text: statusJustification,\n        status_id: systemStatusId\n    } = row.attributes;\n    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;\n\n    const BusinessRiskPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {businessRiskJustification || '--'}\n        </StackItem>\n    );\n\n    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());\n\n    const StatusPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.cveSystemPairStatus} />\n            </Label>\n\n            {systemStatusOption?.label || '--'}\n\n            <Label className=\"pf-u-mt-sm\">\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {statusJustification || '--'}\n        </StackItem>\n    );\n\n    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());\n\n    const popoverContent = (\n        <Stack>\n            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}\n            <StackItem>\n                <TextContent>\n                    <hr className=\"splitter pf-u-mb-md pf-u-mt-md\" />\n                </TextContent>\n                <Label className=\"pf-u-mt-sm\">\n                    <FormattedMessage {...messages.cveStatus} />\n                </Label>\n            </StackItem>\n            <StackItem>\n                {statusOption?.label || '--'}\n            </StackItem>\n        </Stack>\n    );\n\n    const buttonStyle = {\n        wordBreak: 'normal',\n        color: hasDefaultStatus ? 'black' : '',\n        whiteSpace: 'unset',\n        maxWidth: '131px',\n        textAlign: 'left',\n        padding: '0px'\n    };\n\n    return (\n        <Popover bodyContent={popoverContent}\n            id=\"popover\"\n            aria-label=\"Business risk popover\"\n            position=\"left\"\n            appendTo={document.querySelector('.vulnerability')}\n        >\n\n            <Button\n                variant=\"link\"\n                isSmall\n                isDisabled={hasDefaultStatus}\n                style={buttonStyle}>\n                {cveStatusId !== systemStatusId ? (\n                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                        <ServerAltIcon className=\"pf-u-m-l\" />\n                    </Tooltip>\n                ) : ('')}\n                {' '}{systemStatusOption?.label || '--'}\n            </Button>\n        </Popover>\n    );\n};\n\nSnippetWithPopover.propTypes = {\n    type: propTypes.number,\n    row: propTypes.object\n};\n\nexport default SnippetWithPopover;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport Label from '../Snippets/Label';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from '../CSAwRuleBox/CSAwRuleSummary';\nimport messages from '../../../Messages';\nimport { handleCVELink } from '../../../Helpers/VulnerabilityHelper';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVETableExpandedCell = ({ description, rules, cve, linkToCustomerPortal }) => {\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <TextContent className=\"expanded-cell\">\n            {\n                hasDescription ? (\n                    <Fragment>\n                        <Label className=\"pf-u-mb-sm\"><FormattedMessage {...messages.description} /></Label>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </Fragment>\n                ) : <NoDescriptionAvailable/>\n            }\n            <Stack hasGutter>\n                {rules && rules.map((rule, i) => (\n                    rule && (\n                        <div key={i} className=\"rule\">\n                            <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            <Label isInline>\n                                <span className=\"rule-name\">{rule.description || rule.rule_id}</span>\n                            </Label>\n                            <CSAwRuleSummary\n                                text={rule.summary}\n                                truncate={false}\n                                className=\"pf-u-mt-xs\"\n                            />\n                        </div>\n                    )\n                ))}\n                <StackItem className=\"rule-link\">\n                    {handleCVELink(cve, intl.formatMessage(messages.viewMoreAboutThisCve), null, linkToCustomerPortal, true)}\n                </StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n};\n\nCVETableExpandedCell.propTypes = {\n    description: PropTypes.string,\n    rules: PropTypes.array,\n    cve: PropTypes.string,\n    linkToCustomerPortal: PropTypes.bool\n};\n\nexport default CVETableExpandedCell;\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH, CUSTOMER_PORTAL_CVE_PATH } from './constants';\nimport SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../Messages';\nimport CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';\nimport RemediationColumn from '../Components/PresentationalComponents/TableColumns/RemediationColumn';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nexport function createCveListByAccount(cveList, columns) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        let payload = cveList.payload;\n        let { data, meta, errors } = payload;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    <Link\n                        to={'/cves/' + row.attributes.synopsis}\n                        className=\"pf-u-mr-sm cve-synopsis\"\n                    >\n                        {row.attributes.synopsis}\n                    </Link>\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={row.attributes?.rules?.length > 0}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            systems_affected: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    {row.attributes.systems_status_divergent > 0 ? (\n                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>\n                            <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                        </Tooltip>\n                    ) : (\n                        ''\n                    )}{' '}\n                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                </span>\n            )\n        });\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    rules: row.attributes.rules,\n                    exposed_systems_count: row.attributes.systems_affected,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={row.attributes.rules}\n                                    cve={row.attributes.synopsis}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta: { ...meta, cvesCount }, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList, columns, linkToCustomerPortal) {\n    let isLoading = cveList?.isLoading;\n\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        const cvesCount = data?.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, undefined,\n                        { className: 'pf-u-mr-sm', style: { display: 'block' } }, linkToCustomerPortal)\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={!!row.attributes.rule}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            advisory: (\n                <span key=\"advisory\">\n                    <AdvisoryColumn\n                        cve={row?.id}\n                        advisoriesList={row?.attributes?.advisories_list}\n                        linkToCustomerPortal={linkToCustomerPortal}\n                    />\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    <SnippetWithPopover row={row} type={1} />\n                </span>\n            ),\n            remediation: (\n                <span key=\"remediation-column\">\n                    <RemediationColumn fixable={row.attributes.remediation} />\n                </span>\n            )\n        });\n\n        let rows =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    rules: row.attributes.rule,\n                    cve_status_id: row.attributes.cve_status_id,\n                    status_justification: row.attributes.status_text,\n                    cve_status_justification: row.attributes.cve_status_text,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={[row.attributes.rule]}\n                                    cve={row.attributes.synopsis}\n                                    linkToCustomerPortal={linkToCustomerPortal}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n\n        return {\n            data: rows,\n            meta: { ...meta, cvesCount },\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\n/**\n * Handle CVE link\n * inside vulnerability app use Link route\n * otherwise, create a link to access the cve page (ex, inventory tab)\n * @param {String} synopsis cve ID\n * @param {String} body link text\n * @return {HTMLElement} a href link\n */\nexport function handleCVELink(synopsis, body, linkProps, linkToCustomerPortal, showIcon) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return <Link to={'/cves/' + synopsis} {...linkProps}>{body || synopsis} {showIcon && <ExternalLinkAltIcon />}</Link>;\n    } else {\n        return <a\n            href={`${linkToCustomerPortal ? CUSTOMER_PORTAL_CVE_PATH : CVES_PATH}/${synopsis}`}\n            {...linkProps}\n        >\n            {body || synopsis} {showIcon && <ExternalLinkAltIcon />}\n        </a>;\n    }\n}\n","import unionBy from 'lodash/unionBy';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, rawItems, fetchResource, multiRow = false }) => {\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        if (rawItems) {\n            const collectedItems = unionBy(rawItems.payload.data, selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        } else {\n            const collectedItems = unionBy(data.filter(item => item.id), selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        }\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                selectorHandler(true, response);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n"],"names":["apply","currentValue","arguments","length","undefined","business_risk_id","label","intl","formatMessage","messages","filterBusinessRisk","type","conditionalFilterType","checkbox","urlParam","key","filterValues","onChange","event","value","values","filter","join","page","items","BUSINESS_RISK_OPTIONS","map","item","split","currentFilter","_React$useState","React","_React$useState2","_slicedToArray","searchValue","setSearchValue","_React$useState3","debounce","_ref","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","cvssBaseScore","custom","children","CvssCustomFilter","filterId","filterData","setFilterData","className","selectProps","placeholderText","searchFilterCvssRange","impact","filterSeverity","IMPACT_OPTIONS","hasIcon","SecurityIcon","color","iconColor","known_exploit","filterKnownExploit","KNOWN_EXPLOIT_FILTER_OPTIONS","publish_date","filterPublishDate","radio","filterByPublishDate","PUBLIC_DATE_OPTIONS","PaginationWrapper","meta","variant","totalItems","total_items","pageSize","page_size","Pagination","itemCount","perPage","DEFAULT_PAGE_SIZE","onSetPage","_event","pageNumber","onPerPageSelect","PaginationVariant","ouiaId","concat","isDisabled","defaultProps","propTypes","isRequired","SnippetWithPopover","_row$attributes","row","attributes","businessRiskJustification","business_risk_text","cveStatusId","cve_status_id","statusJustification","status_text","systemStatusId","status_id","hasDefaultStatus","BusinessRiskPopoverContent","StackItem","Label","FormattedMessage","justificationNote","systemStatusOption","STATUS_OPTIONS","find","option","toString","StatusPopoverContent","cveSystemPairStatus","statusOption","popoverContent","Stack","TextContent","cveStatus","buttonStyle","wordBreak","whiteSpace","maxWidth","textAlign","padding","Popover","bodyContent","id","position","appendTo","document","querySelector","Button","isSmall","style","Tooltip","content","onlyThisSystemCvePair","ServerAltIcon","CVETableExpandedCell","description","rules","cve","linkToCustomerPortal","hasDescription","Fragment","Text","component","TextVariants","p","NoDescriptionAvailable","hasGutter","rule","i","CSAwLabel","isInline","rule_id","CSAwRuleSummary","text","summary","truncate","handleCVELink","viewMoreAboutThisCve","PropTypes","createCveListByAccount","cveList","columns","isLoading","payload","data","errors","cvesCount","columnKeys","reduce","acc","curr","_curr$isShown","isShown","isShownByDefault","cellMapper","_row$attributes$rules","synopsis","Link","GroupedCVELabels","hasExploit","hasRule","isCompact","public_date","processDate","Shield","hasLabel","cvss_score","parseCvssScore","cvss2_score","cvss3_score","systems_affected","business_risk","status","systems_status_divergent","createCveListByAccountTooltip","ExclamationTriangleIcon","_flatMap","index","business_risk_justification","status_justification","exposed_systems_count","cells","columnKey","title","isOpen","selected","fullWidth","parent","_objectSpread","createCveListBySystem","systemId","_cveList$payload","_curr$isShown2","_row$attributes2","display","advisory","AdvisoryColumn","advisoriesList","advisories_list","remediation","RemediationColumn","fixable","cve_status_justification","cve_status_text","body","linkProps","showIcon","location","href","indexOf","_extends","ExternalLinkAltIcon","CUSTOMER_PORTAL_CVE_PATH","CVES_PATH","selectedItems","selectorHandler","rawItems","fetchResource","_ref$multiRow","multiRow","selectedItemsArray","Array","selectedItemsCount","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","then","_ref3","response","handleOnCheckboxChange","selectNone","onClick","selectPage","count","collectedItems","unionBy","selectAll","baseFlatten","module","exports","collection","iteratee","arrayMap","baseIteratee","baseMap"],"sourceRoot":""}