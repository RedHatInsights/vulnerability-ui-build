{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"names":["CVEsTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","canSelectAll","cells","heightAuto","props","colSpan","title","filter","item","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","affecting","filterByAffecting","values","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","params","isAllExpanded","selectedRowsRawData","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","attributes","business_risk_id","business_risk_text","business_risk_justification","isDisabled","showStatusModal","exposed_systems_count","justification","status_justification","status_id","PrimaryToolbar","pagination","itemCount","total_items","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","cveList","useSelector","CVEsStore","parameters","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","parseInt","status","Provider","format","DownloadReport","cveNames","selectCve","cvesList","BusinessRiskModal","updateRef","expandCve","Stack","StackItem","VULNERABILITIES_HEADER","Header","showBreadcrumb","Main"],"mappings":"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","file":"js/LandingPage.96b97213df47672f8670.js","sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        ouiaId={'cves-table'}\n                        isStickyHeader\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={7} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { context } = props;\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                id,\n                business_risk_id: attributes.business_risk_id,\n                business_risk_text: attributes.business_risk_justification\n            }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                id,\n                exposed_systems_count: attributes.exposed_systems_count,\n                justification: attributes.status_justification,\n                status_id: attributes.status_id\n            }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount || cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: props.intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n\n    const selectedRowsRawData = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedRowsRawData\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && setUrlParam({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    selectedRowsRawData,\n                    params: parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={VULNERABILITIES_HEADER} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return <ErrorHandler code={parseInt(cves.errors.status)}/>;\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    return (\n        <Fragment>\n            <Header showBreadcrumb={false} />\n            <Main>\n                <CVEs/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"sourceRoot":""}