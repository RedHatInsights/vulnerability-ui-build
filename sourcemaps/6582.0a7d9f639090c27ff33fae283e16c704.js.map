{"version":3,"file":"js/6582.9cd571e9cb9fa2edffa2.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\nvar react_table_1 = require(\"@patternfly/react-table\");\nvar Skeleton_1 = require(\"../Skeleton\");\nvar classnames_1 = __importDefault(require(\"classnames\"));\nrequire(\"./SkeletonTable.css\");\nvar SkeletonTable = function (_a) {\n    var _b = _a.canSelectAll, canSelectAll = _b === void 0 ? false : _b, _c = _a.isSelectable, isSelectable = _c === void 0 ? false : _c, sortBy = _a.sortBy, variant = _a.variant, _d = _a.isDark, isDark = _d === void 0 ? false : _d, _e = _a.colSize, colSize = _e === void 0 ? 0 : _e, columns = _a.columns, _f = _a.paddingColumnSize, paddingColumnSize = _f === void 0 ? 0 : _f, _g = _a.hasRadio, hasRadio = _g === void 0 ? false : _g, _h = _a.rowSize, rowSize = _h === void 0 ? 0 : _h;\n    var newArray = function (size) { return __spreadArray([], Array(size), true); };\n    var createColumns = function () {\n        return __spreadArray([], Array(colSize), true).map(function () { return ({ title: (0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.sm }) }); });\n    };\n    var getColumns = function () {\n        return newArray(paddingColumnSize)\n            .map(function () { return ''; })\n            .concat(columns || createColumns());\n    };\n    var createRows = function () {\n        var numberOfCols = columns ? columns.length : colSize;\n        return newArray(rowSize).map(function () { return ({\n            disableSelection: true,\n            cells: newArray(paddingColumnSize)\n                .map(function () { return ''; })\n                .concat(newArray(numberOfCols).map(function () { return ({ title: (0, jsx_runtime_1.jsx)(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.md }) }); })),\n        }); });\n    };\n    var selectVariant = function () {\n        return hasRadio ? (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.radio) || 'radio' : (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.checkbox) || 'checkbox';\n    };\n    return ((0, jsx_runtime_1.jsxs)(react_table_1.Table, __assign({ className: (0, classnames_1.default)({\n            'ins-c-skeleton-table__dark': isDark,\n        }), cells: getColumns(), rows: createRows(), sortBy: sortBy, \"aria-label\": \"Loading\", onSelect: isSelectable ? function () { return undefined; } : undefined, selectVariant: isSelectable ? selectVariant() : undefined, canSelectAll: canSelectAll, variant: variant }, { children: [(0, jsx_runtime_1.jsx)(react_table_1.TableHeader, {}), (0, jsx_runtime_1.jsx)(react_table_1.TableBody, {})] })));\n};\nexports.default = SkeletonTable;\n//# sourceMappingURL=SkeletonTable.js.map","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\n// Workaround: Using button instead of DropdownItem as it causes error on Dropdown open\n// in the current version of Patternfly\nexport const kebabItemDownloadPDF = (downloadReport, props = {}) => (\n    <li key=\"pdf\">\n        <button\n            id=\"kebab-item-download-pdf\"\n            className=\"pf-c-dropdown__menu-item\"\n            onClick={() => downloadReport('pdf')}\n            {...props}\n        >\n            <FormattedMessage {...messages.kebabExportAsPDF} />\n        </button>\n    </li>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, props = {}) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds, props = {}) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, size, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton\n                    size={size ?? SkeletonSize.lg}\n                    {...props}\n                    style={{ display: 'inline-block', ...props.style }}\n                />;\n            default:\n                return <Skeleton size={size ?? SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node,\n    size: propTypes.string\n};\n\nexport default WithLoader;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool.isRequired\n};\n\nexport default injectIntl(CveStatusModal);\n"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArray","to","from","pack","ar","l","Array","slice","concat","__importDefault","mod","__esModule","defineProperty","exports","value","jsx_runtime_1","react_table_1","Skeleton_1","classnames_1","_a","numberOfCols","_b","canSelectAll","_c","isSelectable","sortBy","variant","_d","isDark","_e","colSize","columns","_f","paddingColumnSize","_g","hasRadio","_h","rowSize","newArray","size","jsxs","Table","className","default","cells","map","title","jsx","Skeleton","SkeletonSize","sm","rows","disableSelection","md","onSelect","undefined","selectVariant","RowSelectVariant","radio","checkbox","children","TableHeader","TableBody","kebabItemDownloadPDF","downloadReport","props","React","key","_extends","id","onClick","FormattedMessage","messages","kebabExportAsPDF","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","DropdownItem","component","kebabEditBusinessRisk","kebabItemEditStatus","showStatusModal","inventoryIds","kebabEditStatus","LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","_ref","isLoading","_objectWithoutProperties","_excluded","Spinner","centered","SkeletonTable","TableVariant","compact","shape","lg","style","_objectSpread","display","propTypes","keys","BusinessRiskModal","updateRef","intl","_useState","useState","cveList","_slicedToArray","_useState3","_useState4","businessRiskId","setBusinessRiskId","_useState5","_useState6","label","setLabel","getDefaultLabel","useCallback","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","currentTarget","onSuccessNotification","formatMessage","notificationBusinessRiskUpdateSuccessful","count","onFailureNotification","autoDismiss","notificationBusinessRiskUpdateFailureTitle","description","notificationBusinessRiskUpdateFailureBody","BaseModal","items","onSave","setBusinessRisk","parseInt","cve","item","business_risk_text","then","error","businessRiskModalTitle","ouiaId","Stack","hasGutter","StackItem","businessRiskModalInfo","Form","FormGroup","businessRiskLabel","fieldId","BUSINESS_RISK_OPTIONS","Radio","isChecked","onChange","name","justificationLabel","TextArea","type","resizeOrientation","minHeight","injectIntl","CveStatusModal","canEditPairStatus","_useStatusSelect","useStatusSelect","every","status_id","StatusSelect","statusId","setSelectProps","setProps","_useJustificationInpu","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","filter","exposed_systems_count","notificationStatusUpdateSuccessful","notificationStatusUpdateFailureTitle","notificationStatusUpdateFailureBody","cveStatusModalTitle","Promise","all","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","_len","chunks","_key","InfoCircleIcon","fontSize","color","cveStatusModalInfo","Tooltip","content","cveStatusModalInfoTooltip","OutlinedQuestionCircleIcon","Split","SplitItem","Checkbox","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","verticalAlign","isRequired"],"sourceRoot":""}