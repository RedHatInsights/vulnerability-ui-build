{"version":3,"file":"js/998.78b9d61baf58f3a7a3d7.js","mappings":"02BAIO,IAAMA,EAAe,CACxBC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,KAAM,CACFC,KAAM,EACNC,UAAW,IAEfC,aAAc,GACdC,eAAgB,GAChBC,oBAAqB,GACrBC,kBAAmB,GAGvB,SAASC,EAAgBV,EAASW,EAAOC,GACrC,IAAIC,EAAWb,EAAQc,MAAK,kBAAqB,aAArB,EAAGC,OAa/B,OAXKJ,EAAML,eACPK,EAAML,aAAe,IAGpBK,EAAMK,SACPL,EAAMK,OAAS,CACXD,IAAK,UACLE,UAAW,SAIfN,EAAMO,SACeP,EAAMV,KAAKkB,MAAK,qBAAGC,gBAEjBP,IACnBA,EAASQ,SAAU,GAGvB,OACOV,GADP,IAEIX,QAAAA,EACAC,KAAMU,EAAMV,KAAKqB,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBC,SAAUb,EAAML,aAAaiB,EAAIE,MAAO,OAE5ClB,eAAgBmB,GAAAA,CAAQd,EAAOe,QAAQC,QAASjB,EAAMJ,eAAgB,MACtEJ,KAAMS,EAAOe,QAAQxB,QAItBQ,EAGJ,IAAMkB,EAA2B,SAAC7B,GAAD,OAAa,WAAkC,IAAjCW,EAAiC,uDAAzBZ,EAAca,EAAW,uCACnF,OAAQA,EAAOkB,MACX,IAAK,0BACD,OAAOpB,EAAgBV,EAASW,EAAOC,GAC3C,KAAKmB,EAAAA,GACD,OAAOC,EAAAA,EAAAA,IAAWrB,EAAOC,GAC7B,IAAK,aACD,cACOD,GADP,IAEIV,KAAMU,EAAMV,KAAKqB,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBU,OAAQV,EAAIE,KAAOb,EAAOe,QAAQF,GAAKb,EAAOe,QAAQM,OAASV,EAAIU,cAG/E,IAAK,wBACD,OAAOlC,EACX,QACI,OAAOY","sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    meta: {\n        page: 1,\n        page_size: 20\n    },\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] || false\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id'),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(state, action);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n"],"names":["initialState","columns","rows","entities","meta","page","page_size","selectedRows","prevLoadedRows","selectedRowsRawData","selectedRowsCount","modifyInventory","state","action","advisory","find","key","sortBy","direction","loaded","some","patchAccess","isShown","map","row","selected","id","unionBy","payload","results","inventoryEntitiesReducer","type","ActionTypes","selectRows","isOpen"],"sourceRoot":""}