{"version":3,"file":"js/Reports.1648637747330.77467e2f012d85a33cca.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/file-alt-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/helper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/DateFormat.js","webpack:///./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack:///./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./node_modules/lodash/_asciiSize.js","webpack:///./node_modules/lodash/_asciiToArray.js","webpack:///./node_modules/lodash/_baseSlice.js","webpack:///./node_modules/lodash/_castSlice.js","webpack:///./node_modules/lodash/_hasUnicode.js","webpack:///./node_modules/lodash/_stringSize.js","webpack:///./node_modules/lodash/_stringToArray.js","webpack:///./node_modules/lodash/_unicodeSize.js","webpack:///./node_modules/lodash/_unicodeToArray.js","webpack:///./node_modules/lodash/truncate.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const FileAltIconConfig = {\n  name: 'FileAltIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 236c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-64c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-72v8c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm96-114.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const FileAltIcon = createIcon(FileAltIconConfig);\n\nexport default FileAltIcon;","import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport { Tooltip } from \"@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js\";\nvar second = 1000;\nvar minute = second * 60;\nvar hour = minute * 60;\nvar day = hour * 24;\nvar month = day * 30; // let's count that every month has 30 days\n\nvar year = day * 365;\n\nvar formatTime = function formatTime(number, unit) {\n  return \"\".concat(number, \" \").concat(number > 1 ? \"\".concat(unit, \"s\") : unit, \" ago\");\n};\n\nvar relativeTimeTable = [{\n  rightBound: Infinity,\n  description: function description(date) {\n    return formatTime(Math.round(date / year), 'year');\n  }\n}, {\n  rightBound: year,\n  description: function description(date) {\n    return formatTime(Math.round(date / month), 'month');\n  }\n}, {\n  rightBound: month,\n  description: function description(date) {\n    return formatTime(Math.round(date / day), 'day');\n  }\n}, {\n  rightBound: day,\n  description: function description(date) {\n    return formatTime(Math.round(date / hour), 'hour');\n  }\n}, {\n  rightBound: hour,\n  description: function description(date) {\n    return formatTime(Math.round(date / minute), 'minute');\n  }\n}, {\n  rightBound: minute,\n  description: function description() {\n    return 'Just now';\n  }\n}];\n\nvar _exact = function exact(value) {\n  return value.toUTCString().split(',')[1].slice(0, -7).trim();\n};\n\nexport var addTooltip = function addTooltip(date, element, tooltipProps) {\n  var extraTitle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  return /*#__PURE__*/React.createElement(Tooltip, _extends({}, tooltipProps, {\n    content: /*#__PURE__*/React.createElement(\"div\", null, extraTitle, date)\n  }), element);\n};\nexport var dateStringByType = function dateStringByType(type) {\n  return {\n    exact: function exact(date) {\n      return _exact(date) + ' UTC';\n    },\n    onlyDate: function onlyDate(date) {\n      return _exact(date).slice(0, -6);\n    },\n    relative: function relative(date) {\n      return relativeTimeTable.reduce(function (acc, i) {\n        return i.rightBound > Date.now() - date ? i.description(Date.now() - date) : acc;\n      }, _exact(date));\n    },\n    invalid: function invalid() {\n      return 'Invalid date';\n    }\n  }[type];\n};\nexport var dateByType = function dateByType(type, tooltipProps, extraTitle) {\n  return {\n    exact: function exact(date) {\n      return dateStringByType(type)(date);\n    },\n    onlyDate: function onlyDate(date) {\n      return dateStringByType(type)(date);\n    },\n    relative: function relative(date) {\n      return addTooltip(dateStringByType('exact')(date), /*#__PURE__*/React.createElement(\"span\", null, dateStringByType(type)(date)), tooltipProps, extraTitle);\n    },\n    invalid: function invalid() {\n      return 'Invalid date';\n    }\n  }[type];\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { dateByType } from './helper';\n/**\n * A component that formats date to a unified CRC format.\n * Relative date format adds a tooltip with a full date string.\n */\n\nexport default function DateFormat(_ref) {\n  var date = _ref.date,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'relative' : _ref$type,\n      extraTitle = _ref.extraTitle,\n      _ref$tooltipProps = _ref.tooltipProps,\n      tooltipProps = _ref$tooltipProps === void 0 ? {} : _ref$tooltipProps;\n  var dateObj = date instanceof Date ? date : new Date(date); // Prevent treating null as valid. (new Date(null) == new Date(0) returns 1970 Jan 1)\n\n  var invalid = date === undefined || date === null || dateObj.toString() === 'Invalid Date';\n  var dateType = invalid ? 'invalid' : type;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dateByType(dateType, tooltipProps, extraTitle)(dateObj));\n}\nDateFormat.propTypes = {\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string, PropTypes.number]),\n\n  /**\n   * Output format of the date\n   */\n  type: PropTypes.oneOf(['exact', 'onlyDate', 'relative']),\n\n  /**\n   * Additional text in the tooltip\n   */\n  extraTitle: PropTypes.node,\n\n  /**\n   * <a target=\"_blank\" href=\"https://www.patternfly.org/v4/components/tooltip/#props\">PF Tooltip props object</a>\n   */\n  tooltipProps: PropTypes.object\n};","import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text  } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport CVElabels from '../Common/CVElabels';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    const [legendHeader, ...restCVSSHeader] = CVSSHeader;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}\n            >\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                        colorSchema=\"orange\"\n                        legendHeader={legendHeader}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[restCVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}\n            >\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3)}\n                withColumn={false}\n            >\n                {\n                    topCves.map(({\n                        synopsis,\n                        known_exploit: hasExploit,\n                        rule_presence: hasRule,\n                        description,\n                        cvss3_score: cvss3,\n                        systems_affected: systemsAffected\n                    }) => (\n                        <Panel\n                            key={synopsis}\n                            title={synopsis}\n                            description={cveDesc(description)}\n                            labels={<CVElabels hasExploit={hasExploit} hasRule={hasRule} intl={intl} />}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cvss3).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {systemsAffected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport truncate from 'lodash/truncate';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}>{`${truncate(rule, { length: 320 })}\\n\\n`}</Text>\n            {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap, rulesChart } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRulesSection)}\n            >\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"bar\"\n                        subTitle=\"rules\"\n                        title=\"Rules\"\n                        data={rulesChart}\n                        colorSchema=\"orange\"\n                        legend={false}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}\n            >\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity}/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array,\n        rulesChart: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    // if there's no CVE with N/A CVSS do not display N/A in graph/table\n    if (cvesBySeverity?.na?.count === 0) {\n        delete cvesBySeverity.na;\n        delete CVSSMapping.na;\n    }\n\n    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const CVSSData = Object.values(cvesBySeverity).reverse().map((\n        { count, percentage, known_exploit_count: knownExploitsCount }) =>\n        [intl.formatMessage(messages.executiveReportOfTotal,\n            {\n                count,\n                percentage\n            }\n        ), knownExploitsCount.toString()]\n    );\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n\n            if (percentageInfo && fieldData.percentage) {\n                value = fieldData.percentage;\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });\n\n    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);\n\n    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));\n\n    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));\n\n    const coverPageData = { totalSystems, totalCves, totalRules };\n\n    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };\n\n    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number,\n        rules_by_severity: PropTypes.object,\n        rules_total: PropTypes.number,\n        top_rules: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport FooterPDF from './Common/FooterPDF';\nimport { NotAuthorizedNotification } from '../../../Helpers/constants';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const dataFetch = async () => {\n        let data;\n\n        try {\n            data = await getExecutiveReport();\n        }\n        catch (error) {\n            clearNotifications();\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        const report = buildExecReport({ data, intl });\n        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.rule_presence === true));\n        setExploit(() => data.top_cves.some(cve => cve.known_exploit === true));\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const onDownloadButtonClick = () => {\n        setRenderPDF(true);\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    };\n\n    return (\n        <Fragment>\n            <a onClick={() => onDownloadButtonClick()}>\n                {isLoading\n                    ? intl.formatMessage(messages.loading)\n                    : intl.formatMessage(messages.executiveReportCardButton)}\n            </a>\n            {\n                renderPDF && <DownloadButton\n                    fallback={<div />}\n                    type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n                    fileName={`vulnerability_executive-report--${date}.pdf`}\n                    buttonProps={{ variant: 'link', isInline: true }}\n                    groupName=\"Red Hat Insights\"\n                    asyncFunction={dataFetch}\n                    allPagesHaveTitle={false}\n                    showButton={false}\n                    footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                    onSuccess={() => {\n                        setRenderPDF(false);\n                    }}\n\n                />\n            }\n        </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\n\nconst SelectCustomSorter = ({ sorterData, setSorterData, selectProps, options }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnSelectChange = (optionName) => {\n        const optionValue = options.find(item => item.label === optionName).value;\n        setSorterData(optionValue);\n        setOpen(false);\n    };\n\n    return (\n        <Select\n            variant=\"single\"\n            direction=\"up\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={options.find(item => item.value === sorterData).label}\n            key=\"custom-sorter\"\n            onSelect={(event, optionName) => { handleOnSelectChange(optionName); }}\n            width=\"auto\"\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption width=\"100%\" key={item.label} value={item.label}/>\n            )}\n        </Select>\n    );\n};\n\nSelectCustomSorter.propTypes = {\n    sorterData: propTypes.object,\n    setSorterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default SelectCustomSorter;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport {\n    CVE_REPORT_FILTERS,\n    PDF_REPORT_USER_NOTE_MAX_LENGTH,\n    CUSTOM_REPORT_SORT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\nimport { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\nimport SelectCustomSorter from '../../PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter';\nimport TagFilter from '../../PresentationalComponents/Filters/CustomFilters/TagFilter';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    sorterData,\n    setFilterData,\n    setSorterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle,\n    inheritGlobalTags,\n    setInheritGlobalTags,\n    globalFilterTags\n}) => {\n    const [includeAllColumns, setIncludeAllColumns] = useState(true);\n\n    const activeFilters = [\n        'rule_presence',\n        'known_exploit',\n        'impact',\n        'cvss_filter',\n        'business_risk_id',\n        'status_id',\n        'publish_date',\n        'rhel_version'\n    ];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (includeAllColumns) {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [includeAllColumns, setColumnsToInclude]);\n\n    return (\n        <Modal\n            width=\"50rem\"\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId=\"custom-report-modal\"\n            isOpen={isModalOpen}\n            onClose={() => {\n                handleModalClose();\n                setInheritGlobalTags(true);\n            }}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                        handleModalClose();\n                        setInheritGlobalTags(true);\n                    }}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        ...CVE_REPORT_FILTERS[filterId],\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: {\n                                            className: 'pf-u-mr-sm pf-u-mb-sm',\n                                            ...CVE_REPORT_FILTERS[filterId].selectProps\n                                        },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.tagFilterTitle)}\n                >\n                    <TagFilter\n                        onEdit={() => setInheritGlobalTags(false)}\n                        selectedTags={filterData.tags}\n                        setSelectedTags={tags => setFilterData({ ...filterData, tags })}\n                        globalTags={globalFilterTags}\n                        inheritGlobalTags={inheritGlobalTags}\n                    />\n                    {globalFilterTags?.length > 0 && inheritGlobalTags &&\n                        <div className=\"pf-u-font-size-sm pf-u-mt-sm\">\n                            {intl.formatMessage(messages.tagFilterGlobal)}\n                            <a className=\"pf-u-ml-md\" onClick={() => {\n                                setInheritGlobalTags(false);\n                                filterData.tags = [];\n                            }}>\n                                {intl.formatMessage(messages.tagFilterClear)}\n                            </a>\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={includeAllColumns}\n                            onChange={() => setIncludeAllColumns(true)} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={!includeAllColumns}\n                            onChange={() => setIncludeAllColumns(false)} />\n                    </ToggleGroup>\n\n                    {includeAllColumns ||\n                        <div style={styles.columns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS)\n                                    .filter(([, value]) => value.hasColumn !== false)\n                                    .map(([key, value]) =>\n                                        <Checkbox\n                                            id={key}\n                                            key={key}\n                                            label={value.title}\n                                            isChecked={columnsToInclude.includes(key)}\n                                            onChange={(newValue) =>\n                                                handleCheckboxChange(key, newValue)\n                                            }\n                                            className=\"pf-u-mb-md\"\n                                        />\n                                    )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportSortDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        <SelectCustomSorter sorterData={sorterData} setSorterData={setSorterData}\n                            selectProps={{ className: 'pf-u-mr-sm pf-u-mb-sm' }}\n                            options={CUSTOM_REPORT_SORT_OPTIONS} />\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation=\"vertical\"\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    sorterData: propTypes.object,\n    setFilterData: propTypes.func,\n    setSorterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func,\n    inheritGlobalTags: propTypes.bool,\n    setInheritGlobalTags: propTypes.func,\n    globalFilterTags: propTypes.array\n};\n\nexport default ReportConfigModal;\n","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={style} src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { buildFilters, constructReportParameters } from '../../../Helpers/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA, CUSTOM_REPORT_DEFAULT_SORT, PERMISSIONS } from '../../../Helpers/constants';\nimport styles from './Common/styles';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst ReportsPage = () => {\n    const [[canDoAdvancedReporting, canReadVulnerabilities, canReadInventory], isLoading]\n        = useRbac([PERMISSIONS.advancedReporting, PERMISSIONS.readVulnerabilityResults, PERMISSIONS.readHosts], '');\n\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);\n    const [inheritGlobalTags, setInheritGlobalTags] = useState(true);\n\n    const globalFilterTags = useSelector(({ ReportsPageStore }) => ReportsPageStore.parameters.tags) ?? [];\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    const dissectTag = tag => {\n        const [namespace, keyValue] = tag.split('/');\n        const [key, value] = keyValue.split('=');\n        return { string: tag, namespace, key, value };\n    };\n\n    return (\n        isLoading ? <Spinner centered /> :\n            (canDoAdvancedReporting && canReadInventory) ? (\n                <React.Fragment>\n                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />\n                    <Main>\n                        <Grid hasGutter lg={3} md={4} sm={12}>\n                            <GridItem>\n                                <Card className=\"report-card\">\n                                    <CardTitle>\n                                        <ChartPieSolid style={styles.pieChartIcon} />\n                                        <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                            {intl.formatMessage(messages.executiveReportCardTitle)}\n                                        </span>\n                                    </CardTitle>\n                                    <CardBody>\n                                        {intl.formatMessage(messages.executiveReportCardDescription)}\n                                    </CardBody>\n                                    <CardFooter>\n                                        <DownloadExecutive />\n                                    </CardFooter>\n                                </Card>\n                            </GridItem>\n                            {canReadVulnerabilities &&\n                                <GridItem>\n                                    <Card className=\"report-card\">\n                                        <CardTitle>\n                                            <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\" />\n                                            <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                                {intl.formatMessage(messages.customReportCardTitle)}\n                                            </span>\n                                        </CardTitle>\n                                        <CardBody>\n                                            {intl.formatMessage(messages.customReportCardDescription)}\n                                        </CardBody>\n                                        <CardFooter>\n                                            <a className=\"create-report\" onClick={() => setModalOpen(true)}>\n                                                {intl.formatMessage(messages.customReportCardButton)}\n                                            </a>\n                                        </CardFooter>\n                                    </Card>\n                                </GridItem>\n                            }\n                        </Grid>\n                    </Main>\n                    <ReportConfigModal\n                        isOpen={isModalOpen}\n                        columnsToInclude={columnsToInclude}\n                        setColumnsToInclude={setColumnsToInclude}\n                        filterData={filterData}\n                        sorterData={sorterData}\n                        userNotes={userNotes}\n                        reportTitle={reportTitle}\n                        setReportTitle={setReportTitle}\n                        setUserNotes={setUserNotes}\n                        setFilterData={setFilterData}\n                        setSorterData={setSorterData}\n                        handleModalClose={(handleModalClose)}\n                        handleDownloadButton={handleDownloadButton}\n                        inheritGlobalTags={inheritGlobalTags}\n                        setInheritGlobalTags={setInheritGlobalTags}\n                        globalFilterTags={globalFilterTags}\n                    />\n\n                    {downloadCVEReport && <DownloadCVEsReport\n                        key=\"download\"\n                        reportData={{\n                            header: columnsToInclude,\n                            reportTitle,\n                            userNotes\n                        }}\n                        showButton={false}\n                        onSuccess={handleModalClose}\n                        params={constructReportParameters({ ...filterData, tags: inheritGlobalTags\n                            ? globalFilterTags?.map(dissectTag) : filterData.tags }, sorterData)}\n                        filters={buildFilters({ ...filterData, tags: inheritGlobalTags\n                            ? globalFilterTags?.map(dissectTag) : filterData.tags })}\n                        isReportDynamic\n                        label={messages.configModalExportReport}\n                    />}\n                </React.Fragment>\n            ) : (\n                <NoAccessPage\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                    emptyStateTitle={intl.formatMessage(messages.emptyStateNoAccessReportsPage)}\n                />\n            )\n    );\n};\n\nexport default ReportsPage;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { intl } from '../Utilities/IntlProvider';\nimport messages from '../Messages';\nimport { NotAuthorizedNotification } from './constants';\n\nclass DownloadReport {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: null\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n\n        this.notifications = {\n            start: {\n                variant: 'info',\n                title: intl.formatMessage(messages.notificationReportDownloadStart)\n            },\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationReportDownloadSuccess)\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            }\n        };\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    };\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    };\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page, showNotification, clearNotification) => {\n        showNotification(this.notifications.start);\n\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = params?.id || null;\n\n        try {\n            let { payload } = await fetchData({\n                ...params.id && { id: params.id },\n                ...params,\n                ...this.defaultParams,\n                data_format: format,\n                report: 'true'\n            });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n\n            clearNotification();\n            showNotification(this.notifications.success);\n        } catch (error) {\n            clearNotification();\n            showNotification(error.status === '403' ? NotAuthorizedNotification : this.notifications.failure);\n\n            throw `${error}`;\n        }\n    };\n}\n\nexport default new DownloadReport();\n","var baseProperty = require('./_baseProperty');\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nmodule.exports = asciiSize;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","var asciiSize = require('./_asciiSize'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeSize = require('./_unicodeSize');\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\nmodule.exports = stringSize;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nmodule.exports = unicodeSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n","var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isObject = require('./isObject'),\n    isRegExp = require('./isRegExp'),\n    stringSize = require('./_stringSize'),\n    stringToArray = require('./_stringToArray'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/** Used as default options for `_.truncate`. */\nvar DEFAULT_TRUNC_LENGTH = 30,\n    DEFAULT_TRUNC_OMISSION = '...';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @example\n *\n * _.truncate('hi-diddly-ho there, neighborino');\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * });\n * // => 'hi-diddly-ho there,...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * });\n * // => 'hi-diddly-ho there...'\n *\n * _.truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * });\n * // => 'hi-diddly-ho there, neig [...]'\n */\nfunction truncate(string, options) {\n  var length = DEFAULT_TRUNC_LENGTH,\n      omission = DEFAULT_TRUNC_OMISSION;\n\n  if (isObject(options)) {\n    var separator = 'separator' in options ? options.separator : separator;\n    length = 'length' in options ? toInteger(options.length) : length;\n    omission = 'omission' in options ? baseToString(options.omission) : omission;\n  }\n  string = toString(string);\n\n  var strLength = string.length;\n  if (hasUnicode(string)) {\n    var strSymbols = stringToArray(string);\n    strLength = strSymbols.length;\n  }\n  if (length >= strLength) {\n    return string;\n  }\n  var end = length - stringSize(omission);\n  if (end < 1) {\n    return omission;\n  }\n  var result = strSymbols\n    ? castSlice(strSymbols, 0, end).join('')\n    : string.slice(0, end);\n\n  if (separator === undefined) {\n    return result + omission;\n  }\n  if (strSymbols) {\n    end += (result.length - end);\n  }\n  if (isRegExp(separator)) {\n    if (string.slice(end).search(separator)) {\n      var match,\n          substring = result;\n\n      if (!separator.global) {\n        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n      }\n      separator.lastIndex = 0;\n      while ((match = separator.exec(substring))) {\n        var newEnd = match.index;\n      }\n      result = result.slice(0, newEnd === undefined ? end : newEnd);\n    }\n  } else if (string.indexOf(baseToString(separator), end) != end) {\n    var index = result.lastIndexOf(separator);\n    if (index > -1) {\n      result = result.slice(0, index);\n    }\n  }\n  return result + omission;\n}\n\nmodule.exports = truncate;\n"],"names":["name","height","width","svgPath","yOffset","xOffset","hour","minute","day","month","year","formatTime","number","unit","concat","relativeTimeTable","rightBound","Infinity","description","date","Math","round","second","_exact","value","toUTCString","split","slice","trim","dateStringByType","type","exact","onlyDate","relative","reduce","acc","i","Date","now","invalid","DateFormat","_ref","_ref$type","extraTitle","_ref$tooltipProps","tooltipProps","dateObj","dateType","toString","element","arguments","length","undefined","Tooltip","content","addTooltip","dateByType","propTypes","CounterItem","counter","label","style","styles","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","dateFormat","props","children","systems","cves","rules","withColumn","SecondPage","cveDesc","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","legendHeader","restCVSSHeader","titleProps","title","chartType","subTitle","colorSchema","withHeader","rows","flex","map","synopsis","hasExploit","known_exploit","hasRule","rule_presence","cvss3","cvss3_score","systemsAffected","systems_affected","labels","CVElabels","Number","parseFloat","toFixed","ThirdPage","rulesDesc","rule","associatedCves","truncate","join","topRules","rulesHeader","rulesBySeverityMap","rulesChart","legend","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","na","count","CVSSMapping","Object","keys","reverse","EXEC_RULES_SEVERITY_MAP","values","percentage","knownExploitsCount","known_exploit_count","mapFields","fields","percentageInfo","arr","field","fieldData","push","recentCvesMapping","x","y","coverPageData","cvesData","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","dataFetch","getExecutiveReport","status","NotAuthorizedNotification","autoDismiss","msg","report","buildExecReport","some","cve","toISOString","onClick","fallback","fileName","buttonProps","isInline","groupName","asyncFunction","allPagesHaveTitle","showButton","footer","FooterPDF","onSuccess","SelectCustomSorter","sorterData","setSorterData","selectProps","options","isOpen","setOpen","Select","direction","onToggle","placeholderText","find","item","onSelect","event","optionName","optionValue","handleOnSelectChange","SelectOption","ReportConfigModal","isModalOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","inheritGlobalTags","setInheritGlobalTags","globalFilterTags","includeAllColumns","setIncludeAllColumns","activeFilters","useEffect","CVE_REPORT_FILTERS","Modal","ouiaId","onClose","actions","Button","isDisabled","isCvssRangeValid","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","id","filterId","component","items","filterName","TagFilter","onEdit","selectedTags","tags","setSelectedTags","globalTags","ToggleGroup","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","filter","hasColumn","includes","newValue","parameter","handleCheckboxChange","CUSTOM_REPORT_SORT_OPTIONS","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","useRbac","PERMISSIONS","canDoAdvancedReporting","canReadVulnerabilities","canReadInventory","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","CUSTOM_REPORT_DEFAULT_SORT","useSelector","ReportsPageStore","parameters","dispatch","useDispatch","dissectTag","tag","namespace","string","Spinner","centered","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructReportParameters","filters","buildFilters","isReportDynamic","NoAccessPage","emptyStateTitle","DownloadReport","filename","page","defaultParams","checkTypes","fetchData","format","pages","formats","exec","showNotification","clearNotification","notifications","start","data_format","payload","response","JSON","stringify","downloadFile","success","failure","this","page_size","min","MAX_SAFE_INTEGER","replace","asciiSize","baseProperty","module","exports","array","end","index","result","Array","baseSlice","reHasUnicode","RegExp","test","hasUnicode","unicodeSize","asciiToArray","unicodeToArray","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsModifier","rsOptVar","rsSeq","rsSymbol","reUnicode","lastIndex","match","baseToString","castSlice","isObject","isRegExp","stringSize","stringToArray","toInteger","reFlags","omission","separator","strLength","strSymbols","search","substring","global","source","newEnd","indexOf","lastIndexOf"],"sourceRoot":""}