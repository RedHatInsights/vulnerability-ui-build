{"version":3,"file":"js/740.a2fda1e03ae262371147.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canSelectAll={false}\n                    aria-label={'Vulnerability CVE table'}\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint={'grid-lg'}\n                    ouiaId={'cves-table'}\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, selectedRowsRawData, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n    const remediableCves = selectedRowsRawData.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData, true),\n                props: { isDisabled: !selectedCvesCount }\n            })] : []),\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={(canRemediate && entity &&\n                <Remediation\n                    isDisabled={remediableCves.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={{\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                    securityRuleFilter(methods.apply, parameters),\n                    knownExploitFilter(methods.apply, parameters),\n                    impactFilter(methods.apply, parameters),\n                    useCvssBaseScoreFilter(methods.apply, parameters),\n                    businessRiskFilter(methods.apply, parameters),\n                    publishDateFilter(methods.apply, parameters),\n                    statusFilter(methods.apply, parameters),\n                    useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),\n                    remediationFilter(methods.apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={{\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const selectedRowsRawData = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedRowsRawData || []\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs, columns), [systemCVEs, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        }\n        else {\n            return <ErrorHandler code={statusCode} />;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date', ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && setUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map((\n            {\n                id,\n                attributes:\n                {\n                    // eslint-disable-next-line camelcase\n                    cve_status_id,\n                    // eslint-disable-next-line camelcase\n                    status_id,\n                    status_text: justification,\n                    // eslint-disable-next-line camelcase\n                    cve_status_text: cve_justification\n                },\n                ...rest\n            // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest }));\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />\n        ));\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    selectedRowsRawData,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnModalOpen,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemDetail(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"names":["SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","messages","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","parameters","selectedRowsRawData","canRemediate","advisory","selectedCvesCount","remediableCves","attributes","remediation","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","onClick","showStatusModal","isDisabled","setColumnModalOpen","PrimaryToolbar","pagination","itemCount","total_items","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","isColumnModalOpen","systemCVEs","useSelector","SystemCvesStore","cveList","columns","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","payload","errors","parseInt","NotConnected","titleText","bodyText","buttonText","ErrorHandler","code","Provider","value","format","DownloadReport","notification","addNotification","clearNotifications","iSelected","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_id","status_id","justification","status_text","cve_justification","cve_status_text","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsSystemDetail","isModalOpen","setModalOpen","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","SystemCveTableToolbar","SystemCveTable","column","isShown","isShownByDefault","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"sourceRoot":""}