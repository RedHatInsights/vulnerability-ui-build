{"version":3,"file":"js/7277.1663233063430.0a8d5e661bd4b7cf7fbb.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./node_modules/lodash/_baseMap.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity, canSelect }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditPairStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { systemCVEs, methods } = context;\n        const cve = systemCVEs.payload.data[rowId / 2];\n        methods.selectCves(isSelected, cve);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    const sortingHeader = [{ key: 'collapse' }, ...canSelect ? [{ key: 'checkbox' }] : [], ...header];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canCollapseAll={false}\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditPairStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy(sortingHeader, cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                sortingHeader,\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint=\"grid-lg\"\n                    ouiaId=\"cves-table\"\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string,\n    canSelect: propTypes.bool\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({\n    entity,\n    intl,\n    context,\n    canExport,\n    customAction,\n    canSelect,\n    canManageColumns,\n    filters\n}) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, systemCVEs, parameters, methods, selectedCves, isAllExpanded, canEditPairStatus } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = selectedCves?.length ?? 0;\n    const remediableCves = selectedCves.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        rawItems: systemCVEs,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, systemCVEs, parameters, methods]);\n\n    const actions = ['',\n        ...canEditPairStatus ?\n            [{\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves, true),\n                props: { isDisabled: !selectedCvesCount }\n            }] : [],\n        ...canManageColumns ?\n            [{\n                label: intl.formatMessage(messages.columnManagementModalTitle),\n                onClick: () => methods.setColumnModalOpen(true)\n            }] : []\n    ];\n\n    const allFilters = [\n        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n        securityRuleFilter(methods.apply, parameters),\n        knownExploitFilter(methods.apply, parameters),\n        impactFilter(methods.apply, parameters),\n        useCvssBaseScoreFilter(methods.apply, parameters),\n        businessRiskFilter(methods.apply, parameters),\n        publishDateFilter(methods.apply, parameters),\n        statusFilter(methods.apply, parameters),\n        useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),\n        remediationFilter(methods.apply, parameters)\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                isDisabled: cves.meta.total_items === 0,\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={customAction ? (typeof customAction === 'function' ? customAction(cves) : customAction) : (entity &&\n                <Remediation\n                    isDisabled={selectedCves.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={canSelect && {\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: filters ? allFilters.filter(filter => filters.includes(filter.key)) : allFilters\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={canExport && {\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick,\n                isDisabled: cves.meta.total_items === 0\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    filters: propTypes.arrayOf(propTypes.string)\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React from 'react';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (React.createElement(EmptyState, null,\n        React.createElement(EmptyStateIcon, { icon: DisconnectedIcon }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, titleText),\n        React.createElement(EmptyStateBody, null, bodyText),\n        React.createElement(Button, { variant: \"primary\", component: \"a\", href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, buttonText)));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React, {\n    useMemo,\n    useEffect,\n    Fragment,\n    createContext,\n    useState\n} from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS, SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';\nimport {\n    constructFilterParameters,\n    useUrlParams,\n    updateRef\n} from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({\n    entity,\n    intl,\n    showHeaderLabel,\n    setPageTitle,\n    canExport,\n    customAction,\n    canSelect,\n    canEditPairStatus,\n    canManageColumns,\n    defaultColumns,\n    filters,\n    linkToCustomerPortal\n}) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const cves = useMemo(() =>\n        createCveListBySystem(entity.id, systemCVEs, columns, linkToCustomerPortal), [systemCVEs, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (!entity.insights_id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        } else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n\n        if (defaultColumns) {\n            const defaultColumnsWithAttributes = defaultColumns.map(\n                defaultColumn => SYSTEM_DETAILS_HEADER.find(column => column.key === defaultColumn)\n            );\n            dispatch(changeColumnsSystemDetail(defaultColumnsWithAttributes));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            if (setPageTitle) {\n                document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n            }\n\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map(\n            ({\n                id,\n                attributes:\n                {\n                    // eslint-disable-next-line camelcase\n                    cve_status_id,\n                    // eslint-disable-next-line camelcase\n                    status_id,\n                    status_text: justification,\n                    // eslint-disable-next-line camelcase\n                    cve_status_text: cve_justification\n                },\n                ...rest\n                // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest })\n        );\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type=\"systemDetail\"\n            />\n        ));\n    };\n\n    const handleCveSelect = (isSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    systemCVEs,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canEditPairStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnModalOpen,\n                        fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal/>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemDetail(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar\n                            entity={entity.id}\n                            canExport={canExport}\n                            customAction={customAction}\n                            canSelect={canSelect}\n                            canManageColumns={canManageColumns}\n                            filters={filters}\n                        />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                    canSelect={canSelect}\n                />\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(systemCVEs.payload.errors);\n    }\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false,\n    canSelect: true,\n    canManageColumns: true,\n    canEditPairStatus: true,\n    linkToCustomerPortal: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    defaultColumns: propTypes.arrayOf(propTypes.string),\n    filters: propTypes.arrayOf(propTypes.string),\n    linkToCustomerPortal: propTypes.bool\n};\n\nexport const ConnectedSystemCves = injectIntl(SystemCVEs);\n\nconst TranslateSystemCves = ({ customItnlProvider, customIntlProvider, ...props }) => {\n    const Wrapper = (customItnlProvider || customIntlProvider) ? IntlProvider : Fragment;\n\n    return <Wrapper {...(customItnlProvider || customIntlProvider) && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customIntlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customIntlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n"],"names":["SystemCvesTableWithContext","context","header","entity","canSelect","cves","methods","selectedCves","expandedRows","canEditPairStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","find","selectedCve","id","selected","index","current","opened","isOpen","undefined","sortingHeader","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","isStickyHeader","canCollapseAll","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","messages","onSelect","event","isSelected","rowId","systemCVEs","payload","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","cveName","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","canExport","customAction","canManageColumns","filters","parameters","advisory","selectedCvesCount","remediableCves","attributes","remediation","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","rawItems","fetchResource","ops","multiRow","actions","label","formatMessage","onClick","showStatusModal","isDisabled","setColumnModalOpen","allFilters","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","PrimaryToolbar","pagination","total_items","itemCount","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","includes","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","size","EmptyStateBody","Button","component","href","target","rel","className","createContext","SystemCVEs","status","statusCode","showHeaderLabel","setPageTitle","defaultColumns","linkToCustomerPortal","dispatch","useDispatch","useState","StatusModal","setStatusModal","isFirstLoad","setFirstLoad","isColumnModalOpen","useSelector","SystemCvesStore","cveList","columns","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","defaultColumnsWithAttributes","defaultColumn","SYSTEM_DETAILS_HEADER","column","changeColumnsSystemDetail","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","errors","parseInt","insights_id","ErrorHandler","code","Provider","value","format","DownloadReport","notification","addNotification","clearNotifications","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_id","status_id","justification","status_text","cve_justification","cve_status_text","CvePairStatusModal","updateRef","inventoryList","type","ColumnManagementModal","appliedColumns","applyColumns","newColumns","isModalOpen","setModalOpen","Stack","hasGutter","StackItem","TextContent","Text","TextVariants","SystemCveTableToolbar","SystemCveTable","isShown","isShownByDefault","allowedCveActions","ConnectedSystemCves","TranslateSystemCves","customItnlProvider","customIntlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter","baseEach","isArrayLike","module","exports","collection","iteratee","result","Array"],"sourceRoot":""}