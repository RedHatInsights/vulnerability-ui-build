{"version":3,"file":"js/337.ec5da454b947b85f0c63.js","mappings":"0aAcIA,EAAW,IAAIC,IAAAA,UACnBD,EAASE,KAAO,WACZ,IAAIA,EAAOD,IAAAA,SAAAA,UAAAA,KAAAA,MAAqCE,KAAMC,WACtD,OAAOF,EAAKG,QAAQ,KAAM,uBAG9BJ,IAAAA,WAAkB,CAAED,SAAAA,IAEpB,IAAMM,EAAkB,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAASC,GAAY,YAG5D,OAAQH,GACJ,kBAAC,IAAcG,EACX,kBAAC,IAAD,CAAaC,UAAU,oBAClBH,GAAYD,EAAKK,OAASC,EAAAA,GAEnB,kBAAC,IAAD,CACID,OAAQC,EAAAA,GACRC,WAAYL,EAAKM,cAAcC,EAAAA,EAAAA,UAC/BC,aAAcR,EAAKM,cAAcC,EAAAA,EAAAA,UACjCT,KAAMN,GAAAA,CAAOM,GACbW,cAAY,IAGhB,0BAAMC,wBAfJ,SAACZ,GAAD,MAAW,CAAEa,OAAQC,GAAAA,CAAad,IAeLe,CAAcrB,GAAAA,CAAOM,SAS5ED,EAAgBiB,aAAe,CAC3Bf,UAAU,EACVN,KAAM,MAGVI,EAAgBkB,UAAY,CACxBf,KAAMgB,IAAAA,UAAoB,CACtBA,IAAAA,OACAA,IAAAA,SAEJjB,SAAUiB,IAAAA,KACVlB,KAAMkB,IAAAA,OAAAA,YAGV,SAAeC,EAAAA,EAAAA,IAAWpB,I,uHCrB1B,QAhC2B,SAACqB,GAAmD,IAA5CC,EAA4C,uDAA5B,GAAIC,EAAwB,uDAAP,GAChEC,EAAe,GACfF,EAAcG,gBACdD,EAAeA,EAAaE,OAAOJ,EAAcG,cAAcE,MAAM,OAGrEL,EAAcM,WACdJ,EAAeA,EAAaE,OAAOJ,EAAcM,SAASD,MAAM,OAGpE,IAAME,EAAuB,SAAAC,GACzBT,EAAM,CACFI,cAAeK,EAAOC,QAAO,SAAAC,GAAK,MAAI,CAAC,OAAQ,SAASC,SAASD,MAAQE,KAAK,WAAQC,EACtFP,SAAUE,EAAOC,QAAO,SAAAC,GAAK,OAAK,CAAC,OAAQ,SAASC,SAASD,MAAQE,KAAK,WAAQC,EAClFC,KAAM,KAId,MAAO,CACHC,MAAOlC,EAAAA,EAAAA,cAAmBO,EAAAA,EAAAA,qBAC1B4B,KAAMC,EAAAA,GAAAA,SACNC,aAAc,CACVC,SAAU,SAACC,EAAOV,GACdH,EAAqBG,IAEzBW,MACIC,GAAAA,CAAUC,EAAAA,GAAuBtB,EAAgBuB,KAASC,KAAI,SAAAC,GAAI,MAAK,CAAEX,MAAOW,EAAKX,MAAOL,MAAOgB,EAAKhB,UAC5GA,MAAOR,M,+ECRnB,QArBqB,SAACH,GAA8B,IAAvBC,EAAuB,uDAAP,GAExBE,EAAiBF,EAA5B2B,UAEAC,EAAiB,SAAApB,GACnBT,EAAM,CAAE4B,UAAYnB,EAAOxB,OAAS,KAAOwB,EAAOC,QAAO,SAAAC,GAAK,MAAc,MAAVA,KAAeE,KAAK,MAAS,GAAIE,KAAM,KAG7G,MAAO,CACHC,MAAOlC,EAAAA,EAAAA,cAAmBO,EAAAA,EAAAA,cAC1B4B,KAAMC,EAAAA,GAAAA,SACNC,aAAc,CACVC,SAAU,SAACC,EAAOV,GACdkB,EAAelB,IAEnBW,MAAOQ,EAAAA,GAAAA,KAAmB,SAAAH,GAAI,MAAK,CAAEX,MAAOW,EAAKX,MAAOL,MAAOgB,EAAKhB,UACpEA,MAAQR,EAAeA,EAAaG,MAAM,KAAO,O,8GChBvDyB,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,QAAf,OACpBD,GAAcC,IACX,kBAAC,IAAD,CAAYjD,UAAU,yCACjBgD,GAAc,kBAAC,IAAD,MACdC,GAAW,kBAAC,IAAD,QAIxBF,EAAiBlC,UAAY,CACzBmC,WAAYnC,IAAAA,KAAAA,WACZoC,QAASpC,IAAAA,KAAAA,YAGb,W,wsBCbA,IAAMqC,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOnD,EAAV,EAAUA,UAAV,OACtB,kBAAC,IAAD,CAASoD,QAAS,kBAAC,IAAqB/C,EAAAA,EAAAA,0BACpC,kBAAC,IAAD,CAAOgD,MAAM,MAAMF,MAAK,KAAOA,GAASnD,UAAW,CAAC,aAAcA,IAC9D,kBAAC,IAAqBK,EAAAA,EAAAA,uBAKlC6C,EAAkBrC,UAAY,CAC1BsC,MAAOrC,IAAAA,OACPd,UAAWc,IAAAA,QAGf,W,8SCPO,SAASwC,EAAgBC,GAC5B,OAAgCC,EAAAA,EAAAA,UAASD,GAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOzD,EAAP,KAAc4D,EAAd,KAUA,MAAO,CAAEC,aARL,kBAAC,IAAD,CAAW5B,MAAO,kBAAC,IAAqB3B,EAAAA,EAAAA,aAA0BwD,QAAS,YACvE,kBAAC,KAAD,QAAY,aAAW,eAAezB,SAAU,SAAA0B,GAAS,OAAIJ,EAAYI,IAAYnC,MAAO8B,GAAc1D,GACrG+C,EAAAA,GAAAA,KAAmB,gBAAGnB,EAAH,EAAGA,MAAOK,EAAV,EAAUA,MAAV,OAChB,kBAAC,IAAD,CAAkB+B,IAAKpC,EAAOA,MAAOA,EAAOK,MAAOA,SAK5CyB,SAAAA,EAAUC,YAAAA,EAAaC,SAAAA,GAG3C,SAASK,EAAsBT,GAClC,OAA0CC,EAAAA,EAAAA,UAASD,GAAnD,eAAOU,EAAP,KAAsBC,EAAtB,KACA,GAA0BV,EAAAA,EAAAA,UAAS,IAAnC,eAAOzD,EAAP,KAAc4D,EAAd,KAeA,MAAO,CAAEQ,mBAbL,kBAAC,IAAD,CAAWnC,MAAO,kBAAC,IAAqB3B,EAAAA,EAAAA,oBAAiCwD,QAAS,SAC9E,kBAAC,MAAD,QACIE,IAAI,QACJ9B,KAAK,OACLG,SAAU,SAAAT,GAAK,OAAIuC,EAAiBvC,IACpCA,MAAOsC,EACPG,kBAAkB,WAClB,aAAY,qBACZjB,MAAO,CAAEkB,UAAW,YAChBtE,KAIakE,cAAAA,EAAeC,iBAAAA,EAAkBP,SAAAA,GAG3D,IAAMW,EAAY,SAAC,GAA8D,IAA5DhC,EAA4D,EAA5DA,MAAOiC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,sBAA0B1E,GAAY,YACpF,GAAsCyD,EAAAA,EAAAA,UAASlB,GAA/C,eAAOoC,EAAP,KAAoBC,EAApB,KACQC,EAAwC7E,EAAxC6E,mBAAoBC,EAAoB9E,EAApB8E,gBAMtBC,EAAc,WAChBH,OAAe7C,IAcnB,OANAiD,EAAAA,EAAAA,YAAU,WACN,OAAO,WACHH,OAEL,CAACA,IAGA,kBAAC,aAAD,KACI,kBAAC,IAAD,CACII,QAAQ,QACRT,MAAOA,EACPU,OAAQC,QAAQR,GAChBS,QAASL,EACTM,QAAS,CACL,kBAAC,KAAD,CAAQrB,IAAI,OAAOiB,QAAQ,UAAUK,OAAO,OAAOC,QAnBhD,WACfd,IAASe,MAAK,kBARPV,EAQgCJ,MACvCK,MAkBiB,kBAAC,IAAqBzE,EAAAA,EAAAA,OAE3B,kBAAC,KAAD,CAAQ0D,IAAI,SAASiB,QAAQ,YAAYK,OAAO,QAAQC,QAASR,GAC5D,kBAAC,IAAqBzE,EAAAA,EAAAA,UAG/BgF,OAAQtF,EAAMsF,QAEbtF,EAAMyF,YAMvBlB,EAAUzD,UAAY,CAClB2E,SAAU3E,IAAAA,IACVsE,QAAStE,IAAAA,KACTyB,MAAOzB,IAAAA,MACP4E,UAAW5E,IAAAA,KACXgE,gBAAiBhE,IAAAA,KACjB0D,MAAO1D,IAAAA,OACP2D,OAAQ3D,IAAAA,KACR4D,sBAAuB5D,IAAAA,OACvB+D,mBAAoB/D,IAAAA,KACpBwE,OAAQxE,IAAAA,QAUZ,SAAe6E,EAAAA,EAAAA,SACX,MARuB,SAAAC,GACvB,MAAO,CACHd,gBAAiB,SAAAe,GAAI,OAAID,GAASd,EAAAA,EAAAA,IAAgBe,KAClDhB,mBAAoB,kBAAMe,GAASf,EAAAA,EAAAA,WAI3C,CAGEN,I,+ECvDF,QAzD0B,SAAC,GAA+E,IAA7EuB,EAA6E,EAA7EA,cAAeC,EAA8D,EAA9DA,gBAAiBxD,EAA6C,EAA7CA,MAAOyD,EAAsC,EAAtCA,cAAsC,IAAvBC,SAAAA,OAAuB,SAEhGC,EAAqBC,MAAMC,KAAKN,GAChCO,EAAqBH,GAAsBA,EAAmBhG,OAC5DoG,EAAe/D,EAAf+D,KAAMT,EAAStD,EAATsD,KACRU,EAAmBV,IAAWM,MAAMK,QAAQX,IAASA,EAAK3F,QAAW+F,EAAYJ,EAAK3F,OAAS,EAAI2F,EAAK3F,QAQxGuG,EAAoB,WACtBV,GAAgB,EAAO,KAGrBW,EAAkB,WAEpB,IAAMC,GAAYX,GAAiBA,EAAc,CAAEY,UAAWN,EAAKO,YAAa7E,KAAM,KAAhF2E,QACNA,GACIA,EAAQnB,MAAK,YAAwB,IAE3BjD,EAF2B,EAArBsD,KAEWlD,KAAI,SAAAC,GAAI,OAAIA,EAAKkE,IAAMlE,EAAKkE,IAAMlE,KACzDmD,GAAgB,EAAMxD,OAYlC,MAAQ,CACJwE,uBAT2B,WACA,IAAvBV,EACAK,IAEAD,KAMJlE,MAAO,CACH,CACIiC,MAAOzE,EAAAA,EAAAA,cAAmBO,EAAAA,EAAAA,YAC1BiF,QAASkB,GAEb,CACIjC,MAAO,GAAF,OAAKzE,EAAAA,EAAAA,cAAmBO,EAAAA,EAAAA,WAAqB,CAAE0G,MAAOT,KAC3DhB,QAtCa,WACrB,IAAQM,EAAStD,EAATsD,KACFoB,EAAiBC,GAAAA,CAAMrB,EAAKlE,QAAO,SAAAiB,GAAI,OAAIA,EAAKkE,MAAInE,KAAI,SAAAC,GAAI,OAAIA,EAAKkE,MAAKZ,GAChFH,GAAgB,EAAMkB,KAqClB,CACIzC,MAAO,GAAF,OAAKzE,EAAAA,EAAAA,cAAmBO,EAAAA,EAAAA,UAAoB,CAAE0G,MAAOV,EAAKO,YAAcP,EAAKO,YAAc,KAChGtB,QAASmB","sources":["webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js"],"sourcesContent":["/* eslint-disable react/no-danger */\nimport React from 'react';\nimport marked from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a', '<a target=\\'_blank\\'');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let currentValue = [];\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule_key) {\n        currentValue = currentValue.concat(currentFilter.rule_key.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            rule_presence: values.filter(value => ['true', 'false'].includes(value)).join(',') || undefined,\n            rule_key: values.filter(value => !['true', 'false'].includes(value)).join(',') || undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(RULE_PRESENCE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"pf-u-mt-xs cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel/>}\n            {hasRule && <CSAwLabel/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]}>\n            <FormattedMessage {...messages.filterKnownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string\n};\n\nexport default KnownExploitLabel;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label={'justification note'}\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n    const { clearNotifications, addNotification } = props;\n\n    const createNotification = notification => {\n        return addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    useEffect(() => {\n        return () => {\n            clearNotifications();\n        };\n    }, [clearNotifications]);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n                ouiaId={props.ouiaId}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    clearNotifications: propTypes.func,\n    ouiaId: propTypes.string\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n"],"names":["renderer","marked","link","this","arguments","replace","CSAwRuleSummary","text","truncate","intl","props","className","length","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","defaultProps","propTypes","PropTypes","injectIntl","apply","currentFilter","dynamicFilters","currentValue","rule_presence","concat","split","rule_key","filterBySecurityRule","values","filter","value","includes","join","undefined","page","label","type","conditionalFilterType","filterValues","onChange","event","items","unionWith","RULE_PRESENCE_OPTIONS","isEqual","map","item","status_id","filterByStatus","STATUS_OPTIONS","GroupedCVELabels","hasExploit","hasRule","KnownExploitLabel","style","content","color","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","key","useJustificationInput","justification","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","title","onSave","onSuccessNotification","targetItems","setTargetItems","clearNotifications","addNotification","handleClose","useEffect","variant","isOpen","Boolean","onClose","actions","ouiaId","onClick","then","children","updateRef","connect","dispatch","data","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","meta","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","payload","page_size","total_items","id","handleOnCheckboxChange","count","collectedItems","union"],"sourceRoot":""}