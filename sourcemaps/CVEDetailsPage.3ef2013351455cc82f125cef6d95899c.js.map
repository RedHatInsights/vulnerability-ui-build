{"version":3,"file":"js/CVEDetailsPage.1676399438556.2a279634383a8c256084.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/NotVulnerableBox.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (appliedVersions, apply) => {\n    /* operatingSystems are obtained from the Inventory store */\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n        appName: 'inventory',\n        scope: 'inventory',\n        module: './OsFilterHelpers'\n    });\n\n    return buildOSFilterConfig\n        ? [\n            buildOSFilterConfig(\n                {\n                    label: intl.formatMessage(messages.osFilterLabel),\n                    type: 'checkbox',\n                    id: 'rhel_version',\n                    value: toGroupSelectionValue(\n                        appliedVersions\n                            ? appliedVersions.split(',')\n                            : []\n                    ),\n                    onChange: (event, value) => {\n                    /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                        const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .toString();\n                        apply({ rhel_version: versions, page: 1 });\n                    },\n                    placeholder: intl.formatMessage(messages.osFilterPlaceholder)\n                },\n                operatingSystems\n            )\n        ]\n        : [];\n};\n\nexport default useOsVersionFilter;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nvar VALUE_TO_STATE = {\n    1: { icon: _jsx(AngleDoubleDownIcon, {}), text: 'Low', color: 'blue' },\n    2: { icon: _jsx(EqualsIcon, {}), text: 'Moderate', color: 'gold' },\n    3: { icon: _jsx(AngleDoubleUpIcon, {}), text: 'Important', color: 'orange' },\n    4: { icon: _jsx(CriticalRiskIcon, {}), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"rest\"]);\n    return (_jsx(Label, __assign({}, rest, props, { color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }, { children: text || VALUE_TO_STATE[value].text })));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Text,\n    TextContent,\n    TextVariants,\n    SplitItem,\n    Split,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './CSAwRuleBox.scss';\nimport NotVulnerableLabel from '../Snippets/NotVulnerableLabel';\nimport { changeExposedSystemsParameters } from '../../../Store/Actions/Actions';\nimport { ONLY_NON_VULNERABLE_SYSTEMS } from '../../../Helpers/constants';\n\nconst NotVulnerableBox = ({ synopsis, notVulnerableSystemCount }) => {\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const handleExposedSystemFilter = () => {\n        dispatch(changeExposedSystemsParameters({ rule: ONLY_NON_VULNERABLE_SYSTEMS }));\n    };\n\n    return (\n        notVulnerableSystemCount > 0 &&\n        <Card className=\"card-box\" ouiaId=\"not-vulnerable-box\">\n            <ExpandableSection toggleText={\n                <Split>\n                    <SplitItem className=\"pf-u-mr-xl\">\n                        <TextContent>\n                            <Text component={TextVariants.h4}>\n                                <NotVulnerableLabel className=\"pf-u-mr-sm\" />\n                                {intl.formatMessage(messages.notVulnerableBoxTitle)}\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                    <SplitItem id=\"filter-affected-systems-split\">\n                        <TextContent>\n                            <Text\n                                id=\"filter-affected-systems\"\n                                onClick={event => {\n                                    handleExposedSystemFilter();\n                                    event.stopPropagation();\n                                }}\n                                component={TextVariants.small}\n                            >\n                                <Link\n                                    to={`/cves/${synopsis}`}\n                                >\n                                    {\n                                        intl.formatMessage(\n                                            messages.filterByAffectedSystems,\n                                            {\n                                                count: notVulnerableSystemCount\n                                            }\n                                        )\n                                    }\n                                </Link>\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                </Split>\n            }>\n                <CardBody className=\"rule-card-body\">\n                    {intl.formatMessage(messages.notVulnerableDescription, { multiple: true })}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nNotVulnerableBox.propTypes = {\n    synopsis: PropTypes.string,\n    notVulnerableSystemCount: PropTypes.number\n};\n\nexport default NotVulnerableBox;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\nimport NotVulnerableBox from '../CSAwRuleBox/NotVulnerableBox';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n            <NotVulnerableBox\n                synopsis={data.data.synopsis}\n                notVulnerableSystemCount={data.data.affected_but_not_vulnerable}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    ANSIBLE_REMEDIATION, RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnManagementModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnManagementModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRows.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    ...osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded),\n                isDisabled: meta.totalItems === 0\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnManagementModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useColumnManagement, useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveDetail(newColumns)));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    // TODO: let InventoryTable render its own toolbar instead of using custom one\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnManagementModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n\n                                { ColumnManagementModal }\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized serviceName={SERVICE_NAME} />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","BaseInvTable","history","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","appliedVersions","operatingSystems","useSelector","entities","useLoadModule","toGroupSelectionValue","buildOSFilterConfig","label","intl","messages","type","id","value","split","onChange","event","versions","values","flatMap","keys","toString","rhel_version","page","placeholder","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","description","link","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","formatMessage","grow","default","WithLoader","isLoading","variant","LoaderType","style","TextContent","textAlign","Text","TextVariants","injectIntl","V3names","AV","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","key","val","cvssVersion","Popover","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","TableVariant","gridBreakPoint","cells","rows","entries","Label","isLarge","color","substring","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","map","item","STATUS_OPTIONS","BusinessRiskPopoverContent","Button","onClick","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","text","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","_b","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","rule","index","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","PropTypes","KnownExploitSummary","KnownExploitLabel","NotVulnerableBox","notVulnerableSystemCount","NotVulnerableLabel","ONLY_NON_VULNERABLE_SYSTEMS","multiple","CVEDetailsPageSummary","data","known_exploit","affected_but_not_vulnerable","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","downloadReport","setColumnManagementModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","isDisabled","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemIdsByCve","row","undefined","isOpen","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","items","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","shallowEqual","total","loaded","CVEDetailsPageStore","columns","params","useColumnManagement","newColumns","changeColumnsCveDetail","ColumnManagementModal","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selecting","selectRows","React","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","current","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","status_id","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","isActive","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","serviceName","SERVICE_NAME","initialState","tagsLoaded","allTagsLoaded","invConfig","modifyInventory","state","action","some","patchAccess","selected","selectedRow","newState","ActionTypes"],"sourceRoot":""}