{"version":3,"file":"js/998.ebbcda388b25e88b24c5.js","mappings":"g6BAMO,IAAMA,EAAe,CACxBC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,eAAgB,GAChBC,oBAAqB,IAGzB,SAASC,EAAgBN,EAASO,EAAOC,GAYrC,GAXKD,EAAMJ,eACPI,EAAMJ,aAAe,IAGpBI,EAAME,SACPF,EAAME,OAAS,CACXC,IAAK,UACLC,UAAW,SAIfJ,EAAMK,OAAQ,CACd,IAAIC,EAAiBN,EAAMN,KAAKa,MAAK,qBAAGC,eACxC,UAAsDf,GAAjDgB,EAAL,KAAiBC,EAAjB,KAAuCC,EAAvC,WACIC,EAAiBZ,EAAMP,QAAQoB,MAAK,kBAAqB,YAArB,EAAGV,OACvCW,EAAad,EAAMP,QAAQoB,MAAK,kBAAqB,SAArB,EAAGV,OAEvCW,EAAa,CAAC,EAAD,KAAMA,GAAN,IAAkBC,MAAO,CAAEC,MAAO,OAC/CJ,EAAiB,CAAC,EAAD,KACVA,GADU,IAEbK,WAAY,CAACC,EAAAA,EAAUC,EAAAA,IACvBC,eAAgB,CAACD,EAAAA,OAGrB,IAAIE,EAAgB,CAACZ,GAAJ,eAAmBK,IAAnB,OAAkCH,IAAlC,OAAkDC,GAAlD,CAAkEF,IAMnF,OAJIJ,GACAe,EAAcC,OAAO,EAAG,EAAGC,EAAAA,IAG/B,OACOvB,GADP,IAEIP,QAAS4B,EACT3B,KAAMM,EAAMN,KAAK8B,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBC,UAAyC,IAA/B1B,EAAMJ,aAAa6B,EAAIE,SAErC9B,eAAgB+B,GAAAA,CAAQ3B,EAAO4B,QAAQC,QAAS9B,EAAMH,eAAgB,QAI9E,OAAOG,EAGJ,IAAM+B,EAA2B,SAACtC,GAAD,OAAa,WAAkC,IAAjCO,EAAiC,uDAAzBR,EAAcS,EAAW,uCACnF,OAAQA,EAAO+B,MACX,IAAK,0BACD,OAAOjC,EAAgBN,EAASO,EAAOC,GAC3C,KAAKgC,EAAAA,GACD,OAAOC,EAAAA,EAAAA,IAAWlC,EAAOC,GAC7B,IAAK,aACD,cACOD,GADP,IAEIN,KAAMM,EAAMN,KAAK8B,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBU,OAAQV,EAAIE,KAAO1B,EAAO4B,QAAQF,GAAK1B,EAAO4B,QAAQM,OAASV,EAAIU,cAG/E,IAAK,wBACD,OAAO3C,EACX,QACI,OAAOQ","sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { nowrap, sortable } from '@patternfly/react-table';\nimport { SYSTEMS_ADVISORY_COLUMN } from '../../Helpers/constants';\nimport { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: []\n};\n\nfunction modifyInventory(columns, state, action) {\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n        let [nameColumn, remediationColumn, ...restColumns] = columns;\n        let lastSeenColumn = state.columns.find(({ key }) => key === 'updated');\n        let tagsColumn = state.columns.find(({ key }) => key === 'tags');\n\n        tagsColumn = [{ ...tagsColumn, props: { width: 10 } }];\n        lastSeenColumn = [{\n            ...lastSeenColumn,\n            transforms: [sortable, nowrap],\n            cellTransforms: [nowrap]\n        }];\n\n        let mergedColumns = [nameColumn, ...tagsColumn, ...restColumns, ...lastSeenColumn, remediationColumn];\n\n        if (hasPatchAccess) {\n            mergedColumns.splice(3, 0, SYSTEMS_ADVISORY_COLUMN);\n        }\n\n        return {\n            ...state,\n            columns: mergedColumns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] === true\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id')\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(state, action);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n"],"names":["initialState","columns","rows","entities","selectedRows","prevLoadedRows","selectedRowsRawData","modifyInventory","state","action","sortBy","key","direction","loaded","hasPatchAccess","some","patchAccess","nameColumn","remediationColumn","restColumns","lastSeenColumn","find","tagsColumn","props","width","transforms","sortable","nowrap","cellTransforms","mergedColumns","splice","SYSTEMS_ADVISORY_COLUMN","map","row","selected","id","unionBy","payload","results","inventoryEntitiesReducer","type","ActionTypes","selectRows","isOpen"],"sourceRoot":""}