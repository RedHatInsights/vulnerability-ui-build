{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsStore.js","webpack:///./src/Store/Reducers/VulnerabilitiesStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetailsDescription/CVEPageDetailsDescription.scss?4f52","webpack:///./node_modules/reselect/lib/index.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetailsDescription/CVEPageDetailsDescription.scss","webpack:///./src/Components/PresentationalComponents/CVEInfoBox/CVEInfoBox.scss?9c01","webpack:///./src/Components/PresentationalComponents/CVEInfoBox/CVEInfoBox.scss","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.scss?e372","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.scss","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.scss?7556","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.scss","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.scss?46a3","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.scss","webpack:///./src/Store/Selectors/CVESelectors.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetailsDescription/SnippetWithHeaderAndTooltip.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetailsDescription/CVEPageDetailsDescription.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CVEInfoBox/CVEInfoBox.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetailsSeverity/CVEPageDetailsSeverity.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetails/CVEPageDetails.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/BaseKebab.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/KebabItems.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEPage/CVEPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","show_all","sort","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEStore","type","ActionTypes","setIn","VulnerabilitiesStore","cveName","data","SystemsStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","resizeOrientation","BaseModal","items","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","Fragment","isSmall","Boolean","isFooterLeftAligned","onClose","actions","variant","onClick","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","shape","details","resulotion","isRequired","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","item","attributes","status_name","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","find","option","parseInt","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","editStatus","showStatusModal","systemCveTableRowActions","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","a","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","split","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","kebabExportAsJson","kebabExportAsCsv","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","securityRuleFilter","currentFilter","dynamicFilters","currentValue","filterBySecurityRule","securityRules","radio","urlParam","unionWith","SECURITY_RULE_OPTIONS","isEqual","statusFilter","filterByStatus","checkbox","BusinessRiskModal","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","setBusinessRisk","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","isChecked","injectIntl","CveStatusModal","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","CvePairStatusModal","inventories","hasDifferentStatus","inventoryList","getCveJustification","setJustificationProps","inventory","getDefaultCheckboxState","getCveStatus","getDefaultStatus","setSelectProps","inventoryIds","isDisabled","disabled","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","setStatusParams","inventory_id","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","systemCount","systemName","cvePairStatusModalUseOverallCheckbox","cvePairStatusModalUseOverallTooltip","bool","init","columns","rows","entities","selectedRows","modifyInventory","loaded","lastSeenColumn","selected","selectEntities","myRows","inventoryEntitiesReducer","row","Remediation","remediationProvider","systems","concat","issues","nextProps","dispatchNotification","dataProvider","onRemediationCreated","getNotification","size","globalBackgroundColor100","remediateLabel","Component","oneOfType","routerParams","module","i","transform","locals","exports","defaultEqualityCheck","areArgumentsShallowlyEqual","equalityCheck","prev","next","defaultMemoize","arguments","lastArgs","lastResult","getDependencies","funcs","dependencies","every","dep","dependencyTypes","Error","createSelectorCreator","memoize","_len","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","selector","resetRecomputations","__esModule","createStructuredSelector","selectors","selectorCreator","createSelector","objectKeys","_len3","_key3","composition","sCveDetailsPage","SnippetWithHeaderAndPopover","Popover","bodyContent","headerContent","position","Stack","display","cursor","StackItem","CVEPageDetailsDescription","cveAttributes","publishDate","link","businessRisk","businessRiskJustification","statusJustification","systemsStatusDetail","systemsStatusDivergent","detailRows","brPopoverContent","StyledText","fontWeight","StyledConstants","fontWeights","bold","fontSizes","sm","lineHeight","lineHeights","justificationNote","statusPopoverContent","cveStatus","marginTop","semi_bold","cvePageDetailsSystemsWTCves","Table","borders","gridBreakPoint","cells","Flex","FlexItem","breakpointMods","modifier","StyledBox","marginBottom","WithLoader","loading","Spinner","centered","Skeleton","SkeletonSize","lg","CVEPageOverviewItemLoader","height","width","x","y","rx","ry","TrendBoxLoader","CurrentVulnerabilitiesItemLoader","speed","primaryColor","secondaryColor","cx","cy","r","CVEInfoBox","CVEPageContext","Consumer","context","Split","SplitItem","titleColor","Bullseye","titleContent","isFilled","h6","descriptionTitle","descriptionContent","V3names","AV","vectorNamesV3AV","N","vectorValuesNetwork","A","vectorValuesAdjacent","L","vectorValuesLocal","P","vectorValuesPhysical","AC","vectorNamesV3AC","vectorValuesLow","H","vectorValuesHigh","PR","vectorNamesV3PR","vectorValuesNone","UI","vectorNamesV3UI","R","vectorValuesRequired","S","vectorNamesV3S","U","vectorValuesUnchanged","C","vectorValuesChanged","vectorNamesV3C","I","vectorNamesV3I","vectorNamesV3A","CVSS","vectorNamesCvssVersion","V2names","vectorNamesV2AV","vectorValuesAdjacentNetwork","vectorNamesV2AC","Au","vectorNamesV2AU","M","vectorValuesMultiple","vectorValuesSingle","vectorNamesV2C","vectorValuesComplete","vectorValuesPartial","vectorNamesV2I","vectorNamesV2A","CvssVector","CVSS2Vector","CVSS3Vector","cvssVer","cvssVector","parsedVector","vector","namesMapping","res","forEach","curr","val","parseVector","cvssVersion","maxWidth","enableFlip","cvssVectorPopoverTitle","TableVariant","compact","cvssVectorMetric","cvssVectorValue","entries","cvssVectorVectorString","learnMorePopover","cvePageSeverityDetailsImpact","footerContent","cvePageSeverityDetailsLearnMoreRatings","cvePageSeverityDetailsLearnMore","CVEPageDetailsSeverity","getImpactDetails","parseCvssScore","cvePageSeverityDetailsBaseScore","defaultProps","CSAwRuleBox","Card","CardBody","Grid","GridItem","span","CSAwRuleSummary","summary","h4","associatedCves","current","associated_cves","_i","CVES_PATH","kbase_node_id","RH_KB_URL","knowledgebaseArticle","ruleId","to","filterByAffectedSystems","remediatioLabel","ansibleRemediation","playbook_count","yes","ansibleRemediationTooltip","no","riskOfChange","RISK_OF_CHANGE_LABEL","change_risk","RISK_OF_CHANGE_TOOLTIP","reboot_required","Reboot","red","PropTypes","CVEPageDetails","md","BaseKebab","dropdownItems","setOpen","Dropdown","toggle","KebabToggle","onToggle","kebabState","isPlain","kebabItemEditStatus","DropdownItem","kebabEditStatus","SystemsExposedTable","InventoryTable","setInventoryTable","StatusModal","setStatusModal","setSelectedHosts","firstMount","setFirstMount","urlParamsAllowed","setUrlParamsAllowed","createRef","useDispatch","useCreateUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","createUrlParams","urlParameters","useSelector","useMemo","config","handleSelect","middlewareListener","addNew","on","callback","newSelected","loadInventory","insights","react","reactRouterDom","pfReactTable","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","sortable","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","SYSTEMS_EXPOSED_HEADER","getStore","kebabOptions","cveStatusDetails","selectOptions","ops","h2","systemsExposedTableHeader","ref","onRefresh","pageSize","per_page","onRefreshData","total","isLoaded","hasCheckbox","showActions","DownloadReport","onExpandClick","_e","actionsConfig","kebabToggleProps","activeFiltersConfig","filters","filterRuleValues","onDelete","e","bulkSelect","filterConfig","searchFilter","systemsSearchName","searchFilterByName","withRouter","createContext","CVEPage","setState","open","fetchAffectedSystems","match","PATHS","vulnerabilities","vulnerabilitiesCves","isActive","kebabItems","kebabEditBusinessRisk","VulnerabilityHeader","showTabs","InvalidObject","Page","Provider","justifyContent","DropdownPosition","right","Main","header"],"mappings":"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","file":"js/CVEPage.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20\n    }\n};\n// Reducer\nexport const SystemsReducer = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: 'true',\n        sort: '-public_date',\n        selectedCves: [],\n        openedCves: [],\n        expandCveDescription: false\n    }\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const VulnerabilitiesStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList.isLoading = true;\n            newState.cveList.timestamp = action.meta;\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList.isLoading = false;\n            newState.cveList.payload = { errors: action.payload };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList.payload = action.payload;\n                newState.cveList.isLoading = false;\n                newState.cveList.timestamp = action.meta;\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.parameters.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, parameters: { ...newState.parameters, selectedCves } };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.parameters.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEReducer } from '../Reducers/CVEStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsReducer } from '../Reducers/SystemsStore';\nimport { VulnerabilitiesStore } from '../Reducers/VulnerabilitiesStore';\n\nReducerRegistry.register({ CVEStore: CVEReducer });\nReducerRegistry.register({ VulnerabilitiesStore });\nReducerRegistry.register({ SystemsStore: SystemsReducer });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                isSmall\n                title={title}\n                isOpen={Boolean(targetItems)}\n                isFooterLeftAligned\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n                <br/>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://access.redhat.com/articles/2968471\">\n                    <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n                </a>\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta,  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editBusinessRisk} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showBusinessRiskModal([\n                {\n                    id: rowData.id,\n                    business_risk_id: rowData.business_risk_id,\n                    justification: rowData.business_risk_justification\n                }\n            ])\n    },\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_justification\n                }\n            ])\n    }\n];\n\nexport const systemCveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    cve_status_id: rowData.cve_status_id,\n                    justification: rowData.status_justification,\n                    cve_justification: rowData.cve_status_justification\n                }\n            ])\n    }\n];\n\nexport const systemExposedTableRowActions = (showStatusModal, cve) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) => {\n            showStatusModal(\n                [{\n                    id: cve.id,\n                    status_id: cve.status_id,\n                    justification: cve.justification\n                }],\n                [{\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_text\n                }]\n            );\n        }\n    }\n];\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title:\n            <FormattedMessage {... isOptOut\n                ? messages.kebabResumeAnalysis\n                : messages.kebabExcludeAnalysis}\n            />,\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: checkboxState });\n        setJustificationProps({ disabled: checkboxState });\n        setStatusId(getCveStatus());\n        setJustification(getCveJustification());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCveStatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCveStatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState) { // use overall (CVE) status\n                        return hasDifferentStatus ? '0' : cveList[0].cve_status_id || '0';\n                    }\n                    else { // use system pair status\n                        return hasDifferentStatus ? '0' : cveList[0].status_id || '0';\n                    }\n                }\n                else {\n                    return '0';\n                }\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n            }\n\n            case 'systemDetail': {\n                if (checkboxState) { // use overall (CVE) justification\n                    return (cveList && cveList.length === 1 && cveList[0].cve_justification) || '';\n                }\n                else { // use system pair justification\n                    return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n                }\n            }\n\n            default: {\n                return '';\n            }\n        }\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryIds[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        default:\n            return state;\n    }\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport  AnsibeTowerIcon  from '@patternfly/react-icons/dist/js/icons/ansibeTower-icon';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nclass Remediation extends Component {\n    static propTypes = {\n        cves: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        systems: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        addNotification: propTypes.func\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.cves !== this.props.cves) {\n            return true;\n        }\n\n        if (nextProps.systems !== this.props.systems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    remediationProvider = (cves = [], systems = []) => {\n        cves = [].concat(cves);\n        systems = [].concat(systems);\n        return cves.length && systems.length\n            ? {\n                issues: cves.map(cve => ({\n                    id: `vulnerabilities:${cve}`,\n                    description: cve\n                })),\n                systems\n            }\n            : false;\n    };\n\n    render() {\n        const { cves, systems, addNotification: dispatchNotification } = this.props;\n        return (\n            <div>\n                <RemediationButton\n                    dataProvider={() => this.remediationProvider(cves, systems)}\n                    isDisabled={this.remediationProvider(cves, systems) === false}\n                    onRemediationCreated={result => dispatchNotification(result.getNotification())}\n                >\n                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />\n                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}\n                </RemediationButton>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEPageDetailsDescription.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEPageDetailsDescription.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEPageDetailsDescription.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../../node_modules/css-loader/index.js!@redhat-cloud-services/frontend-components-notifications/index.css\"), \"\");\nexports.i(require(\"-!../../../../node_modules/css-loader/index.js!@redhat-cloud-services/frontend-components/index.css\"), \"\");\n\n// module\nexports.push([module.id, \":root {\\n  --ins-color--orange: #ec7a08; }\\n\\nbutton:focus {\\n  outline: none; }\\n\\n.ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\\n.page__Vulnerabilities {\\n  overflow-x: auto !important; }\\n  .page__Vulnerabilities .pf-c-page__main {\\n    overflow-x: auto; }\\n\\n.csaw-icon {\\n  vertical-align: -0.125em;\\n  margin-right: var(--pf-global--spacer--xs); }\\n\\n.icon-with-label:not(:last-child) {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.icon-with-label > svg {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\nimg.pf-c-avatar {\\n  height: var(--pf-global--FontSize--4xl); }\\n\\n.business-risk-radio > input {\\n  margin-left: 1px; }\\n\\n.cvepage-st-business-risk-value {\\n  border-bottom: black 2px dotted; }\\n\\n.splitter {\\n  margin-bottom: var(--pf-global--spacer--sm) !important;\\n  margin-top: var(--pf-global--spacer--sm) !important; }\\n\\n.status-breakdown-table tr th {\\n  font-weight: normal;\\n  padding-left: 0px;\\n  padding-right: var(--pf-global--spacer--md);\\n  padding-bottom: var(--pf-global--spacer--sm); }\\n  .status-breakdown-table tr th:last-child {\\n    text-align: right; }\\n\\n.status-breakdown-table tr td {\\n  padding-left: 0px;\\n  padding-right: var(--pf-global--spacer--md);\\n  white-space: nowrap;\\n  padding-top: var(--pf-global--spacer--sm);\\n  padding-bottom: var(--pf-global--spacer--sm); }\\n  .status-breakdown-table tr td:last-child {\\n    text-align: right; }\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEInfoBox.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEInfoBox.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CVEInfoBox.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../../node_modules/css-loader/index.js!@redhat-cloud-services/frontend-components-notifications/index.css\"), \"\");\nexports.i(require(\"-!../../../../node_modules/css-loader/index.js!@redhat-cloud-services/frontend-components/index.css\"), \"\");\n\n// module\nexports.push([module.id, \":root {\\n  --ins-color--orange: #ec7a08; }\\n\\nbutton:focus {\\n  outline: none; }\\n\\n.ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\\n.page__Vulnerabilities {\\n  overflow-x: auto !important; }\\n  .page__Vulnerabilities .pf-c-page__main {\\n    overflow-x: auto; }\\n\\n.csaw-icon {\\n  vertical-align: -0.125em;\\n  margin-right: var(--pf-global--spacer--xs); }\\n\\n.icon-with-label:not(:last-child) {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.icon-with-label > svg {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\nimg.pf-c-avatar {\\n  height: var(--pf-global--FontSize--4xl); }\\n\\n.business-risk-radio > input {\\n  margin-left: 1px; }\\n\\n.infobox-square {\\n  background-color: var(--pf-global--BackgroundColor--150);\\n  border: var(--pf-global--BorderColor--300) var(--pf-global--BorderWidth--sm) solid;\\n  height: 65px; }\\n  .infobox-square > .pf-l-split__item:first-child {\\n    width: 65px;\\n    color: black;\\n    background-color: white; }\\n    .infobox-square > .pf-l-split__item:first-child:not(.severity-unknown) > div.pf-l-bullseye svg {\\n      color: white; }\\n  .infobox-square h3,\\n  .infobox-square h6 {\\n    margin: 0; }\\n  .infobox-square > .pf-l-split__item:nth-child(2) {\\n    display: flex;\\n    justify-content: flex-start;\\n    align-items: center; }\\n\\n.severity-low {\\n  background-color: var(--pf-global--Color--200) !important; }\\n\\n.severity-critical {\\n  background-color: var(--pf-global--danger-color--100) !important; }\\n\\n.severity-moderate {\\n  background-color: var(--pf-global--warning-color--100) !important; }\\n\\n.severity-color-important {\\n  background-color: var(--pf-global--palette--orange-300) !important; }\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CvssVector.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CvssVector.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CvssVector.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".severity-info-box > div > div:nth-child(3) h6 .ins-c-skeleton {\\n  max-height: 30px !important;\\n  max-width: 30% !important; }\\n\\n.severity-info-box > div > div:nth-child(3) div > .ins-c-skeleton {\\n  max-height: 25px !important;\\n  max-width: 80% !important; }\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CSAwRuleBox.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CSAwRuleBox.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./CSAwRuleBox.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".label {\\n  min-width: 140px; }\\n\\n.l-sm-spacer {\\n  margin-left: var(--pf-global--spacer--sm); }\\n\\n.ins-c-reboot > svg {\\n  margin-right: var(--pf-global--spacer--xs); }\\n\\n.ansible-success {\\n  color: var(--pf-global--success-color--200); }\\n\\n.card-box-shadow {\\n  box-shadow: var(--pf-global--BoxShadow--md);\\n  border: 1px solid var(--pf-global--BorderColor--dark-100); }\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./SystemsExposedTable.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./SystemsExposedTable.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./SystemsExposedTable.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".affected-systems-toolbar {\\n  justify-content: flex-start; }\\n  .affected-systems-toolbar > div {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.ins-composed-col {\\n  display: inline; }\\n\\n.affected-systems-filter-chips {\\n  order: 5;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import { createSelector } from 'reselect';\nimport { createCveDetailsPage, createExposedSystemsTable, createSystemsListTable } from '../../Helpers/CVEHelper';\n\nconst cveListWithSystemsSelector = (state, cve) => ({ ...state.CVEStore.affectedSystemsByCVE, cve });\nconst systemsListAllSelector = state => state.SystemsStore;\nconst cveDetailsPageSelector = state => state.CVEStore.cveDetails;\n\nexport const sCveDetailsPage = createSelector(\n    [cveDetailsPageSelector],\n    createCveDetailsPage\n);\nexport const sExposedSystemsTable = createSelector(\n    [cveListWithSystemsSelector],\n    createExposedSystemsTable\n);\n\nexport const sAllSystems = createSelector(\n    [systemsListAllSelector],\n    createSystemsListTable\n);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\nimport './CVEPageDetailsDescription.scss';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover bodyContent={content} headerContent={''} aria-label={'Business risk popover'} position=\"right\">\n            <Stack style={{ display: 'inline-block', cursor: 'pointer' }}>\n                <StackItem>\n                    <Label>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { PatternFlyThemeProvider, StyledBox, StyledText, StyledConstants } from '@patternfly/react-styled-system';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport './CVEPageDetailsDescription.scss';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndTooltip';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst CVEPageDetailsDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link,\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <TextContent>\n            <Stack>\n                <StackItem>\n                    <StyledText\n                        fontWeight={StyledConstants.fontWeights.bold}\n                        fontSize={StyledConstants.fontSizes.sm}\n                        lineHeight={StyledConstants.lineHeights.sm}\n                    >\n                        {intl.formatMessage(messages.justificationNote)}\n                    </StyledText>\n                </StackItem>\n                <StackItem>{businessRiskJustification || '--'}</StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n    const statusPopoverContent = (\n        <Stack>\n            <StackItem>\n                <StyledText\n                    fontWeight={StyledConstants.fontWeights.bold}\n                    fontSize={StyledConstants.fontSizes.sm}\n                    lineHeight={StyledConstants.lineHeights.sm}\n                >\n                    {intl.formatMessage(messages.cveStatus)}\n                </StyledText>\n                {status || '--'}\n\n                <StyledText\n                    fontWeight={StyledConstants.fontWeights.bold}\n                    fontSize={StyledConstants.fontSizes.sm}\n                    lineHeight={StyledConstants.lineHeights.sm}\n                    style={{ marginTop: 'var(--pf-global--spacer--sm)' }}\n                >\n                    {intl.formatMessage(messages.justificationNote)}\n                </StyledText>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className={'splitter'} />\n                    </TextContent>\n                    <StyledText fontWeight={StyledConstants.fontWeights.semi_bold} lineHeight={StyledConstants.lineHeights.sm}>\n                        {intl.formatMessage(messages.cvePageDetailsSystemsWTCves)}\n                    </StyledText>\n                    <Table\n                        aria-label={'Status details'}\n                        borders={false}\n                        gridBreakPoint={null}\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className={'status-breakdown-table'}\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n    return (\n        <PatternFlyThemeProvider>\n            <Stack gutter=\"sm\">\n                <StackItem />\n                <StackItem>\n                    <Flex>\n                        <FlexItem breakpointMods={[{ modifier: 'spacer-xl' }]}>\n                            <SnippetWithHeaderAndPopover\n                                title={intl.formatMessage(messages.businessRiskLabel)}\n                                value={businessRisk}\n                                content={brPopoverContent}\n                            />\n                        </FlexItem>\n                        <FlexItem breakpointMods={[{ modifier: 'spacer-xl' }]}>\n                            <SnippetWithHeaderAndPopover\n                                title={intl.formatMessage(messages.statusLabel)}\n                                content={statusPopoverContent}\n                                value={\n                                    <span>\n                                        {systemsStatusDivergent > 0 && (\n                                            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />\n                                        )}{' '}\n                                        {status}\n                                    </span>\n                                }\n                            />\n                        </FlexItem>\n                    </Flex>\n                </StackItem>\n                <StackItem>\n                    <TextContent>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </TextContent>\n                </StackItem>\n                <StackItem>\n                    <StyledBox style={{ marginBottom: 'var(--pf-global--spacer--xs)' }}>\n                        {intl.formatMessage(messages.publishDate)}: {publishDate}\n                    </StyledBox>\n                    <StyledBox>{link}</StyledBox>\n                </StackItem>\n            </Stack>\n        </PatternFlyThemeProvider>\n    );\n};\n\nCVEPageDetailsDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEPageDetailsDescription);\n","import { Skeleton, SkeletonSize, Spinner } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport ContentLoader, { BulletList, List } from 'react-content-loader';\n\nconst WithLoader = props => {\n    if (props === undefined || props.loading !== false) {\n        switch (props.variant) {\n            case 'spinner':\n                return <Spinner centered />;\n            case 'cvePageOverviewItem':\n                return <CVEPageOverviewItemLoader />;\n            case 'list':\n                return <List />;\n            case 'bulletList':\n                return <BulletList />;\n            case 'trendBox':\n                return <TrendBoxLoader />;\n            case 'currentVulnerabilitiesItem':\n                return <CurrentVulnerabilitiesItemLoader />;\n            default:\n                return <Skeleton size={SkeletonSize.lg} />;\n        }\n    }\n\n    return props.children;\n};\n\n// Loaders\nconst CVEPageOverviewItemLoader = () => {\n    return (\n        <ContentLoader height={61} width={120}>\n            <rect x=\"35\" y=\"0\" rx=\"0\" ry=\"0\" width=\"50\" height=\"35\" />\n            <rect x=\"0\" y=\"45\" rx=\"0\" ry=\"0\" width=\"120\" height=\"16\" />\n        </ContentLoader>\n    );\n};\n\nconst TrendBoxLoader = () => {\n    return (\n        <ContentLoader height={100} width={300}>\n            <rect x=\"388.58\" y=\"109.13\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n            <rect x=\"11.58\" y=\"16.13\" rx=\"0\" ry=\"0\" width=\"37\" height=\"62\" />\n            <rect x=\"52.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"76.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"4.58\" y=\"82.13\" rx=\"0\" ry=\"0\" width=\"154\" height=\"22\" />\n        </ContentLoader>\n    );\n};\n\nconst CurrentVulnerabilitiesItemLoader = () => {\n    return (\n        <ContentLoader height={50} width={200} speed={2} primaryColor=\"#f3f3f3\" secondaryColor=\"#ecebeb\">\n            <rect x=\"82.58\" y=\"15.13\" rx=\"0\" ry=\"0\" width=\"110.88\" height=\"21.42\" />\n            <circle cx=\"25\" cy=\"25\" r=\"25\" />\n        </ContentLoader>\n    );\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string\n};\n\nexport default WithLoader;\n","import { Bullseye, Split, SplitItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEPage/CVEPage';\nimport WithLoader from '../WithLoader/WithLoader';\nimport './CVEInfoBox.scss';\n\nconst CVEInfoBox = (props) => {\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Split className=\"infobox-square\" gutter=\"md\">\n                    <WithLoader loading={context.isLoading}>\n                        <SplitItem className={props.titleColor}>\n                            <Bullseye>{props.titleContent}</Bullseye>\n                        </SplitItem>\n                        <SplitItem isFilled>\n                            <TextContent>\n                                <Text component={TextVariants.h6}>{props.descriptionTitle}</Text>\n                                <Text component={TextVariants.p}>{props.descriptionContent}</Text>\n                            </TextContent>\n                        </SplitItem>\n                    </WithLoader>\n                </Split>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEInfoBox.propTypes = {\n    titleContent: propTypes.any,\n    titleColor: propTypes.any,\n    descriptionContent: propTypes.any,\n    descriptionTitle: propTypes.any\n};\n\nexport default CVEInfoBox;\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEPage/CVEPage';\nimport WithLoader from '../WithLoader/WithLoader';\nimport './CvssVector.scss';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    // eslint-disable-next-line no-unused-vars\n    const { cvssVersion, ...values } = parsedVector;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <WithLoader loading={context.isLoading}>\n                        <Popover\n                            position=\"bottom\"\n                            maxWidth={'100%'}\n                            enableFlip\n                            headerContent={ `${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}` }\n                            bodyContent={\n                                cvssVector ?\n                                    (\n                                        <Table\n                                            aria-label={'Metric breakdown'}\n                                            variant={TableVariant.compact}\n                                            gridBreakPoint={null}\n                                            cells={\n                                                [intl.formatMessage(messages.cvssVectorMetric),\n                                                    intl.formatMessage(messages.cvssVectorValue)]\n                                            }\n                                            rows={Object.entries(values)}\n                                        >\n                                            <TableHeader />\n                                            <TableBody />\n                                        </Table>\n                                    ) : (notAvailable)\n                            }\n                        >\n                            <React.Fragment>\n                                <Text component={TextVariants.h6} style={{ display: 'inline-block', cursor: 'pointer' }}>\n                                    {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                                    <OutlinedQuestionCircleIcon color={'var(--pf-global--secondary-color--100)'}/>\n                                </Text>\n                                <br />\n                            </React.Fragment>\n                        </Popover>\n                    </WithLoader>\n\n                    <WithLoader loading={context.isLoading}>{cvssVector || notAvailable} </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { parseCvssScore } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CVEInfoBox from '../CVEInfoBox/CVEInfoBox';\nimport CvssVector from '../CvssVector/CvssVector';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst learnMorePopover = (cveDetails, intl) => {\n    return (\n        <Popover\n            position=\"bottom\"\n            enableFlip\n            headerContent={<div>{cveDetails.title + intl.formatMessage(messages.cvePageSeverityDetailsImpact)}</div>}\n            bodyContent={\n                <TextContent>\n                    <Text component={TextVariants.p}>{cveDetails.text}</Text>\n                </TextContent>\n            }\n            footerContent={\n                <a href=\"https://access.redhat.com/security/updates/classification/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    {intl.formatMessage(messages.cvePageSeverityDetailsLearnMoreRatings)}  <ExternalLinkAltIcon />\n                </a>\n            }\n        >\n            <a>{intl.formatMessage(messages.cvePageSeverityDetailsLearnMore)}</a>\n        </Popover>\n    );\n};\n\nconst CVEPageDetailsSeverity = props => {\n    const cveDetails = getImpactDetails(props.impact);\n    const cvssVersion = (props.cvss3_score && 'CVSS 3.0') || (props.cvss2_score && 'CVSS 2.0') || 'CVSS 3.0';\n    return (\n        <React.Fragment>\n            <Stack gutter=\"md\">\n                <StackItem>\n                    <CVEInfoBox\n                        titleColor={cveDetails.color}\n                        titleContent={cveDetails.titleContent}\n                        descriptionTitle={cveDetails.title + props.intl.formatMessage(messages.cvePageSeverityDetailsImpact)}\n                        descriptionContent={learnMorePopover(cveDetails, props.intl)}\n                    />\n                </StackItem>\n                <StackItem>\n                    <CVEInfoBox\n                        titleContent={\n                            <TextContent>\n                                <Text component={TextVariants.h3}>{parseCvssScore(props.cvss2_score, props.cvss3_score)}</Text>\n                            </TextContent>\n                        }\n                        descriptionTitle={cvssVersion + props.intl.formatMessage(messages.cvePageSeverityDetailsBaseScore)}\n                    />\n                </StackItem>\n\n                <StackItem>\n                    <CvssVector cvss2_metrics={props.cvss2_metrics} cvss3_metrics={props.cvss3_metrics} />\n                </StackItem>\n            </Stack>\n        </React.Fragment>\n    );\n};\n\nCVEPageDetailsSeverity.propTypes = {\n    impact: propTypes.string,\n    cvss2_score: propTypes.any,\n    cvss3_score: propTypes.any,\n    cvss2_metrics: propTypes.any,\n    cvss3_metrics: propTypes.any,\n    intl: propTypes.any\n};\n\nCVEPageDetailsSeverity.defaultProps = {\n    impact: 'Unknown',\n    cvss2_score: undefined,\n    cvss3_score: undefined,\n    cvss2_metrics: undefined,\n    cvss3_metrics: undefined\n};\n\nexport default injectIntl(CVEPageDetailsSeverity);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { Reboot } from '@redhat-cloud-services/frontend-components/components/Reboot';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport OutlinedQuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/js/icons/external-link-alt-icon';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport { RISK_OF_CHANGE_TOOLTIP, RISK_OF_CHANGE_LABEL, RH_KB_URL, CVES_PATH } from '../../../Helpers/constants';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters,  intl }) => {\n    const handleExposedSystemFilter = (ruleId) => {\n        const params = { security_rule: ruleId };\n        changeExposedSystemsParameters(params);\n    };\n\n    return <Fragment>\n        {rules && rules.map(rule => (\n            <Card className=\"card-box-shadow\" key={rule.rule_id}>\n                <CardBody>\n                    <Grid gutter=\"md\">\n                        <GridItem span={12}>\n                            <TextContent className={'icon-with-label'}>\n                                <Text component={TextVariants.h3}>\n                                    <Tooltip content={intl.formatMessage(messages.rulesIconTooltip)}>\n                                        <CSAwIcon />\n                                    </Tooltip>\n                                    {rule.description}\n                                </Text>\n                            </TextContent>\n                        </GridItem>\n                        <GridItem span={8}>\n                            <Stack gutter=\"md\">\n                                <StackItem>\n                                    <CSAwRuleSummary text={rule.summary} />\n                                </StackItem>\n\n                                <StackItem>\n                                    <TextContent>\n                                        <Text component={TextVariants.h4}>{intl.formatMessage(messages.associatedCves)}</Text>\n                                        <Text component={TextVariants.p}>\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                .filter(cve => cve !== synopsis)\n                                                .map((cve, _i) =>\n                                                    <a\n                                                        className=\"associated-cve-link\"\n                                                        key={_i}\n                                                        href={`${CVES_PATH}/${cve}`}\n                                                    >\n                                                        {cve}\n                                                    </a>\n                                                )\n                                                .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </StackItem>\n\n                                {\n                                    rule.kbase_node_id &&\n                                    <StackItem>\n                                        <TextContent>\n                                            <Text\n                                                className={'icon-with-label'}\n                                                component={TextVariants.p}\n                                            >\n                                                <a\n                                                    className=\"kb-link\"\n                                                    href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                >\n                                                    {\n                                                        intl.formatMessage(messages.knowledgebaseArticle)\n                                                    }\n                                                    <ExternalLinkAltIcon className=\"l-sm-spacer\"/>\n                                                </a>\n                                            </Text>\n                                        </TextContent>\n                                    </StackItem>\n                                }\n\n                            </Stack>\n                        </GridItem>\n                        <GridItem span={4}>\n                            <Stack gutter=\"md\">\n                                {rule.rule_id &&\n                                    <StackItem>\n                                        <TextContent>\n                                            <Text\n                                                className={'filter-affected-systems'}\n                                                onClick={() => handleExposedSystemFilter(rule.rule_id)}\n                                            >\n                                                <Link\n                                                    key={rule.rule_id}\n                                                    to={`/cves/${synopsis}/?security_rule=${rule.rule_id}`}\n                                                >\n                                                    {intl.formatMessage(messages.filterByAffectedSystems)}\n\n                                                </Link>\n\n                                            </Text>\n                                        </TextContent>\n                                    </StackItem>\n                                }\n                                <StackItem>\n                                    <TextContent>\n                                        <Text component={TextVariants.h4}>\n                                            {intl.formatMessage(messages.remediatioLabel)}\n\n                                        </Text>\n                                        <Split gutter=\"md\">\n                                            <SplitItem>\n                                                <Label className=\"label\">\n                                                    {intl.formatMessage(messages.ansibleRemediation)}\n\n                                                </Label>\n                                            </SplitItem>\n                                            <SplitItem className=\"icon-with-label\" isFilled>\n                                                { !rule.playbook_count ? intl.formatMessage(messages.no)\n\n                                                    : (\n                                                        <Fragment>\n                                                            <CheckCircleIcon className=\"ansible-success\" />\n                                                            {intl.formatMessage(messages.yes)}\n                                                            <Tooltip\n                                                                content={intl.formatMessage(messages.ansibleRemediationTooltip)}\n                                                            >\n                                                                <OutlinedQuestionCircleIcon\n                                                                    color={'var(--pf-global--secondary-color--100)'}\n                                                                    className=\"l-sm-spacer\"\n                                                                />\n                                                            </Tooltip>\n                                                        </Fragment>\n                                                    )\n\n                                                }\n                                            </SplitItem>\n                                        </Split>\n                                        <Split gutter=\"md\">\n                                            <SplitItem>\n                                                <Label className=\"label\">\n                                                    {intl.formatMessage(messages.riskOfChange)}\n                                                </Label>\n                                            </SplitItem>\n                                            <SplitItem isFilled className=\"icon-with-label\">\n                                                { RISK_OF_CHANGE_LABEL[rule.change_risk] }\n\n                                                <Tooltip content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}>\n                                                    <OutlinedQuestionCircleIcon\n                                                        color={'var(--pf-global--secondary-color--100)'}\n                                                        className=\"l-sm-spacer\"\n                                                    />\n                                                </Tooltip>\n\n                                                <br/>\n                                                {\n                                                    rule.reboot_required && <strong><Reboot red /></strong>\n                                                }\n                                            </SplitItem>\n                                        </Split>\n                                    </TextContent>\n                                </StackItem>\n                            </Stack>\n                        </GridItem>\n                    </Grid>\n                </CardBody>\n            </Card>\n        ))}\n    </Fragment>;\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEPage/CVEPage';\nimport CVEPageDetailsDescription from '../CVEPageDetailsDescription/CVEPageDetailsDescription';\nimport CVEPageDetailsSeverity from '../CVEPageDetailsSeverity/CVEPageDetailsSeverity';\nimport WithLoader from '../WithLoader/WithLoader';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\n\nconst CVEPageDetails = props => {\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Grid gutter=\"sm\">\n                    <GridItem md={8} sm={12}>\n                        <WithLoader loading={context.isLoading} variant=\"spinner\">\n                            <CVEPageDetailsDescription cveAttributes={props.data.data} />\n                        </WithLoader>\n                    </GridItem>\n\n                    <GridItem md={4} sm={12} className=\"severity-info-box\">\n                        <CVEPageDetailsSeverity\n                            impact={props.data.data.impact}\n                            cvss2_score={props.data.data.cvss2_score}\n                            cvss3_score={props.data.data.cvss3_score}\n                            cvss2_metrics={props.data.data.cvss2_metrics}\n                            cvss3_metrics={props.data.data.cvss3_metrics}\n                        />\n                    </GridItem>\n                    <CSAwRuleBox\n                        changeExposedSystemsParameters = {props.changeExposedSystemsParameters}\n                        synopsis={props.data.data.synopsis}\n                        rules={props.data.data.rules}\n                    />\n                </Grid>\n\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEPageDetails.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEPageDetails;\n","import { Dropdown, KebabToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst BaseKebab = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    function handleOnKebabToggle(kebabState) {\n        setOpen(kebabState);\n    }\n\n    function handleOnKebabSelect() {\n        setOpen(!isOpen);\n    }\n\n    return (\n        <div>\n            <Dropdown\n                onSelect={handleOnKebabSelect}\n                toggle={<KebabToggle onToggle={handleOnKebabToggle} isDisabled={disabled} />}\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={dropdownItems}\n                {...props}\n            />\n        </div>\n    );\n};\n\nBaseKebab.propTypes = {\n    dropdownItems: propTypes.array,\n    disabled: propTypes.bool\n};\n\nexport default BaseKebab;\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n\nexport const kebabItemToggleCvesDescription = (toggleCveDescription, isExpanded, { ...props }) => (\n    <DropdownItem key=\"toggleCveDescription\" component=\"button\" onClick={() => toggleCveDescription()} {...props}>\n        {isExpanded ? <FormattedMessage {...messages.kebabCollapseCves} /> : <FormattedMessage {...messages.kebabExpandCves} /> }\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystemAnalysis = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out_analysis\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeVulnerabilityAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystem = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemToggleExcludeSystemDisplay = (handleOptOut, isOptedOut,  { ...props }) => (\n    <DropdownItem key=\"toggle_opt_out\" component=\"button\" onClick={() => handleOptOut()} {...props}>\n        {isOptedOut ?\n            <FormattedMessage {...messages.kebabHideExcludedSystems} />  :\n            <FormattedMessage {...messages.kebabShowExcludedSystems} />}\n    </DropdownItem>\n);\n","import propTypes from 'prop-types';\nimport './SystemsExposedTable.scss';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useCreateUrlParams } from '../../../Helpers/MiscHelper';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport Remediation from '../Remediation/Remediation';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport {\n    selectMultipleEntities,\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearCveStore,\n    fetchAffectedSystemsIdsByCve\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS } from '../../../Helpers/constants';\n\nconst SystemsExposedTable = (props) => {\n    const [InventoryTable, setInventoryTable] = useState(()=> () => <div>Loading...</div>);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [firstMount, setFirstMount] = useState(true);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n\n    const affectedSystems = useSelector(\n        ({ CVEStore }) => CVEStore.affectedSystemsByCVE\n    );\n\n    const isLoading = useSelector(\n        ({ CVEStore }) => CVEStore.affectedSystemsByCVE.isLoading\n    );\n\n    const parameters = useSelector(\n        ({ CVEStore }) => CVEStore.parameters\n    );\n\n    const metadata = useSelector(\n        ({ CVEStore }) => CVEStore.affectedSystemsByCVE.payload.meta\n    );\n\n    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems, ...props.cve }), [affectedSystems]);\n\n    const apply = (config) => {\n        dispatch(changeExposedSystemsParameters(config));\n    };\n\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.page_size !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        const selectedHosts = payload ? payload : [];\n        setSelectedHosts(selectedHosts);\n    };\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]\n            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(urlParameters);\n            setFirstMount(false);\n        }\n        else {\n            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const loadInventory = async () => {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n        ReducerRegistry.register({\n            ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),\n            ...mergeWithDetail()\n        });\n\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n        return () => {\n            dispatch(clearCveStore());\n        };\n    }, []);\n\n    const downloadReport = format => {\n        let params = [props.cve, { ...parameters }];\n        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        apply({ ...parameters });\n                        fetchCveDetails(props.cve);\n                    }}\n                    inventories={ inventories }\n                    type={'systemsExposed'}\n                />\n\n        );\n    };\n\n    const kebabOptions = [\n        (!isLoading && (<Remediation systems={selectedHosts} cves={props.cve} />) || ''),\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal(\n                [props.cveStatusDetails],\n                selectedHosts.map(item => ({ id: item })),\n                !selectedHosts || selectedHosts.length === 0\n            ),\n            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n        }\n    ];\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedHosts || [],\n        selectorHandler: handleSelect,\n        items: items.data && items || { data: [], meta: { total_items: 0 } },\n        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })\n    }), [items, selectedHosts, parameters]);\n\n    return (\n        <React.Fragment>\n            <TextContent>\n                <Text component={TextVariants.h2}>\n                    {props.intl.formatMessage(messages.systemsExposedTableHeader)}\n                </Text>\n            </TextContent>\n            <InventoryTable\n                items={items.data}\n                key={'inventory'}\n                ref={inventory}\n                expandable='true'\n                onRefresh={inventoryRefresh}\n                page={parameters.page}\n                total={metadata.total_items}\n                isLoaded = {!isLoading}\n                perPage={parameters.page_size }\n                hasCheckbox={items && items.length !== 0}\n                showActions={items && items.length !== 0}\n                exportConfig={{\n                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                    ...exportConfig({ downloadReport })\n                }}\n                onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                actions={systemExposedTableRowActions(showStatusModal, props.cveStatusDetails, selectedHosts)}\n                actionsConfig={{\n                    actions: kebabOptions,\n                    kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),\n                    onDelete: (e, i) => removeFilters(i, apply)\n                }}\n                bulkSelect ={ selectOptions && {\n                    count: selectedHosts && selectedHosts.length,\n                    items: selectOptions.items,\n                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                    checked: Boolean(selectedHosts && selectedHosts.length),\n                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(\n                            messages.systemsSearchName, messages.searchFilterByName,\n                            parameters.filter, apply\n                        ),\n                        securityRuleFilter(apply, parameters, props.filterRuleValues),\n                        statusFilter(apply, parameters)\n                    ]\n                }}\n\n            >\n                {StatusModal && <StatusModal />}\n            </InventoryTable>\n        </React.Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cve: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { DropdownPosition, Page } from '@patternfly/react-core';\nimport { InvalidObject, Main } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    handleCveDetailsError,\n    setHeader,\n    changeExposedSystemsParameters\n} from '../../../Store/Actions/Actions';\nimport { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';\nimport { PATHS } from '../../../Helpers/constants';\nimport CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nclass CVEPage extends React.Component {\n    static propTypes = {\n        match: propTypes.object,\n        cveDetails: propTypes.object,\n        fetchCveDetails: propTypes.func,\n        setHeader: propTypes.func,\n        handleCveDetailsError: propTypes.func,\n        fetchAffectedSystems: propTypes.func,\n        changeExposedSystemsParameters: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { cveName: this.props.match.params.cve, BusinessRiskModal: () => null, StatusModal: () => null };\n    }\n\n    componentDidMount() {\n        const { fetchCveDetails, handleCveDetailsError, setHeader } = this.props;\n\n        setHeader({\n            breadcrumbs: [\n                { title: PATHS.vulnerabilities.title, to: PATHS.vulnerabilities.to },\n                { title: PATHS.vulnerabilitiesCves.title, to: PATHS.vulnerabilitiesCves.to },\n                { title: this.state.cveName, isActive: true }\n            ]\n        });\n\n        fetchCveDetails(this.state.cveName).catch(() => {\n            handleCveDetailsError();\n        });\n    }\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => (\n                <BusinessRiskModal open cves={cves} updateRef={() => this.props.fetchCveDetails(this.state.cveName)} />\n            )\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => (\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        this.props.fetchCveDetails(this.state.cveName);\n                        this.props.fetchAffectedSystems(this.state.cveName);\n                    }}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { showStatusModal } = this;\n        const { cveDetails, fetchAffectedSystems, changeExposedSystemsParameters } = this.props;\n        const { error, data } = cveDetails;\n        const { cveName, BusinessRiskModal, StatusModal } = this.state;\n        const cveStatusDetails = {\n            id: cveName,\n            status_id: cveDetails.data.status_id,\n            justification: cveDetails.data.status_justification\n        };\n        const kebabItems = [\n            kebabItemEditBusinessRisk(this.showBusinessRiskModal, [\n                {\n                    business_risk_id: cveDetails.data.business_risk_id,\n                    id: cveName,\n                    justification: cveDetails.data.business_risk_justification\n                }\n            ]),\n            kebabItemEditStatus(this.showStatusModal, [cveStatusDetails])\n        ];\n        const { rules } = data;\n        const filterRuleValues = rules && rules.map(\n            ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n        );\n        if (!error) {\n            return (\n                <Page>\n                    <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>\n                        <VulnerabilityHeader\n                            title={\n                                <span style={{ display: 'flex', justifyContent: 'space-between' }}>\n                                    {cveName}\n                                    <BaseKebab dropdownItems={kebabItems} position={DropdownPosition.right}></BaseKebab>\n                                </span>\n                            }\n                            showTabs={false}\n                        >\n                            <CVEPageDetails changeExposedSystemsParameters={changeExposedSystemsParameters} data={cveDetails} />\n                            <StatusModal />\n                            <BusinessRiskModal />\n                        </VulnerabilityHeader>\n                        <Main>\n                            <SystemsExposedTable\n                                cve={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                fetchData={fetchAffectedSystems}\n                                methods={{ showStatusModal }}\n                            />\n                        </Main>\n                    </CVEPageContext.Provider>\n                </Page>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <VulnerabilityHeader title={cveName} showTabs={false} />\n                    <InvalidObject />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        cveDetails: sCveDetailsPage(state)\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchCveDetails: cveName => dispatch(fetchCveDetails(cveName)),\n        changeExposedSystemsParameters: params => dispatch(changeExposedSystemsParameters(params)),\n        setHeader: header => dispatch(setHeader(header)),\n        handleCveDetailsError: () => dispatch(handleCveDetailsError()),\n        fetchAffectedSystems: (cve, options) => dispatch(fetchAffectedSystemsByCVE(cve, options))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CVEPage)\n);\n"],"sourceRoot":""}