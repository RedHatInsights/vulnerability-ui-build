{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/CVEPageDescriptionResolution/CVEPageDescriptionResolution.js","webpack:///./src/Components/PresentationalComponents/CVEPageDetails/CVEPageDetails.js","webpack:///./src/Components/PresentationalComponents/CVEPageOverview/CVEPageOverview.js","webpack:///./src/Components/SmartComponents/CVEPage/CVEPage.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.scss"],"names":["CVEPageDescriptionResolution","props","cve","isLoading","description","errata_list","propTypes","object","CVEPageDetails","fetchData","match","params","React","Component","mapStateToProps","state","mapDispatchToProps","dispatch","cve_list","cveName","func","CVEPageOverview","textAlign","impact","public_date","undefined","length","url_list","CVEPage","SystemsExposedTable","checkItem","bind","systemList","selected","filter","item","key","value","newList","setState","history","push","cveTableRows","synopsis","display","event","getSelectedCount","paddingTop","CVEStore","cveListWithSystems","array"],"mappings":"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","file":"js/CVEPage.js","sourcesContent":["import React from 'react';\nimport { Title, Card, CardHeader, CardBody, Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEPageDescriptionResolution = props => {\n    return (\n        <Grid gutter=\"sm\">\n            <GridItem span={5}>\n                <Card>\n                    <CardHeader>\n                        <Title size=\"md\">Description</Title>\n                    </CardHeader>\n                    <CardBody>\n                        <WithLoader isLoading={props.cve.isLoading}>{props.cve.description}</WithLoader>\n                    </CardBody>\n                </Card>\n            </GridItem>\n            <GridItem span={5}>\n                <Card>\n                    <CardHeader>\n                        <Title size=\"md\">Resolution</Title>\n                    </CardHeader>\n                    <CardBody>\n                        <WithLoader isLoading={props.cve.isLoading}>\n                            <span>\n                                Red Hat recommends that you update associated packages and restart the affected systems.\n                                Alternatively, you can restart all affected services.\n                                <ul>\n                                    <li>• yum update</li>\n                                    <li>• reboot</li>\n                                </ul>\n                                Affected systems could be fixed by using Ansible Playbook.\n                            </span>\n                        </WithLoader>\n                    </CardBody>\n                </Card>\n            </GridItem>\n            <GridItem span={2}>\n                <Card>\n                    <CardHeader>\n                        <Title size=\"md\">Associated Errata</Title>\n                    </CardHeader>\n                    <CardBody>\n                        <WithLoader isLoading={props.cve.isLoading}>{props.cve.errata_list}</WithLoader>\n                    </CardBody>\n                </Card>\n            </GridItem>\n        </Grid>\n    );\n};\n\nCVEPageDescriptionResolution.propTypes = {\n    cve: propTypes.object\n};\n\nexport default CVEPageDescriptionResolution;\n","import React from 'react';\nimport { Grid } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchCVEListFromVMaaS } from '../../../Store/Actions/CVEActions';\nimport { sCveDetailsPage } from '../../../Store/Selectors/CVESelectors';\nimport CVEPageDescriptionResolution from '../CVEPageDescriptionResolution/CVEPageDescriptionResolution';\nimport CVEPageOverview from '../CVEPageOverview/CVEPageOverview';\nimport propTypes from 'prop-types';\n\nclass CVEPageDetails extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetchData(this.props.match.params.cve);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Grid gutter=\"sm\">\n                    <CVEPageOverview cve={this.props.cve} />\n                    <CVEPageDescriptionResolution cve={this.props.cve} />\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        cve: sCveDetailsPage(state)\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: cveName => dispatch(fetchCVEListFromVMaaS({ cve_list: [cveName] }))\n    };\n};\n\nCVEPageDetails.propTypes = {\n    match: propTypes.object,\n    fetchData: propTypes.func,\n    cve: propTypes.object\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(CVEPageDetails)\n);\n","import React from 'react';\nimport { Card, CardBody, GridItem, Title, Stack, StackItem, Level, LevelItem, Grid } from '@patternfly/react-core';\nimport { withRouter } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport WithLoader from '../WithLoader/WithLoader';\n\nclass CVEPageOverview extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <GridItem>\n                    <Card>\n                        <CardBody>\n                            <Title size=\"xl\">{this.props.match.params.cve}</Title>\n                        </CardBody>\n                    </Card>\n                </GridItem>\n                <Card>\n                    <CardBody>\n                        <WithLoader isLoading={this.props.cve.isLoading}>\n                            <Grid>\n                                <GridItem span={8} offset={2}>\n                                    <Level style={{ textAlign: 'center' }}>\n                                        <LevelItem>\n                                            <Stack>\n                                                <StackItem>{this.props.cve.impact}</StackItem>\n                                                <StackItem>Impact</StackItem>\n                                            </Stack>\n                                        </LevelItem>\n                                        <LevelItem>\n                                            <Stack>\n                                                <StackItem>{this.props.cve.public_date}</StackItem>\n                                                <StackItem>Public Date</StackItem>\n                                            </Stack>\n                                        </LevelItem>\n                                        <LevelItem>\n                                            <Stack>\n                                                <StackItem>\n                                                    {this.props.cve.errata_list === undefined\n                                                        ? 0\n                                                        : this.props.cve.errata_list.length}\n                                                </StackItem>\n                                                <StackItem>RHSA(s)</StackItem>\n                                            </Stack>\n                                        </LevelItem>\n                                        <LevelItem>\n                                            <Stack>\n                                                <StackItem>{this.props.cve.url_list}</StackItem>\n                                                <StackItem>Reference</StackItem>\n                                            </Stack>\n                                        </LevelItem>\n                                    </Level>\n                                </GridItem>\n                            </Grid>\n                        </WithLoader>\n                    </CardBody>\n                </Card>\n            </React.Fragment>\n        );\n    }\n}\n\nCVEPageOverview.propTypes = {\n    cve: propTypes.object,\n    match: propTypes.object\n};\n\nexport default withRouter(CVEPageOverview);\n","import React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport CVEPageDetails from '../../PresentationalComponents/CVEPageDetails/CVEPageDetails';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\n\nconst CVEPage = () => {\n    return (\n        <React.Fragment>\n            <Grid gutter=\"sm\">\n                <GridItem span={12}>\n                    <CVEPageDetails />\n                </GridItem>\n                <GridItem span={12}>\n                    <SystemsExposedTable />\n                </GridItem>\n            </Grid>\n        </React.Fragment>\n    );\n};\n\nexport default CVEPage;\n","import React from 'react';\nimport './SystemsExposedTable.scss';\nimport { Table, Pagination, Ansible } from '@red-hat-insights/insights-frontend-components';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchCVEsWithSystems } from '../../../Store/Actions/CVEActions';\nimport { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';\nimport propTypes from 'prop-types';\nimport { Grid, GridItem, Button, Badge, Alert } from '@patternfly/react-core';\nimport WithLoader from '../../PresentationalComponents/WithLoader/WithLoader';\n\nclass SystemsExposedTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.state = {\n            systemList: []\n        };\n    }\n\n    static getDerivedStateFromProps(props) {\n        return { systemList: props.cveTableRows };\n    }\n\n    componentDidMount() {\n        this.props.fetchData();\n    }\n\n    getSelectedCount() {\n        let selected = this.state.systemList.filter(item => item.selected === true);\n        return selected.length;\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n    handleRedirect(key) {\n        this.props.history.push('/vulnerabilities/cves/' + this.props.cveTableRows[key].synopsis);\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Grid gutter=\"sm\">\n                    <WithLoader isLoading={this.props.cve.isLoading}>\n                        <GridItem span={12}>\n                            <Alert\n                                variant={this.state.systemList.length === 0 ? 'success' : 'warning'}\n                                title={'Number of affected systems: ' + this.state.systemList.length}\n                            />\n                        </GridItem>\n                        <GridItem span={12} style={this.state.systemList.length === 0 ? { display: 'none' } : {}}>\n                            <Pagination\n                                numberOfItems={this.props.cveTableRows ? this.props.cveTableRows.length : 1}\n                                itemsPerPage={50}\n                            />\n                            <Table\n                                className=\"systems-exposed-table\"\n                                header={['Type', 'Name', '']}\n                                rows={this.state.systemList}\n                                hasCheckbox={true}\n                                onItemSelect={(event, key, value) => this.checkItem(key, value)}\n                            />\n                        </GridItem>\n                        <GridItem style={this.state.systemList.length === 0 ? { display: 'none' } : {}}>\n                            <Grid gutter=\"sm\">\n                                <GridItem span={9}>\n                                    Systems selected: <Badge isRead={true}>{this.getSelectedCount()}</Badge>\n                                </GridItem>\n                                <GridItem span={3}>\n                                    <Grid gutter=\"sm\">\n                                        <GridItem span={6}>\n                                            <a download href=\"../common/AnsiblePlaybook.yml\">\n                                                <Button\n                                                    className={'actionButtons'}\n                                                    variant=\"secondary\"\n                                                    isDisabled={this.getSelectedCount() === 0}\n                                                >\n                                                    <Ansible style={{ paddingTop: '3px' }} />\n                                                    <span className=\"icon-label\">Generate Playbook</span>\n                                                </Button>\n                                            </a>\n                                        </GridItem>\n                                        <GridItem span={6}>\n                                            <Button\n                                                className={'actionButtons'}\n                                                variant=\"secondary\"\n                                                isDisabled={this.getSelectedCount() === 0}\n                                            >\n                                                Add to plan\n                                            </Button>\n                                        </GridItem>\n                                    </Grid>\n                                </GridItem>\n                            </Grid>\n                        </GridItem>\n                    </WithLoader>\n                </Grid>\n            </React.Fragment>\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        cve: state.CVEStore.cveListWithSystems,\n        cveTableRows: sExposedSystemsTable(state)\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: () => dispatch(fetchCVEsWithSystems())\n    };\n};\n\nSystemsExposedTable.propTypes = {\n    history: propTypes.object,\n    cveTableRows: propTypes.array,\n    fetchData: propTypes.func,\n    cve: propTypes.object\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemsExposedTable)\n);\n","// extracted by mini-css-extract-plugin"],"sourceRoot":""}