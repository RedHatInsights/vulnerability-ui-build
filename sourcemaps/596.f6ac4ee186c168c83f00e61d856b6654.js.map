{"version":3,"file":"js/596.e0d1d525424c84f84121.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/ErrorHandler/ErrorHandler.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Helpers/TableToolbarHelper.js"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\nimport { SERVICE_NAME } from '../../../Helpers/constants';\n\nconst ErrorHandler = ({ code }) => {\n    switch (parseInt(code)) {\n        case 403:\n            return <NotAuthorized serviceName={SERVICE_NAME}/>;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return <ErrorState />;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.oneOf([propTypes.number, propTypes.string])\n};\n\nexport default ErrorHandler;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { ADVISORY_AVAILABILITY_FILTER_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst AdvisoryAvailabilityFilter = (apply, currentFilter = {}) => {\n    let { advisory_available: currentValue } = currentFilter;\n\n    const filterByAdvisoryAvailability = values => {\n        apply({\n            advisory_available: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.advisory),\n        type: conditionalFilterType.checkbox,\n        key: 'advisory_available',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAdvisoryAvailability(value);\n            },\n            items: ADVISORY_AVAILABILITY_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default AdvisoryAvailabilityFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst useSearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        key: urlParam,\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default useSearchFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], config = {}) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { intl } from '../Utilities/IntlProvider';\nimport messages from '../Messages';\nimport { NotAuthorizedNotification } from './constants';\n\nclass DownloadReport {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991)\n        };\n\n        this.params = {\n            cve: null\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n\n        this.notifications = {\n            start: {\n                variant: 'info',\n                title: intl.formatMessage(messages.notificationReportDownloadStart)\n            },\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationReportDownloadSuccess)\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            }\n        };\n    }\n\n    filename = (page) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${date}`;\n            case 'system-list':\n                return `vulnerability_systems--${date}`;\n            default:\n                return `vulnerability_cves--${date}`;\n\n        }\n    };\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    };\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page, showNotification, clearNotification) => {\n        showNotification(this.notifications.start);\n\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = params?.id || null;\n\n        try {\n            let { payload } = await fetchData({\n                ...params.id && { id: params.id },\n                ...params,\n                ...this.defaultParams,\n                data_format: format,\n                report: 'true'\n            });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n\n            clearNotification();\n            showNotification(this.notifications.success);\n        } catch (error) {\n            clearNotification();\n            showNotification(error.status === '403' ? NotAuthorizedNotification : this.notifications.failure);\n\n            throw `${error}`;\n        }\n    };\n}\n\nexport default new DownloadReport();\n","import messages from '../Messages';\nimport { FILTERS, ONLY_NON_VULNERABLE_SYSTEMS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'rule_presence') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false', ONLY_NON_VULNERABLE_SYSTEMS].includes(parameter)\n                    ? object.name = FILTERS.rule_presence.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'rule_presence' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule ? currentFilters.rule.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (key === 'rhel_version' && hasValue(currentFilters, 'rhel_version')) {\n            array.push({\n                key,\n                multiValue: currentFilters.rhel_version.split(','),\n                category: 'Operating system',\n                chips: currentFilters.rhel_version\n                    .split(',')\n                    .map((v) => ({ value: v, name: `RHEL ${v}` }))\n            });\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisoryName),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        apply({ ...defaultFilters, page: 1, reset });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'rule_presence') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        if (obj[item.key] === '') {\n            obj[item.key] = undefined;\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n"],"names":["renderer","marked","Renderer","link","prototype","apply","this","arguments","replace","setOptions","CSAwRuleSummary","_ref","text","truncate","intl","props","_objectWithoutProperties","_excluded","React","StackItem","TextContent","className","length","TRUNCATE_TEXT_THRESHOLD","Truncate","expandText","formatMessage","messages","readMore","collapseText","readLess","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","defaultProps","propTypes","PropTypes","isRequired","injectIntl","ErrorHandler","code","parseInt","NotAuthorized","serviceName","SERVICE_NAME","InvalidObject","Unavailable","ErrorState","currentValue","undefined","advisory_available","label","advisory","type","conditionalFilterType","checkbox","key","filterValues","onChange","event","value","values","join","page","items","ADVISORY_AVAILABILITY_FILTER_OPTIONS","map","split","urlParam","placeholder","search","_React$useState","_React$useState2","_slicedToArray","searchValue","setSearchValue","_React$useState3","debounce","newValue","_apply","_defineProperty","handleSearch","id","concat","currentFilter","dynamicFilters","config","rule_presence","rule","filterSecurityRules","_objectSpread","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","unionWith","isEqual","status_id","filterStatus","filter","STATUS_OPTIONS","item","GroupedCVELabels","hasExploit","hasRule","isCompact","LabelGroup","KnownExploitLabel","CSAwLabel","style","Tooltip","content","FormattedMessage","knownExploitDescription","Label","color","knownExploit","useStatusSelect","initialValue","_useState","useState","_useState2","statusId","setStatusId","_useState3","_useState4","setProps","StatusSelect","FormGroup","statusLabel","fieldId","FormSelect","_extends","selection","FormSelectOption","useJustificationInput","_useState5","_useState6","justification","setJustification","_useState7","_useState8","JustificationInput","justificationLabel","TextArea","resizeOrientation","minHeight","BaseModal","_ref2","title","onSave","onSuccessNotification","onFailureNotification","ouiaId","children","_useState9","_useState10","targetItems","setTargetItems","dispatch","useDispatch","handleClose","Modal","variant","isOpen","Boolean","onClose","actions","Button","onClick","then","addNotification","error","status","ReadOnlyNotification","NotAuthorizedNotification","save","cancel","updateRef","_createClass","DownloadReport","_this","_classCallCheck","filename","date","Date","toISOString","params","cve","checkTypes","fetchData","format","_typeof","pages","includes","formats","exec","_asyncToGenerator","_regeneratorRuntime","_callee","showNotification","clearNotification","_yield$fetchData","payload","_yield$payload","response","data","_context","prev","next","notifications","start","defaultParams","data_format","report","sent","JSON","stringify","downloadFile","success","t0","failure","stop","_x","_x2","_x3","_x4","_x5","_x6","page_size","Math","min","Number","MAX_SAFE_INTEGER","notificationReportDownloadStart","notificationReportDownloadSuccess","autoDismiss","notificationReportDownloadFailureTitle","description","notificationReportDownloadFailureBody","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRuleValues","nameFilter","advisoryFilter","buildChip","parameter","FILTERS","reduce","object","name","filteredRule","find","ONLY_NON_VULNERABLE_SYSTEMS","e","buildChips","paramValues","push","hasValue","filters","Object","keys","filterChips","array","multiValue","category","chips","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","rhel_version","v","filteredValues","searchLabel","advisoryName","removeFilters","reset","obj","remainingValues","some","chip","cvss_filter","isFilterInDefaultState","currentParams","filterParams","acc","param"],"sourceRoot":""}