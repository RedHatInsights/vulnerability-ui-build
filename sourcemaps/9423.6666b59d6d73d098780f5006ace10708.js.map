{"version":3,"file":"js/9423.be6ef75cbb03f656083c.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/ErrorHandler/ErrorHandler.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/PresentationalComponents/Snippets/SnippetWithPopover.js","webpack:///./src/Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell.js","webpack:///./src/Helpers/VulnerabilityHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/map.js"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\nimport { SERVICE_NAME } from '../../../Helpers/constants';\n\nconst ErrorHandler = ({ code }) => {\n    switch (parseInt(code)) {\n        case 403:\n            return <NotAuthorized serviceName={SERVICE_NAME}/>;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return <ErrorState />;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.oneOf([propTypes.number, propTypes.string])\n};\n\nexport default ErrorHandler;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterBusinessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        key: 'business_risk',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CvssCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst useCvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        key: 'cvss_score',\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CvssCustomFilter\n                key=\"cvss_filter\"\n                filterId=\"cvss_filter\"\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className=\"pf-u-mb-0\"\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default useCvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSeverity),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        key: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { KNOWN_EXPLOIT_FILTER_OPTIONS  } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst knownExploitFilter = (apply, currentFilter = {}) => {\n    let { known_exploit: currentValue } = currentFilter;\n\n    const filterByKnownExploit = values => {\n        apply({\n            known_exploit: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterKnownExploit),\n        type: conditionalFilterType.checkbox,\n        key: 'known_exploit',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByKnownExploit(value);\n            },\n            items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default knownExploitFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterPublishDate),\n        type: conditionalFilterType.radio,\n        key: 'publish_date',\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","import { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport TableToolbar from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst PaginationWrapper = ({ apply, meta, variant }) => {\n    const { page, total_items: totalItems, page_size: pageSize } = meta;\n\n    const handleChangePage = (_event, pageNumber) => apply({ page: pageNumber });\n    const handleSetPageSize = (_event, perPage) => apply({ page_size: perPage, page: 1 });\n\n    return (\n        <TableToolbar isFooter>\n            <Pagination\n                page={page || 1}\n                itemCount={totalItems || 0}\n                perPage={pageSize || DEFAULT_PAGE_SIZE}\n                onSetPage={handleChangePage}\n                onPerPageSelect={handleSetPageSize}\n                variant={PaginationVariant[variant]}\n                ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n                isDisabled={!totalItems}\n            />\n        </TableToolbar>\n    );\n};\n\nPaginationWrapper.defaultProps = {\n    variant: 'bottom'\n};\n\nPaginationWrapper.propTypes = {\n    apply: propTypes.func.isRequired,\n    meta: propTypes.object.isRequired,\n    variant: propTypes.string\n};\n\nexport default PaginationWrapper;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport Label from './Label';\n\nconst SnippetWithPopover = ({ type, row }) => {\n    const {\n        business_risk_text: businessRiskJustification,\n        cve_status_id: cveStatusId,\n        status_text: statusJustification,\n        status_id: systemStatusId\n    } = row.attributes;\n    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;\n\n    const BusinessRiskPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {businessRiskJustification || '--'}\n        </StackItem>\n    );\n\n    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());\n\n    const StatusPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.cveSystemPairStatus} />\n            </Label>\n\n            {systemStatusOption?.label || '--'}\n\n            <Label className=\"pf-u-mt-sm\">\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {statusJustification || '--'}\n        </StackItem>\n    );\n\n    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());\n\n    const popoverContent = (\n        <Stack>\n            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}\n            <StackItem>\n                <TextContent>\n                    <hr className=\"splitter pf-u-mb-md pf-u-mt-md\" />\n                </TextContent>\n                <Label className=\"pf-u-mt-sm\">\n                    <FormattedMessage {...messages.cveStatus} />\n                </Label>\n            </StackItem>\n            <StackItem>\n                {statusOption?.label || '--'}\n            </StackItem>\n        </Stack>\n    );\n\n    const buttonStyle = {\n        wordBreak: 'normal',\n        color: hasDefaultStatus ? 'black' : '',\n        whiteSpace: 'unset',\n        maxWidth: '131px',\n        textAlign: 'left',\n        padding: '0px'\n    };\n\n    return (\n        <Popover bodyContent={popoverContent}\n            id=\"popover\"\n            aria-label=\"Business risk popover\"\n            position=\"left\"\n            appendTo={document.querySelector('.vulnerability')}\n        >\n\n            <Button\n                variant=\"link\"\n                isSmall\n                isDisabled={hasDefaultStatus}\n                style={buttonStyle}>\n                {cveStatusId !== systemStatusId ? (\n                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                        <ServerAltIcon className=\"pf-u-m-l\" />\n                    </Tooltip>\n                ) : ('')}\n                {' '}{systemStatusOption?.label || '--'}\n            </Button>\n        </Popover>\n    );\n};\n\nSnippetWithPopover.propTypes = {\n    type: propTypes.number,\n    row: propTypes.object\n};\n\nexport default SnippetWithPopover;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport Label from '../Snippets/Label';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from '../CSAwRuleBox/CSAwRuleSummary';\nimport messages from '../../../Messages';\nimport { handleCVELink } from '../../../Helpers/VulnerabilityHelper';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVETableExpandedCell = ({ description, rules, cve, linkToCustomerPortal }) => {\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <TextContent className=\"expanded-cell\">\n            {\n                hasDescription ? (\n                    <Fragment>\n                        <Label className=\"pf-u-mb-sm\"><FormattedMessage {...messages.description} /></Label>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </Fragment>\n                ) : <NoDescriptionAvailable/>\n            }\n            <Stack hasGutter>\n                {rules && rules.map((rule, i) => (\n                    rule && (\n                        <div key={i} className=\"rule\">\n                            <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            <Label isInline>\n                                <span className=\"rule-name\">{rule.description || rule.rule_id}</span>\n                            </Label>\n                            <CSAwRuleSummary\n                                text={rule.summary}\n                                truncate={false}\n                                className=\"pf-u-mt-xs\"\n                            />\n                        </div>\n                    )\n                ))}\n                <StackItem className=\"rule-link\">\n                    {handleCVELink(cve, intl.formatMessage(messages.viewMoreAboutThisCve), null, linkToCustomerPortal, true)}\n                </StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n};\n\nCVETableExpandedCell.propTypes = {\n    description: PropTypes.string,\n    rules: PropTypes.array,\n    cve: PropTypes.string,\n    linkToCustomerPortal: PropTypes.bool\n};\n\nexport default CVETableExpandedCell;\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH, CUSTOMER_PORTAL_CVE_PATH, MANUAL_REMEDIATION } from './constants';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../Messages';\nimport CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';\nimport RemediationColumn from '../Components/PresentationalComponents/TableColumns/RemediationColumn';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport function createCveListByAccount(cveList, columns, currentFilters) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        let payload = cveList.payload;\n        let { data, meta, errors } = payload;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const linkToDetailPage = synopsis => currentFilters.advisory_available\n            ? synopsis + `?advisory_available=${currentFilters.advisory_available}`\n            : synopsis + `?ignore_default_params=true`;\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(linkToDetailPage(row.attributes.synopsis), row.attributes.synopsis,\n                        { className: 'pf-u-mr-sm cve-synopsis', style: { display: 'block' } })\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={row.attributes?.rules?.length > 0}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            systems_affected: (\n                <span key={row.id}>\n                    {handleCVELink(linkToDetailPage(row.attributes.synopsis), row.attributes.systems_affected.toString())}\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    {row.attributes.systems_status_divergent > 0 ? (\n                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>\n                            <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                        </Tooltip>\n                    ) : (\n                        ''\n                    )}{' '}\n                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                </span>\n            ),\n            advisory_available: (\n                <span key={row.id}>\n                    {row.attributes.advisory_available\n                        ? intl.formatMessage(messages.available)\n                        : intl.formatMessage(messages.notAvailable)\n                    }\n                </span>\n            )\n        });\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    rules: row.attributes.rules,\n                    exposed_systems_count: row.attributes.systems_affected,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={row.attributes.rules}\n                                    cve={row.attributes.synopsis}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta: { ...meta, cvesCount }, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList, columns, linkToCustomerPortal) {\n    let isLoading = cveList?.isLoading;\n\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        const cvesCount = data?.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, undefined,\n                        { className: 'pf-u-mr-sm', style: { display: 'block' } }, linkToCustomerPortal)\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={!!row.attributes.rule}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            advisories_list: (\n                <span key=\"advisory\">\n                    <AdvisoryColumn\n                        cve={row?.id}\n                        advisoriesList={row?.attributes?.advisories_list}\n                        linkToCustomerPortal={linkToCustomerPortal || row.attributes.remediation === MANUAL_REMEDIATION}\n                    />\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    <SnippetWithPopover row={row} type={1} />\n                </span>\n            ),\n            remediation: (\n                <span key=\"remediation-column\">\n                    <RemediationColumn cve={row.attributes.synopsis} fixable={row.attributes.remediation} />\n                </span>\n            )\n        });\n\n        let rows =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    rules: row.attributes.rule,\n                    cve_status_id: row.attributes.cve_status_id,\n                    status_justification: row.attributes.status_text,\n                    cve_status_justification: row.attributes.cve_status_text,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={[row.attributes.rule]}\n                                    cve={row.attributes.synopsis}\n                                    linkToCustomerPortal={linkToCustomerPortal}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n\n        return {\n            data: rows,\n            meta: { ...meta, cvesCount },\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\n/**\n * Handle CVE link\n * inside vulnerability app use Link route\n * otherwise, create a link to access the cve page (ex, inventory tab)\n * @param {String} synopsis cve ID\n * @param {String} body link text\n * @return {HTMLElement} a href link\n */\nexport function handleCVELink(synopsis, body, linkProps, linkToCustomerPortal, showIcon) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return (\n            <InsightsLink to={\n                '/cves/' + synopsis} {...linkProps}>{body || synopsis} {showIcon && <ExternalLinkAltIcon />\n                }\n            </InsightsLink>\n        );\n    } else {\n        return <a\n            href={`${linkToCustomerPortal ? CUSTOMER_PORTAL_CVE_PATH : CVES_PATH}/${synopsis}`}\n            {...linkProps}\n        >\n            {body || synopsis} {showIcon && <ExternalLinkAltIcon />}\n        </a>;\n    }\n}\n","import unionBy from 'lodash/unionBy';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, rawItems, fetchResource, multiRow = false }) => {\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        if (rawItems) {\n            const collectedItems = unionBy(rawItems.payload.data, selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        } else {\n            const collectedItems = unionBy(data.filter(item => item.id), selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        }\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                selectorHandler(true, response);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n"],"names":["renderer","marked","Renderer","link","prototype","apply","this","arguments","replace","setOptions","CSAwRuleSummary","_ref","text","truncate","intl","props","_objectWithoutProperties","_excluded","React","StackItem","TextContent","className","length","TRUNCATE_TEXT_THRESHOLD","Truncate","expandText","formatMessage","messages","readMore","collapseText","readLess","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","defaultProps","propTypes","PropTypes","isRequired","injectIntl","ErrorHandler","code","parseInt","NotAuthorized","serviceName","SERVICE_NAME","InvalidObject","Unavailable","ErrorState","currentValue","undefined","business_risk_id","label","filterBusinessRisk","type","conditionalFilterType","checkbox","urlParam","key","filterValues","onChange","event","value","values","filter","join","page","items","BUSINESS_RISK_OPTIONS","map","item","split","currentFilter","_React$useState","_React$useState2","_slicedToArray","searchValue","setSearchValue","_React$useState3","debounce","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","cvssBaseScore","custom","children","CvssCustomFilter","filterId","filterData","setFilterData","selectProps","placeholderText","searchFilterCvssRange","impact","filterSeverity","IMPACT_OPTIONS","hasIcon","SecurityIcon","color","iconColor","known_exploit","filterKnownExploit","KNOWN_EXPLOIT_FILTER_OPTIONS","publish_date","filterPublishDate","radio","filterByPublishDate","PUBLIC_DATE_OPTIONS","PaginationWrapper","meta","variant","totalItems","total_items","pageSize","page_size","TableToolbar","isFooter","Pagination","itemCount","perPage","DEFAULT_PAGE_SIZE","onSetPage","_event","pageNumber","onPerPageSelect","PaginationVariant","ouiaId","concat","isDisabled","GroupedCVELabels","hasExploit","hasRule","isCompact","LabelGroup","KnownExploitLabel","CSAwLabel","style","Tooltip","content","FormattedMessage","knownExploitDescription","Label","_objectSpread","knownExploit","useStatusSelect","initialValue","_useState","useState","_useState2","statusId","setStatusId","_useState3","_useState4","setProps","StatusSelect","FormGroup","statusLabel","fieldId","FormSelect","_extends","selection","STATUS_OPTIONS","FormSelectOption","useJustificationInput","_useState5","_useState6","justification","setJustification","_useState7","_useState8","JustificationInput","justificationLabel","TextArea","resizeOrientation","minHeight","BaseModal","_ref2","title","onSave","onSuccessNotification","onFailureNotification","_useState9","_useState10","targetItems","setTargetItems","dispatch","useDispatch","handleClose","Modal","isOpen","Boolean","onClose","actions","Button","onClick","then","addNotification","error","status","ReadOnlyNotification","NotAuthorizedNotification","save","cancel","updateRef","SnippetWithPopover","_row$attributes","row","attributes","businessRiskJustification","business_risk_text","cveStatusId","cve_status_id","statusJustification","status_text","systemStatusId","status_id","hasDefaultStatus","BusinessRiskPopoverContent","justificationNote","systemStatusOption","find","option","toString","StatusPopoverContent","cveSystemPairStatus","statusOption","popoverContent","Stack","cveStatus","buttonStyle","wordBreak","whiteSpace","maxWidth","textAlign","padding","Popover","bodyContent","id","position","appendTo","document","querySelector","isSmall","onlyThisSystemCvePair","ServerAltIcon","CVETableExpandedCell","description","rules","cve","linkToCustomerPortal","hasDescription","Fragment","Text","component","TextVariants","p","NoDescriptionAvailable","hasGutter","rule","i","isInline","rule_id","summary","handleCVELink","viewMoreAboutThisCve","createCveListByAccount","cveList","columns","currentFilters","isLoading","payload","data","errors","cvesCount","columnKeys","reduce","acc","curr","_curr$isShown","isShown","isShownByDefault","linkToDetailPage","synopsis","advisory_available","cellMapper","_row$attributes$rules","display","public_date","processDate","Shield","hasLabel","cvss_score","parseCvssScore","cvss2_score","cvss3_score","systems_affected","business_risk","systems_status_divergent","createCveListByAccountTooltip","ExclamationTriangleIcon","available","notAvailable","_flatMap","index","business_risk_justification","status_justification","exposed_systems_count","cells","columnKey","selected","fullWidth","parent","createCveListBySystem","systemId","_cveList$payload","_curr$isShown2","_row$attributes2","advisories_list","AdvisoryColumn","advisoriesList","remediation","MANUAL_REMEDIATION","RemediationColumn","fixable","cve_status_justification","cve_status_text","body","linkProps","showIcon","location","href","indexOf","InsightsLink","ExternalLinkAltIcon","CUSTOMER_PORTAL_CVE_PATH","CVES_PATH","selectedItems","selectorHandler","rawItems","fetchResource","_ref$multiRow","multiRow","selectedItemsArray","Array","selectedItemsCount","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","_ref3","response","handleOnCheckboxChange","selectNone","selectPage","count","collectedItems","unionBy","selectAll","baseFlatten","module","exports","collection","iteratee","arrayMap","baseIteratee","baseMap"],"sourceRoot":""}