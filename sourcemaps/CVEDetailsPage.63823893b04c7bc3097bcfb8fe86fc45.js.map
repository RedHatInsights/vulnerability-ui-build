{"version":3,"file":"js/CVEDetailsPage.e00fd33751d4192f2526.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/WithHistory.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./node_modules/react-router-hash-link/dist/react-router-hash-link.esm.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/NotVulnerableBox.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Utilities/useFeatureFlag.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter, isInline = false, 'aria-label': ariaLabel, 'aria-labelledBy': ariaLabelledBy } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: (0, react_styles_1.css)(spinner_1.default.spinner, isInline ? spinner_1.default.modifiers.inline : spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), (ariaLabel && { 'aria-label': ariaLabel }), (ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy }), (!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nimport WithHistory from './WithHistory';\nvar BaseInvTable = function (props) {\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: props.history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\" }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n    history: PropTypes.object,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nvar CompatiblityWrapper = function (props, ref) { return _jsx(WithHistory, __assign({ innerRef: ref, Component: InvTable }, props)); };\nexport default React.forwardRef(CompatiblityWrapper);\n//# sourceMappingURL=InventoryTable.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useMemo } from 'react';\nimport * as reactRouter from 'react-router-dom';\nimport useChrome from '../useChrome';\nvar WithReactRouterHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var history = reactRouter.useHistory();\n    return _jsx(Component, __assign({ history: history }, props));\n};\nvar WithChromeHistory = function (_a) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var chromeHistory = useChrome().chromeHistory;\n    return _jsx(Component, __assign({ history: chromeHistory }, props));\n};\nvar WithHistory = function (_a, ref) {\n    var Component = _a.Component, props = __rest(_a, [\"Component\"]);\n    var HistoryComponent = useMemo(function () { return (typeof reactRouter.useHistory === 'function' ? WithReactRouterHistory : WithChromeHistory); }, [Component, props]);\n    return _jsx(HistoryComponent, __assign({ innerRef: ref, Component: Component }, props));\n};\nexport default React.forwardRef(WithHistory);\n//# sourceMappingURL=WithHistory.js.map","import { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (appliedVersions, apply) => {\n    /* operatingSystems are obtained from the Inventory store */\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n        appName: 'inventory',\n        scope: 'inventory',\n        module: './OsFilterHelpers'\n    });\n\n    return buildOSFilterConfig\n        ? [\n            buildOSFilterConfig(\n                {\n                    label: intl.formatMessage(messages.osFilterLabel),\n                    type: 'checkbox',\n                    id: 'rhel_version',\n                    value: toGroupSelectionValue(\n                        appliedVersions\n                            ? appliedVersions.split(',')\n                            : []\n                    ),\n                    onChange: (event, value) => {\n                    /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                        const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .toString();\n                        apply({ rhel_version: versions, page: 1 });\n                    },\n                    placeholder: intl.formatMessage(messages.osFilterPlaceholder)\n                },\n                operatingSystems\n            )\n        ]\n        : [];\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        For most up-to-date information, {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nvar VALUE_TO_STATE = {\n    1: { icon: _jsx(AngleDoubleDownIcon, {}), text: 'Low', color: 'blue' },\n    2: { icon: _jsx(EqualsIcon, {}), text: 'Moderate', color: 'gold' },\n    3: { icon: _jsx(AngleDoubleUpIcon, {}), text: 'Important', color: 'orange' },\n    4: { icon: _jsx(CriticalRiskIcon, {}), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"rest\"]);\n    return (_jsx(Label, __assign({}, rest, props, { color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }, { children: text || VALUE_TO_STATE[value].text })));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, NavLink } from 'react-router-dom';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nvar hashFragment = '';\r\nvar observer = null;\r\nvar asyncTimerId = null;\r\nvar scrollFunction = null;\r\nfunction reset() {\r\n    hashFragment = '';\r\n    if (observer !== null)\r\n        observer.disconnect();\r\n    if (asyncTimerId !== null) {\r\n        window.clearTimeout(asyncTimerId);\r\n        asyncTimerId = null;\r\n    }\r\n}\r\nfunction isInteractiveElement(element) {\r\n    var formTags = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'];\r\n    var linkTags = ['A', 'AREA'];\r\n    return ((formTags.includes(element.tagName) && !element.hasAttribute('disabled')) ||\r\n        (linkTags.includes(element.tagName) && element.hasAttribute('href')));\r\n}\r\nfunction getElAndScroll() {\r\n    var element = null;\r\n    if (hashFragment === '#') {\r\n        // use document.body instead of document.documentElement because of a bug in smoothscroll-polyfill in safari\r\n        // see https://github.com/iamdustan/smoothscroll/issues/138\r\n        // while smoothscroll-polyfill is not included, it is the recommended way to implement smoothscroll\r\n        // in browsers that don't natively support el.scrollIntoView({ behavior: 'smooth' })\r\n        element = document.body;\r\n    }\r\n    else {\r\n        // check for element with matching id before assume '#top' is the top of the document\r\n        // see https://html.spec.whatwg.org/multipage/browsing-the-web.html#target-element\r\n        var id = hashFragment.replace('#', '');\r\n        element = document.getElementById(id);\r\n        if (element === null && hashFragment === '#top') {\r\n            // see above comment for why document.body instead of document.documentElement\r\n            element = document.body;\r\n        }\r\n    }\r\n    if (element !== null) {\r\n        scrollFunction(element);\r\n        // update focus to where the page is scrolled to\r\n        // unfortunately this doesn't work in safari (desktop and iOS) when blur() is called\r\n        var originalTabIndex = element.getAttribute('tabindex');\r\n        if (originalTabIndex === null && !isInteractiveElement(element)) {\r\n            element.setAttribute('tabindex', -1);\r\n        }\r\n        element.focus({ preventScroll: true });\r\n        if (originalTabIndex === null && !isInteractiveElement(element)) {\r\n            // for some reason calling blur() in safari resets the focus region to where it was previously,\r\n            // if blur() is not called it works in safari, but then are stuck with default focus styles\r\n            // on an element that otherwise might never had focus styles applied, so not an option\r\n            element.blur();\r\n            element.removeAttribute('tabindex');\r\n        }\r\n        reset();\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction hashLinkScroll(timeout) {\r\n    // Push onto callback queue so it runs after the DOM is updated\r\n    window.setTimeout(function () {\r\n        if (getElAndScroll() === false) {\r\n            if (observer === null) {\r\n                observer = new MutationObserver(getElAndScroll);\r\n            }\r\n            observer.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                subtree: true,\r\n            });\r\n            // if the element doesn't show up in specified timeout or 10 seconds, stop checking\r\n            asyncTimerId = window.setTimeout(function () {\r\n                reset();\r\n            }, timeout || 10000);\r\n        }\r\n    }, 0);\r\n}\r\nfunction genericHashLink(As) {\r\n    return React.forwardRef(function (props, ref) {\r\n        var linkHash = '';\r\n        if (typeof props.to === 'string' && props.to.includes('#')) {\r\n            linkHash = \"#\" + props.to.split('#').slice(1).join('#');\r\n        }\r\n        else if (typeof props.to === 'object' &&\r\n            typeof props.to.hash === 'string') {\r\n            linkHash = props.to.hash;\r\n        }\r\n        var passDownProps = {};\r\n        if (As === NavLink) {\r\n            passDownProps.isActive = function (match, location) {\r\n                return match && match.isExact && location.hash === linkHash;\r\n            };\r\n        }\r\n        function handleClick(e) {\r\n            reset();\r\n            hashFragment = props.elementId ? \"#\" + props.elementId : linkHash;\r\n            if (props.onClick)\r\n                props.onClick(e);\r\n            if (hashFragment !== '' &&\r\n                // ignore non-vanilla click events, same as react-router\r\n                // below logic adapted from react-router: https://github.com/ReactTraining/react-router/blob/fc91700e08df8147bd2bb1be19a299cbb14dbcaa/packages/react-router-dom/modules/Link.js#L43-L48\r\n                !e.defaultPrevented && // onClick prevented default\r\n                e.button === 0 && // ignore everything but left clicks\r\n                (!props.target || props.target === '_self') && // let browser handle \"target=_blank\" etc\r\n                !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) // ignore clicks with modifier keys\r\n            ) {\r\n                scrollFunction =\r\n                    props.scroll ||\r\n                        (function (el) {\r\n                            return props.smooth\r\n                                ? el.scrollIntoView({ behavior: 'smooth' })\r\n                                : el.scrollIntoView();\r\n                        });\r\n                hashLinkScroll(props.timeout);\r\n            }\r\n        }\r\n        var filteredProps = __rest(props, [\"scroll\", \"smooth\", \"timeout\", \"elementId\"]);\r\n        return (React.createElement(As, __assign({}, passDownProps, filteredProps, { onClick: handleClick, ref: ref }), props.children));\r\n    });\r\n}\r\nvar HashLink = genericHashLink(Link);\r\nvar NavHashLink = genericHashLink(NavLink);\r\nif (process.env.NODE_ENV !== 'production') {\r\n    HashLink.displayName = 'HashLink';\r\n    NavHashLink.displayName = 'NavHashLink';\r\n    var propTypes = {\r\n        onClick: PropTypes.func,\r\n        children: PropTypes.node,\r\n        scroll: PropTypes.func,\r\n        timeout: PropTypes.number,\r\n        elementId: PropTypes.string,\r\n        to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n    };\r\n    HashLink.propTypes = propTypes;\r\n    NavHashLink.propTypes = propTypes;\r\n}\n\nexport { HashLink, NavHashLink, genericHashLink };\n//# sourceMappingURL=react-router-hash-link.esm.js.map\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\nimport { HashLink } from 'react-router-hash-link';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    /*eslint-disable max-len*/\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <HashLink\n                                                smooth\n                                                key={rule.rule_id}\n                                                to={\n                                                    `/insights/vulnerability/cves/${synopsis}/?rule=${rule.rule_id}#systems-exposed-table-header`\n                                                }\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </HashLink>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n/*eslint-enable max-len*/\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Text,\n    TextContent,\n    TextVariants,\n    SplitItem,\n    Split,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './CSAwRuleBox.scss';\nimport NotVulnerableLabel from '../Snippets/NotVulnerableLabel';\nimport { changeExposedSystemsParameters } from '../../../Store/Actions/Actions';\nimport { ONLY_NON_VULNERABLE_SYSTEMS } from '../../../Helpers/constants';\n\nconst NotVulnerableBox = ({ synopsis, notVulnerableSystemCount }) => {\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const handleExposedSystemFilter = () => {\n        dispatch(changeExposedSystemsParameters({ rule: ONLY_NON_VULNERABLE_SYSTEMS }));\n    };\n\n    return (\n        notVulnerableSystemCount > 0 &&\n        <Card className=\"card-box\" ouiaId=\"not-vulnerable-box\">\n            <ExpandableSection toggleText={\n                <Split>\n                    <SplitItem className=\"pf-u-mr-xl\">\n                        <TextContent>\n                            <Text component={TextVariants.h4}>\n                                <NotVulnerableLabel className=\"pf-u-mr-sm\" />\n                                {intl.formatMessage(messages.notVulnerableBoxTitle)}\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                    <SplitItem id=\"filter-affected-systems-split\">\n                        <TextContent>\n                            <Text\n                                id=\"filter-affected-systems\"\n                                onClick={event => {\n                                    handleExposedSystemFilter();\n                                    event.stopPropagation();\n                                }}\n                                component={TextVariants.small}\n                            >\n                                <InsightsLink\n                                    to={`/cves/${synopsis}`}\n                                >\n                                    {\n                                        intl.formatMessage(\n                                            messages.filterByAffectedSystems,\n                                            {\n                                                count: notVulnerableSystemCount\n                                            }\n                                        )\n                                    }\n                                </InsightsLink>\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                </Split>\n            }>\n                <CardBody className=\"rule-card-body\">\n                    {intl.formatMessage(messages.notVulnerableDescription, { multiple: true })}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nNotVulnerableBox.propTypes = {\n    synopsis: PropTypes.string,\n    notVulnerableSystemCount: PropTypes.number\n};\n\nexport default NotVulnerableBox;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\nimport NotVulnerableBox from '../CSAwRuleBox/NotVulnerableBox';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n            <NotVulnerableBox\n                synopsis={data.data.synopsis}\n                notVulnerableSystemCount={data.data.affected_but_not_vulnerable}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail,\n    fetchAffectedSystemIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    PERMISSIONS,\n    ANSIBLE_REMEDIATION,\n    RULE_PRESENCE_OPTIONS,\n    DEFAULT_PAGE_SIZE\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { useBulkSelect, useColumnManagement, useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { buildActiveFilters, exportConfig, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport Remediation from '../Remediation/Remediation';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';\nimport useFeatureFlag from '../../../Utilities/useFeatureFlag';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[canReadHostsInventory], isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const inventoryGroupsEnabled = useFeatureFlag('hbi.ui.inventory-groups');\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n    const filteredColumns = columns.filter(column => !column.inventoryGroupsFeatureFlag || inventoryGroupsEnabled);\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(filteredColumns, newColumns => dispatch(changeColumnsCveDetail(newColumns)));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return filteredColumns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    const rawData = { data: items, meta: { totalItems }, isLoaded };\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = [\n        ...isLoaded ? [\n            <Remediation\n                manyRules\n                isDisabled={selectedRows.length === 0}\n                systems={remediableSystems}\n                cves={{ id: cveName, rules: filterRuleValues }}\n                key=\"remediation\"\n            />\n        ] : [],\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnManagementModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryNameFilter = useSearchFilter(\n        'advisory',\n        messages.advisoryName,\n        messages.searchFilterByAdvisoryName,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    const onCollapse = (e, rowIndex, isOpen, rowData) => {\n        const collapseAll = rowIndex === undefined;\n\n        collapseAll\n            ? expandAll(rawData, isAllExpanded)\n            : dispatch(expandRow(rowData.id, isOpen));\n    };\n\n    const canSelect = canEditPairStatus;\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2} id=\"systems-exposed-table-header\">\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {StatusModal && <StatusModal />}\n                {ColumnManagementModal}\n\n                {isLoadingInventory ? <Spinner centered /> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode} />\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: DEFAULT_PAGE_SIZE,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                ...hasSecurityRule && {\n                                    canCollapseAll: true,\n                                    onCollapse\n                                },\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={canSelect && totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            hideFilters={{ all: true, hostGroupFilter: false }}\n                            noSystemsTable={<EmptyStateNoSystems />}\n                            actionsConfig={{\n                                actions: kebabOptions,\n                                dropdownProps: { ouiaId: 'toolbar-actions' }\n                            }}\n                            expandable={hasSecurityRule}\n                            exportConfig={canExport && {\n                                isDisabled: totalItems === 0,\n                                ouiaId: 'export',\n                                ...exportConfig({ downloadReport })\n                            }}\n                            activeFiltersConfig={{\n                                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                                onDelete: (_, chips) => removeFilters(chips, apply),\n                                deleteTitle: intl.formatMessage(messages.resetFilters)\n                            }}\n                            bulkSelect={canSelect ? bulkSelectProps : undefined}\n                            filterConfig={{\n                                items: [\n                                    searchFilter,\n                                    securityRuleFilter(\n                                        apply,\n                                        parameters,\n                                        filterRuleValues,\n                                        {\n                                            isDynamic: true,\n                                            dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')\n                                        }\n                                    ),\n                                    statusFilter(apply, parameters),\n                                    ...meta?.cves_without_errata ? [advisoryAvailabilityFilter(apply, parameters)] : [],\n                                    advisoryNameFilter,\n                                    ...osVersionFilter,\n                                    remediationFilter(apply, parameters)\n                                ]\n                            }}\n                        />\n                }\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const { cve: cveName } = useParams();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => {\n        dispatch(clearInventoryStore());\n\n        // timestamp is used to force inventory to refresh\n        // if it wasn't there inventory might ignore request to refresh because parameters are the same\n        inventoryRef.current.onRefreshData(({ timestamp: Date.now(), page: 1 }));\n    };\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                isLoaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                isLoaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized serviceName={SERVICE_NAME} />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_status_text === arr[0]?.cve_status_text);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_text || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.status_text === arr[0]?.status_text);\n\n                    return sameAsEachOther ? cveList[0]?.status_text || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst Remediation = ({ cves, systems, manyRules, isDisabled }) => {\n    const dispatch = useDispatch();\n\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    /*eslint-disable camelcase*/\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, rule, rule_id }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                } else if (rule_id) {\n                    issue.id = `${issue.id}:${rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n    /*eslint-enable camelcase*/\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatch(addNotification(result.getNotification()))}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </AsyncComponent>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string,\n        propTypes.shape({\n            id: propTypes.string,\n            rules: propTypes.array\n        })\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default Remediation;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport { DEFAULT_PAGE_SIZE } from '../../Helpers/constants';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: DEFAULT_PAGE_SIZE,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n    const { flagsReady } = useFlagsStatus();\n    const isFlagEnabled = useFlag(flag);\n    return flagsReady ? isFlagEnabled : false;\n};\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","children","__assign","assign","n","arguments","apply","this","BaseInvTable","store","Cmp","className","Suspense","fallback","ScalprumComponent","history","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","Component","WithReactRouterHistory","WithChromeHistory","chromeHistory","HistoryComponent","useMemo","appliedVersions","operatingSystems","useSelector","_ref","entities","_useLoadModule","useLoadModule","_useLoadModule2$","_slicedToArray","_useLoadModule2$2","toGroupSelectionValue","buildOSFilterConfig","label","intl","formatMessage","messages","osFilterLabel","type","id","value","split","onChange","event","versions","values","flatMap","keys","toString","rhel_version","page","placeholder","osFilterPlaceholder","currentValue","undefined","remediation","filterRemediation","conditionalFilterType","checkbox","urlParam","key","filterValues","filter","join","items","REMEDIATION_OPTIONS","map","item","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","description","link","rh_link","hasDescription","React","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","grow","default","WithLoader","isLoading","variant","LoaderType","inlineSkeleton","rectangle","style","TextContent","textAlign","Text","TextVariants","NoDescriptionAvailable","injectIntl","V3names","AV","vectorNamesV3AV","N","vectorValuesNetwork","A","vectorValuesAdjacent","L","vectorValuesLocal","P","vectorValuesPhysical","AC","vectorNamesV3AC","vectorValuesLow","H","vectorValuesHigh","PR","vectorNamesV3PR","vectorValuesNone","UI","vectorNamesV3UI","R","vectorValuesRequired","S","vectorNamesV3S","U","vectorValuesUnchanged","C","vectorValuesChanged","vectorNamesV3C","I","vectorNamesV3I","vectorNamesV3A","CVSS","vectorNamesCvssVersion","V2names","vectorNamesV2AV","vectorValuesAdjacentNetwork","vectorNamesV2AC","Au","vectorNamesV2AU","M","vectorValuesMultiple","vectorValuesSingle","vectorNamesV2C","vectorValuesComplete","vectorValuesPartial","vectorNamesV2I","vectorNamesV2A","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","_curr$split","_curr$split2","val","cvssVersion","Popover","position","maxWidth","enableFlip","headerContent","cvssVectorPopoverTitle","bodyContent","colSize","rowSize","compactTable","Table","TableVariant","compact","gridBreakPoint","cells","cvssVectorMetric","cvssVectorValue","rows","entries","TableHeader","TableBody","Label","isLarge","cvssVectorVectorString","OutlinedQuestionCircleIcon","color","substring","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","STATUS_OPTIONS","find","BusinessRiskPopoverContent","justificationNote","Button","onClick","editBusinessRisk","StatusPopoverContent","cveStatus","cveDetailsPageSystemsWTCves","statusLabel","count","editStatus","Split","SplitItem","businessRiskLabel","ExclamationTriangleIcon","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","text","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","_b","hideIcon","rest","hashFragment","observer","asyncTimerId","scrollFunction","disconnect","window","clearTimeout","isInteractiveElement","element","includes","tagName","hasAttribute","getElAndScroll","body","replace","getElementById","originalTabIndex","getAttribute","setAttribute","focus","preventScroll","blur","removeAttribute","genericHashLink","As","linkHash","to","slice","hash","passDownProps","NavLink","isActive","match","location","isExact","filteredProps","timeout","elementId","defaultPrevented","button","target","metaKey","altKey","ctrlKey","shiftKey","scroll","el","smooth","scrollIntoView","behavior","setTimeout","MutationObserver","observe","attributes","childList","subtree","HashLink","Link","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","rule","index","_rule$systems_affecte","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","h4","CSAwLabel","ruleId","stopPropagation","small","filterByAffectedSystems","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","rule_impact","Tooltip","impactTextList","InsightsLabel","riskOfChange","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","remediationLabel","playbook_count","Fragment","CheckCircleIcon","yes","ansibleRemediationTooltip","no","reboot_required","rebootRequired","kbase_node_id","href","RH_KB_URL","rel","knowledgebaseArticle","ExternalLinkAltIcon","associatedCves","current","associated_cves","cve","_i","CVES_PATH","reduce","prev","PropTypes","KnownExploitSummary","KnownExploitLabel","knownExploitHeader","knownExploitDescription","NotVulnerableBox","notVulnerableSystemCount","NotVulnerableLabel","notVulnerableBoxTitle","ONLY_NON_VULNERABLE_SYSTEMS","InsightsLink","notVulnerableDescription","multiple","CVEDetailsPageSummary","data","known_exploit","affected_but_not_vulnerable","SystemsExposedTable","cveName","cveStatusDetails","filterRuleValues","hasSecurityRule","canEditPairStatus","canExport","inventoryRef","refreshInventory","_useRbac","useRbac","PERMISSIONS","readHosts","_useRbac2","canReadHostsInventory","isLoadingInventory","_useState","useState","_useState2","isAllExpanded","setIsAllExpanded","_useState3","_useState4","StatusModal","setStatusModal","_useUrlParams","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParams","inventoryGroupsEnabled","useFeatureFlag","_ref2","shallowEqual","totalItems","_ref3","total","meta","_ref4","_ref5","selectedRows","_ref6","selectedRowsCount","_ref7","_entities$selectedRow","isLoaded","_ref8","loaded","parameters","_ref9","CVEDetailsPageStore","columns","_ref10","filteredColumns","column","inventoryGroupsFeatureFlag","params","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveDetail","_useColumnManagement2","ColumnManagementModal","setColumnManagementModalOpen","_objectSpread","clearInventoryStore","cves","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","expandAll","rawData","row","expandRow","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","_useState5","_useState6","columnCounter","setColumnCount","remediableSystems","system","ANSIBLE_REMEDIATION","kebabOptions","_toConsumableArray","Remediation","manyRules","isDisabled","systems","columnManagementModalTitle","searchFilter","useSearchFilter","systemsSearchName","searchFilterByName","advisoryNameFilter","advisoryName","searchFilterByAdvisoryName","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","handleSelect","payload","selecting","selectRows","fetchResource","ops","fetchAffectedSystemIdsByCve","isOpen","canSelect","h2","affectsSystems","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","_ref12","mergeWithEntities","ReducerRegistry","register","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","DEFAULT_PAGE_SIZE","sortBy","direction","tableProps","isStickyHeader","canSelectAll","canCollapseAll","onCollapse","rowIndex","rowData","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","columnsCounter","defaultColumns","inventoryColumns","_column$isShown","isShown","isShownByDefault","_ref11","hasCheckbox","showActions","hideFilters","all","hostGroupFilter","noSystemsTable","EmptyStateNoSystems","actionsConfig","actions","dropdownProps","expandable","exportConfig","downloadReport","format","DownloadReport","exec","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","resetFilters","bulkSelect","filterConfig","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","statusFilter","cves_without_errata","advisoryAvailabilityFilter","remediationFilter","_details$payload$data","_details$payload$data2","useParams","setPairStatus","setCveStatusAndBusinessRisk","basicReporting","readVulnerabilityResults","_useRbac2$","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","createCveDetailsPage","onRefreshData","timestamp","Date","now","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","status_id","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","cvesPage","Provider","Header","breadcrumbs","unknownCveId","celebrity_name","actionsOuiaId","labels","GroupedCVELabels","hasExploit","hasRule","Main","NotAuthorized","serviceName","SERVICE_NAME","_cveList$7","_useJustificationInpu","useJustificationInput","getJustification","JustificationInput","setJustification","setJustificationProps","setProps","every","_cveList$","_cveList$2","sameAsEachOther","arr","_arr$","_arr$2","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","_useStatusSelect","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","inventory_id","inventoryNames","display_name","_inventoryList$","_cveList$3","_cveList$4","_arr$3","_inventoryList$2","_cveList$5","_cveList$6","_arr$4","cve_status_text","_arr$5","status_text","disabled","onSuccessNotification","notificationSystemStatusUpdateSuccessful","systemName","notificationStatusUpdateSuccessful","onFailureNotification","autoDismiss","notificationStatusUpdateFailureTitle","notificationStatusUpdateFailureBody","modalTitle","cvePairStatusModalTitle","BaseModal","onSave","cveIds","setStatusParams","parseInt","setSystemCveStatus","then","some","_arr$6","_arr$7","showDifferentStatusesWarning","Alert","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","_len","chunks","Array","_key","Form","FormGroup","fieldId","Checkbox","cvePairStatusModalUseOverallCheckbox","isChecked","checked","cvePairStatusModalUseOverallTooltip","verticalAlign","baseIssueTemplate","AsyncComponent","lg","dataProvider","systemsProvider","issues","_rule$rule","systemID","issue","mergeObjectPropertyBy","acc","cveID","remediationProvider","onRemediationCreated","result","getNotification","FormattedMessage","remediateLabel","initialState","tagsLoaded","allTagsLoaded","invConfig","action","newState","ActionTypes","state","selected","selectedRow","modifyInventory","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag"],"sourceRoot":""}