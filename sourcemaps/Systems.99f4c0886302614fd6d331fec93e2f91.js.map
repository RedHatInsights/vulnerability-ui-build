{"version":3,"file":"js/Systems.1645007890744.82864f06b6cf13cf4f31.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar InventoryLoadError = function InventoryLoadError(_ref) {\n  var component = _ref.component,\n      props = _objectWithoutProperties(_ref, [\"component\"]);\n\n  useEffect(function () {\n    console.error(\"Unable to load iventory component. Failed to load \".concat(component, \".\"), props);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"Unable to load inventory component\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Failed to load \", component), /*#__PURE__*/React.createElement(\"code\", null, \"More info can be found in browser console output.\"));\n};\n\nInventoryLoadError.propTypes = {\n  component: PropTypes.string\n};\nexport default InventoryLoadError;","import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport InventoryLoadError from './InventoryLoadError';\n\nvar BaseInvTable = function BaseInvTable(props) {\n  var history = useHistory();\n  var store = useStore();\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: props.fallback\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    history: history,\n    store: store,\n    appName: \"inventory\",\n    module: \"./InventoryTable\",\n    scope: \"inventory\",\n    ErrorComponent: /*#__PURE__*/React.createElement(InventoryLoadError, _extends({\n      component: \"InventoryDetailHead\",\n      history: history,\n      store: store\n    }, props)),\n    ref: props.innerRef\n  }, props)));\n};\n\nBaseInvTable.propTypes = {\n  fallback: PropTypes.node,\n  innerRef: PropTypes.object\n};\n/**\n * Inventory sub component.\n *\n * This component shows systems table connected to redux.\n */\n\nvar InvTable = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseInvTable, _extends({\n    innerRef: ref\n  }, props));\n});\nInvTable.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node\n};\nInvTable.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, {\n    className: \"pf-u-p-lg\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  }))\n};\nexport default InvTable;","import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant=\"checkbox\"\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label=\"os-version-filter\"\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => (\n    <View style={styles.labelsWrapper}>\n        {hasExploit &&\n            <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 62 : 75}\n                    variant={4}\n                    label={intl.formatMessage(messages.knownExploit)}\n                    textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#c9190b',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n        {hasRule &&\n            <View style={styles.label}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 59 : 63}\n                    label={intl.formatMessage(messages.securityRuleLabel)}\n                    textStyle={isSmall ? styles.smallText : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#bee1f4',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n    </View>\n);\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    FILTERS, CVE_REPORT_FILTERS,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? item.chips.length === FILTERS[item.key]?.items.length\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cvefilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cvefilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersExcluded)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersIncluded))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableExcluded)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { NotAuthorizedNotification, PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n    const { systemsReportRestPages, systemsReportFirstPage } = PDF_REPORT_PER_PAGE;\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(data, systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        let data;\n        let meta;\n\n        try {\n            ({ data, meta } = await getSystems({\n                ...params,\n                ...DownloadReport.defaultParams,\n                report: 'true'\n            }));\n        }\n        catch (error) {\n            clearNotifications();\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                fallback={null}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type=\"\"\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size=\"A4\"\n                orientation=\"landscape\"\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch } from 'react-redux';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\n\nconst SystemsTableToolbar = ({\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    intl,\n    canExport,\n    canSetExcludedIncluded,\n    canReadExcluded,\n    parameters,\n    rawData,\n    methods\n}) => {\n    const [exportPDF, setExportPDF] = useState(false);\n    const { apply, handleSelect, doOptOut, setColumnModalOpen } = methods;\n    const dispatch = useDispatch();\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(\n            fetchSystems,\n            params,\n            format,\n            'system-list',\n            notification => dispatch(\n                addNotification(notification)\n            ),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const kebabProps = useMemo(() => {\n        return {\n            selectedExcluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === true),\n            selectedIncluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === false)\n        };\n    }, [selectedRowsRawData]);\n\n    const kebabOptions = [\n        '',\n        ...canSetExcludedIncluded ? [{\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, true),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, false, selectedRows),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    let filterConfigItems = [\n        useSearchFilter(\n            'filter',\n            messages.systemsSearchName,\n            messages.searchFilterByName,\n            parameters.filter,\n            apply\n        ),\n        ...canReadExcluded ? [excludedFilter(apply, parameters)] : [],\n        useOsVersionFilter(\n            parameters.rhel_version,\n            apply\n        )\n    ];\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={bulkSelectProps}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: filterConfigItems\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(\n                    parameters,\n                    canReadExcluded ? SYSTEMS_DEFAULT_FILTERS : {},\n                    SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={canExport ? {\n                isDisabled: rawData.meta.totalItems === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            } : null}\n        />\n\n        {exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    rawData: dataShape,\n    canExport: propTypes.bool,\n    canSetExcludedIncluded: propTypes.bool,\n    canReadExcluded: propTypes.bool,\n    parameters: propTypes.object,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsTableToolbar);\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { PERMISSIONS, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    clearSystemStore,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsSystemList\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useGetEntities, useOptOutSystems, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsPage = () => {\n    const [[canReadVulnerabilityResults,\n        canSetExcludedIncluded,\n        canExport,\n        canReadExcluded],\n    isLoading] = useRbac([\n        PERMISSIONS.readVulnerabilityResults,\n        PERMISSIONS.setExcludedIncluded,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readExcluded\n    ]);\n\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    let parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);\n    if (!canReadExcluded) {\n        parameters.excluded = '';\n    }\n\n    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);\n    const columns = useSelector(({ SystemsPageStore }) => SystemsPageStore.columns);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const apply = (params) => dispatch(changeSystemsParams(params));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const doOptOut = useOptOutSystems(onRefreshInventory);\n    const getEntities = useGetEntities(APIHelper.getSystems, {});\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    return (\n        isLoading ? <Spinner centered/> :\n            canReadVulnerabilityResults ? <Fragment>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemList(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n                <Header title={intl.formatMessage(messages.vulnerabilitySystemsHeader)} showBreadcrumb={false}/>\n                <Main>\n                    {isLoadingInventory ? <Spinner centered/> :\n                        hasError && !canReadHostsInventory\n                            ? <ErrorHandler code={errorCode}/>\n                            : (\n                                <InventoryTable\n                                    disableDefaultColumns\n                                    onLoad={({ mergeWithEntities }) => {\n                                        ReducerRegistry.register({\n                                            ...mergeWithEntities(\n                                                inventoryEntitiesReducer(columns),\n                                                {\n                                                    page: Number(parameters.page || 1),\n                                                    perPage: Number(parameters.page_size || 20),\n                                                    ...(parameters.sort && {\n                                                        sortBy: {\n                                                            key: parameters.sort.replace(/^-/, ''),\n                                                            direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                        }\n                                                    })\n                                                }\n                                            )\n                                        });\n                                    }}\n                                    tableProps={{\n                                        isStickyHeader: true,\n                                        canSelectAll: false,\n                                        actionResolver: totalItems > 0 && canSetExcludedIncluded\n                                            && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                        variant: TableVariant.compact\n                                    }}\n                                    paginationProps={{\n                                        isDisabled: !totalItems\n                                    }}\n                                    showTagModal\n                                    isFullView\n                                    ref={inventoryRef}\n                                    autoRefresh\n                                    customFilters={{\n                                        vulnerabilityParams: {\n                                            ...parameters\n                                        }\n                                    }}\n                                    columnsCounter={columnCounter}\n                                    columns={defaultColumns => mergeColumns(defaultColumns)}\n                                    getEntities={getEntities}\n                                    hideFilters={{ all: true }}\n                                    noSystemsTable={<EmptyStateNoSystems/>}\n                                >\n                                    <SystemsTableToolbar\n                                        canExport={canExport}\n                                        canSetExcludedIncluded={canSetExcludedIncluded}\n                                        canReadExcluded={canReadExcluded}\n                                        parameters={parameters}\n                                        rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                        selectedRows={selectedRows}\n                                        selectedRowsCount={selectedRowsCount}\n                                        selectedRowsRawData={selectedRowsRawData}\n                                        methods={{\n                                            doOptOut,\n                                            apply,\n                                            handleSelect,\n                                            setColumnModalOpen\n                                        }}\n                                        actions\n                                    />\n                                </InventoryTable>\n                            )}\n                </Main>\n            </Fragment> : <NoAccessPage/>\n    );\n};\n\nexport default SystemsPage;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] || false\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id'),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["InventoryLoadError","_ref","component","props","useEffect","console","error","concat","propTypes","BaseInvTable","history","store","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","InvTable","defaultProps","className","size","filterValue","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","intl","messages","filterValues","children","variant","onToggle","onSelect","_","changedLabel","newValue","changedValue","version","value","includes","splice","indexOf","rhel_version","join","page","selections","map","item","placeholderText","length","loadingVariant","text","onClick","style","maxHeight","overflow","slice","option","index","isDisabled","disabled","key","description","kebabItemDownloadPDF","loading","downloadReport","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","CVElabels","hasRule","hasExploit","isSmall","styles","width","icon","formatMessage","textStyle","left","undefined","labelStyle","border","borderWidth","borderColor","height","firstPagePDF","data","meta","filters","isReportDynamic","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","val","chips","timespan_label","name","isAllChosen","CVE_REPORT_FILTERS","SYSTEM_REPORT_FILTERS","CheckboxCustomFilter","FILTERS","items","cvefilterStringSegments","msg","lowercase","systemsFilterStringSegments","filterStringSegments","i","hasOwnProperty","isFirst","isLast","includedValues","Fragment","intlFormatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","find","multiValue","Object","cve_count","total_items","toString","system_count","header","knownExploitCount","userNotes","identity","first_name","last_name","tablePage","PropTypes","POSSIBLE_HEADERS","hit","columnBuilder","hitColumns","headerContent","push","forEach","id","hasRules","cve","rules","cveRows","knownExploit","attributes","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","system","display_name","os","opt_out","formatDate","updated","withHeader","rows","DownloadSystemsReport","params","buttonProps","useIntl","useState","setLoading","useNotification","addNotification","clearNotifications","systemsReportRestPages","PDF_REPORT_PER_PAGE","systemsReportFirstPage","otherPagesPDF","chunkArray","systemsFetch","getSystems","DownloadReport","report","status","NotAuthorizedNotification","autoDismiss","firstPage","otherPages","systemPage","asyncFunction","reportName","fileName","allPagesHaveTitle","orientation","currentFilter","currentValue","excluded","filterByExcluded","urlParam","onChange","event","EXCLUDED_FILTER_OPTIONS","SystemsTableToolbar","selectedRows","selectedRowsCount","selectedRowsRawData","canExport","canSetExcludedIncluded","canReadExcluded","parameters","rawData","methods","exportPDF","setExportPDF","handleSelect","doOptOut","setColumnModalOpen","dispatch","useDispatch","kebabProps","useMemo","selectedExcluded","some","selectedIncluded","kebabOptions","count","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchSystemsIds","filterConfigItems","useSearchFilter","excludedFilter","useOsVersionFilter","PrimaryToolbar","bulkSelect","actionsConfig","actions","dropdownProps","ouiaId","filterConfig","activeFiltersConfig","buildActiveFilters","onDelete","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","totalItems","extraItems","format","fetchSystems","notification","showButton","onSuccess","dataShape","injectIntl","useRbac","PERMISSIONS","canReadVulnerabilityResults","isLoading","canReadHostsInventory","isLoadingInventory","inventoryRef","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","useSelector","entities","shallowEqual","total","isLoaded","loaded","SystemsPageStore","hasError","errorCode","columns","isColumnModalOpen","clearSystemStore","clearInventoryStore","changeSystemsParams","useOptOutSystems","current","onRefreshData","getEntities","useGetEntities","APIHelper","columnCounter","setColumnCount","Spinner","centered","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsSystemList","isModalOpen","setModalOpen","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","Number","perPage","page_size","sort","sortBy","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","hideFilters","all","noSystemsTable","payload","selectRows","NoAccessPage","initialState","tagsLoaded","allTagsLoaded","invConfig","prevLoadedRows","modifyInventory","state","action","advisory","patchAccess","row","selected","unionBy","results","newState","ActionTypes"],"sourceRoot":""}