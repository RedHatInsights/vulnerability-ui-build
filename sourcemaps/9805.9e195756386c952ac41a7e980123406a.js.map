{"version":3,"file":"js/9805.1679565386962.7b0776c786aa55d38514.js","mappings":"8RA4BA,QAtB2B,SAACA,GAA8B,IAAvBC,EAAgB,UAAH,6CAAG,CAAC,EACxBC,EAAiBD,EAAnCE,iBAEAC,EAAuB,SAAAC,GACzBL,EAAM,CAAEG,iBAAmBE,EAAOC,OAAS,KAAOD,EAAOE,QAAO,SAAAC,GAAK,MAAc,MAAVA,CAAa,IAAEC,KAAK,MAAS,GAAIC,KAAM,GACpH,EAEA,MAAO,CACHC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAC1BC,KAAMC,EAAAA,EAAAA,SACNC,SAAU,mBACVC,IAAK,gBACLC,aAAc,CACVC,SAAU,SAACC,EAAOZ,GACdJ,EAAqBI,EACzB,EACAa,MAAOC,EAAAA,GAAAA,KAA0B,SAAAC,GAAI,MAAK,CAAEZ,MAAOY,EAAKZ,MAAOH,MAAOe,EAAKf,MAAO,IAClFA,MAAQN,EAAeA,EAAasB,MAAM,KAAO,IAG7D,C,mJCkBA,QArC+B,SAACxB,GAA8B,IAAvBC,EAAgB,UAAH,6CAAG,CAAC,EACpD,EAAsCwB,IAAAA,WAAgB,eAA/CC,EAAW,KAAEC,EAAc,KAClC,EAAuBF,IAAAA,UAAe,kBAClCG,KAAS,YAA2B,IAAXC,EAAI,EAAjBC,YACJD,EAAKE,MAAQ,GAAKF,EAAKG,IAAM,IAAMH,EAAKE,MAAQF,EAAKG,IACrDhC,EAAM,CAAEiC,UAAWJ,EAAKE,KAAMG,QAASL,EAAKG,GAAItB,KAAM,GAE9D,GAAG,IAAI,IACV,eANMyB,EAAY,KAQnBV,IAAAA,WAAgB,kBAAME,EAClB,CAAEI,KAAM9B,EAAcgC,WAAa,EAAKD,GAAI/B,EAAciC,SAAW,IACxE,GAAE,CAACjC,IAEJ,IAAMmC,EAAoB,SAAA/B,GACtBsB,EAAe,CAAEI,KAAM1B,EAAOyB,YAAYC,KAAMC,GAAI3B,EAAOyB,YAAYE,KACvEG,EAAa9B,EACjB,EAEA,MAAO,CACHM,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,eAC1BC,KAAMC,EAAAA,EAAAA,OACNE,IAAK,aACLD,SAAU,cACVE,aAAc,CACVmB,SAAW,kBAAC,IAAgB,CACxBpB,IAAI,cACJqB,SAAS,cACTC,WAAY,CAAET,YAAaJ,GAC3Bc,cAAeJ,EACfK,UAAU,YACVC,YAAa,CAAEC,gBAAiB/B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,2BAInE,C,+HCJA,QA9BqB,SAACb,GAA8B,IAAvBC,EAAgB,UAAH,6CAAG,CAAC,EAC5BC,EAAiBD,EAAzB2C,OAEAC,EAAiB,SAAAxC,GACnBL,EAAM,CAAE4C,OAASvC,EAAOC,OAAS,KAAOD,EAAOE,QAAO,SAAAC,GAAK,MAAc,MAAVA,CAAa,IAAEC,KAAK,MAAS,GAAIC,KAAM,GAC1G,EAEA,MAAO,CACHC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,gBAC1BC,KAAMC,EAAAA,EAAAA,SACNC,SAAU,SACVC,IAAK,SACLC,aAAc,CACVC,SAAU,SAACC,EAAOZ,GACdqC,EAAerC,EACnB,EACAa,MAAOyB,EAAAA,GAAAA,KAAmB,SAAAvB,GAAI,MAAK,CAC/BZ,MACI,kBAAC,aAAc,KACTY,EAAKwB,SAAW,kBAAC,KAAY,CAACN,UAAU,aAAaO,MAAOzB,EAAK0B,YAClE1B,EAAKZ,OAGdH,MAAOe,EAAKf,MACf,IACDA,MAAQN,EAAeA,EAAasB,MAAM,KAAO,IAG7D,C,gGCPA,QAxB2B,SAACxB,GAA8B,IAAvBC,EAAgB,UAAH,6CAAG,CAAC,EAC3BC,EAAiBD,EAAhCiD,cAEAC,EAAuB,SAAA9C,GACzBL,EAAM,CACFkD,cAAe7C,EAAOC,OAAS,EAAID,aAAM,EAANA,EAAQI,KAAK,UAAO2C,EACvD1C,KAAM,GAEd,EAEA,MAAO,CACHC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAC1BC,KAAMC,EAAAA,EAAAA,SACNE,IAAK,gBACLC,aAAc,CACVC,SAAU,SAACC,EAAOZ,GACd2C,EAAqB3C,EACzB,EACAa,MAAOgC,EAAAA,GAAAA,KAAiC,YAAe,MAAQ,CAAE1C,MAAjB,EAALA,MAA6BH,MAAjB,EAALA,MAA6B,IAC/EA,MAAON,aAAY,EAAZA,EAAcsB,MAAM,MAGvC,C,gGCMA,QA3B0B,SAACxB,GAA8B,IAAvBC,EAAgB,UAAH,6CAAG,CAAC,EAC3BC,EAAiBD,EAA/BqD,aAGe,KAAjBpD,GAAwBA,IACxBA,EAAe,KAGnB,IAAMqD,EAAsB,SAAA/C,GACxBR,EAAM,CAAEsD,aAAyB,MAAV9C,GAAiBA,GAAU,GAAIE,KAAM,GAChE,EAEA,MAAO,CACHC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAC1BC,KAAMC,EAAAA,EAAAA,MACNE,IAAK,eACLD,SAAU,eACVE,aAAc,CACVC,SAAU,SAACC,EAAOZ,GACd+C,EAAoB/C,EACxB,EACAa,MAAOmC,EAAAA,GAAAA,KAAwB,SAAAjC,GAAI,MAAK,CAAEZ,MAAOY,EAAKZ,MAAOH,MAAOe,EAAKf,MAAO,IAChFA,MAAON,GAGnB,C,iHCzBMuD,EAAoB,SAAH,GAAiC,IAA3BzD,EAAK,EAALA,MAAO0D,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAC9BjD,EAAuDgD,EAAvDhD,KAAmBkD,EAAoCF,EAAjDG,YAAoCC,EAAaJ,EAAxBK,UAKvC,OACI,kBAAC,IAAU,CACPrD,KAAMA,GAAQ,EACdsD,UAAWJ,GAAc,EACzBK,QAASH,GAAYI,EAAAA,GACrBC,UARiB,SAACC,EAAQC,GAAU,OAAKrE,EAAM,CAAEU,KAAM2D,GAAa,EASpEC,gBARkB,SAACF,EAAQH,GAAO,OAAKjE,EAAM,CAAE+D,UAAWE,EAASvD,KAAM,GAAI,EAS7EiD,QAASY,EAAAA,EAAkBZ,GAC3Ba,OAAQ,cAAcC,OAAOF,EAAAA,EAAkBZ,IAC/Ce,YAAad,GAGzB,EAEAH,EAAkBkB,aAAe,CAC7BhB,QAAS,UAGbF,EAAkBmB,UAAY,CAC1B5E,MAAO4E,IAAAA,KAAAA,WACPlB,KAAMkB,IAAAA,OAAAA,WACNjB,QAASiB,IAAAA,QAGb,S,wUC3BMC,EAAqB,SAAH,GAAsB,IAAhB/D,EAAI,EAAJA,KAC1B,EADmC,EAAHgE,IAMxBC,WAJgBC,EAAyB,EAA7CC,mBACeC,EAAW,EAA1BC,cACaC,EAAmB,EAAhCC,YACWC,EAAc,EAAzBC,UAEEC,EAAsC,IAAnBF,GAAwC,IAAhBJ,GAA6C,OAAxBE,EAEhEK,EACF,kBAACC,EAAA,EAAS,KACN,kBAACC,EAAA,EAAK,KACF,kBAAC,IAAqB9E,EAAAA,EAAAA,oBAEzBmE,GAA6B,MAIhCY,EAAqBC,EAAAA,GAAAA,MAAoB,SAAAC,GAAM,OAAIA,EAAOtF,QAAU8E,EAAeS,UAAU,IAE7FC,EACF,kBAACN,EAAA,EAAS,KACN,kBAACC,EAAA,EAAK,KACF,kBAAC,IAAqB9E,EAAAA,EAAAA,uBAGzB+E,aAAkB,EAAlBA,EAAoBjF,QAAS,KAE9B,kBAACgF,EAAA,EAAK,CAAClD,UAAU,cACb,kBAAC,IAAqB5B,EAAAA,EAAAA,oBAEzBuE,GAAuB,MAI1Ba,EAAeJ,EAAAA,GAAAA,MAAoB,SAAAC,GAAM,OAAIA,EAAOtF,QAAU0E,EAAYa,UAAU,IAEpFG,EACF,kBAACC,EAAA,EAAK,KACQ,IAATrF,EAAa2E,EAA6BO,EAC3C,kBAACN,EAAA,EAAS,KACN,kBAACU,EAAA,EAAW,KACR,wBAAI3D,UAAU,oCAElB,kBAACkD,EAAA,EAAK,CAAClD,UAAU,cACb,kBAAC,IAAqB5B,EAAAA,EAAAA,aAG9B,kBAAC6E,EAAA,EAAS,MACLO,aAAY,EAAZA,EAActF,QAAS,OAK9B0F,EAAc,CAChBC,UAAW,SACXtD,MAAOwC,EAAmB,QAAU,GACpCe,WAAY,QACZC,SAAU,QACVC,UAAW,OACXC,QAAS,OAGb,OACI,kBAACC,EAAA,EAAO,CAACC,YAAaV,EAClBW,GAAG,UACH,aAAW,wBACXC,SAAS,OACTC,SAAUC,SAASC,cAAc,mBAGjC,kBAACC,EAAA,GAAM,CACHvD,QAAQ,OACRwD,SAAO,EACPzC,WAAYc,EACZ4B,MAAOf,GACNnB,IAAgBI,EACb,kBAAC+B,EAAA,EAAO,CAACC,QAAS,kBAAC,IAAqBzG,EAAAA,EAAAA,wBACpC,kBAAC,KAAa,CAAC4B,UAAU,cAE5B,GACJ,KAAKmD,aAAkB,EAAlBA,EAAoBjF,QAAS,MAInD,EAEAkE,EAAmBD,UAAY,CAC3B9D,KAAM8D,IAAAA,OACNE,IAAKF,IAAAA,QAGT,U,2DCzFM2C,EAAuB,SAAH,GAA0D,IAApDC,EAAW,EAAXA,YAAaC,EAAK,EAALA,MAAOC,EAAG,EAAHA,IAAKC,EAAoB,EAApBA,qBAC/CC,EAAiBJ,GAA+B,YAAhBA,EAEtC,OACI,kBAACpB,EAAA,EAAW,CAAC3D,UAAU,iBAEfmF,EACI,kBAAC,EAAAC,SAAQ,KACL,kBAAClC,EAAA,EAAK,CAAClD,UAAU,cAAa,kBAAC,IAAqB5B,EAAAA,EAAAA,cACpD,kBAACiH,EAAA,EAAI,CAACC,UAAWC,EAAAA,EAAAA,GAAiBR,IAEtC,kBAAC,KAAsB,MAE/B,kBAACrB,EAAA,EAAK,CAAC8B,WAAS,GACXR,GAASA,EAAMS,KAAI,SAACC,EAAMC,GAAC,OACxBD,GACI,yBAAKlH,IAAKmH,EAAG3F,UAAU,QACnB,kBAAC4F,EAAA,EAAS,CAAC5F,UAAU,eACrB,kBAACkD,EAAA,EAAK,CAAC2C,UAAQ,GACX,0BAAM7F,UAAU,aAAa0F,EAAKX,aAAeW,EAAKI,UAE1D,kBAACC,EAAA,EAAe,CACZC,KAAMN,EAAKO,QACXC,UAAU,EACVlG,UAAU,eAGrB,IAEL,kBAACiD,EAAA,EAAS,CAACjD,UAAU,aAChBmG,EAAclB,EAAK9G,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,sBAAgC,KAAM8G,GAAsB,KAMvH,EAEAJ,EAAqB3C,UAAY,CAC7B4C,YAAaqB,IAAAA,OACbpB,MAAOoB,IAAAA,MACPnB,IAAKmB,IAAAA,OACLlB,qBAAsBkB,IAAAA,MAG1B,U,qnBCvCO,SAASC,EAAuBC,EAASC,GAC5C,IAAIC,EAAYF,GAAWA,EAAQE,UAEnC,IAAKA,EAAW,CACZ,IAAIC,EAAUH,EAAQG,QAChBC,EAAuBD,EAAvBC,KAAMzF,EAAiBwF,EAAjBxF,KAAM0F,EAAWF,EAAXE,OACZC,EAAYF,GAAQA,EAAK7I,OAEzBgJ,EAAaN,EAAQO,QAAO,SAACC,EAAKC,GAAI,aAAiB,QAAZ,EAAAA,EAAKC,eAAO,QAAID,EAAKE,kBAAmBH,EAAI/E,OAAOgF,EAAKxI,KAAOuI,CAAG,GAAE,IAE/GI,EAAa,SAAA9E,GAAG,cAAK,CACvB+E,SACI,0BAAM5I,IAAK6D,EAAI+B,IACX,kBAAC,KAAI,CACD7E,GAAI,SAAW8C,EAAIC,WAAW8E,SAC9BpH,UAAU,2BAETqC,EAAIC,WAAW8E,UAEpB,kBAACC,EAAA,EAAgB,CACbC,WAAYjF,EAAIC,WAAW7B,cAC3B8G,SAAuB,QAAd,EAAAlF,EAAIC,kBAAU,OAAO,QAAP,EAAd,EAAgB0C,aAAK,WAAP,EAAd,EAAuBnH,QAAS,EACzC2J,WAAS,KAIrBC,YACI,0BAAMjJ,IAAK6D,EAAI+B,KAAKsD,EAAAA,EAAAA,IAAYrF,EAAIC,WAAWmF,cAEnDtH,OACI,0BAAM3B,IAAK6D,EAAI+B,IACX,kBAACuD,EAAA,EAAM,CAACxH,OAAQkC,EAAIC,WAAWnC,OAAQyH,UAAQ,KAGvDC,WACI,0BAAMrJ,IAAK6D,EAAI+B,KACV0D,EAAAA,EAAAA,GAAezF,EAAIC,WAAWyF,YAAa1F,EAAIC,WAAW0F,aAAa,IAGhFC,iBACI,0BAAMzJ,IAAK6D,EAAI+B,IACV+B,EAAc9D,EAAIC,WAAW8E,SAAU/E,EAAIC,WAAW2F,iBAAiB3E,aAGhF4E,cACI,0BAAM1J,IAAK6D,EAAI+B,IAEPvF,EAAAA,GAAAA,MACI,SAAAwE,GAAM,OAAIA,EAAOtF,QAAUsE,EAAIC,WAAW5E,iBAAiB4F,UAAU,IACvEpF,OAIdiK,OACI,0BAAM3J,IAAK6D,EAAI+B,IACV/B,EAAIC,WAAW8F,yBAA2B,EACvC,kBAACxD,EAAA,EAAO,CAACC,QAAS,kBAAC,IAAqBzG,EAAAA,EAAAA,gCACpC,kBAAC,KAAuB,CAACmC,MAAM,0CAGnC,GACD,IACF6C,EAAAA,GAAAA,MAAoB,SAAAC,GAAM,OAAIA,EAAOtF,QAAUsE,EAAIC,WAAWQ,UAAUQ,UAAU,IAAEpF,OAGhG,EAiCD,MAAO,CAAEwI,KA/BTA,EACIA,GACA,IAAQA,GAAM,SAACrE,EAAKgG,GAAK,MAAK,CAC1B,CACIjE,GAAI/B,EAAI+B,GACR1G,iBAAkB2E,EAAIC,WAAW5E,iBACjC4K,4BAA6BjG,EAAIC,WAAWE,mBAC5CM,UAAWT,EAAIC,WAAWQ,UAC1ByF,qBAAsBlG,EAAIC,WAAWM,YACrCoC,MAAO3C,EAAIC,WAAW0C,MACtBwD,sBAAuBnG,EAAIC,WAAW2F,iBACtCQ,MAAO5B,EAAWpB,KAAI,SAAAiD,GAAS,MAAK,CAAEC,MAAOxB,EAAW9E,GAAKqG,GAAY,IACzEE,QAAQ,EACRC,UAAU,GAEd,CACIJ,MAAO,CACH,CACIE,MACI,kBAAC,EAAoB,CACjB5D,YAAa1C,EAAIC,WAAWyC,YAC5BC,MAAO3C,EAAIC,WAAW0C,MACtBC,IAAK5C,EAAIC,WAAW8E,aAKpC0B,WAAW,EACXC,OAAgB,EAARV,GAEf,IACUpH,KAAM,EAAF,KAAOA,GAAI,IAAE2F,UAAAA,IAAaJ,UAAAA,EAAWG,OAAAA,EAC5D,CAEA,MAAO,CAAED,KAAM,GAAIzF,KAAOqF,EAAQG,SAAWH,EAAQG,QAAQxF,MAAS,CAAC,EAAGuF,UAAAA,EAC9E,CAEO,SAASwC,EAAsBC,EAAU3C,EAASC,EAASrB,GAC9D,IAAIsB,EAAYF,aAAO,EAAPA,EAASE,UAEzB,IAAKA,EAAW,CACZ,IAiGyB,EAjGzB,EAEIF,EADAG,QAAWC,EAAI,EAAJA,KAAMzF,EAAI,EAAJA,KAAM0F,EAAM,EAANA,OAErBC,EAAYF,aAAI,EAAJA,EAAM7I,OAElBgJ,EAAaN,EAAQO,QAAO,SAACC,EAAKC,GAAI,aAAiB,QAAZ,EAAAA,EAAKC,eAAO,QAAID,EAAKE,kBAAmBH,EAAI/E,OAAOgF,EAAKxI,KAAOuI,CAAG,GAAE,IAE/GI,EAAa,SAAA9E,GAAG,YAAK,CACvB+E,SACI,0BAAM5I,IAAK6D,EAAI+B,IACV+B,EAAc9D,EAAIC,WAAW8E,cAAUzG,EACpC,CAAEX,UAAW,aAAc2E,MAAO,CAAEuE,QAAS,UAAahE,GAE9D,kBAACmC,EAAA,EAAgB,CACbC,WAAYjF,EAAIC,WAAW7B,cAC3B8G,UAAWlF,EAAIC,WAAWoD,KAC1B8B,WAAS,KAIrBC,YACI,0BAAMjJ,IAAK6D,EAAI+B,KAAKsD,EAAAA,EAAAA,IAAYrF,EAAIC,WAAWmF,cAEnDtH,OACI,0BAAM3B,IAAK6D,EAAI+B,IACX,kBAACuD,EAAA,EAAM,CAACxH,OAAQkC,EAAIC,WAAWnC,OAAQyH,UAAQ,KAGvDC,WACI,0BAAMrJ,IAAK6D,EAAI+B,KACV0D,EAAAA,EAAAA,GAAezF,EAAIC,WAAWyF,YAAa1F,EAAIC,WAAW0F,aAAa,IAGhFmB,SACI,0BAAM3K,IAAI,YACN,kBAAC4K,EAAA,EAAc,CACXnE,IAAK5C,aAAG,EAAHA,EAAK+B,GACViF,eAAgBhH,SAAe,QAAZ,EAAHA,EAAKC,kBAAU,WAAZ,EAAH,EAAiBgH,gBACjCpE,qBAAsBA,KAIlCgD,cACI,0BAAM1J,IAAK6D,EAAI+B,IAEPvF,EAAAA,GAAAA,MACI,SAAAwE,GAAM,OAAIA,EAAOtF,QAAUsE,EAAIC,WAAW5E,iBAAiB4F,UAAU,IACvEpF,OAIdiK,OACI,0BAAM3J,IAAK6D,EAAI+B,IACX,kBAAC,EAAkB,CAAC/B,IAAKA,EAAKhE,KAAM,KAG5CkL,YACI,0BAAM/K,IAAI,sBACN,kBAACgL,EAAA,EAAiB,CAACC,QAASpH,EAAIC,WAAWiH,eAGtD,EAEGG,EACAhD,GACA,IAAQA,GAAM,SAACrE,EAAKgG,GAAK,MAAK,CAC1B,CACIjE,GAAI/B,EAAI+B,GACR1G,iBAAkB2E,EAAIC,WAAW5E,iBACjC4K,4BAA6BjG,EAAIC,WAAWE,mBAC5CM,UAAWT,EAAIC,WAAWQ,UAC1BkC,MAAO3C,EAAIC,WAAWoD,KACtBhD,cAAeL,EAAIC,WAAWI,cAC9B6F,qBAAsBlG,EAAIC,WAAWM,YACrC+G,yBAA0BtH,EAAIC,WAAWsH,gBACzCnB,MAAO5B,EAAWpB,KAAI,SAAAiD,GAAS,MAAK,CAAEC,MAAOxB,EAAW9E,GAAKqG,GAAY,IACzEE,QAAQ,EACRC,UAAU,GAEd,CACIJ,MAAO,CACH,CACIE,MACI,kBAAC,EAAoB,CACjB5D,YAAa1C,EAAIC,WAAWyC,YAC5BC,MAAO,CAAC3C,EAAIC,WAAWoD,MACvBT,IAAK5C,EAAIC,WAAW8E,SACpBlC,qBAAsBA,MAKtC4D,WAAW,EACXC,OAAgB,EAARV,GAEf,IAWL,OATKpH,SAAAA,EAAM4I,eACPH,EAAW,QAAP,EAAGA,SAAI,aAAJ,EAAMjE,KAAI,SAAApD,GACb,OAAO,EAAP,KACOA,GAAG,IACNoG,MAAOpG,EAAIoG,MAAM3K,QAAO,SAAAgM,GAAI,YAAyB,cAArBA,SAAW,QAAP,EAAJA,EAAMnB,aAAK,WAAP,EAAJ,EAAanK,IAAkB,KAEvE,KAGG,CACHkI,KAAMgD,EACNzI,KAAM,EAAF,KAAOA,GAAI,IAAE2F,UAAAA,IACjBD,OAAAA,EACAH,UAAAA,EAER,CAEA,MAAO,CAAEE,KAAM,GAAIzF,KAAOqF,EAAQG,SAAWH,EAAQG,QAAQxF,MAAS,CAAC,EAAGuF,UAAAA,EAC9E,CAUO,SAASL,EAAciB,EAAU2C,EAAMC,EAAW9E,EAAsB+E,GAC3E,OAAgD,IAA5CC,SAASC,KAAKC,QAAQ,iBACf,kBAAC,MAAI,QAAC7K,GAAI,SAAW6H,GAAc4C,GAAYD,GAAQ3C,EAAS,IAAE6C,GAAY,kBAAC,KAAmB,OAElG,+BACHE,KAAI,UAAKjF,EAAuBmF,EAAAA,GAA2BC,EAAAA,GAAS,YAAIlD,IACpE4C,GAEHD,GAAQ3C,EAAS,IAAE6C,GAAY,kBAAC,KAAmB,MAGhE,C,8FCxMA,QA1D0B,SAAH,GAA6F,IAAvFM,EAAa,EAAbA,cAAeC,EAAe,EAAfA,gBAAiB5L,EAAK,EAALA,MAAO6L,EAAQ,EAARA,SAAUC,EAAa,EAAbA,cAAa,IAAEC,SAAAA,OAAQ,IAAG,GAAK,EACnGC,EAAqBC,MAAMvL,KAAKiL,GAChCO,EAAqBF,GAAsBA,EAAmB/M,OAC5DoD,EAAerC,EAAfqC,KAAMyF,EAAS9H,EAAT8H,KACRqE,EAAmBrE,IAAWmE,MAAMG,QAAQtE,IAASA,EAAK7I,QAAW8M,EAAYjE,EAAK7I,OAAS,EAAI6I,EAAK7I,QAYxGoN,EAAoB,WACtBT,GAAgB,EAAO,GAC3B,EAEMU,EAAkB,WACpB,IAAMzE,GAAYiE,GAAiBA,EAAc,CAAEpJ,UAAWL,EAAKG,YAAanD,KAAM,KAAhFwI,QAENA,GACIA,EAAQ0E,MAAK,YAAwB,IAAfC,EAAQ,EAAd1E,KACZ8D,GAAgB,EAAMY,EAC1B,GACR,EAUA,MAAQ,CACJC,uBAT2B,WACA,IAAvBP,EACAI,IAEAD,GAER,EAIIrM,MAAO,CACH,CACI+J,MAAOxK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,YAC1BkN,QAASL,GAEb,CACItC,MAAO,GAAF,OAAKxK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,WAAqB,CAAEmN,MAAOR,KAC3DO,QAxCa,WACrB,GAAIb,EAAU,CACV,IAAMe,EAAiBC,IAAQhB,EAAShE,QAAQC,KAAMkE,EAAoB,MAC1EJ,GAAgB,EAAMgB,EAC1B,KAAO,CACH,IAAMA,EAAiBC,IAAQ/E,EAAK5I,QAAO,SAAAgB,GAAI,OAAIA,EAAKsF,EAAE,IAAGwG,EAAoB,MACjFJ,GAAgB,EAAMgB,EAC1B,CACJ,GAkCQ,CACI7C,MAAO,GAAF,OAAKxK,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,UAAoB,CAAEmN,MAAOtK,EAAKG,YAAcH,EAAKG,YAAc,KAChGkK,QAASJ,IAMzB,C,kBC5DA,IAAIQ,EAAc,EAAQ,OACtBjG,EAAM,EAAQ,OA2BlBkG,EAAOC,QAJP,SAAiBC,EAAYC,GAC3B,OAAOJ,EAAYjG,EAAIoG,EAAYC,GAAW,EAChD,C,kBC1BA,IAAIC,EAAW,EAAQ,OACnBC,EAAe,EAAQ,OACvBC,EAAU,EAAQ,OAClBjB,EAAU,EAAQ,MAiDtBW,EAAOC,QALP,SAAaC,EAAYC,GAEvB,OADWd,EAAQa,GAAcE,EAAWE,GAChCJ,EAAYG,EAAaF,EAAU,GACjD,C","sources":["webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Snippets/SnippetWithPopover.js","webpack:///./src/Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell.js","webpack:///./src/Helpers/VulnerabilityHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/map.js"],"sourcesContent":["\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterBusinessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        key: 'business_risk',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CvssCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst useCvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        key: 'cvss_score',\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CvssCustomFilter\n                key=\"cvss_filter\"\n                filterId=\"cvss_filter\"\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className=\"pf-u-mb-0\"\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default useCvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSeverity),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        key: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { KNOWN_EXPLOIT_FILTER_OPTIONS  } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst knownExploitFilter = (apply, currentFilter = {}) => {\n    let { known_exploit: currentValue } = currentFilter;\n\n    const filterByKnownExploit = values => {\n        apply({\n            known_exploit: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterKnownExploit),\n        type: conditionalFilterType.checkbox,\n        key: 'known_exploit',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByKnownExploit(value);\n            },\n            items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default knownExploitFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterPublishDate),\n        type: conditionalFilterType.radio,\n        key: 'publish_date',\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst PaginationWrapper = ({ apply, meta, variant }) => {\n    const { page, total_items: totalItems, page_size: pageSize } = meta;\n\n    const handleChangePage = (_event, pageNumber) => apply({ page: pageNumber });\n    const handleSetPageSize = (_event, perPage) => apply({ page_size: perPage, page: 1 });\n\n    return (\n        <Pagination\n            page={page || 1}\n            itemCount={totalItems || 0}\n            perPage={pageSize || DEFAULT_PAGE_SIZE}\n            onSetPage={handleChangePage}\n            onPerPageSelect={handleSetPageSize}\n            variant={PaginationVariant[variant]}\n            ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n            isDisabled={!totalItems}\n        />\n    );\n};\n\nPaginationWrapper.defaultProps = {\n    variant: 'bottom'\n};\n\nPaginationWrapper.propTypes = {\n    apply: propTypes.func.isRequired,\n    meta: propTypes.object.isRequired,\n    variant: propTypes.string\n};\n\nexport default PaginationWrapper;\n","import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport Label from './Label';\n\nconst SnippetWithPopover = ({ type, row }) => {\n    const {\n        business_risk_text: businessRiskJustification,\n        cve_status_id: cveStatusId,\n        status_text: statusJustification,\n        status_id: systemStatusId\n    } = row.attributes;\n    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;\n\n    const BusinessRiskPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {businessRiskJustification || '--'}\n        </StackItem>\n    );\n\n    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());\n\n    const StatusPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.cveSystemPairStatus} />\n            </Label>\n\n            {systemStatusOption?.label || '--'}\n\n            <Label className=\"pf-u-mt-sm\">\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {statusJustification || '--'}\n        </StackItem>\n    );\n\n    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());\n\n    const popoverContent = (\n        <Stack>\n            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}\n            <StackItem>\n                <TextContent>\n                    <hr className=\"splitter pf-u-mb-md pf-u-mt-md\" />\n                </TextContent>\n                <Label className=\"pf-u-mt-sm\">\n                    <FormattedMessage {...messages.cveStatus} />\n                </Label>\n            </StackItem>\n            <StackItem>\n                {statusOption?.label || '--'}\n            </StackItem>\n        </Stack>\n    );\n\n    const buttonStyle = {\n        wordBreak: 'normal',\n        color: hasDefaultStatus ? 'black' : '',\n        whiteSpace: 'unset',\n        maxWidth: '131px',\n        textAlign: 'left',\n        padding: '0px'\n    };\n\n    return (\n        <Popover bodyContent={popoverContent}\n            id=\"popover\"\n            aria-label=\"Business risk popover\"\n            position=\"left\"\n            appendTo={document.querySelector('.vulnerability')}\n        >\n\n            <Button\n                variant=\"link\"\n                isSmall\n                isDisabled={hasDefaultStatus}\n                style={buttonStyle}>\n                {cveStatusId !== systemStatusId ? (\n                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                        <ServerAltIcon className=\"pf-u-m-l\" />\n                    </Tooltip>\n                ) : ('')}\n                {' '}{systemStatusOption?.label || '--'}\n            </Button>\n        </Popover>\n    );\n};\n\nSnippetWithPopover.propTypes = {\n    type: propTypes.number,\n    row: propTypes.object\n};\n\nexport default SnippetWithPopover;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport Label from '../Snippets/Label';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from '../CSAwRuleBox/CSAwRuleSummary';\nimport messages from '../../../Messages';\nimport { handleCVELink } from '../../../Helpers/VulnerabilityHelper';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVETableExpandedCell = ({ description, rules, cve, linkToCustomerPortal }) => {\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <TextContent className=\"expanded-cell\">\n            {\n                hasDescription ? (\n                    <Fragment>\n                        <Label className=\"pf-u-mb-sm\"><FormattedMessage {...messages.description} /></Label>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </Fragment>\n                ) : <NoDescriptionAvailable/>\n            }\n            <Stack hasGutter>\n                {rules && rules.map((rule, i) => (\n                    rule && (\n                        <div key={i} className=\"rule\">\n                            <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            <Label isInline>\n                                <span className=\"rule-name\">{rule.description || rule.rule_id}</span>\n                            </Label>\n                            <CSAwRuleSummary\n                                text={rule.summary}\n                                truncate={false}\n                                className=\"pf-u-mt-xs\"\n                            />\n                        </div>\n                    )\n                ))}\n                <StackItem className=\"rule-link\">\n                    {handleCVELink(cve, intl.formatMessage(messages.viewMoreAboutThisCve), null, linkToCustomerPortal, true)}\n                </StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n};\n\nCVETableExpandedCell.propTypes = {\n    description: PropTypes.string,\n    rules: PropTypes.array,\n    cve: PropTypes.string,\n    linkToCustomerPortal: PropTypes.bool\n};\n\nexport default CVETableExpandedCell;\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH, CUSTOMER_PORTAL_CVE_PATH } from './constants';\nimport SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../Messages';\nimport CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';\nimport RemediationColumn from '../Components/PresentationalComponents/TableColumns/RemediationColumn';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nexport function createCveListByAccount(cveList, columns) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        let payload = cveList.payload;\n        let { data, meta, errors } = payload;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    <Link\n                        to={'/cves/' + row.attributes.synopsis}\n                        className=\"pf-u-mr-sm cve-synopsis\"\n                    >\n                        {row.attributes.synopsis}\n                    </Link>\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={row.attributes?.rules?.length > 0}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            systems_affected: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    {row.attributes.systems_status_divergent > 0 ? (\n                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>\n                            <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                        </Tooltip>\n                    ) : (\n                        ''\n                    )}{' '}\n                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                </span>\n            )\n        });\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    rules: row.attributes.rules,\n                    exposed_systems_count: row.attributes.systems_affected,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={row.attributes.rules}\n                                    cve={row.attributes.synopsis}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta: { ...meta, cvesCount }, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList, columns, linkToCustomerPortal) {\n    let isLoading = cveList?.isLoading;\n\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        const cvesCount = data?.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, undefined,\n                        { className: 'pf-u-mr-sm', style: { display: 'block' } }, linkToCustomerPortal)\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={!!row.attributes.rule}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            advisory: (\n                <span key=\"advisory\">\n                    <AdvisoryColumn\n                        cve={row?.id}\n                        advisoriesList={row?.attributes?.advisories_list}\n                        linkToCustomerPortal={linkToCustomerPortal}\n                    />\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    <SnippetWithPopover row={row} type={1} />\n                </span>\n            ),\n            remediation: (\n                <span key=\"remediation-column\">\n                    <RemediationColumn fixable={row.attributes.remediation} />\n                </span>\n            )\n        });\n\n        let rows =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    rules: row.attributes.rule,\n                    cve_status_id: row.attributes.cve_status_id,\n                    status_justification: row.attributes.status_text,\n                    cve_status_justification: row.attributes.cve_status_text,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={[row.attributes.rule]}\n                                    cve={row.attributes.synopsis}\n                                    linkToCustomerPortal={linkToCustomerPortal}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n\n        if (!meta?.patch_access) {\n            rows = rows?.map(row => {\n                return {\n                    ...row,\n                    cells: row.cells.filter(cell => cell?.title?.key !== 'advisory')\n                };\n            });\n        }\n\n        return {\n            data: rows,\n            meta: { ...meta, cvesCount },\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\n/**\n * Handle CVE link\n * inside vulnerability app use Link route\n * otherwise, create a link to access the cve page (ex, inventory tab)\n * @param {String} synopsis cve ID\n * @param {String} body link text\n * @return {HTMLElement} a href link\n */\nexport function handleCVELink(synopsis, body, linkProps, linkToCustomerPortal, showIcon) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return <Link to={'/cves/' + synopsis} {...linkProps}>{body || synopsis} {showIcon && <ExternalLinkAltIcon />}</Link>;\n    } else {\n        return <a\n            href={`${linkToCustomerPortal ? CUSTOMER_PORTAL_CVE_PATH : CVES_PATH}/${synopsis}`}\n            {...linkProps}\n        >\n            {body || synopsis} {showIcon && <ExternalLinkAltIcon />}\n        </a>;\n    }\n}\n","import unionBy from 'lodash/unionBy';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, rawItems, fetchResource, multiRow = false }) => {\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        if (rawItems) {\n            const collectedItems = unionBy(rawItems.payload.data, selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        } else {\n            const collectedItems = unionBy(data.filter(item => item.id), selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        }\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                selectorHandler(true, response);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n"],"names":["apply","currentFilter","currentValue","business_risk_id","filterByBusinessRisk","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","BUSINESS_RISK_OPTIONS","item","split","React","searchValue","setSearchValue","debounce","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","filterByCvssRange","children","filterId","filterData","setFilterData","className","selectProps","placeholderText","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","color","iconColor","known_exploit","filterByKnownExploit","undefined","KNOWN_EXPLOIT_FILTER_OPTIONS","publish_date","filterByPublishDate","PUBLIC_DATE_OPTIONS","PaginationWrapper","meta","variant","totalItems","total_items","pageSize","page_size","itemCount","perPage","DEFAULT_PAGE_SIZE","onSetPage","_event","pageNumber","onPerPageSelect","PaginationVariant","ouiaId","concat","isDisabled","defaultProps","propTypes","SnippetWithPopover","row","attributes","businessRiskJustification","business_risk_text","cveStatusId","cve_status_id","statusJustification","status_text","systemStatusId","status_id","hasDefaultStatus","BusinessRiskPopoverContent","StackItem","Label","systemStatusOption","STATUS_OPTIONS","option","toString","StatusPopoverContent","statusOption","popoverContent","Stack","TextContent","buttonStyle","wordBreak","whiteSpace","maxWidth","textAlign","padding","Popover","bodyContent","id","position","appendTo","document","querySelector","Button","isSmall","style","Tooltip","content","CVETableExpandedCell","description","rules","cve","linkToCustomerPortal","hasDescription","Fragment","Text","component","TextVariants","hasGutter","map","rule","i","CSAwLabel","isInline","rule_id","CSAwRuleSummary","text","summary","truncate","handleCVELink","PropTypes","createCveListByAccount","cveList","columns","isLoading","payload","data","errors","cvesCount","columnKeys","reduce","acc","curr","isShown","isShownByDefault","cellMapper","synopsis","GroupedCVELabels","hasExploit","hasRule","isCompact","public_date","processDate","Shield","hasLabel","cvss_score","parseCvssScore","cvss2_score","cvss3_score","systems_affected","business_risk","status","systems_status_divergent","index","business_risk_justification","status_justification","exposed_systems_count","cells","columnKey","title","isOpen","selected","fullWidth","parent","createCveListBySystem","systemId","display","advisory","AdvisoryColumn","advisoriesList","advisories_list","remediation","RemediationColumn","fixable","rows","cve_status_justification","cve_status_text","patch_access","cell","body","linkProps","showIcon","location","href","indexOf","CUSTOMER_PORTAL_CVE_PATH","CVES_PATH","selectedItems","selectorHandler","rawItems","fetchResource","multiRow","selectedItemsArray","Array","selectedItemsCount","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","then","response","handleOnCheckboxChange","onClick","count","collectedItems","unionBy","baseFlatten","module","exports","collection","iteratee","arrayMap","baseIteratee","baseMap"],"sourceRoot":""}