{"version":3,"file":"js/5514.1644847385599.1832166900116923f939.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/AsyncComponent/index.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(spinner_1.default.spinner, spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0]?.cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? cveList[0]?.justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport classNames from 'classnames';\n\nvar BaseAsyncComponent = function BaseAsyncComponent(_ref) {\n  var appName = _ref.appName,\n      scope = _ref.scope,\n      module = _ref.module,\n      fallback = _ref.fallback,\n      innerRef = _ref.innerRef,\n      className = _ref.className,\n      Cmp = _ref.component,\n      props = _objectWithoutProperties(_ref, [\"appName\", \"scope\", \"module\", \"fallback\", \"innerRef\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Cmp, {\n    className: classNames(className, appName)\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    className: className,\n    appName: appName,\n    module: module,\n    scope: scope || appName,\n    ErrorComponent: fallback,\n    ref: innerRef,\n    fallback: fallback\n  }, props)));\n};\n/**\n * Async component that wraps ScalprumComponent for easier manipulation.\n *\n * This component uses fallback as ErrorComponent, if you want to show different\n * component for error pass it as ErrorComponent prop.\n */\n\n\nvar AsynComponent = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseAsyncComponent, _extends({\n    innerRef: ref\n  }, props));\n});\nAsynComponent.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node,\n\n  /** Name of the app from which module will be loaded. */\n  appName: PropTypes.string.isRequired,\n\n  /** Loaded module, it has to start with `./`. */\n  module: PropTypes.string.isRequired,\n\n  /** Optional scope, if not passed appName is used. */\n  scope: PropTypes.string,\n\n  /** Optional wrapper component */\n  component: PropTypes.string\n};\nAsynComponent.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, null, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  })),\n  component: 'section'\n};\nBaseAsyncComponent.propTypes = _objectSpread(_objectSpread({}, AsynComponent.propTypes), {}, {\n  innerRef: PropTypes.any\n});\nexport default AsynComponent;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst Remediation = ({ cves, systems, manyRules, addNotification: dispatchNotification, isDisabled }) => {\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, attributes: { rule } }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatchNotification(result.getNotification())}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </AsyncComponent>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    addNotification: propTypes.func,\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentFilter","currentValue","remediation","filterByRemediation","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","REMEDIATION_OPTIONS","item","split","CvePairStatusModal","cveList","updateRef","inventoryList","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","count","systemName","onFailureNotification","autoDismiss","description","modalTitle","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","fieldId","name","isChecked","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","BaseAsyncComponent","_ref","appName","scope","module","fallback","innerRef","Cmp","component","props","ScalprumComponent","ErrorComponent","ref","AsynComponent","defaultProps","Bullseye","Spinner","size","Remediation","cves","systems","manyRules","dispatchNotification","addNotification","baseIssueTemplate","system","AsyncComponent","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","rule","issue","rule_id","mergeObjectPropertyBy","acc","cveID","attributes","remediationProvider","onRemediationCreated","result","getNotification","connect","dispatch","notification","routerParams"],"sourceRoot":""}