{"version":3,"file":"js/ImmutableDevices.a6908e89eb1453099ade.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Components/SmartComponents/HybridInventory/ImmutableDevicesTab/helpers.js","webpack:///./src/Components/SmartComponents/HybridInventory/ImmutableDevicesTab/ImmutableDevices.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (appliedVersions, apply) => {\n    /* operatingSystems are obtained from the Inventory store */\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n        appName: 'inventory',\n        scope: 'inventory',\n        module: './OsFilterHelpers'\n    });\n\n    return buildOSFilterConfig\n        ? [\n            buildOSFilterConfig(\n                {\n                    label: intl.formatMessage(messages.osFilterLabel),\n                    type: 'checkbox',\n                    id: 'rhel_version',\n                    value: toGroupSelectionValue(\n                        appliedVersions\n                            ? appliedVersions.split(',')\n                            : []\n                    ),\n                    onChange: (event, value) => {\n                    /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                        const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .toString();\n                        apply({ rhel_version: versions, page: 1 });\n                    },\n                    placeholder: intl.formatMessage(messages.osFilterPlaceholder)\n                },\n                operatingSystems\n            )\n        ]\n        : [];\n};\n\nexport default useOsVersionFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst useSearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        key: urlParam,\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default useSearchFilter;\n","import { getAffectedSystemsByCVE, useGetImageData } from '../../../../Helpers/APIHelper';\nimport { SYSTEMS_EXPOSED_HEADER } from '../../../../Helpers/constants';\n\nexport const fetchFullDeviceInfo = async (parameters, fetchImagesData) => {\n    const vulnerableSystems = await getAffectedSystemsByCVE(parameters);\n    const deviceIds = vulnerableSystems?.data.map(data => data.id);\n\n    if (deviceIds.length) {\n        const deviceData = await fetchImagesData({ devices_uuid: deviceIds });\n        vulnerableSystems.data?.forEach(system => {\n            const systemDevice = deviceData?.data?.devices?.find(device => device.DeviceUUID === system.id);\n            return system.attributes = { ...system.attributes, ...systemDevice };\n        });\n    }\n\n    return vulnerableSystems;\n};\n\nexport const useGetEntities = ({ id, setUrlParams, createRows }) => {\n    const fetchImagesData = useGetImageData();\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, edgeParams, filters }\n    ) => {\n        const { hostnameOrId: filter } = filters;\n        const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n        const params = {\n            filter,\n            ...edgeParams,\n            ...filters?.hostGroupFilter ? {\n                group_names: filters.hostGroupFilter.join(',')\n            } : {},\n            page,\n            page_size: perPage,\n            sort\n        };\n\n        setUrlParams?.({ ...params });\n\n        const items = await fetchFullDeviceInfo(\n            {\n                ...id && { id },\n                ...params\n            },\n            fetchImagesData\n        );\n\n        return {\n            results: typeof createRows === 'function'\n                ? createRows(items || {})\n                : items?.data?.map(row => ({ id: row.id, ...row.attributes })),\n            total: items?.meta?.total_items,\n            page: items?.meta?.page,\n            perPage: items?.meta?.page_size,\n            meta: {\n                page: items?.meta?.page,\n                sort: items?.meta?.sort,\n                page_size: items?.meta?.page_size,\n                cves_without_errata: items?.meta?.cves_without_errata\n            }\n        };\n    };\n\n    return getEntities;\n};\n\nexport const mergeAppColumns = (defaultColumns) => {\n    const osColumn = SYSTEMS_EXPOSED_HEADER.find((column) => column.key === 'os');\n    const advisoryColumn = SYSTEMS_EXPOSED_HEADER.find((column) => column.key === 'advisories_list');\n\n    const osIndex = defaultColumns.findIndex(column =>{\n        return column.key === 'system_profile';\n    });\n    if (osIndex !== -1) {\n        defaultColumns[osIndex] = osColumn;\n    }\n\n    return [...defaultColumns, ...[advisoryColumn || []]];\n};\n","import React, { useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { useUrlParams } from '../../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\n\nimport ReducerRegistry from '../../../../Utilities/ReducerRegistry';\nimport { createExposedDevicesRows } from '../../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeExposedDevicesParameters\n} from '../../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    PERMISSIONS,\n    DEFAULT_PAGE_SIZE\n} from '../../../../Helpers/constants';\nimport ErrorHandler from '../../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { EmptyStateNoSystems } from '../../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { useGetEntities, mergeAppColumns } from './helpers.js';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { buildActiveFilters, removeFilters } from '../../../../Helpers/TableToolbarHelper';\nimport useSearchFilter from '../../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport useOsVersionFilter from '../../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useRbac } from '../../../../Helpers/Hooks';\nimport messages from '../../../../Messages';\n\nconst ImmutableDevices = ({\n    cveName,\n    intl\n}) => {\n    const [[canReadHostsInventory], isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const error = useSelector(({ entities }) => entities?.error || {});\n\n    const parameters = useSelector(\n        ({ ImmutableDevicesStore }) => ImmutableDevicesStore.parameters,\n        shallowEqual\n    );\n\n    const apply = (params) => dispatch(changeExposedDevicesParameters(params));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters }), [parameters]);\n\n    const getEntities = useGetEntities(\n        {\n            id: cveName,\n            createRows: createExposedDevicesRows\n        }\n    );\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryNameFilter = useSearchFilter(\n        'advisory',\n        messages.advisoryName,\n        messages.searchFilterByAdvisoryName,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const activeFilters = {\n        filters: buildActiveFilters({ ...parameters }),\n        onDelete: (_, chips) => removeFilters(chips, apply),\n        deleteTitle: intl.formatMessage(messages.resetFilters)\n    };\n\n    return isLoadingInventory ? <Spinner centered /> :\n        error?.hasError && !canReadHostsInventory    ? <ErrorHandler code={error?.errorCode} />\n            : (<AsynComponent\n                appName=\"inventory\"\n                module=\"./ImmutableDevices\"\n                fallback={<div />}\n                store={ReducerRegistry.getStore()}\n                onLoad={({ mergeWithEntities }) => {\n                    ReducerRegistry.register({\n                        ...mergeWithEntities(\n                            inventoryEntitiesReducer([]),\n                            {\n                                page: Number(parameters.page || 1),\n                                perPage: DEFAULT_PAGE_SIZE,\n                                ...(parameters.sort && {\n                                    sortBy: {\n                                        key: parameters.sort.replace(/^-/, ''),\n                                        direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                    }\n                                })\n                            }\n                        )\n                    });\n                }}\n                key=\"inventory\"\n                customFilters={{\n                    edgeParams: {\n                        ...parameters\n                    }\n                }}\n                getEntities={getEntities}\n                showActions={totalItems !== 0}\n                hideFilters={{ all: true, hostGroupFilter: false }}\n                noSystemsTable={<EmptyStateNoSystems />}\n                mergeAppColumns={mergeAppColumns}\n                filterConfig={{\n                    items: [\n                        searchFilter,\n                        advisoryNameFilter,\n                        ...osVersionFilter\n                    ]\n                }}\n                activeFiltersConfig={activeFilters}\n            />\n            );\n};\n\nImmutableDevices.propTypes = {\n    cveName: propTypes.string,\n    intl: propTypes.object\n};\n\nexport default injectIntl(ImmutableDevices);\n","import messages from '../Messages';\nimport { FILTERS, ONLY_NON_VULNERABLE_SYSTEMS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'rule_presence') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false', ONLY_NON_VULNERABLE_SYSTEMS].includes(parameter)\n                    ? object.name = FILTERS.rule_presence.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'rule_presence' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule ? currentFilters.rule.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (key === 'rhel_version' && hasValue(currentFilters, 'rhel_version')) {\n            array.push({\n                key,\n                multiValue: currentFilters.rhel_version.split(','),\n                category: 'Operating system',\n                chips: currentFilters.rhel_version\n                    .split(',')\n                    .map((v) => ({ value: v, name: `RHEL ${v}` }))\n            });\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisoryName),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        apply({ ...defaultFilters, page: 1, reset });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'rule_presence') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        if (obj[item.key] === '') {\n            obj[item.key] = undefined;\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport { DEFAULT_PAGE_SIZE } from '../../Helpers/constants';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: DEFAULT_PAGE_SIZE,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["appliedVersions","apply","operatingSystems","useSelector","_ref","entities","_useLoadModule","useLoadModule","appName","scope","module","_useLoadModule2$","_slicedToArray","_useLoadModule2$2","toGroupSelectionValue","buildOSFilterConfig","label","intl","formatMessage","messages","osFilterLabel","type","id","value","split","onChange","event","versions","Object","values","flatMap","keys","toString","rhel_version","page","placeholder","osFilterPlaceholder","urlParam","search","_React$useState","React","_React$useState2","searchValue","setSearchValue","_React$useState3","debounce","newValue","_apply","undefined","_defineProperty","handleSearch","conditionalFilterType","text","key","filterValues","concat","fetchFullDeviceInfo","_asyncToGenerator","_regeneratorRuntime","_callee","parameters","fetchImagesData","vulnerableSystems","deviceIds","_vulnerableSystems$da","deviceData","_context","prev","next","getAffectedSystemsByCVE","sent","data","map","length","devices_uuid","forEach","system","_deviceData$data","_deviceData$data$devi","systemDevice","devices","find","device","DeviceUUID","attributes","_objectSpread","abrupt","stop","_x","_x2","arguments","mergeAppColumns","defaultColumns","osColumn","SYSTEMS_EXPOSED_HEADER","column","advisoryColumn","osIndex","findIndex","_toConsumableArray","ImmutableDevices","cveName","_useRbac","useRbac","PERMISSIONS","readHosts","_useRbac2","canReadHostsInventory","isLoadingInventory","dispatch","useDispatch","_useUrlParams","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParams","totalItems","_ref2","total","error","_ref3","_ref4","ImmutableDevicesStore","shallowEqual","params","changeExposedDevicesParameters","useEffect","getEntities","createRows","useGetImageData","_callee2","_items","_items$data","_items$meta","_items$meta2","_items$meta3","_items$meta4","_items$meta5","_items$meta6","_items$meta7","orderBy","orderDirection","perPage","edgeParams","filters","filter","sort","items","_context2","per_page","hostnameOrId","hostGroupFilter","group_names","join","page_size","results","row","meta","total_items","cves_without_errata","_x3","_x4","useGetEntities","createExposedDevicesRows","searchFilter","useSearchFilter","systemsSearchName","searchFilterByName","advisoryNameFilter","advisoryName","searchFilterByAdvisoryName","advisory","osVersionFilter","useOsVersionFilter","activeFilters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","resetFilters","Spinner","centered","hasError","ErrorHandler","code","errorCode","AsynComponent","fallback","store","ReducerRegistry","getStore","onLoad","_ref5","mergeWithEntities","register","inventoryEntitiesReducer","Number","DEFAULT_PAGE_SIZE","sortBy","replace","direction","match","customFilters","showActions","hideFilters","all","noSystemsTable","EmptyStateNoSystems","filterConfig","activeFiltersConfig","propTypes","injectIntl","handleChangePage","_event","handleSetPageSize","exportConfig","methods","onSelect","fileType","downloadReport","currentFilters","filterRuleValues","nameFilter","advisoryFilter","buildChip","parameter","FILTERS","reduce","object","item","name","filteredRule","ONLY_NON_VULNERABLE_SYSTEMS","includes","rule_presence","e","buildChips","paramValues","push","hasValue","filterChips","array","multiValue","rule","category","title","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","v","filteredValues","searchLabel","reset","obj","remainingValues","some","chip","cvss_filter","isFilterInDefaultState","currentParams","defaultParams","filterParams","acc","param","isEqual","initialState","columns","rows","loaded","tagsLoaded","allTagsLoaded","invConfig","selectedRows","selectedRowsCount","action","newState","ActionTypes","state","selected","selectedRow","payload","modifyInventory","selectRows","selecting","isOpen"],"sourceRoot":""}