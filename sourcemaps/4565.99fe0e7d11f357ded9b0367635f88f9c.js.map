{"version":3,"file":"js/4565.1643211403164.5ddd6252e0a2dc3c34db.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/SkeletonTable/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/PresentationalComponents/Snippets/SnippetWithPopover.js","webpack:///./src/Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell.js","webpack:///./src/Helpers/VulnerabilityHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/map.js","webpack:///./node_modules/lodash/union.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { RowSelectVariant, Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Skeleton, SkeletonSize } from '../Skeleton';\nimport PropTypes from 'prop-types';\n\nvar SkeletonTable = /*#__PURE__*/function (_React$Component) {\n  _inherits(SkeletonTable, _React$Component);\n\n  var _super = _createSuper(SkeletonTable);\n\n  function SkeletonTable() {\n    var _this;\n\n    _classCallCheck(this, SkeletonTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"createColumns\", function () {\n      var colSize = _this.props.colSize;\n      return _toConsumableArray(Array(colSize)).map(function () {\n        return {\n          title: /*#__PURE__*/React.createElement(Skeleton, {\n            size: SkeletonSize.sm\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getColumns\", function () {\n      var _this$props = _this.props,\n          paddingColumnSize = _this$props.paddingColumnSize,\n          columns = _this$props.columns;\n      return _this.newArray(paddingColumnSize).map(function () {\n        return '';\n      }).concat(columns || _this.createColumns());\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createRows\", function () {\n      var _this$props2 = _this.props,\n          colSize = _this$props2.colSize,\n          rowSize = _this$props2.rowSize,\n          columns = _this$props2.columns,\n          paddingColumnSize = _this$props2.paddingColumnSize;\n      var numberOfCols = columns ? columns.length : colSize;\n      return _this.newArray(rowSize).map(function () {\n        return {\n          disableSelection: true,\n          cells: _this.newArray(paddingColumnSize).map(function () {\n            return '';\n          }).concat(_this.newArray(numberOfCols).map(function () {\n            return {\n              title: /*#__PURE__*/React.createElement(Skeleton, {\n                size: SkeletonSize.md\n              })\n            };\n          }))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectVariant\", function () {\n      var hasRadio = _this.props.hasRadio;\n      return hasRadio ? (RowSelectVariant === null || RowSelectVariant === void 0 ? void 0 : RowSelectVariant.radio) || 'radio' : (RowSelectVariant === null || RowSelectVariant === void 0 ? void 0 : RowSelectVariant.checkbox) || 'checkbox';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"newArray\", function (size) {\n      return _toConsumableArray(Array(size));\n    });\n\n    return _this;\n  }\n\n  _createClass(SkeletonTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          canSelectAll = _this$props3.canSelectAll,\n          isSelectable = _this$props3.isSelectable,\n          sortBy = _this$props3.sortBy,\n          variant = _this$props3.variant;\n      return /*#__PURE__*/React.createElement(Table, {\n        cells: this.getColumns(),\n        rows: this.createRows(),\n        sortBy: sortBy,\n        \"aria-label\": \"Loading\",\n        onSelect: isSelectable,\n        selectVariant: isSelectable ? this.selectVariant() : null,\n        canSelectAll: canSelectAll,\n        variant: variant\n      }, /*#__PURE__*/React.createElement(TableHeader, null), /*#__PURE__*/React.createElement(TableBody, null));\n    }\n  }]);\n\n  return SkeletonTable;\n}(React.Component);\n\nSkeletonTable.propTypes = {\n  colSize: PropTypes.number,\n  rowSize: PropTypes.number,\n  columns: PropTypes.array,\n  paddingColumnSize: PropTypes.number,\n  sortBy: PropTypes.shape({\n    index: PropTypes.number,\n    direction: PropTypes.oneOf(['asc', 'desc'])\n  }),\n  isSelectable: PropTypes.bool,\n  canSelectAll: PropTypes.bool,\n  hasRadio: PropTypes.bool,\n  variant: PropTypes.string\n};\nSkeletonTable.defaultProps = {\n  rowSize: 0,\n  paddingColumnSize: 0,\n  canSelectAll: false,\n  isSelectable: false,\n  hasRadio: false,\n  variant: null\n};\nexport default SkeletonTable;","/* eslint-disable react/no-danger */\nimport React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterBusinessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        key: 'business_risk',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CvssCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst useCvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        key: 'cvss_score',\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CvssCustomFilter\n                key=\"cvss_filter\"\n                filterId=\"cvss_filter\"\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className=\"pf-u-mb-0\"\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default useCvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSeverity),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        key: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { KNOWN_EXPLOIT_FILTER_OPTIONS  } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst knownExploitFilter = (apply, currentFilter = {}) => {\n    let { known_exploit: currentValue } = currentFilter;\n\n    const filterByKnownExploit = values => {\n        apply({\n            known_exploit: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterKnownExploit),\n        type: conditionalFilterType.checkbox,\n        key: 'known_exploit',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByKnownExploit(value);\n            },\n            items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default knownExploitFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterPublishDate),\n        type: conditionalFilterType.radio,\n        key: 'publish_date',\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst PaginationWrapper = ({ apply, meta, variant }) => {\n    const { page, total_items: totalItems, page_size: pageSize } = meta;\n\n    const handleChangePage = (_event, pageNumber) => apply({ page: pageNumber });\n    const handleSetPageSize = (_event, perPage) => apply({ page_size: perPage, page: 1 });\n\n    return (\n        <Pagination\n            page={page || 1}\n            itemCount={totalItems || 0}\n            perPage={pageSize || DEFAULT_PAGE_SIZE}\n            onSetPage={handleChangePage}\n            onPerPageSelect={handleSetPageSize}\n            variant={PaginationVariant[variant]}\n            ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n            isDisabled={!totalItems}\n        />\n    );\n};\n\nPaginationWrapper.defaultProps = {\n    variant: 'bottom'\n};\n\nPaginationWrapper.propTypes = {\n    apply: propTypes.func.isRequired,\n    meta: propTypes.object.isRequired,\n    variant: propTypes.string\n};\n\nexport default PaginationWrapper;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"pf-u-mt-xs cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel/>}\n            {hasRule && <CSAwLabel/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string\n};\n\nexport default KnownExploitLabel;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport Label from './Label';\n\nconst SnippetWithPopover = props => {\n    const { type, row } = props;\n    const {\n        business_risk_text: businessRiskJustification,\n        cve_status_id: cveStatusId,\n        status_text: statusJustification,\n        status_id: systemStatusId\n    } = row.attributes;\n    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;\n\n    const BusinessRiskPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {businessRiskJustification || '--'}\n        </StackItem>\n    );\n\n    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());\n\n    const StatusPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.cveSystemPairStatus} />\n            </Label>\n\n            {systemStatusOption?.label || '--'}\n\n            <Label className=\"pf-u-mt-sm\">\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {statusJustification || '--'}\n        </StackItem>\n    );\n\n    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());\n\n    const popoverContent = (\n        <Stack>\n            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}\n            <StackItem>\n                <TextContent>\n                    <hr className=\"splitter pf-u-mb-md pf-u-mt-md\" />\n                </TextContent>\n                <Label className=\"pf-u-mt-sm\">\n                    <FormattedMessage {...messages.cveStatus} />\n                </Label>\n            </StackItem>\n            <StackItem>\n                {statusOption?.label || '--'}\n            </StackItem>\n        </Stack>\n    );\n\n    const buttonStyle = {\n        wordBreak: 'normal',\n        color: hasDefaultStatus ? 'black' : '',\n        whiteSpace: 'unset',\n        maxWidth: '131px',\n        textAlign: 'left',\n        padding: '0px'\n    };\n\n    return (\n        <Popover bodyContent={popoverContent}\n            id=\"popover\"\n            aria-label=\"Business risk popover\"\n            position=\"left\"\n            appendTo={document.querySelector('.vulnerability')}\n        >\n\n            <Button\n                variant=\"link\"\n                isSmall\n                isDisabled={hasDefaultStatus}\n                style={buttonStyle}>\n                {cveStatusId !== systemStatusId ? (\n                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                        <ServerAltIcon className=\"pf-u-m-l\" />\n                    </Tooltip>\n                ) : ('')}\n                {' '}{systemStatusOption?.label || '--'}\n            </Button>\n        </Popover>\n    );\n};\n\nSnippetWithPopover.propTypes = {\n    type: propTypes.number,\n    row: propTypes.object\n};\nexport default SnippetWithPopover;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport Label from '../Snippets/Label';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from '../CSAwRuleBox/CSAwRuleSummary';\nimport messages from '../../../Messages';\nimport { handleCVELink } from '../../../Helpers/VulnerabilityHelper';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVETableExpandedCell = ({ description, rules, cve, linkToCustomerPortal }) => {\n\n    const hasDescription = description !== 'No description is available for this CVE.';\n\n    return (\n        <TextContent className=\"expanded-cell\">\n            {\n                hasDescription ? (\n                    <Fragment>\n                        <Label className=\"pf-u-mb-sm\"><FormattedMessage {...messages.description} /></Label>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </Fragment>\n                ) : <NoDescriptionAvailable/>\n            }\n            <Stack hasGutter>\n                {rules && rules.map((rule, i) => (\n                    rule && (\n                        <div key={i} className=\"rule\">\n                            <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            <Label isInline>\n                                <span className=\"rule-name\">{rule.description || rule.rule_id}</span>\n                            </Label>\n                            <CSAwRuleSummary\n                                text={rule.summary}\n                                truncate={false}\n                                className=\"pf-u-mt-xs\"\n                            />\n                        </div>\n                    )\n                ))}\n                <StackItem className=\"rule-link\">\n                    {handleCVELink(cve, intl.formatMessage(messages.viewMoreAboutThisCve), null, linkToCustomerPortal, true)}\n                </StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n};\n\nCVETableExpandedCell.propTypes = {\n    description: PropTypes.string,\n    rules: PropTypes.array,\n    cve: PropTypes.string,\n    linkToCustomerPortal: PropTypes.bool\n};\n\nexport default CVETableExpandedCell;\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH, CUSTOMER_PORTAL_CVE_PATH } from './constants';\nimport SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../Messages';\nimport CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';\nimport RemediationColumn from '../Components/PresentationalComponents/TableColumns/RemediationColumn';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nexport function createCveListByAccount(cveList, columns) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        let payload = cveList.payload;\n        let { data, meta, errors } = payload;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    <Link\n                        to={'/cves/' + row.attributes.synopsis}\n                        className=\"pf-u-mr-sm cve-synopsis\"\n                    >\n                        {row.attributes.synopsis}\n                    </Link>\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={row.attributes?.rules?.length > 0}\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            systems_affected: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    {row.attributes.systems_status_divergent > 0 ? (\n                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>\n                            <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                        </Tooltip>\n                    ) : (\n                        ''\n                    )}{' '}\n                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                </span>\n            )\n        });\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    rules: row.attributes.rules,\n                    exposed_systems_count: row.attributes.systems_affected,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={row.attributes.rules}\n                                    cve={row.attributes.synopsis}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta: { ...meta, cvesCount }, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList, columns, linkToCustomerPortal) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, undefined,\n                        { className: 'pf-u-mr-sm', style: { display: 'block' } }, linkToCustomerPortal)\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={!!row.attributes.rule}\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            advisory: (\n                <span key=\"advisory\">\n                    <AdvisoryColumn\n                        cve={row?.id}\n                        advisoriesList={row?.attributes?.advisories_list}\n                        linkToCustomerPortal={linkToCustomerPortal}\n                    />\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    <SnippetWithPopover row={row} type={1} />\n                </span>\n            ),\n            remediation: (\n                <span key=\"remediation-column\">\n                    <RemediationColumn fixable={row.attributes.remediation} />\n                </span>\n            )\n        });\n\n        let rows =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    rules: row.attributes.rule,\n                    cve_status_id: row.attributes.cve_status_id,\n                    status_justification: row.attributes.status_text,\n                    cve_status_justification: row.attributes.cve_status_text,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={[row.attributes.rule]}\n                                    cve={row.attributes.synopsis}\n                                    linkToCustomerPortal={linkToCustomerPortal}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n\n        if (!meta?.patch_access) {\n            rows = rows?.map(row => {\n                return {\n                    ...row,\n                    cells: row.cells.filter(cell => cell?.title?.key !== 'advisory')\n                };\n            });\n        }\n\n        return {\n            data: rows,\n            meta: { ...meta, cvesCount },\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\n/**\n * Handle CVE link\n * inside vulnerability app use Link route\n * otherwise, create a link to access the cve page (ex, inventory tab)\n * @param {String} synopsis cve ID\n * @param {String} body link text\n * @return {HTMLElement} a href link\n */\nexport function handleCVELink(synopsis, body, linkProps, linkToCustomerPortal, showIcon) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return <Link to={'/cves/' + synopsis} {...linkProps}>{body || synopsis} {showIcon && <ExternalLinkAltIcon />}</Link>;\n    } else {\n        return <a\n            href={`${linkToCustomerPortal ? CUSTOMER_PORTAL_CVE_PATH : CVES_PATH}/${synopsis}`}\n            {...linkProps}\n        >\n            {body || synopsis} {showIcon && <ExternalLinkAltIcon />}\n        </a>;\n    }\n}\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nmodule.exports = union;\n"],"names":["SkeletonTable","_React$Component","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","_isNativeReflectConstruct","result","Super","NewTarget","this","constructor","arguments","apply","_this","_len","length","args","Array","_key","concat","colSize","props","map","title","size","_this$props","paddingColumnSize","columns","newArray","createColumns","_this$props2","rowSize","numberOfCols","disableSelection","cells","hasRadio","RowSelectVariant","key","value","_this$props3","canSelectAll","isSelectable","sortBy","variant","Table","getColumns","rows","createRows","onSelect","selectVariant","TableHeader","TableBody","propTypes","index","direction","defaultProps","renderer","marked","link","replace","CSAwRuleSummary","text","truncate","intl","className","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","currentFilter","currentValue","business_risk_id","filterByBusinessRisk","values","filter","join","page","label","type","conditionalFilterType","urlParam","filterValues","onChange","event","items","BUSINESS_RISK_OPTIONS","item","split","React","searchValue","setSearchValue","debounce","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","filterByCvssRange","children","filterId","filterData","setFilterData","selectProps","placeholderText","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","color","iconColor","known_exploit","filterByKnownExploit","undefined","KNOWN_EXPLOIT_FILTER_OPTIONS","publish_date","filterByPublishDate","PUBLIC_DATE_OPTIONS","dynamicFilters","config","rule_presence","rule","filterBySecurityRule","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","unionWith","isEqual","status_id","filterByStatus","STATUS_OPTIONS","PaginationWrapper","meta","totalItems","total_items","pageSize","page_size","itemCount","perPage","DEFAULT_PAGE_SIZE","onSetPage","_event","pageNumber","onPerPageSelect","PaginationVariant","ouiaId","isDisabled","GroupedCVELabels","hasExploit","hasRule","KnownExploitLabel","style","content","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","justification","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","dispatch","useDispatch","handleClose","isOpen","onClose","actions","onClick","then","addNotification","error","status","ReadOnlyNotification","NotAuthorizedNotification","updateRef","SnippetWithPopover","row","attributes","businessRiskJustification","business_risk_text","cveStatusId","cve_status_id","statusJustification","status_text","systemStatusId","hasDefaultStatus","BusinessRiskPopoverContent","StackItem","Label","systemStatusOption","option","toString","StatusPopoverContent","statusOption","popoverContent","Stack","TextContent","buttonStyle","wordBreak","whiteSpace","maxWidth","textAlign","padding","Popover","bodyContent","id","position","appendTo","document","querySelector","Button","isSmall","Tooltip","CVETableExpandedCell","description","rules","cve","linkToCustomerPortal","hasDescription","Fragment","Text","component","TextVariants","hasGutter","i","CSAwLabel","isInline","rule_id","summary","handleCVELink","createCveListByAccount","cveList","isLoading","payload","data","errors","cvesCount","columnKeys","reduce","acc","curr","isShown","isShownByDefault","cellMapper","synopsis","public_date","processDate","Shield","hasLabel","cvss_score","parseCvssScore","cvss2_score","cvss3_score","systems_affected","business_risk","systems_status_divergent","business_risk_justification","status_justification","exposed_systems_count","columnKey","selected","fullWidth","parent","createCveListBySystem","systemId","display","advisory","AdvisoryColumn","advisoriesList","advisories_list","remediation","RemediationColumn","fixable","cve_status_justification","cve_status_text","patch_access","cell","body","linkProps","showIcon","location","href","indexOf","CUSTOMER_PORTAL_CVE_PATH","CVES_PATH","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","selectedItemsCount","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","count","collectedItems","union","baseFlatten","module","exports","collection","iteratee","arrayMap","baseIteratee","baseMap","baseRest","baseUniq","isArrayLikeObject","arrays"],"sourceRoot":""}