{"version":3,"file":"js/7178.1655988188736.87e8b544725ac6169542.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = __importDefault(require(\"react\"));\nvar react_table_1 = require(\"@patternfly/react-table\");\nvar Skeleton_1 = require(\"../Skeleton\");\nvar classnames_1 = __importDefault(require(\"classnames\"));\nrequire(\"./SkeletonTable.css\");\nvar SkeletonTable = function (_a) {\n    var _b = _a.canSelectAll, canSelectAll = _b === void 0 ? false : _b, _c = _a.isSelectable, isSelectable = _c === void 0 ? false : _c, sortBy = _a.sortBy, variant = _a.variant, _d = _a.isDark, isDark = _d === void 0 ? false : _d, _e = _a.colSize, colSize = _e === void 0 ? 0 : _e, columns = _a.columns, _f = _a.paddingColumnSize, paddingColumnSize = _f === void 0 ? 0 : _f, _g = _a.hasRadio, hasRadio = _g === void 0 ? false : _g, _h = _a.rowSize, rowSize = _h === void 0 ? 0 : _h;\n    var newArray = function (size) { return __spreadArray([], Array(size), true); };\n    var createColumns = function () {\n        return __spreadArray([], Array(colSize), true).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.sm }) }); });\n    };\n    var getColumns = function () {\n        return newArray(paddingColumnSize)\n            .map(function () { return ''; })\n            .concat(columns || createColumns());\n    };\n    var createRows = function () {\n        var numberOfCols = columns ? columns.length : colSize;\n        return newArray(rowSize).map(function () { return ({\n            disableSelection: true,\n            cells: newArray(paddingColumnSize)\n                .map(function () { return ''; })\n                .concat(newArray(numberOfCols).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.md }) }); })),\n        }); });\n    };\n    var selectVariant = function () {\n        return hasRadio ? (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.radio) || 'radio' : (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.checkbox) || 'checkbox';\n    };\n    return (react_1.default.createElement(react_table_1.Table, { className: (0, classnames_1.default)({\n            'ins-c-skeleton-table__dark': isDark,\n        }), cells: getColumns(), rows: createRows(), sortBy: sortBy, \"aria-label\": \"Loading\", onSelect: isSelectable ? function () { return undefined; } : undefined, selectVariant: isSelectable ? selectVariant() : undefined, canSelectAll: canSelectAll, variant: variant },\n        react_1.default.createElement(react_table_1.TableHeader, null),\n        react_1.default.createElement(react_table_1.TableBody, null)));\n};\nexports.default = SkeletonTable;\n//# sourceMappingURL=SkeletonTable.js.map","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, size, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton\n                    size={size ?? SkeletonSize.lg}\n                    {...props}\n                    style={{ display: 'inline-block', ...props.style }}\n                />;\n            default:\n                return <Skeleton size={size ?? SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node,\n    size: propTypes.string\n};\n\nexport default WithLoader;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool.isRequired\n};\n\nexport default injectIntl(CveStatusModal);\n"],"names":["__spreadArray","this","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","react_table_1","Skeleton_1","classnames_1","_a","numberOfCols","_b","canSelectAll","_c","isSelectable","sortBy","variant","_d","isDark","_e","colSize","columns","_f","paddingColumnSize","_g","hasRadio","_h","rowSize","newArray","size","default","createElement","Table","className","cells","map","title","Skeleton","SkeletonSize","sm","rows","disableSelection","md","onSelect","undefined","selectVariant","RowSelectVariant","radio","checkbox","TableHeader","TableBody","kebabItemDownloadPDF","loading","downloadReport","props","key","component","onClick","messages","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","children","centered","TableVariant","shape","style","display","propTypes","keys","BusinessRiskModal","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","currentTarget","onSuccessNotification","formatMessage","count","onFailureNotification","autoDismiss","description","items","onSave","setBusinessRisk","parseInt","cve","item","id","business_risk_text","then","error","ouiaId","hasGutter","fieldId","BUSINESS_RISK_OPTIONS","isChecked","onChange","name","type","resizeOrientation","minHeight","injectIntl","CveStatusModal","canEditPairStatus","useStatusSelect","every","status_id","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","filter","exposed_systems_count","Promise","all","setCveStatus","status_text","setSystemCveStatus","cveId","b","chunks","fontSize","color","content","checked","verticalAlign"],"sourceRoot":""}