{"version":3,"file":"js/LandingPage.79b231836039b8fe3a6d.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsAssets.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Dashbar/Dashbar.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title:\n                        <EmptyStateNoCVEs\n                            secondParagraph={context.cves.meta.cves_without_errata === null\n                                ? messages.emptyStateThereShouldBeCVEsFeatureDisabled\n                                : context.cves.meta.cves_without_errata\n                                    ? messages.emptyStateThereShouldBeCVEsNoErrata\n                                    : messages.emptyStateThereShouldBeCVEs\n                            }\n                        />\n                }\n            ]\n        }]);\n    };\n\n    const { cves, methods, selectedCves, expandedRows, isAllExpanded, params } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    const onCollapseAll = () => {\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const onCollapse = (e, rowIndex) => {\n        const collapseAll = rowIndex === undefined;\n\n        collapseAll\n            ? onCollapseAll()\n            : methods.openCves(rowIndex);\n    };\n\n    const canSelect = canEditStatusOrBusinessRisk;\n    const sortingHeader = [...canSelect ? [{ key: 'checkbox' }] : [], ...header];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Table\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    canCollapseAll\n                    onCollapse={isEmpty ? undefined : onCollapse}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, ...sortingHeader], params.sort)\n                        : undefined\n                    }\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, ...sortingHeader],\n                                params.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                    isExpandable\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            ) : (\n                <SkeletonTable\n                    columns={header}\n                    rowSize={parseInt(params.page_size) || DEFAULT_PAGE_SIZE}\n                    variant={TableVariant.compact}\n                    sortBy={createSortBy(sortingHeader, params.sort)}\n                    isSelectable={canSelect}\n                />)\n            }\n            <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { getAffectingFilterOptions } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}, shouldUseHybridSystemFilter) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    const filterItems = getAffectingFilterOptions(shouldUseHybridSystemFilter);\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: filterItems,\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","\nimport { classNames, expandable, sortable, nowrap, wrappable } from '@patternfly/react-table';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nexport const VULNERABILITIES_HEADER = [\n    {\n        title: intl.formatMessage(messages.cveId),\n        key: 'synopsis',\n        transforms: [sortable],\n        columnTransforms: [wrappable],\n        cellFormatters: [expandable],\n        isShownByDefault: true,\n        isUnhidable: true\n    },\n    {\n        title: intl.formatMessage(messages.publishDate),\n        key: 'public_date',\n        transforms: [sortable, wrappable],\n        columnTransforms: [classNames('hide-description')],\n        isShownByDefault: true\n    },\n    {\n        title: intl.formatMessage(messages.impact),\n        key: 'impact',\n        transforms: [sortable],\n        columnTransforms: [nowrap],\n        isShownByDefault: true\n    },\n    {\n        title: intl.formatMessage(messages.cvssBaseScore),\n        key: 'cvss_score',\n        transforms: [sortable, wrappable],\n        isShownByDefault: true\n    },\n    {\n        title: intl.formatMessage(messages.systemsExposed),\n        key: 'systems_affected',\n        transforms: [sortable, wrappable],\n        isShownByDefault: true\n    },\n    {\n        title: intl.formatMessage(messages.businessRisk),\n        key: 'business_risk',\n        transforms: [sortable, wrappable],\n        isShownByDefault: true\n    },\n    {\n        title: intl.formatMessage(messages.status),\n        key: 'status',\n        transforms: [sortable, wrappable],\n        isShownByDefault: true\n    }\n];\n\nexport const getCveDefaultFilters = (shouldUseHybridSystemFilter) => {\n    return { affecting: shouldUseHybridSystemFilter ?  'rpmdnf,edge' : 'true' };\n};\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport {\n    CVES_FILTER_PARAMS,\n    DEFAULT_PAGE_SIZE,\n    ONLY_NON_VULNERABLE_SYSTEMS,\n    RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport { setCvesWithoutErrata } from '../../../Helpers/APIHelper';\nimport { getCveDefaultFilters } from './CVEsAssets';\nimport { useHybridSystemFilterFlag } from '../../../Helpers/Hooks';\n\nconst CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, canToggleCvesWithoutErrata, intl }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { cves, params, methods, selectedCves } = context;\n    const { isLoading } = cves;\n\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const [showCvesWithoutErrata, setShowCvesWithoutErrata] = useState(null);\n    const shouldUseHybridSystemFilter = useHybridSystemFilterFlag();\n\n    useEffect(() => {\n        if (!isLoading) {\n            // if the API response feature flag value differs currently saved one\n            if (showCvesWithoutErrata !== cves?.meta?.cves_without_errata) {\n                if (cves?.meta?.cves_without_errata === true) {\n                    if (!params.advisory_available) {\n                        methods.apply({ advisory_available: 'true' });\n                    }\n                }\n                else {\n                    if (params.advisory_available) {\n                        methods.apply({ advisory_available: undefined });\n                    }\n                }\n            }\n\n            setShowCvesWithoutErrata(cves?.meta?.cves_without_errata);\n        }\n    }, [cves?.meta?.cves_without_errata, isLoading]);\n\n    const defaultFilters = {\n        ...getCveDefaultFilters(shouldUseHybridSystemFilter),\n        ...cves?.meta?.cves_without_errata ? { advisory_available: 'true' } : {}\n    };\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedCves.map(({\n                    id,\n                    business_risk_id,\n                    business_risk_text,\n                    attributes\n                }) => ({\n                    id,\n                    business_risk_id: attributes ? attributes.business_risk_id : business_risk_id,\n                    justification: attributes ? attributes.business_risk_text : business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves.map(({\n                    id,\n                    exposed_systems_count,\n                    status_justification,\n                    status_id,\n                    attributes\n                }) => ({\n                    id,\n                    exposed_systems_count: attributes ? attributes.systems_affected : exposed_systems_count,\n                    justification: attributes ? attributes.status_text : status_justification,\n                    status_id: attributes ? attributes.status_id : status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnManagementModalOpen(true)\n        },\n        ...canToggleCvesWithoutErrata && showCvesWithoutErrata !== null ? [(\n            showCvesWithoutErrata ?\n                {\n                    label: intl.formatMessage(messages.hideCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(false)\n                        .then(() => methods.apply({ page: 1, advisory_available: undefined }))\n                } :\n                {\n                    label: intl.formatMessage(messages.showCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(true)\n                        .then(() => methods.apply({ page: 1 }))\n                }\n        )] : []\n    ];\n\n    const canSelect = canEditStatusOrBusinessRisk;\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || DEFAULT_PAGE_SIZE,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={canSelect ? {\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                } : undefined}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params, [],\n                            {\n                                isDynamic: false,\n                                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)\n                            }\n                        ),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params, shouldUseHybridSystemFilter),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        ...showCvesWithoutErrata ? [advisoryAvailabilityFilter(methods.apply, params)] : []\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params, [], shouldUseHybridSystemFilter),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, defaultFilters),\n                    deleteTitle: intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, defaultFilters, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n            {exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params, [],  shouldUseHybridSystemFilter)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool,\n    canToggleCvesWithoutErrata: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, Stack, StackItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { CVES_ALLOWED_PARAMS, PATCHMAN_ADVISORY_DOCS_PATH, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useColumnManagement, useHybridSystemFilterFlag, useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { getCveDefaultFilters } from './CVEsAssets';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = ({ rbac }) => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [[\n        canEditStatusOrBusinessRisk,\n        canEditPairStatus,\n        canExport,\n        canReadVulnerabilityResults,\n        canToggleCvesWithoutErrata\n    ], isRbacLoading] = rbac;\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveList(newColumns)));\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns, parameters), [cveList, columns, parameters]);\n    const shouldUseHybridSystemFilter = useHybridSystemFilterFlag();\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS], shouldUseHybridSystemFilter);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply({  ...getCveDefaultFilters(shouldUseHybridSystemFilter), ...urlParameters });\n    }, [shouldUseHybridSystemFilter]);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters, shouldUseHybridSystemFilter));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters, isFirstLoad, shouldUseHybridSystemFilter]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchCveListByAccount,\n            parameters,\n            format,\n            'cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications()),\n            shouldUseHybridSystemFilter\n        );\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered /> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnManagementModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal />\n                        <CveStatusModal />\n\n                        {ColumnManagementModal}\n\n                        <Stack>\n                            <StackItem>\n                                {cves.meta.cves_without_errata && cves.meta.advisory_available !== 'True' &&\n                                    <Alert\n                                        variant=\"info\"\n                                        isInline\n                                        title=\"CVEs with and without an established Advisory\"\n                                    >\n                                        Red Hat&apos;s policy requires displaying all high priority, critical,\n                                        and important CVEs regardless of Advisory status.\n                                        <a\n                                            href={PATCHMAN_ADVISORY_DOCS_PATH}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"pf-u-ml-xs\"\n                                        >\n                                            Learn more about errata advisories\n                                            <ExternalLinkAltIcon className=\"pf-u-ml-xs\" />\n                                        </a>\n                                    </Alert>\n                                }\n                                <CVEsTableToolbar\n                                    aria-label=\"CVEs table toolbar\"\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                    canToggleCvesWithoutErrata={canToggleCvesWithoutErrata}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized serviceName={SERVICE_NAME} />\n        );\n    } else {\n        return <ErrorHandler code={cves.errors.status} />;\n    }\n};\n\nCVEs.propTypes = {\n    rbac: PropTypes.array.isRequired\n};\n\nconst CVEsWithRbac = () => {\n    const rbac = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults,\n        PERMISSIONS.toggleCvesWithoutErrata\n    ]);\n\n    return <CVEs rbac={rbac} />;\n};\n\nexport default CVEsWithRbac;\n","import React, { useEffect, useState } from 'react';\nimport {\n    Card,\n    Grid,\n    GridItem,\n    StackItem,\n    Stack,\n    Alert,\n    CardBody,\n    Text,\n    TextVariants,\n    TextContent,\n    Tooltip\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { impactList } from '../../../Helpers/constants';\nimport { constructFilterParameters, sanitizeLinks } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCveListParameters } from '../../../Store/Actions/Actions';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport propTypes from 'prop-types';\nimport { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';\nimport WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { useIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { getCveDefaultFilters } from '../CVEs/CVEsAssets';\nimport { useHybridSystemFilterFlag } from '../../../Helpers/Hooks';\n\nconst DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {\n    return (\n        <Card isFullHeight className=\"card-box\">\n            <CardBody>\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <b>{title}</b>\n                    </Text>\n                    <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs\">\n                        <Tooltip content=\"This value only shows the CVEs that have advisories.\">\n                            <a onClick={onLinkClick}>\n                                {hasIcon && (<SecurityIcon\n                                    color={impactList[impact]?.iconColor}\n                                    size=\"sm\"\n                                    className=\"pf-u-mr-sm\" />\n                                )}\n                                {count}\n                            </a>\n                        </Tooltip>\n                    </Text>\n                </TextContent>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport { DashbarItem };\n\nDashbarItem.propTypes = {\n    title: propTypes.node,\n    count: propTypes.number.isRequired,\n    impact: propTypes.oneOf(Object.keys(impactList)),\n    onLinkClick: propTypes.func.isRequired,\n    hasIcon: propTypes.bool\n};\n\nconst Dashbar = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [isFirstLoad, setFirstLoad] = useState(true);\n    const [dashbar, setDashbar] = useState({});\n    const [announcement, setAnnouncement] = useState({});\n    const [isDashbarLoading, setDashbarLoading] = useState(true);\n    const shouldUseHybridSystemFilter = useHybridSystemFilterFlag();\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    // reset filters and apply passed ones\n    const applyOnly = (filterParams = {}) => {\n        const chips = buildActiveFilters(parameters, [], shouldUseHybridSystemFilter);\n        removeFilters(chips, apply, true, filterParams);\n    };\n\n    const fetchAnnouncements = async () => {\n        let data = {};\n\n        try {\n            data = await getAnnouncement();\n        }\n        catch (error) {\n            if (error.status !== '404') {\n                throw error;\n            }\n        }\n\n        setAnnouncement(data);\n    };\n\n    const fetchDashbar = async () => {\n        let data = await getDashbar(parameters);\n\n        setDashbar(data);\n        setDashbarLoading(false);\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        } else {\n            fetchAnnouncements();\n            fetchDashbar();\n        }\n    }, [parameters, isFirstLoad]);\n\n    const insertSanitizedHtml = text => ({ __html: sanitizeHtml(text) });\n    const CVES_DEFAULT_FILTERS = getCveDefaultFilters(shouldUseHybridSystemFilter);\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Stack hasGutter>\n                <StackItem>\n                    {!isDashbarLoading ? (\n                        <Grid hasGutter id=\"dashbar\">\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}\n                                    count={dashbar?.exploitable_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            known_exploit: 'true',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}\n                                    count={dashbar?.cves_with_rule}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            rule_presence: 'true',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}\n                                    count={dashbar?.critical_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            impact: '7',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                    impact=\"Critical\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}\n                                    count={dashbar?.important_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            impact: '5',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                    impact=\"Important\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                        </Grid>\n                    ) : (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                        </Grid>\n                    )}\n                </StackItem>\n                {announcement?.message && (\n                    <StackItem id=\"announcement\">\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}\n                        >\n                            <span dangerouslySetInnerHTML={\n                                insertSanitizedHtml(sanitizeLinks(announcement.message))\n                            } />\n                        </Alert>\n                    </StackItem>\n                )}\n            </Stack>\n        </Main>\n    );\n};\n\nDashbar.propTypes = {\n    shouldUseHybridSystemFilter: propTypes.bool\n};\nexport default Dashbar;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\nimport Dashbar from '../Dashbar/Dashbar';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Dashbar />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","_ref","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isAllExpanded","params","isEmpty","data","length","rows","map","cve","find","selectedCve","id","_objectSpread","selected","index","current","includes","undefined","isOpen","canSelect","sortingHeader","concat","_toConsumableArray","key","React","Fragment","isLoading","SkeletonTable","columns","rowSize","parseInt","page_size","DEFAULT_PAGE_SIZE","variant","TableVariant","compact","sortBy","createSortBy","sort","isSelectable","Table","canSelectAll","cells","heightAuto","props","colSpan","title","EmptyStateNoCVEs","secondParagraph","meta","cves_without_errata","messages","emptyStateThereShouldBeCVEsFeatureDisabled","emptyStateThereShouldBeCVEsNoErrata","emptyStateThereShouldBeCVEs","onSelect","event","isSelected","rowId","cveName","selectCves","canCollapseAll","onCollapse","e","rowIndex","filter","openCves","onCollapseAll","actionResolver","rowData","cveTableRowActions","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","isExpandable","TableHeader","TableBody","PaginationWrapper","propTypes","CVETableContext","Consumer","_extends","shouldUseHybridSystemFilter","arguments","currentValue","affecting","filterItems","getAffectingFilterOptions","label","intl","formatMessage","filterSystemsExposed","type","conditionalFilterType","checkbox","urlParam","filterValues","onChange","value","values","join","page","items","split","getCveDefaultFilters","cveId","sortable","wrappable","expandable","publishDate","classNames","impact","nowrap","cvssBaseScore","systemsExposed","businessRisk","status","CVEsTableToolbarWithContext","_cves$meta4","_cves$meta5","canExport","canToggleCvesWithoutErrata","_useState","useState","_useState2","_slicedToArray","exportPDF","setExportPDF","selectedCvesCount","_useState3","_useState4","showCvesWithoutErrata","setShowCvesWithoutErrata","useHybridSystemFilterFlag","useEffect","_cves$meta","_cves$meta3","_cves$meta2","advisory_available","defaultFilters","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","editBusinessRisk","onClick","showBusinessRiskModal","_ref2","business_risk_id","business_risk_text","attributes","justification","isDisabled","editStatus","showStatusModal","_ref3","exposed_systems_count","status_justification","status_id","systems_affected","status_text","columnManagementModalTitle","setColumnManagementModalOpen","hideCvesWithoutAdvisories","setCvesWithoutErrata","then","showCvesWithoutAdvisories","PrimaryToolbar","pagination","total_items","itemCount","perPage","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","searchFilterByCveID","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","item","ONLY_NON_VULNERABLE_SYSTEMS","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","advisoryAvailabilityFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","deleteTitle","resetFilters","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","CVEs","rbac","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","_useState5","_useState6","isFirstLoad","setFirstLoad","_rbac","_rbac$","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","_ref4","_ref5","_ref6","_ref7","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveList","_useColumnManagement2","ColumnManagementModal","useMemo","createCveListByAccount","_useUrlParams","useUrlParams","CVES_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","Spinner","centered","Provider","format","DownloadReport","exec","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","StatusModal","expandCve","Stack","StackItem","Alert","isInline","href","PATCHMAN_ADVISORY_DOCS_PATH","target","rel","className","ExternalLinkAltIcon","CVEsTableToolbar","CVEsTable","column","_column$isShown","isShown","isShownByDefault","NotAuthorized","serviceName","SERVICE_NAME","PropTypes","isRequired","useRbac","PERMISSIONS","setCveStatusAndBusinessRisk","setPairStatus","basicReporting","readVulnerabilityResults","toggleCvesWithoutErrata","DashbarItem","_impactList$impact","onLinkClick","hasIcon","Card","isFullHeight","CardBody","TextContent","Text","component","TextVariants","h4","Tooltip","content","SecurityIcon","color","impactList","iconColor","size","Object","keys","Dashbar","useIntl","dashbar","setDashbar","announcement","setAnnouncement","_useState7","_useState8","isDashbarLoading","setDashbarLoading","applyOnly","fetchAnnouncements","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","getAnnouncement","sent","t0","stop","fetchDashbar","_callee2","_context2","getDashbar","text","CVES_DEFAULT_FILTERS","Main","style","paddingBottom","hasGutter","Grid","GridItem","span","md","WithLoader","LoaderType","inlineSkeleton","height","FormattedMessage","dashbarKnownExploitsTitle","exploitable_cves","known_exploit","dashbarSecurityRulesTitle","cves_with_rule","rule_presence","dashbarCriticalVulnerabilitiesTitle","critical_cves","dashbarImportantVulnerabilitiesTitle","important_cves","message","dashbarAnnouncementTitle","dangerouslySetInnerHTML","sanitizeLinks","__html","sanitizeHtml","Popover","enableFlip","position","headerContent","ovalPopoverHeader","bodyContent","ovalPopoverBody","footerContent","learnMore","cvesHeader","OutlinedQuestionCircleIcon","verticalAlign","Header","showBreadcrumb"],"sourceRoot":""}