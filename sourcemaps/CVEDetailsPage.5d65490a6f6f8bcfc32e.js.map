{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.scss","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.scss?34eb"],"names":["CVEDetailsPageDescription","cveAttributes","intl","publishDate","public_date","description","link","rh_link","Stack","hasGutter","StackItem","className","formatMessage","messages","TextContent","Text","component","TextVariants","propTypes","injectIntl","WithLoader","props","undefined","loading","variant","Spinner","centered","CVEPageOverviewItemLoader","TrendBoxLoader","CurrentVulnerabilitiesItemLoader","Skeleton","size","SkeletonSize","children","height","width","x","y","rx","ry","speed","primaryColor","secondaryColor","cx","cy","r","V3names","AV","name","values","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","split","forEach","curr","key","val","value","cvssVersion","CVEPageContext","Consumer","context","isLoading","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","Table","aria-label","TableVariant","gridBreakPoint","cells","rows","Object","entries","Label","isLarge","style","cursor","color","verticalAlign","score","fontSize","substring","indexOf","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","display","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","keys","map","item","STATUS_OPTIONS","toString","label","brPopoverContent","statusPopoverContent","Split","SplitItem","fontWeight","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","concat","sort","a","b","systems_affected","Fragment","rule","summary","Card","rule_id","ExpandableSection","toggleText","CSAwLabel","onClick","ruleId","rule_key","rule_presence","Link","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","text","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","defaultProps","PropTypes","KnownExploitSummary","useIntl","KnownExploitLabel","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTable","useState","StatusModal","setStatusModal","selectedHosts","setSelectedHosts","inventory","React","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","affectedSystems","useSelector","CVEDetailsPageStore","affectedSystemsByCVE","parameters","shallowEqual","metadata","payload","meta","items","useMemo","createExposedSystemsTable","apply","config","handleSelect","isChecked","middlewareListener","on","callback","newSelected","selected","onSelect","useEffect","useDeepCompareEffect","fetchAffectedSystemsByCVE","selectMultipleEntities","clearCveStore","clearInventoryStore","showStatusModal","cves","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","type","kebabOptions","cveStatusDetails","includes","inventory_id","display_name","status_id","justification","status_text","isDisabled","length","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","total_items","fetchResource","ops","fetchAffectedSystemsIdsByCve","selectedHostsData","s","sortingHeader","patch_access","SYSTEMS_EXPOSED_SORTING_HEADER","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","_event","index","direction","handleSortColumn","sortBy","createSortBy","actionResolver","rowData","rowIndex","systemExposedTableRowActions","showTags","expandable","ref","page","perPage","page_size","total","isLoaded","onRefresh","pageSize","per_page","current","limit","onRefreshData","hasCheckbox","showActions","exportConfig","ouiaId","downloadReport","format","params","DownloadReport","onExpandClick","_e","isOpen","expandRow","dedicatedAction","Remediation","manyRules","systems","filterRuleValues","actionsConfig","actions","kebabToggleProps","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","bulkSelect","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","statusFilter","advisory","withRouter","CVEDetailsPage","match","cveName","BusinessModal","setBusinessRisk","details","createCveDetailsPage","exposedSystems","CveStatusModal","error","exposed_systems_count","kebabItems","kebabItemEditBusinessRisk","BusinessRiskModal","open","business_risk_id","kebabItemEditStatus","InvalidObject","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","loaded","isActive","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","methods","handleCveDetailsError","___CSS_LOADER_EXPORT___","push","module","update","hot","invalidate","oldLocals","accept","isNamedExport","p","isEqualLocals","dispose"],"mappings":"2eAMMA,EAA4B,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KAE/BC,EAGbF,EAHAG,YACAC,EAEAJ,EAFAI,YACSC,EACTL,EADAM,QAGJ,OACI,kBAACC,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,CAAWC,UAAU,cACjB,6BACKT,EAAKU,cAAcC,iBADxB,KACiDV,IAGrD,kBAACO,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,OAAiBZ,KAG1C,kBAACK,EAAA,EAAD,CAAWC,UAAU,yBAChBL,KAOjBN,EAA0BkB,UAAY,CAClCjB,cAAeiB,QACfhB,KAAMgB,SAGV,SAAeC,QAAWnB,G,2JChCpBoB,EAAa,SAAAC,GACf,QAAcC,IAAVD,IAAyC,IAAlBA,EAAME,QAC7B,OAAQF,EAAMG,SACV,IAAK,UACD,OAAO,kBAACC,EAAA,EAAD,CAASC,UAAQ,IAC5B,IAAK,sBACD,OAAO,kBAACC,EAAD,MACX,IAAK,OACD,OAAO,kBAAC,KAAD,MACX,IAAK,aACD,OAAO,kBAAC,KAAD,MACX,IAAK,WACD,OAAO,kBAACC,EAAD,MACX,IAAK,6BACD,OAAO,kBAACC,EAAD,MACX,QACI,OAAO,kBAACC,EAAA,EAAD,CAAUC,KAAMC,SAInC,OAAOX,EAAMY,UAIXN,EAA4B,WAC9B,OACI,kBAAC,KAAD,CAAeO,OAAQ,GAAIC,MAAO,KAC9B,0BAAMC,EAAE,KAAKC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OACnD,0BAAME,EAAE,IAAIC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,MAAMD,OAAO,SAK1DN,EAAiB,WACnB,OACI,kBAAC,KAAD,CAAeM,OAAQ,IAAKC,MAAO,KAC/B,0BAAMC,EAAE,SAASC,EAAE,SAASC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,IAAID,OAAO,MAC3D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,OAAOC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,MAAMD,OAAO,SAKhEL,EAAmC,WACrC,OACI,kBAAC,KAAD,CAAeK,OAAQ,GAAIC,MAAO,IAAKK,MAAO,EAAGC,aAAa,UAAUC,eAAe,WACnF,0BAAMN,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,SAASD,OAAO,UAC9D,4BAAQS,GAAG,KAAKC,GAAG,KAAKC,EAAE,SAKtCzB,EAAWF,UAAY,CACnBK,QAASL,SACTM,QAASN,YAGb,U,eC9Da4B,EAAU,CACnBC,GAAI,CACAC,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,yBACtBsC,EAAGjD,kBAAmBW,0BACtBuC,EAAGlD,kBAAmBW,uBACtBwC,EAAGnD,kBAAmBW,4BAG9ByC,GAAI,CACAN,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJG,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9B2C,GAAI,CACAR,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9B4C,GAAI,CACAT,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtB6C,EAAGxD,kBAAmBW,4BAG9B8C,EAAG,CACCX,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJW,EAAG1D,kBAAmBW,2BACtBgD,EAAG3D,kBAAmBW,2BAG9BgD,EAAG,CACCb,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BiD,EAAG,CACCd,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BsC,EAAG,CACCH,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BkD,KAAM,CACFf,KAAM9C,kBAAmBW,4BACzBoC,OAAQ,CACJ,MAAO,KAKNe,EAAU,CACnBjB,GAAI,CACAC,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,yBACtBsC,EAAGjD,kBAAmBW,iCACtBuC,EAAGlD,kBAAmBW,yBAG9ByC,GAAI,CACAN,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BoD,GAAI,CACAjB,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJiB,EAAGhE,kBAAmBW,0BACtB8C,EAAGzD,kBAAmBW,wBACtBqC,EAAGhD,kBAAmBW,wBAG9BgD,EAAG,CACCb,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,wBAG9BiD,EAAG,CACCd,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,wBAG9BsC,EAAG,CACCH,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,yB,WC9F5BsD,EAAa,SAAA9C,GACf,IAfwB+C,EAAQC,EAC5BC,EAcmBC,EAAkDlD,EAAjEmD,cAA2CC,EAAsBpD,EAArCqD,cAA4BxE,EAASmB,EAATnB,KAC1DyE,GAAWF,EAAe,WAAgBF,GAAe,aAAe,WACxEK,EAAaH,GAAeF,EAE5BM,GAnB0BR,EAkBVI,GAAe3B,GAAayB,GAAeP,EAjB7DM,EAAM,IADcF,EAmBSQ,IAhB7BR,EAAOU,MAAM,KAAKC,SAAQ,SAAAC,GACtB,MAAiBA,EAAKF,MAAM,KAA5B,eAAKG,EAAL,KAAUC,EAAV,KACMlC,EAAOqB,EAAaY,IAAQZ,EAAaY,GAAKjC,KAC9CmC,EAASd,EAAaY,IAAQZ,EAAaY,GAAKhC,OAAOiC,IAAS,MAClElC,IACAsB,EAAItB,GAAQmC,MAGjBb,GAWiBrB,GAAW4B,EAA3BO,aAAR,OAAmCP,EAAnC,kBAEA,OACI,kBAACQ,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAACzE,EAAA,EAAD,KACI,kBAAC,EAAD,CAAYS,QAASgE,EAAQC,WACzB,kBAACC,EAAA,EAAD,CACIC,GAAG,eACHC,SAAS,SACTC,SAAU,OACVC,YAAU,EACVC,cAAa,UAAMnB,EAAN,YAAiBzE,EAAKU,cAAcC,6BACjDkF,YACInB,EAEQ,kBAACoB,EAAA,EAAD,CACIC,aAAY,mBACZzE,QAAS0E,YACTC,eAAe,GACfC,MACI,CAAClG,EAAKU,cAAcC,sBAChBX,EAAKU,cAAcC,sBAE3BwF,KAAMC,OAAOC,QAAQtD,IAErB,kBAAC,IAAD,MACA,kBAAC,IAAD,OA7BnB,OAkCG,kBAAC,aAAD,KACI,kBAACuD,EAAA,EAAD,CAAOC,SAAO,EAACC,MAAO,CAAEC,OAAQ,WAAahG,UAAU,cAClDgE,EADL,IACezE,EAAKU,cAAcC,4BAC9B,kBAAC,KAAD,CACI+F,MAAO,yCACPjG,UAAU,aACV+F,MAAO,CAAEG,cAAe,kBAO5C,kBAAC,EAAD,CAAYtF,QAASgE,EAAQC,WACzB,0BAAM7E,UAAU,cAAcU,EAAMyF,OACpC,0BAAMJ,MAAO,CAAEK,SAAU,UACpB7G,EAAKU,cAAcC,YAAmB,MACtC+D,aAAA,EAAAA,EAAYoC,UAAUpC,EAAWqC,QAAQ,KAAO,KAnDpD,aA4DzB9C,EAAWjD,UAAY,CACnBsD,cAAetD,WACfwD,cAAexD,WACf4F,MAAO5F,QACPhB,KAAMgB,SAGV,SAAeC,QAAWgD,GC9F1B,IAAM+C,EAA8B,SAAA7F,GAChC,IAAQ8F,EAA0B9F,EAA1B8F,MAAOhC,EAAmB9D,EAAnB8D,MAAOiC,EAAY/F,EAAZ+F,QAEtB,OACI,kBAAC3B,EAAA,EAAD,CAASC,GAAG,UAAUK,YAAaqB,EAAStB,cAAe,GAAIG,aAAW,wBAAwBN,SAAS,QACvG0B,SAAUC,SAASC,cAAc,mBACjC,kBAAC/G,EAAA,EAAD,CAAOkG,MAAO,CAAEc,QAAS,eAAgBb,OAAQ,YAC7C,kBAACjG,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAOC,SAAO,GAAEU,IAEpB,kBAACzG,EAAA,EAAD,KACI,2BAAIyE,OAOxB+B,EAA4BhG,UAAY,CACpCiG,MAAOjG,QACPiE,MAAOjE,QACPkG,QAASlG,SAEb,U,0BCbMuG,GAAwB,SAAC,GAA4B,IAA1BxH,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KACtCwH,GAAaC,QAAiB1H,EAAc2H,QAAU,WAGzCC,EAMf5H,EANA6H,cAC6BC,EAK7B9H,EALA+H,4BACAC,EAIAhI,EAJAgI,OACsBC,EAGtBjI,EAHAkI,qBACuBC,EAEvBnI,EAFAoI,sBAC0BC,EAC1BrI,EADAsI,yBAGEC,EACFJ,GACA9B,OAAOmC,KAAKL,GAAqBM,KAAI,SAAAC,GAAI,MAAI,CACzCC,WAAoB,SAAAX,GAAM,OAAIA,EAAO9C,QAAUwD,EAAKE,cAAYC,MAChEV,EAAoBO,GAAME,eAG5BE,EACF,kBAACvI,EAAA,EAAD,CAAOG,UAAU,aACb,kBAACD,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,cACZT,EAAKU,cAAcC,yBAG5B,kBAACH,EAAA,EAAD,KAAYqH,GAA6B,OAI3CiB,EACF,kBAACxI,EAAA,EAAD,CAAOG,UAAU,aACb,kBAACD,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,cACZT,EAAKU,cAAcC,gBAEvBoH,GAAU,KAEX,kBAACzB,EAAA,EAAD,CAAO7F,UAAU,yBACZT,EAAKU,cAAcC,wBAEvBqH,GAAuB,MAE3BI,EAAyB,GACtB,kBAAC5H,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,wBAAIH,UAAU,2BAElB,kBAAC6F,EAAA,EAAD,CAAOC,SAAO,GACTvG,EAAKU,cAAcC,kCAExB,kBAACmF,EAAA,EAAD,CACIC,aAAW,iBACXE,eAAe,GACfC,MAAO,CAAClG,EAAKU,cAAcC,iBAAuBX,EAAKU,cAAcC,YACrEwF,KAAMmC,EACN7H,UAAU,yBACVa,QAAQ,WAER,kBAAC,IAAD,MACA,kBAAC,IAAD,SAOpB,OACI,kBAAChB,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACuI,EAAA,EAAD,CAAOxI,WAAS,GACZ,kBAACyI,EAAA,EAAD,KACI,kBAAC,EAAD,CACI/B,MAAOjH,EAAKU,cAAcC,uBAC1BsE,MAAO0C,EACPT,QAAS2B,KAGjB,kBAACG,EAAA,EAAD,CAAWvI,UAAU,cACjB,kBAAC,EAAD,CACIwG,MAAOjH,EAAKU,cAAcC,iBAC1BuG,QAAS4B,EACT7D,MACI,8BACKmD,EAAyB,GACtB,kBAAC,KAAD,CAAyB1B,MAAO,yCACjC,IACFqB,QAQzB,kBAACvH,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,aAAa8F,SAAO,GAChCvG,EAAKU,cAAcC,aAExB,0BAAM6F,MAAO,CAAEyC,WAAY,IAAKvC,MAAOc,EAAWd,QAC9C,kBAACwC,EAAA,EAAD,CAAQxB,OAAQF,EAAWP,MAAOkC,UAAQ,MAIlD,kBAAC3I,EAAA,EAAD,KACI,kBAAC,EAAD,CACI8D,cAAevE,EAAcuE,cAC7BE,cAAezE,EAAcyE,cAC7BoC,OAAOwC,OAAerJ,EAAcsJ,YAAatJ,EAAcuJ,kBAOnF/B,GAAsBvG,UAAY,CAC9BjB,cAAeiB,QACfhB,KAAMgB,SAGV,UAAeC,QAAWsG,I,wIChGpBgC,I,SAAc,SAAC,GAA8D,IAA5DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,+BAAgC1J,EAAW,EAAXA,KAC9D2J,GAAWC,mBAEXC,EAAc,GAAGC,OAAON,GAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,iBAAmBF,EAAEE,oBAO5E,OAAO,kBAAC,EAAAC,SAAD,KACFN,GAAeA,EAAYrB,KAAI,SAAA4B,GAAI,aAChCA,EAAKC,SACD,kBAACC,GAAA,EAAD,CAAM7J,UAAU,WAAWsE,IAAKqF,EAAKG,SACjC,kBAACC,GAAA,EAAD,CAAmBC,WACf,kBAAC1B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvI,UAAU,cACjB,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACb,kBAAC2J,GAAA,EAAD,CAAWjK,UAAU,eACpB2J,EAAKjK,eAIlB,kBAAC6I,EAAA,EAAD,CAAWxD,GAAG,iCACT4E,EAAKG,SACF,kBAAC3J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACI2E,GAAG,0BACHmF,QAAS,kBAxBdC,EAwB8CR,EAAKG,aAtBlFZ,EAASD,EADM,CAAEmB,SAAUD,EAAQE,cAAe,UADpB,IAACF,GAyBK9J,UAAWC,WAEX,kBAAC,GAAAgK,KAAD,CACIhG,IAAKqF,EAAKG,QACVS,GAAE,gBAAWvB,EAAX,sBAAiCW,EAAKG,UAGpCvK,EAAKU,cACDC,4BACA,CACIsK,MAAK,UAAEb,EAAKF,wBAAP,SAA4B,UAUrE,kBAACgB,GAAA,EAAD,CAAUzK,UAAU,kBAChB,kBAAC0K,EAAA,EAAD,CAAM5K,WAAS,GACX,kBAAC6K,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAChL,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAAC+K,GAAA,EAAD,CAAiBC,KAAMpB,EAAKC,WAEhC,kBAAC7J,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACmI,EAAA,EAAD,KACKqB,EAAKqB,aACF,kBAACzC,EAAA,EAAD,KACI,kBAAC1C,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,aAExB,kBAAC+K,GAAA,EAAD,CACIxE,QAASd,OAAOrD,OAAO4I,MAAgBvB,EAAKqB,YAAc,IAE1D,kBAACG,GAAA,EAAD,CAAe3G,MAAOmF,EAAKqB,gBAIvC,kBAACzC,EAAA,EAAD,KACI,kBAAC1C,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,mBAExB,kBAAC+K,GAAA,EAAD,CACIxE,QAAS2E,KAAuBzB,EAAK0B,cAEnCC,KAAqB3B,EAAK0B,eAGpC,kBAAC9C,EAAA,EAAD,KACI,kBAAC1C,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,uBAExB,kBAACoI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACOoB,EAAK4B,eAGA,kBAAC,EAAA7B,SAAD,KACI,kBAAC,MAAD,CACI1J,UAAU,+BAEbT,EAAKU,cAAcC,SACpB,kBAAC+K,GAAA,EAAD,CACIxE,QAASlH,EAAKU,cACVC,gCAGJ,kBAAC,KAAD,CACIF,UAAU,6CAbxBT,EAAKU,cAAcC,SAqB7B,kBAACqI,EAAA,EAAD,CAAWvI,UAAU,cACf2J,EAAK6B,iBACP,kBAACpL,EAAA,EAAD,KACI,kBAAC,MAAD,CACIJ,UAAU,4BAEbT,EAAKU,cAAcC,2BAY5CyJ,EAAK8B,eACT,kBAAC1L,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIJ,UAAU,aACVK,UAAWC,OAEX,uBACIN,UAAU,UACV0L,KAAI,UAAKC,KAAL,YAAkBhC,EAAK8B,eAC3BG,OAAO,SACPC,IAAI,uBAGAtM,EAAKU,cAAcC,0BAEvB,kBAAC,MAAD,CAAqBF,UAAU,sBASvD,kBAAC2K,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC1K,EAAA,EAAD,KACI,kBAAC0F,EAAA,EAAD,KACKtG,EAAKU,cAAcC,qBAExB,kBAACE,EAAA,EAAD,CAAMC,UAAWC,MAAgBN,UAAU,cACtCgJ,EADL,KACiBzJ,EAAKU,cAAcC,aADpC,IAGQyJ,EAAKmC,gBACJC,QAAO,SAAAC,GAAG,OAAIA,IAAQhD,KACtBjB,KAAI,SAACiE,EAAKC,GAAN,OACD,uBACIjM,UAAU,sBACVsE,IAAK2H,EACLP,KAAI,UAAKQ,KAAL,YAAkBF,IAErBA,MAGRG,QAAO,SAACC,EAAM/H,GAAP,MAAgB,CAAC+H,EAAM,KAAM/H,KAAO,CAAC,kBAc7FyE,GAAYuD,aAAe,CACvBtD,MAAO,IAGXD,GAAYvI,UAAY,CACpBhB,KAAM+M,QACNvD,MAAOuD,UACPtD,SAAUsD,WACVrD,+BAAgCqD,UAGpC,UAAe9L,QAAWsI,I,4BCtObyD,GAAsB,WAC/B,IAAMhN,GAAOiN,UACb,OACI,kBAAC3C,GAAA,EAAD,CAAM7J,UAAU,YACZ,kBAAC+J,GAAA,EAAD,CAAmBC,WACf,kBAAC7J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACb,kBAACmM,GAAA,EAAD,CAAmBzM,UAAU,eAC5BT,EAAKU,cAAcC,2BAI5B,kBAACuK,GAAA,EAAD,KACKlL,EAAKU,cAAcC,0BCTlCwM,GAAwB,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,KAAM1D,EAAqC,EAArCA,+BACnC,OACI,kBAACvE,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAAC8F,EAAA,EAAD,CAAM5K,WAAS,GACX,kBAAC6K,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC,EAAD,CAAYjK,QAASgE,EAAQC,UAAWhE,QAAQ,WAC5C,kBAAC,EAAD,CAA2BvB,cAAeqN,EAAKA,SAIvD,kBAAChC,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,GAAI7K,UAAU,yBAC/B,kBAAC,GAAD,CAAuBV,cAAeqN,EAAKA,QAG3CA,EAAKA,KAAKC,eAAiB,kBAACL,GAAD,MAG/B,kBAAC,GAAD,CACItD,+BAAkCA,EAClCD,SAAU2D,EAAKA,KAAK3D,SACpBD,MAAO4D,EAAKA,KAAK5D,aAQzC2D,GAAsBnM,UAAY,CAC9BoM,KAAMpM,WACN0I,+BAAgC1I,UAGpC,Y,yxBCLA,IAAMsM,GAAsB,SAACnM,GAAU,MACnC,GAAsCoM,eAAS,kBAAM,kBAAM,SAA3D,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,mBAASnM,GAAnD,eAAOsM,EAAP,KAAsBC,EAAtB,KAEMC,EAAYC,gBACZlE,GAAWC,mBACjB,GAAsCkE,QAAaC,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAsCV,eAAS,GAA/C,eAAOW,EAAP,KAAqBC,EAArB,KAEMC,GAAkBC,kBACpB,qBAAGC,oBAA8CC,wBAG/CjJ,GAAY+I,kBACd,qBAAGC,oBAA8CC,qBAAqBjJ,aAGpEkJ,GAAaH,kBACf,qBAAGC,oBAA8CE,aACjDC,gBAGEC,GAAWL,kBACb,qBAAGC,oBAA8CC,qBAAqBI,QAAQC,QAE5EC,GAAQC,cAAQ,kBAAMC,QAA0B,GAAD,GAAMX,GAAmBjN,EAAMsL,OAAM,CAAC2B,IAErFY,EAAQ,SAACC,GAAD,OAAYtF,GACtBD,QAA+BuF,KAc7BC,EAAe,SAACC,EAAWR,GAE7BhB,EADsBgB,GAAoB,KAW9CS,YAA0B,CACtBC,GAAI,gBACJC,SAAU,SAAAX,GAAO,OATJ,SAACA,GACd,IAAMY,EAAcZ,EAAQvB,KAAKoC,SAAb,CAAyBb,EAAQvB,KAAK5H,IAAtC,gBAA8CkI,GAAiB,KAC7EA,GAAiBA,EAAclB,QAAO,SAAA/D,GAAI,OAAIA,IAASkG,EAAQvB,KAAK5H,MAE1E0J,EAAa,EAAOK,GAKCE,CAASd,OAGlCe,gBAAU,WACNV,EAAMhB,GACNG,GAAc,KAEf,KAEHwB,SAAqB,WACZzB,IACDD,EAAa,GAAD,GAAMO,IAClB7E,GAASiG,QAA0BzO,EAAMsL,IAAP,MAAiB+B,QAExD,CAACA,EAAYN,KAEhBwB,gBAAU,WACFhC,GACA/D,GAASkG,QAAuBnC,MAErC,CAACA,EAAe/D,KAEnB+F,gBAAU,WACN,OAAO,WACH/F,GAASmG,WACTnG,GAASoG,cAEd,IAEH,IAKMC,EAAkB,SAACC,EAAMC,GAC3BzC,GACI,kBAAM,kBACF,kBAAC0C,GAAA,EAAD,CACIC,QAASH,EACTI,UAAW,YACPA,OAAUxB,EAAMD,KAAMI,IACtBsB,QAAgBnP,EAAMsL,MAE1B8D,cAAeL,EACfM,KAAM,wBAehBC,EAAe,CAAC,GAClB,CACI7H,MAAOzH,EAAMnB,KAAKU,cAAcC,gBAChCgK,QAAS,kBAAMqF,EACX,CAAC7O,EAAMuP,kBAZG7B,EAAMzB,KAAKZ,QAAO,SAAA/D,GAAI,OAAIiF,EAAciD,SAASlI,EAAKmI,iBAE9CpI,KAAI,kBACzB,CAAEoI,aADuB,EAAGA,aACZC,aADS,EAAiBA,aACZC,UADL,EAA+BA,UACfC,cADhB,EAA0CC,kBAapE7P,MAAO,CAAE8P,YAAavD,GAA0C,IAAzBA,EAAcwD,UAIvDC,GAAgBrC,cAAQ,kBAAMsC,QAAkB,CAClDC,cAAe3D,GAAiB,GAChC4D,gBAAiBpC,EACjBL,MAAOA,EAAMzB,MAAQyB,GAAS,CAAEzB,KAAM,GAAIwB,KAAM,CAAE2C,YAAa,IAC/DC,cAAe,SAAAC,GAAG,OAAIC,QAA6BvQ,EAAMsL,IAAP,SAAiB+B,GAAeiD,SAClF,CAAC5C,EAAOnB,EAAec,IAErBmD,GAAoB7C,cAAQ,kBAC9BD,aAD8B,EAC9BA,EAAOzB,KAAKZ,QAAO,SAAAoF,GAAC,OAAIlE,aAAJ,EAAIA,EAAeiD,SAASiB,EAAEpM,SACnD,CAACkI,EAAemB,IAEbgD,EAAgBhD,SAAA,UAAAA,EAAOD,YAAP,SAAakD,aAC7BC,KACAA,aAAsC,SAAAtJ,GAAI,MAAiB,aAAbA,EAAK1D,OAiBzD,OACI,kBAAC,aAAD,KACI,kBAACzE,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACZI,EAAMnB,KAAKU,cAAcC,kCAItC,kBAACH,EAAA,EAAD,KACI,kBAACwR,GAAA,EAAD,CACIC,uBAAqB,EACrBC,OAAQ,YAA4C,IAAzCC,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,gBAE1BC,cAAA,SACOF,GAAkBG,QAAyBC,QAC3CH,OAGXI,WAAY,CACRC,gBAAgB,EAChBC,cAAc,EACdC,OAAS9D,EAAMzB,KAAK8D,OAAS,GAhCtC,SAAC0B,EAAQC,EAAOC,GAAhB,OACXC,QACIF,EACAC,EACAjB,EACA7D,EAAcjE,KACdiF,IA2BgBgE,OAASnE,EAAMzB,KAAK8D,OAAS,IAtCjD+B,QACIpB,EACAnD,EAAS3E,MAqCOmJ,eAAgB,SAACC,EAASC,GAAV,OACZvE,EAAMzB,KAAK8D,OAAS,IACpBmC,QACIrD,EACA7O,EAAMuP,iBACN0C,EAASA,WAGjB9R,QAAS0E,aAEbsN,UAAQ,EACRvO,IAAK,YACLwO,YAAU,EACVC,IAAK5F,EACLiB,MAAOA,EAAMzB,KACbqG,KAAM/E,GAAYA,EAAS+E,MAAQ,EACnCC,QAAShF,GAAYA,EAASiF,WAAa,GAC3CC,MAAOlF,GAAYA,EAAS6C,aAAe,EAC3CsC,UAAWvO,EACXwO,UAzKK,SAAC,GAAiC,IAA/BL,EAA+B,EAA/BA,KAAgBM,EAAe,EAAzBC,UAE1BpG,EAAUqG,SAAYvF,EAAS+E,OAASA,GAAQ/E,EAASwF,QAAUH,GACnE/E,EAAM,CAAEyE,OAAME,UAAWI,IAGzBrF,GAAYA,EAAS6C,aAAewC,GAAYnG,EAAUqG,SAC1DrG,EAAUqG,QAAQE,cAAc,CAAEV,OAAME,UAAWI,KAmKvCK,YAAavF,GAA0B,IAAjBA,EAAMqC,OAC5BmD,YAAaxF,GAA0B,IAAjBA,EAAMqC,OAC5BoD,aAAY,IACRrD,WAAuC,IAA3BpC,EAAMD,KAAK2C,eAAuB7D,GAA0C,IAAzBA,EAAcwD,QAC7EqD,OAAQ,WACLD,SAAa,CAAEE,eAzHnB,SAAAC,GACnB,IAAIC,EAAS,CAACvT,EAAMsL,IAAP,MAAiB+B,IAC9BmG,UAAoB/E,KAA2B8E,EAAQD,EAAQ,uBAyH/CG,cAAe,SAACC,EAAInI,EAAIoI,EAAT,OAAmBtP,EAAnB,EAAmBA,GAAnB,OAA4BmE,GAASoL,QAAUvP,EAAIsP,KAClEE,iBAAmB1P,GACf,kBAAC2P,GAAA,EAAD,CACIC,WAAS,EACTC,QAASxD,EACT1B,KAAM,CAAEzK,GAAIrE,EAAMsL,IAAKjD,MAAOrI,EAAMiU,oBAG5CC,cAAe,CACXC,QAAS7E,EACT8E,iBAAkB,CAAEtE,YAAavD,GAA0C,IAAzBA,EAAcwD,QAChEsE,cAAe,CAAEjB,OAAQ,oBAE7BkB,oBAAqB,CACjBC,SAASC,SAAmB,GAAD,GAAMnH,GAAcrN,EAAMiU,kBACrDQ,SAAU,SAACC,EAAGC,GAAJ,OAAUC,SAAcD,EAAG9G,KAEzCgH,WAAY7E,GAAiB,CACzBlG,MAAOyC,GAAiBA,EAAcwD,OACtCrC,MAAOsC,EAActC,MACrBoC,WAAuC,IAA3BpC,EAAMD,KAAK2C,eAAuB7D,GAA0C,IAAzBA,EAAcwD,QAC7E+E,QAASC,QAAQxI,GAAiBA,EAAcwD,QAChDqD,OAAQ,cACR9E,SAAU,kBAAM0B,EAAcgF,2BAElCC,aAAc,CACVvH,MAAO,EACHwH,QACI,SACA1V,sBACAA,uBACA6N,EAAWhC,OAAQwC,IAEvBsH,QAAmBtH,EAAOR,EAAYrN,EAAMiU,mBAC5CmB,QAAavH,EAAOR,IACpB6H,QAAa,WAAY1V,aAAmBA,WAAiB6N,EAAWgI,SAAUxH,MAKzFxB,GAAe,kBAACA,EAAD,WAQxCF,GAAoBtM,UAAY,CAC5BhB,KAAMgB,WACNyL,IAAKzL,WACL0P,iBAAkB1P,WAClBoU,iBAAkBpU,WAGtB,UAAeC,SACXwV,QACInJ,K,4BC3RKnI,GAAiB0I,kBAAoB,CAAEvI,WAAW,IAEzDoR,GAAiB,SAACvV,GAAU,QACxBwI,GAAWC,mBACjB,GAAkB2D,cAASpM,EAAMwV,MAAMjC,OAAOjI,KAAvCmK,GAAP,eACA,GAAyCrJ,eAAS,kBAAM,kBAAM,SAA9D,eAAOsJ,EAAP,KAAsBC,EAAtB,KACA,GAAsCvJ,eAAS,kBAAM,kBAAM,SAA3D,eAAOC,EAAP,KAAoBC,EAApB,KAEMsJ,GAAU1I,kBACZ,qBAAGC,oBAA8C9G,cAE/CA,GAAasH,cAAQ,kBAAMkI,QAAqBD,KAAU,CAACA,IAE3DE,GAAiB5I,kBACnB,qBAAGC,oBAA8CC,yBAGrDmB,gBAAU,WACN/F,GAAS2G,QAAgBsG,MAC1B,IAEH,IA2CY,IApCN5G,EAAkB,SAAAC,GACpBxC,GACI,kBAAM,kBACF,kBAACyJ,GAAA,EAAD,CACIjH,KAAMA,EACNI,UAAW,WACP1G,GAAS2G,QAAgBsG,IACzBjN,GAASiG,QAA0BgH,YAM/CO,EAAgB3P,EAAhB2P,MAAO/J,EAAS5F,EAAT4F,KAETsD,EAAmB,CACrBlL,GAAIoR,EACJ9F,UAAWtJ,EAAW4F,KAAK0D,UAC3BC,cAAevJ,EAAW4F,KAAKnF,qBAC/BmP,uBAAuBH,SAAA,UAAAA,EAAgBtI,eAAhB,mBAAyBC,YAAzB,eAA+B2C,cAAe,GAEnE8F,EAAa,EACfC,UA7B0B,SAAArH,GAC1B6G,GACI,kBAAM,kBACF,kBAACS,GAAA,EAAD,CAAmBC,MAAI,EAACvH,KAAMA,EAAMI,UAAW,kBAAM1G,GAAS2G,QAAgBsG,aA0BrC,CAC7C,CACIa,iBAAkBjQ,EAAW4F,KAAKqK,iBAClCjS,GAAIoR,EACJ7F,cAAevJ,EAAW4F,KAAKtF,gCAGvC4P,SAAoB1H,EAAiB,CAACU,KAElClH,EAAU4D,EAAV5D,MACF4L,EAAmB5L,GAASA,EAAMhB,KACpC,kBAAuC,CAAEvD,MAAzC,EAAGsF,QAAqD3B,MAAxD,EAAoBzI,gBAGxB,OAAKgX,EAgDG,kBAAC,aAAD,KACI,kBAAC,KAAD,CAAQlQ,MAAO2P,IACf,kBAACe,EAAA,EAAD,OAhDJ,kBAAC,aAAD,KACI,kBAACxS,GAAeyS,SAAhB,CAAyB3S,MAAOuC,GAAc,CAAElC,UAAWkC,EAAWlC,YAClE,kBAAC,KAAD,CACI2B,MAAOmG,EAAKyK,eAAiBjB,EAAU,MAAQxJ,EAAKyK,eAAiBjB,EACrEtB,QAAS+B,EACTS,cAAe,cACfC,YAAa,CACT,CACI9Q,MAAO+Q,oBACPhN,GAAIgN,iBACJC,QAAQ,GAEZ,CACIhR,MAAO2P,EACPsB,UAAU,EACVD,QAAQ,IAGhBE,OAAQ,CACJ,kBAACC,GAAA,EAAD,CACIrT,IAAI,SACJsT,aAAa,UAACtB,EAAQpI,QAAQvB,YAAjB,QAAC,EAAsBkL,WAAWjL,eAC/CkL,SAAS,UAAAxB,EAAQpI,QAAQvB,YAAhB,eAAsBkL,WAAW9O,MAAM0H,QAAS,MAIjE,kBAAC,GAAD,CACIxH,+BAAgCA,KAChC0D,KAAM5F,IAEV,kBAACgG,EAAD,MACA,kBAACqJ,EAAD,OAEJ,kBAAC2B,EAAA,EAAD,KACI,kBAAC,GAAD,CACI/L,IAAKmK,EACLxB,iBAAkBA,EAClB1E,iBAAkBA,EAClB+H,QAAS,CAAEzI,yBAgBvC0G,GAAe1V,UAAY,CACvB2V,MAAO3V,WACPwG,WAAYxG,WACZsP,gBAAiBtP,SACjB0X,sBAAuB1X,UAE3B,UAAeyV,QAAWC,K,8FChJtBiC,E,MAA0B,GAA4B,KAE1DA,EAAwBC,KAAK,CAACC,EAAOrT,GAAI,0lCAA2lC,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,oFAAoF,MAAQ,GAAG,SAAW,iVAAiV,eAAiB,CAAC,46BAA46B,WAAa,MAEriF,W,gECCIsT,EAAS,IAAI,UALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,kBAAkBD,EAAOE,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,iBAEhBJ,EAAOE,IAAIG,OACT,OACA,eAnCkB,SAAuBlP,EAAGC,EAAGkP,GACnD,IAAKnP,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAImP,EAEJ,IAAKA,KAAKpP,EACR,GAKIA,EAAEoP,KAAOnP,EAAEmP,GACb,OAAO,EAIX,IAAKA,KAAKnP,EACR,IAKKD,EAAEoP,GACL,OAAO,EAIX,OAAO,EAOIC,CAAcJ,EAAW,mBAMxBA,EAAY,iBAEZH,EAAO,YAPLD,EAAOE,IAAIC,gBAYzBH,EAAOE,IAAIO,SAAQ,WACjBR,OAIW","file":"js/CVEDetailsPage.44a9e304d5997179323c.js","sourcesContent":["import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n\n    return (\n        <Stack hasGutter>\n            <StackItem className=\"pf-u-mt-sm\">\n                <div>\n                    {intl.formatMessage(messages.publishDate)}: {publishDate}\n                </div>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.p}>{description}</Text>\n                </TextContent>\n            </StackItem>\n            <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                {link}\n            </StackItem>\n        </Stack>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport ContentLoader, { BulletList, List } from 'react-content-loader';\n\nconst WithLoader = props => {\n    if (props === undefined || props.loading !== false) {\n        switch (props.variant) {\n            case 'spinner':\n                return <Spinner centered />;\n            case 'cvePageOverviewItem':\n                return <CVEPageOverviewItemLoader />;\n            case 'list':\n                return <List />;\n            case 'bulletList':\n                return <BulletList />;\n            case 'trendBox':\n                return <TrendBoxLoader />;\n            case 'currentVulnerabilitiesItem':\n                return <CurrentVulnerabilitiesItemLoader />;\n            default:\n                return <Skeleton size={SkeletonSize.lg} />;\n        }\n    }\n\n    return props.children;\n};\n\n// Loaders\nconst CVEPageOverviewItemLoader = () => {\n    return (\n        <ContentLoader height={61} width={120}>\n            <rect x=\"35\" y=\"0\" rx=\"0\" ry=\"0\" width=\"50\" height=\"35\" />\n            <rect x=\"0\" y=\"45\" rx=\"0\" ry=\"0\" width=\"120\" height=\"16\" />\n        </ContentLoader>\n    );\n};\n\nconst TrendBoxLoader = () => {\n    return (\n        <ContentLoader height={100} width={300}>\n            <rect x=\"388.58\" y=\"109.13\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n            <rect x=\"11.58\" y=\"16.13\" rx=\"0\" ry=\"0\" width=\"37\" height=\"62\" />\n            <rect x=\"52.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"76.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"4.58\" y=\"82.13\" rx=\"0\" ry=\"0\" width=\"154\" height=\"22\" />\n        </ContentLoader>\n    );\n};\n\nconst CurrentVulnerabilitiesItemLoader = () => {\n    return (\n        <ContentLoader height={50} width={200} speed={2} primaryColor=\"#f3f3f3\" secondaryColor=\"#ecebeb\">\n            <rect x=\"82.58\" y=\"15.13\" rx=\"0\" ry=\"0\" width=\"110.88\" height=\"21.42\" />\n            <circle cx=\"25\" cy=\"25\" r=\"25\" />\n        </ContentLoader>\n    );\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string\n};\n\nexport default WithLoader;\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    // eslint-disable-next-line no-unused-vars\n    const { cvssVersion, ...values } = parsedVector;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <WithLoader loading={context.isLoading}>\n                        <Popover\n                            id=\"popover-cvss\"\n                            position=\"bottom\"\n                            maxWidth={'100%'}\n                            enableFlip\n                            headerContent={ `${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}` }\n                            bodyContent={\n                                cvssVector ?\n                                    (\n                                        <Table\n                                            aria-label={'Metric breakdown'}\n                                            variant={TableVariant.compact}\n                                            gridBreakPoint=\"\"\n                                            cells={\n                                                [intl.formatMessage(messages.cvssVectorMetric),\n                                                    intl.formatMessage(messages.cvssVectorValue)]\n                                            }\n                                            rows={Object.entries(values)}\n                                        >\n                                            <TableHeader />\n                                            <TableBody />\n                                        </Table>\n                                    ) : (notAvailable)\n                            }\n                        >\n                            <React.Fragment>\n                                <Label isLarge style={{ cursor: 'pointer' }} className=\"pf-u-mb-xs\">\n                                    {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                                    <OutlinedQuestionCircleIcon\n                                        color={'var(--pf-global--secondary-color--100)'}\n                                        className=\"pf-u-ml-xs\"\n                                        style={{ verticalAlign: '-0.125em' }}\n                                    />\n                                </Label>\n                            </React.Fragment>\n                        </Popover>\n                    </WithLoader>\n\n                    <WithLoader loading={context.isLoading}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span style={{ fontSize: 'small' }}>\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent={''} aria-label=\"Business risk popover\" position=\"right\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack style={{ display: 'inline-block', cursor: 'pointer' }}>\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from '../CVEDetailsPageDescription/SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <Split hasGutter>\n                    <SplitItem>\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.businessRiskLabel)}\n                            value={businessRisk}\n                            content={brPopoverContent}\n                        />\n                    </SplitItem>\n                    <SplitItem className=\"pf-u-ml-lg\">\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.statusLabel)}\n                            content={statusPopoverContent}\n                            value={\n                                <span>\n                                    {systemsStatusDivergent > 0 && (\n                                        <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />\n                                    )}{' '}\n                                    {status}\n                                </span>\n                            }\n                        />\n                    </SplitItem>\n                </Split>\n            </StackItem>\n\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\" isLarge>\n                    {intl.formatMessage(messages.impact)}\n                </Label>\n                <span style={{ fontWeight: 700, color: cveDetails.color }}>\n                    <Shield impact={cveDetails.title} hasLabel/>\n                </span>\n            </StackItem>\n\n            <StackItem>\n                <CvssVector\n                    cvss2_metrics={cveAttributes.cvss2_metrics}\n                    cvss3_metrics={cveAttributes.cvss3_metrics}\n                    score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        const params = { rule_key: ruleId, rule_presence: 'true' };\n        dispatch(changeExposedSystemsParameters(params));\n    };\n\n    return <Fragment>\n        {sortedRules && sortedRules.map(rule => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\"/>\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={() => handleExposedSystemFilter(rule.rule_id)}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule_key=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel value={rule.rule_impact}/>\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            { RISK_OF_CHANGE_LABEL[rule.change_risk] }\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                { !rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                { rule.reboot_required &&\n                                                                <Text>\n                                                                    <PowerOffIcon\n                                                                        className=\"pf-u-mr-xs powerOffIcon\"\n                                                                    />\n                                                                    {intl.formatMessage(messages.rebootRequired)}\n                                                                </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                        <StackItem>\n                                            <TextContent>\n                                                <Text\n                                                    className=\"pf-u-mt-xs\"\n                                                    component={TextVariants.p}\n                                                >\n                                                    <a\n                                                        className=\"kb-link\"\n                                                        href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                        target=\"_blank\"\n                                                        rel=\"noopener noreferrer\"\n                                                    >\n                                                        {\n                                                            intl.formatMessage(messages.knowledgebaseArticle)\n                                                        }\n                                                        <ExternalLinkAltIcon className=\"l-sm-spacer\"/>\n                                                    </a>\n                                                </Text>\n                                            </TextContent>\n                                        </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                .filter(cve => cve !== synopsis)\n                                                .map((cve, _i) =>\n                                                    <a\n                                                        className=\"associated-cve-link\"\n                                                        key={_i}\n                                                        href={`${CVES_PATH}/${cve}`}\n                                                    >\n                                                        {cve}\n                                                    </a>\n                                                )\n                                                .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))}\n    </Fragment>;\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitBody)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport WithLoader from '../WithLoader/WithLoader';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Grid hasGutter>\n                    <GridItem md={8} sm={12}>\n                        <WithLoader loading={context.isLoading} variant=\"spinner\">\n                            <CVEDetailsPageDescription cveAttributes={data.data} />\n                        </WithLoader>\n                    </GridItem>\n\n                    <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                        <CVEDetailsPageSidebar cveAttributes={data.data} />\n                    </GridItem>\n                    {\n                        data.data.known_exploit && <KnownExploitSummary/>\n                    }\n\n                    <CSAwRuleBox\n                        changeExposedSystemsParameters = {changeExposedSystemsParameters}\n                        synopsis={data.data.synopsis}\n                        rules={data.data.rules}\n                    />\n                </Grid>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useUrlParams, updateRef, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport Remediation from '../Remediation/Remediation';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport {\n    selectMultipleEntities,\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearCveStore,\n    fetchAffectedSystemsIdsByCve,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    SYSTEMS_EXPOSED_SORTING_HEADER\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst SystemsExposedTable = (props) => {\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n\n    const affectedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const isLoading = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading\n    );\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n\n    const metadata = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta\n    );\n    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems }, props.cve), [affectedSystems]);\n\n    const apply = (config) => dispatch(\n        changeExposedSystemsParameters(config)\n    );\n\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n\n        if (inventory.current && (metadata.page !== page || metadata.limit !== pageSize)) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        const selectedHosts = payload ? payload : [];\n        setSelectedHosts(selectedHosts);\n    };\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]\n            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));\n        }\n    }, [parameters, isFirstMount]);\n\n    useEffect(() => {\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    const downloadReport = format => {\n        let params = [props.cve, { ...parameters }];\n        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        updateRef(items.meta, apply);\n                        fetchCveDetails(props.cve);\n                    }}\n                    inventoryList={inventories}\n                    type={'systemsExposed'}\n                />\n\n        );\n    };\n\n    const getSelectedSystemsData = () => {\n        let systemsList = items.data.filter(item => selectedHosts.includes(item.inventory_id));\n        // eslint-disable-next-line camelcase\n        systemsList = systemsList.map(({ inventory_id, display_name, status_id, status_text: justification }) =>\n            ({ inventory_id, display_name, status_id, justification })); // omit properties we don't need\n\n        return systemsList;\n    };\n\n    const kebabOptions = ['',\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal(\n                [props.cveStatusDetails],\n                getSelectedSystemsData()\n            ),\n            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n        }\n    ];\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedHosts || [],\n        selectorHandler: handleSelect,\n        items: items.data && items || { data: [], meta: { total_items: 0 } },\n        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })\n    }), [items, selectedHosts, parameters]);\n\n    const selectedHostsData = useMemo(() => (\n        items?.data.filter(s => selectedHosts?.includes(s.id))\n    ), [selectedHosts, items]);\n\n    const sortingHeader = items?.meta?.patch_access\n        ? SYSTEMS_EXPOSED_SORTING_HEADER\n        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');\n\n    const sortBy = () =>\n        createSortBy(\n            sortingHeader,\n            metadata.sort\n        );\n\n    const onSort = (_event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            sortingHeader,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <React.Fragment>\n            <Stack hasGutter>\n                <StackItem>\n                    <TextContent>\n                        <Text component={TextVariants.h2}>\n                            {props.intl.formatMessage(messages.systemsExposedTableHeader)}\n                        </Text>\n                    </TextContent>\n                </StackItem>\n                <StackItem>\n                    <InventoryTable\n                        disableDefaultColumns\n                        onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),\n                                ...mergeWithDetail()\n                            });\n                        }}\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            onSort: (items.data.length > 0) && onSort,\n                            sortBy: (items.data.length > 0) && sortBy(),\n                            actionResolver: (rowData, rowIndex) => (\n                                items.data.length > 0 &&\n                                systemExposedTableRowActions(\n                                    showStatusModal,\n                                    props.cveStatusDetails,\n                                    rowIndex.rowIndex\n                                )\n                            ),\n                            variant: TableVariant.compact\n                        }}\n                        showTags\n                        key={'inventory'}\n                        expandable\n                        ref={inventory}\n                        items={items.data}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        isLoaded={!isLoading}\n                        onRefresh={inventoryRefresh}\n                        hasCheckbox={items && items.length !== 0}\n                        showActions={items && items.length !== 0}\n                        exportConfig={{\n                            isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                            ouiaId: 'export',\n                            ...exportConfig({ downloadReport })\n                        }}\n                        onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                        dedicatedAction={(!isLoading &&\n                            <Remediation\n                                manyRules\n                                systems={selectedHostsData}\n                                cves={{ id: props.cve, rules: props.filterRuleValues }}\n                            />\n                        )}\n                        actionsConfig={{\n                            actions: kebabOptions,\n                            kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 },\n                            dropdownProps: { ouiaId: 'toolbar-actions' }\n                        }}\n                        activeFiltersConfig={{\n                            filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),\n                            onDelete: (e, i) => removeFilters(i, apply)\n                        }}\n                        bulkSelect={selectOptions && {\n                            count: selectedHosts && selectedHosts.length,\n                            items: selectOptions.items,\n                            isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                            checked: Boolean(selectedHosts && selectedHosts.length),\n                            ouiaId: 'bulk-select',\n                            onSelect: () => selectOptions.handleOnCheckboxChange()\n                        }}\n                        filterConfig={{\n                            items: [\n                                searchFilter(\n                                    'filter',\n                                    messages.systemsSearchName,\n                                    messages.searchFilterByName,\n                                    parameters.filter, apply\n                                ),\n                                securityRuleFilter(apply, parameters, props.filterRuleValues),\n                                statusFilter(apply, parameters),\n                                searchFilter('advisory', messages.advisory, messages.search, parameters.advisory, apply)\n\n                            ]\n                        }}\n                    >\n                        {StatusModal && <StatusModal />}\n                    </InventoryTable>\n                </StackItem>\n            </Stack>\n        </React.Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cve: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsByCVE\n} from '../../../Store/Actions/Actions';\nimport { withRouter } from 'react-router-dom';\nimport { PATHS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = (props) => {\n    const dispatch = useDispatch();\n    const [cveName] = useState(props.match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n\n    const exposedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, []);\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        dispatch(fetchCveDetails(cveName));\n                        dispatch(fetchAffectedSystemsByCVE(cveName));\n                    }}\n                />\n        );\n    };\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: exposedSystems?.payload?.meta?.total_items || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    if (!error) {\n        return (\n            <React.Fragment>\n                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>\n                    <Header\n                        title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                        actions={kebabItems}\n                        actionsOuiaId={'cve-actions'}\n                        breadcrumbs={[\n                            {\n                                title: PATHS.cvesPage.title,\n                                to: PATHS.cvesPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: cveName,\n                                isActive: true,\n                                loaded: true\n                            }\n                        ]}\n                        labels={[\n                            <GroupedCVELabels\n                                key=\"labels\"\n                                hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                hasRule={details.payload.data?.attributes.rules.length > 0}\n                            />\n                        ]}\n                    >\n                        <CVEDetailsPageSummary\n                            changeExposedSystemsParameters={changeExposedSystemsParameters}\n                            data={cveDetails}\n                        />\n                        <StatusModal />\n                        <BusinessModal />\n                    </Header>\n                    <Main>\n                        <SystemsExposedTable\n                            cve={cveName}\n                            filterRuleValues={filterRuleValues}\n                            cveStatusDetails={cveStatusDetails}\n                            methods={{ showStatusModal }}\n                        />\n                    </Main>\n                </CVEPageContext.Provider>\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n                <Header title={cveName}/>\n                <InvalidObject />\n            </React.Fragment>\n        );\n    }\n};\n\nCVEDetailsPage.propTypes = {\n    match: propTypes.object,\n    cveDetails: propTypes.object,\n    fetchCveDetails: propTypes.func,\n    handleCveDetailsError: propTypes.func\n};\nexport default withRouter(CVEDetailsPage);\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".vulnerability .label{min-width:140px}.vulnerability .l-sm-spacer{margin-left:var(--pf-global--spacer--sm)}.vulnerability .ansible-success{color:var(--pf-global--success-color--200)}.vulnerability .card-box{border:1px solid var(--pf-global--BorderColor--dark-100);box-shadow:none;padding:var(--pf-global--spacer--sm) !important}.vulnerability .card-box .pf-c-expandable-section__content{margin-top:0}.vulnerability .card-box .rule-card-body{padding-left:44px;padding-top:var(--pf-global--spacer--sm)}.vulnerability .card-box .pf-c-expandable-section__toggle-icon{margin:2px 5px 0px 8px}.vulnerability .card-box #filter-affected-systems-split{display:inline-block}.vulnerability .card-box #filter-affected-systems{display:inline-block;vertical-align:middle}.vulnerability .fontsize--lg{font-size:var(--pf-global--FontSize--lg)}.vulnerability .checkCircleIcon{color:var(--pf-global--success-color--100);vertical-align:-0.15em}.vulnerability .powerOffIcon{color:var(--pf-global--danger-color--100);vertical-align:'-0.125em'}.vulnerability .outlinedQuestionCircleIcon{color:var(--pf-global--secondary-color--100)}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.scss\"],\"names\":[],\"mappings\":\"AAAA,sBACO,eAAe,CADtB,4BACoC,wCAAwC,CAD5E,gCAC8F,0CAA0C,CADxI,yBACmJ,wDAAwD,CAAC,eAAe,CAAC,+CAA+C,CAD3Q,2DACwT,YAAY,CADpU,yCAC+V,iBAAiB,CAAC,wCAAwC,CADzZ,+DAC0c,sBAAsB,CADhe,wDAC0gB,oBAAoB,CAD9hB,kDACkkB,oBAAoB,CAAC,qBAAqB,CAD5mB,6BAC2nB,wCAAwC,CADnqB,gCACqrB,0CAA0C,CAAC,sBAAsB,CADtvB,6BACqwB,yCAAyC,CAAC,yBAAyB,CADx0B,2CACq2B,4CAA4C\",\"sourcesContent\":[\".vulnerability{\\n.label{min-width:140px}.l-sm-spacer{margin-left:var(--pf-global--spacer--sm)}.ansible-success{color:var(--pf-global--success-color--200)}.card-box{border:1px solid var(--pf-global--BorderColor--dark-100);box-shadow:none;padding:var(--pf-global--spacer--sm) !important}.card-box .pf-c-expandable-section__content{margin-top:0}.card-box .rule-card-body{padding-left:44px;padding-top:var(--pf-global--spacer--sm)}.card-box .pf-c-expandable-section__toggle-icon{margin:2px 5px 0px 8px}.card-box #filter-affected-systems-split{display:inline-block}.card-box #filter-affected-systems{display:inline-block;vertical-align:middle}.fontsize--lg{font-size:var(--pf-global--FontSize--lg)}.checkCircleIcon{color:var(--pf-global--success-color--100);vertical-align:-0.15em}.powerOffIcon{color:var(--pf-global--danger-color--100);vertical-align:'-0.125em'}.outlinedQuestionCircleIcon{color:var(--pf-global--secondary-color--100)}\\n\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../node_modules/sass-loader/dist/cjs.js!./CSAwRuleBox.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../node_modules/sass-loader/dist/cjs.js!./CSAwRuleBox.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}