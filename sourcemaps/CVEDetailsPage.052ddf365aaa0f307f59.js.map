{"version":3,"file":"js/CVEDetailsPage.be7cce9340258d17f770.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js"],"sourcesContent":["import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton size={SkeletonSize.lg} {...props} style={{ display: 'inline-block', ...props.style }}/>;\n            default:\n                return <Skeleton size={SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return props.children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType))\n};\n\nexport default WithLoader;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    <StackItem className=\"pf-u-mt-sm\">\n                        <div>\n                            <span className=\"pf-u-mr-xs\">{intl.formatMessage(messages.publishDate)}:</span>\n                            <WithLoader\n                                isLoading={context.isLoading}\n                                variant={LoaderType.inlineSkeleton}\n                                style={{ width: '100px' }}\n                            >\n                                {publishDate}\n                            </WithLoader>\n                        </div>\n                    </StackItem>\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            <TextContent style={{ textAlign: 'justify' }}>\n                                <Text component={TextVariants.p}>{description}</Text>\n                            </TextContent>\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth={'100%'}\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label={'Metric breakdown'}\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <React.Fragment>\n                            <Label isLarge className=\"pf-u-mb-xs pointer\">\n                                {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                                <OutlinedQuestionCircleIcon\n                                    color={'var(--pf-global--secondary-color--100)'}\n                                    className=\"pf-u-ml-xs\"\n                                />\n                            </Label>\n                        </React.Fragment>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent={''} position=\"bottom\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack className=\"popover-content\">\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={brPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={statusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return <Fragment>\n        {sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\"/>\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={() => handleExposedSystemFilter(rule.rule_id)}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            { RISK_OF_CHANGE_LABEL[rule.change_risk] }\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                { !rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                { rule.reboot_required &&\n                                                                <Text>\n                                                                    <PowerOffIcon\n                                                                        className=\"pf-u-mr-xs powerOffIcon\"\n                                                                    />\n                                                                    {intl.formatMessage(messages.rebootRequired)}\n                                                                </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                        <StackItem>\n                                            <TextContent>\n                                                <Text\n                                                    className=\"pf-u-mt-xs\"\n                                                    component={TextVariants.p}\n                                                >\n                                                    <a\n                                                        className=\"kb-link\"\n                                                        href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                        target=\"_blank\"\n                                                        rel=\"noopener noreferrer\"\n                                                    >\n                                                        {\n                                                            intl.formatMessage(messages.knowledgebaseArticle)\n                                                        }\n                                                        <ExternalLinkAltIcon className=\"l-sm-spacer\"/>\n                                                    </a>\n                                                </Text>\n                                            </TextContent>\n                                        </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                .filter(cve => cve !== synopsis)\n                                                .map((cve, _i) =>\n                                                    <a\n                                                        className=\"associated-cve-link\"\n                                                        key={_i}\n                                                        href={`${CVES_PATH}/${cve}`}\n                                                    >\n                                                        {cve}\n                                                    </a>\n                                                )\n                                                .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))}\n    </Fragment>;\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar cveAttributes={data.data} />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters = {changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport Remediation from '../Remediation/Remediation';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsIdsByCve,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    SYSTEMS_EXPOSED_SORTING_HEADER,\n    RULE_ABSENSE_OPTIONS\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nconst SystemsExposedTable = (props) => {\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n\n    const affectedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const isLoading = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading\n    );\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n\n    const metadata = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta\n    );\n    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems }, props.cve), [affectedSystems, props.cve]);\n\n    const { error } = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const apply = (config) => dispatch(\n        changeExposedSystemsParameters(config)\n    );\n\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n\n        if (inventory.current && (metadata.page !== page || metadata.limit !== pageSize)) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        const selectedHosts = payload ? payload : [];\n        setSelectedHosts(selectedHosts);\n    };\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]\n            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));\n        }\n    }, [parameters, isFirstMount]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        let params = [props.cve, { ...parameters }];\n        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        items.meta.page === 1\n                            ? dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }))\n                            : apply({ page: 1 });\n\n                        dispatch(fetchCveDetails(props.cve));\n                    }}\n                    inventoryList={inventories}\n                    type={'systemsExposed'}\n                />\n        );\n    };\n\n    const getSelectedSystemsData = () => {\n        let systemsList = items.data?.filter(item => selectedHosts.includes(item.inventory_id));\n        // eslint-disable-next-line camelcase\n        systemsList = systemsList.map(({ inventory_id, display_name, status_id, status_text: justification }) =>\n            ({ inventory_id, display_name, status_id, justification })); // omit properties we don't need\n\n        return systemsList;\n    };\n\n    const kebabOptions = ['',\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal(\n                [props.cveStatusDetails],\n                getSelectedSystemsData()\n            ),\n            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n        }\n    ];\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedHosts || [],\n        selectorHandler: handleSelect,\n        items: items.data && items || { data: [], meta: { total_items: 0 } },\n        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })\n    }), [items, selectedHosts, parameters, props.cve]);\n\n    const selectedHostsData = useMemo(() => (\n        items?.data?.filter(s => selectedHosts?.includes(s.id))\n    ), [selectedHosts, items]);\n\n    const sortingHeader = items?.meta?.patch_access\n        ? SYSTEMS_EXPOSED_SORTING_HEADER\n        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');\n\n    const sortBy = () =>\n        createSortBy(\n            sortingHeader,\n            metadata.sort\n        );\n\n    const onSort = (_event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            sortingHeader,\n            urlParameters.sort,\n            apply\n        );\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter, apply\n    );\n\n    const advisoryFilter = useSearchFilter('advisory', messages.advisory, messages.search, parameters.advisory, apply);\n\n    return (\n        <React.Fragment>\n            <Stack hasGutter>\n                <StackItem>\n                    <TextContent>\n                        <Text component={TextVariants.h2}>\n                            {props.intl.formatMessage(messages.affectsSystems)}\n                        </Text>\n                    </TextContent>\n                </StackItem>\n                <StackItem>\n                    {error?.hasError\n                        ? <ErrorHandler code={error?.errorCode} />\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),\n                                    ...mergeWithDetail()\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                onSort: (items.data.length > 0) && onSort,\n                                sortBy: (items.data.length > 0) && sortBy(),\n                                actionResolver: (rowData, rowIndex) => (\n                                    items.data.length > 0 &&\n                                    systemExposedTableRowActions(\n                                        showStatusModal,\n                                        props.cveStatusDetails,\n                                        rowIndex.rowIndex\n                                    )\n                                ),\n                                variant: TableVariant.compact\n                            }}\n                            showTags\n                            key={'inventory'}\n                            expandable\n                            ref={inventory}\n                            items={items.data}\n                            page={metadata && metadata.page || 1}\n                            perPage={metadata && metadata.page_size || 20}\n                            total={metadata && metadata.total_items || 0}\n                            isLoaded={!isLoading}\n                            onRefresh={inventoryRefresh}\n                            hasCheckbox={items && items.length !== 0}\n                            showActions={items && items.length !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            noSystemsTable={<EmptyStateNoSystems />}\n                        >\n                            <PrimaryToolbar\n                                className=\"vuln-systems-primary-toolbar\"\n                                exportConfig={{\n                                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                    ouiaId: 'export',\n                                    ...exportConfig({ downloadReport })\n                                }}\n                                dedicatedAction={(!isLoading &&\n                                    <Remediation\n                                        manyRules\n                                        systems={selectedHostsData}\n                                        cves={{ id: props.cve, rules: props.filterRuleValues }}\n                                    />\n                                )}\n                                actionsConfig={{\n                                    actions: kebabOptions,\n                                    kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 },\n                                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                                }}\n                                activeFiltersConfig={{\n                                    filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),\n                                    onDelete: (_, chips) => removeFilters(chips, apply),\n                                    deleteTitle: props.intl.formatMessage(messages.resetFilters)\n                                }}\n                                bulkSelect={selectOptions && {\n                                    count: selectedHosts && selectedHosts.length,\n                                    items: selectOptions.items,\n                                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                    checked: Boolean(selectedHosts && selectedHosts.length),\n                                    ouiaId: 'bulk-select',\n                                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                                }}\n                                filterConfig={{\n                                    items: [\n                                        searchFilter,\n                                        securityRuleFilter(\n                                            apply,\n                                            parameters,\n                                            props.filterRuleValues,\n                                            {\n                                                isDynamic: true,\n                                                dropdownItems: RULE_ABSENSE_OPTIONS\n                                            }\n                                        ),\n                                        statusFilter(apply, parameters),\n                                        advisoryFilter\n                                    ]\n                                }}\n                            />\n                            {StatusModal && <StatusModal />}\n                        </InventoryTable>}\n                </StackItem>\n            </Stack>\n        </React.Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cve: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsByCVE,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { withRouter } from 'react-router-dom';\nimport { PATHS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = (props) => {\n    const dispatch = useDispatch();\n    const [cveName] = useState(props.match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n\n    const exposedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        dispatch(fetchCveDetails(cveName));\n                        dispatch(fetchAffectedSystemsByCVE(cveName));\n                    }}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: exposedSystems?.payload?.meta?.total_items || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    if (error?.hasError) {\n        return (\n            <React.Fragment>\n                <Header title={cveName}/>\n                <ErrorHandler code={error?.errorCode} />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>\n                    <Header\n                        title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                        actions={kebabItems}\n                        actionsOuiaId={'cve-actions'}\n                        breadcrumbs={[\n                            {\n                                title: PATHS.cvesPage.title,\n                                to: PATHS.cvesPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: cveName,\n                                isActive: true,\n                                loaded: true\n                            }\n                        ]}\n                        labels={[\n                            <GroupedCVELabels\n                                key=\"labels\"\n                                hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                hasRule={details.payload.data?.attributes.rules.length > 0}\n                            />\n                        ]}\n                    >\n                        <CVEDetailsPageSummary\n                            changeExposedSystemsParameters={changeExposedSystemsParameters}\n                            data={cveDetails}\n                        />\n                        <StatusModal />\n                        <BusinessModal />\n                    </Header>\n                    <Main>\n                        <SystemsExposedTable\n                            cve={cveName}\n                            filterRuleValues={filterRuleValues}\n                            cveStatusDetails={cveStatusDetails}\n                            methods={{ showStatusModal }}\n                        />\n                    </Main>\n                </CVEPageContext.Provider>\n            </React.Fragment>\n        );\n    }\n};\n\nCVEDetailsPage.propTypes = {\n    match: propTypes.object,\n    cveDetails: propTypes.object,\n    fetchCveDetails: propTypes.func,\n    handleCveDetailsError: propTypes.func\n};\nexport default withRouter(CVEDetailsPage);\n"],"names":["LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","variant","props","Spinner","centered","SkeletonTable","TableVariant","Skeleton","shape","size","SkeletonSize","style","display","children","propTypes","Object","keys","CVEDetailsPageDescription","cveAttributes","intl","publishDate","public_date","description","link","rh_link","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","className","formatMessage","messages","width","height","TextContent","textAlign","Text","component","TextVariants","injectIntl","V3names","AV","name","values","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","split","forEach","curr","key","val","value","cvssVersion","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","gridBreakPoint","cells","rows","entries","Label","isLarge","color","score","substring","indexOf","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","map","item","STATUS_OPTIONS","toString","label","brPopoverContent","statusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","concat","sort","a","b","systems_affected","Fragment","rule","index","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","onClick","ruleId","Link","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","text","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","defaultProps","PropTypes","KnownExploitSummary","useIntl","KnownExploitLabel","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTable","useState","StatusModal","setStatusModal","undefined","selectedHosts","setSelectedHosts","inventory","React","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","affectedSystems","useSelector","CVEDetailsPageStore","affectedSystemsByCVE","parameters","shallowEqual","metadata","payload","meta","items","useMemo","createExposedSystemsTable","error","apply","config","handleSelect","isChecked","middlewareListener","on","callback","newSelected","selected","onSelect","useEffect","useDeepCompareEffect","fetchAffectedSystemsByCVE","clearInventoryStore","showStatusModal","cves","inventories","CvePairStatusModal","cveList","updateRef","page","fetchCveDetails","inventoryList","type","kebabOptions","cveStatusDetails","includes","inventory_id","display_name","status_id","justification","status_text","isDisabled","length","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","total_items","fetchResource","ops","fetchAffectedSystemsIdsByCve","selectedHostsData","s","sortingHeader","patch_access","SYSTEMS_EXPOSED_SORTING_HEADER","searchFilter","useSearchFilter","advisoryFilter","advisory","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","_event","direction","handleSortColumn","sortBy","createSortBy","actionResolver","rowData","rowIndex","systemExposedTableRowActions","showTags","expandable","ref","perPage","page_size","total","isLoaded","onRefresh","pageSize","per_page","current","limit","onRefreshData","hasCheckbox","showActions","onExpandClick","_e","isOpen","expandRow","noSystemsTable","PrimaryToolbar","exportConfig","downloadReport","format","params","DownloadReport","notification","addNotification","clearNotifications","dedicatedAction","Remediation","manyRules","systems","filterRuleValues","actionsConfig","actions","kebabToggleProps","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","checked","Boolean","handleOnCheckboxChange","filterConfig","securityRuleFilter","isDynamic","dropdownItems","RULE_ABSENSE_OPTIONS","statusFilter","withRouter","CVEDetailsPage","match","cveName","BusinessModal","setBusinessRisk","details","createCveDetailsPage","exposedSystems","CveStatusModal","clearCveStore","exposed_systems_count","kebabItems","kebabItemEditBusinessRisk","BusinessRiskModal","open","business_risk_id","kebabItemEditStatus","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","loaded","isActive","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","methods","handleCveDetailsError"],"sourceRoot":""}