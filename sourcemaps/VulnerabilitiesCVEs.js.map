{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"names":["VulnerabilitiesTableWithContext","noCves","props","entity","cves","context","filter","item","Object","prototype","hasOwnProperty","call","meta","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","event","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","id","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","handleCveDescription","openedCves","params","expandCveDescription","cve","map","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","business_risk_id","isDisabled","kebabItemEditStatus","showStatusModal","status_id","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","show_all","multiRow","SearchFilter","placeholder","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","filterCveId","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","title","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","undefined","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","then","sendRequest","cveNames","selectCve","toggleCveDescription","cveList","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showReportLink","showAllParam","response","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","BusinessRiskModal","updateRef","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","func","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","useState","setShowReportLink","VulnerabilityHeader","showBreadcrumb","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","toString","getDefaultLabel","handleOnRadioChange","_","currentTarget","justification","successNotification","onSave","setBusinessRisk","parseInt","business_risk_text","onSuccessNotification","gutter","fieldId","businessRiskOptions","isChecked","onChange","name","type","resizeOrientation","CveStatusModal","useStatusSelect","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveIds","setCveStatus","status_text","setSystemCveStatus","content","checked","style","marginRight","size","color","isFilled"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => methods.openCve(rowKey)}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus,\n    filterCveId\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersCVSSScore,\n            filtersSeverity,\n            filtersBusinessRisk,\n            filtersPublishDate,\n            filtersStatus\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCves}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <SearchFilter\n                            placeholder=\"Find a CVE...\"\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveId, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\n\nexport const BusinessRiskModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Business risk updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title=\"Edit business risk\">\n            <Stack gutter={'md'}>\n                <StackItem>\n                    Business risk can be used to identify, track, and address CVEs that have meaningful impact to your\n                    organization.\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default BusinessRiskModal;\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n    const title = cveList.length > 1 ? 'Set status for these CVEs and all systems' : 'Set status for this CVE and all systems';\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label={\n                                    <React.Fragment>\n                                        Do not overwrite individual system status{' '}\n                                        <Tooltip\n                                            content=\"When checked, this setting does not change any pre-existing\n                                        statuses set on individual systems for this CVE.\"\n                                        >\n                                            <React.Fragment>\n                                                <OutlinedQuestionCircleIcon />\n                                            </React.Fragment>\n                                        </Tooltip>\n                                    </React.Fragment>\n                                }\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching systems. Any new matching systems will have\n                                    the status &quot;Not reviewed&quot;{' '}\n                                    <Tooltip\n                                        content='Example: If a new system is added and matches to this vulnerability,\n                                    it will be given a status \"Not reviewed\"'\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n"],"sourceRoot":""}