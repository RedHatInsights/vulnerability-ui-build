{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss?a20a","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.js"],"names":["CveStatusModal","cves","updateRef","useState","cveList","useStatusSelect","length","status_id","toString","StatusSelect","statusId","useJustificationInput","justification","JustificationInput","checkboxState","setCheckboxState","successNotification","variant","title","items","onSave","cveIds","map","item","id","setCveStatus","parseInt","cve","status_text","then","setSystemCveStatus","onSuccessNotification","gutter","key","fieldId","label","name","isChecked","onChange","checked","size","color","isFilled","propTypes","array","func","content","module","i","options","transform","undefined","locals","exports","push","VulnerabilitiesTableWithContext","noCves","props","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","event","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","any","object","connect","dispatch","params","expandCve","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","business_risk_id","isDisabled","kebabItemEditStatus","showStatusModal","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","createUrlParams","allParams","show_irrelevant","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","fetchData","parameters","showAllParam","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","BusinessRiskModal","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","withRouter","VulnerabilitiesStore","createCveListByAccount","changeCveListParameters","CVEs","setHeader","breadcrumbs","dispatchSetHeader","VulnerabilitiesCVEs","Page","VulnerabilityHeader"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title=\"Set status for this CVE and all hosts\"\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label=\"Do not overwrite individual host status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching hosts. Any new matching hosts will have the\n                                    status &quot;Not review&quot;\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pf-c-tabs.vulnerability-tabs {\\n  background-color: var(--pf-global--BackgroundColor--100);\\n  padding-left: var(--pf-c-page__main-section--md--PaddingLeft); }\\n\", \"\"]);\n\n// exports\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { expandCve } from '../../../Store/Actions/Actions';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object,\n        openCve: propTypes.func\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => this.props.openCve(rowKey)}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default connect(\n    null,\n    mapDispatchToProps\n)(VulnerabilitiesTable);\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [filtersShowAll, filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                        />\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam });\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nclass CVEs extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    dispatchSetHeader() {\n        this.props.setHeader({\n            title: 'Vulnerability',\n            breadcrumbs: []\n        });\n    }\n\n    render() {\n        this.dispatchSetHeader();\n        return <VulnerabilitiesCves />;\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport CVEs from '../CVEs/CVEs';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport './VulnerabilitiesCVEs.scss';\n\nclass VulnerabilitiesCVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Page>\n                <VulnerabilityHeader />\n                <Main>\n                    <CVEs />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(VulnerabilitiesCVEs)\n);\n"],"sourceRoot":""}