{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./node_modules/lodash/unionWith.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["useStatusSelect","initialValue","useState","statusId","setStatusId","props","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","map","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","type","resizeOrientation","BaseModal","items","title","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","undefined","Fragment","isSmall","isOpen","Boolean","isFooterLeftAligned","onClose","actions","variant","onClick","then","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","data","FilterNotFoundForCVE","style","height","EmptyStateVariant","large","headingLevel","size","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","emptyStateSystemResumeAnalysis","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","securityRuleFilter","apply","currentFilter","dynamicFilters","currentValue","security_rule","filterBySecurityRule","values","page","intl","formatMessage","securityRules","conditionalFilterType","radio","urlParam","filterValues","event","unionWith","SECURITY_RULE_OPTIONS","isEqual","item","statusFilter","status_id","filterByStatus","length","filter","join","status","checkbox","split","BusinessRiskModal","cves","cveList","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","useEffect","business_risk_id","toString","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","count","setBusinessRisk","parseInt","cve","id","business_risk_text","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","BUSINESS_RISK_OPTIONS","isChecked","name","injectIntl","CveStatusModal","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","content","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","baseFlatten","baseRest","baseUniq","isArrayLikeObject","last","arrays","comparator","module","exports","PaginationWrapper","handleChangePage","_event","pageNumber","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","i","options","transform","locals","push","VulnerabilitiesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","Object","prototype","hasOwnProperty","call","handleOnCollapse","rowKey","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","header","isLoading","colSize","rowSize","Table","onSelect","onCollapse","openCve","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","VulnerabilitiesTable","CVETableContext","Consumer","notAffectingCvesFilter","show_all","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","VulnerabilitiesToolbarWithContext","params","selectedCves","expandCveDescription","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","editBusinessRisk","showBusinessRiskModal","isDisabled","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","openedCves","pagination","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","totalNumber","downloadReport","React","createContext","VulnerabilitiesCves","processError","filterParams","constructFilterParameters","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","fetchData","showAllParam","response","format","DownloadReport","exec","fetchCveListByAccount","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","VULNERABILITIES_HEADER","withRouter","VulnerabilitiesStore","createCveListByAccount","changeCveListParameters","expandCve","CVEs","VulnerabilityHeader","showBreadcrumb","showDownloadButton"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                isSmall\n                title={title}\n                isOpen={Boolean(targetItems)}\n                isFooterLeftAligned\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `comparator` which\n * is invoked to compare elements of `arrays`. Result values are chosen from\n * the first array in which the value occurs. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.unionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar unionWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n});\n\nmodule.exports = unionWith;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","import React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    let { show_all: currentValue } = currentFilter;\n    currentValue = (currentValue === '' || !currentValue) ? 'show' :  'hide';\n\n    const filterByNoAffect = value => {\n        value = value === 'hide' ? true : '';\n        apply({ show_all: value, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default  notAffectingCvesFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","import React, { Component } from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { VULNERABILITIES_HEADER } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { constructFilterParameters } from '../../../Helpers/MiscHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport './vulnerabilities.scss';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n\n        this.props.changeParameters(params).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n\n        DownloadReport.exec(fetchCveListByAccount, params, format, 'cves');\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={VULNERABILITIES_HEADER} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} showDownloadButton />\n            <Main>\n                <VulnerabilitiesCves/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}