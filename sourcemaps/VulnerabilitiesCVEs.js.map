{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"names":["CVEs","useState","showReportLink","setShowReportLink","CVETableContext","React","createContext","header","title","key","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","props","processError","GenericError","apply","config","Object","prototype","hasOwnProperty","call","cvssEntry","CVSSOptions","find","item","value","cvss_filter","values","split","filter","parseFloat","from","to","undefined","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","then","sendRequest","selectCves","isSelected","cveNames","selectCve","toggleCveDescription","cveList","parameters","expandCveDescription","openedCves","data","cve","id","map","length","openCve","createUrlParams","allParams","params","show_irrelevant","show_all","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showAllParam","response","downloadReport","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","payload","JSON","downloadFile","Date","toISOString","showBusinessRiskModal","cves","setState","BusinessRiskModal","showStatusModal","StatusModal","state","isBusinessRiskOpen","isStatuskOpen","queryObject","parse","location","search","errors","methods","fetchResource","Component","propTypes","any","func","object","mapStateToProps","VulnerabilitiesStore","createCveListByAccount","mapDispatchToProps","dispatch","changeCveListParameters","expandCve","withRouter","connect","VulnerabilitiesTableWithContext","noCves","entity","context","filterFields","meta","emptyComponent","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","heightAuto","cells","colSpan","handleOnCollapse","event","rowKey","isOpen","rows","handleOnSelect","rowId","cveName","handleBusinessRiskToggle","isLoading","cveTableRowActions","createSortBy","sort","direction","handleSortColumn","array","VulnerabilitiesTable","VulnerabilitiesToolbarWithContext","handleCveDescription","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","business_risk_id","isDisabled","kebabItemEditStatus","status_id","kebabItemToggleCvesDescription","kebabItemDownloadJSON","kebabItemDownloadCSV","ops","filterCveSearchTerm","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","updateRef","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","getDefaultBusinessRisk","getDefaultLabel","handleOnRadioChange","_","currentTarget","handleOnLabelChange","handleSave","setBusinessRisk","parseInt","business_risk_text","toString","justification","successNotification","variant","businessRiskOptions","CveStatusModal","useStatusSelect","getDefaultStatus","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveIds","setCveStatus","status_text","setSystemCveStatus","checked","marginRight"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForCVE : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus,\n    filterCveSearchTerm\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersCVSSScore,\n            filtersSeverity,\n            filtersBusinessRisk,\n            filtersPublishDate,\n            filtersStatus\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCves}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <SearchFilter\n                            placeholder=\"Find a CVE...\"\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} disabled={cves.data.length === 0} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\n\nexport const BusinessRiskModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Business risk updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title=\"Edit business risk\">\n            <Stack gutter={'md'}>\n                <StackItem>\n                    Business risk can be used to identify, track, and address CVEs that have meaningful impact to your\n                    organization.\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default BusinessRiskModal;\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n    const title = cveList.length > 1 ? 'Set status for these CVEs and all systems' : 'Set status for this CVE and all systems';\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label={\n                                    <React.Fragment>\n                                        Do not overwrite individual system status{' '}\n                                        <Tooltip\n                                            content=\"When checked, this setting does not change any pre-existing\n                                        statuses set on individual systems for this CVE.\"\n                                        >\n                                            <React.Fragment>\n                                                <OutlinedQuestionCircleIcon />\n                                            </React.Fragment>\n                                        </Tooltip>\n                                    </React.Fragment>\n                                }\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching systems. Any new matching systems will have\n                                    the status &quot;Not reviewed&quot;{' '}\n                                    <Tooltip\n                                        content='Example: If a new system is added and matches to this vulnerability,\n                                    it will be given a status \"Not reviewed\"'\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n"],"sourceRoot":""}