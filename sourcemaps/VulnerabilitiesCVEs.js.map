{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["BusinessRiskModal","cves","updateRef","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","length","business_risk_id","toString","getDefaultLabel","handleOnRadioChange","_","event","value","currentTarget","justification","successNotification","variant","title","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","gutter","fieldId","businessRiskOptions","isChecked","onChange","key","name","aria-label","type","resizeOrientation","propTypes","array","func","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveIds","setCveStatus","status_text","setSystemCveStatus","Fragment","content","checked","style","marginRight","size","color","isFilled","VulnerabilitiesTableWithContext","noCves","props","entity","context","filter","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onSelect","cells","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","any","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","handleCveDescription","openedCves","params","expandCveDescription","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","isDisabled","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","multiRow","SearchFilter","placeholder","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","filterCveId","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","undefined","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showAllParam","response","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","VulnerabilityHeader","showBreadcrumb"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\n\nexport const BusinessRiskModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Business risk updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title=\"Edit business risk\">\n            <Stack gutter={'md'}>\n                <StackItem>\n                    Business risk can be used to identify, track, and address CVEs that have meaningful impact to your\n                    organization.\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default BusinessRiskModal;\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n    const title = cveList.length > 1 ? 'Set status for these CVEs and all systems' : 'Set status for this CVE and all systems';\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label={\n                                    <React.Fragment>\n                                        Do not overwrite individual system status{' '}\n                                        <Tooltip\n                                            content=\"When checked, this setting does not change any pre-existing\n                                        statuses set on individual systems for this CVE.\"\n                                        >\n                                            <React.Fragment>\n                                                <OutlinedQuestionCircleIcon />\n                                            </React.Fragment>\n                                        </Tooltip>\n                                    </React.Fragment>\n                                }\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching systems. Any new matching systems will have\n                                    the status &quot;Not reviewed&quot;{' '}\n                                    <Tooltip\n                                        content='Example: If a new system is added and matches to this vulnerability,\n                                    it will be given a status \"Not reviewed\"'\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => methods.openCve(rowKey)}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus,\n    filterCveId\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersCVSSScore,\n            filtersSeverity,\n            filtersBusinessRisk,\n            filtersPublishDate,\n            filtersStatus\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCves}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <SearchFilter\n                            placeholder=\"Find a CVE...\"\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveId, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}