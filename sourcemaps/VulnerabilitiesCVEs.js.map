{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsStore.js","webpack:///./src/Store/Reducers/VulnerabilitiesStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_VULNERABILITY_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","show_all","sort","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEStore","type","ActionTypes","setIn","VulnerabilitiesStore","cveName","data","SystemsStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearVulnerabilitiesStore","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","resizeOrientation","BaseModal","items","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","Fragment","variant","Boolean","onClose","actions","onClick","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","shape","details","resulotion","isRequired","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","item","attributes","status_name","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","find","option","parseInt","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","editStatus","showStatusModal","systemCveTableRowActions","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","a","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","split","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","FilterNotFoundForCVE","height","EmptyStateVariant","large","headingLevel","size","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","emptyStateForMoreInfo","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","emptyStateSystemResumeAnalysis","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","errorReload","securityRuleFilter","currentFilter","dynamicFilters","currentValue","filterBySecurityRule","securityRules","radio","urlParam","unionWith","SECURITY_RULE_OPTIONS","isEqual","statusFilter","filterByStatus","checkbox","BusinessRiskModal","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","setBusinessRisk","businessRiskModalTitle","hasGutter","businessRiskModalInfo","businessRiskLabel","isChecked","injectIntl","CveStatusModal","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","PaginationWrapper","pageNumber","nextProps","totalItems","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","module","i","transform","locals","exports","VulnerabilitiesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","handleOnCollapse","rowKey","rows","setState","handleOnSelect","isSelected","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","header","SkeletonTable","colSize","rowSize","Table","canSelectAll","onCollapse","openCve","sortBy","createSortBy","onSort","direction","handleSortColumn","gridBreakPoint","TableToolbar","VulnerabilitiesTable","CVETableContext","Consumer","notAffectingCvesFilter","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","VulnerabilitiesToolbarWithContext","selectedCvesCount","selectOptions","ops","isDisabled","kebabCollapseCves","kebabExpandCves","PrimaryToolbar","pagination","actionsConfig","kebabToggleProps","bulkSelect","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","onDelete","e","totalNumber","createContext","VulnerabilitiesCves","processError","filterParams","constructFilterParameters","changeParameters","sendRequest","cveNames","toggleCveDescription","createUrlParams","allParams","show_irrelevant","allowedParams","forEach","queryString","qs","history","showAllParam","DownloadReport","StatusModal","isStatuskOpen","queryObject","parse","location","Provider","Stack","StackItem","showAllCheckbox","VULNERABILITIES_HEADER","withRouter","createCveListByAccount","CVEs","VulnerabilityHeader","showBreadcrumb","showDownloadButton","Main"],"mappings":"2FAAA,4/BAAO,IAAMA,EAAiB,iBAEjBC,EAAoB,oBACpBC,EAA2B,2BAC3BC,EAAuB,uBACvBC,EAAgC,gCAChCC,EAAgB,gBAChBC,EAAa,aACbC,EAAiB,iBACjBC,EAAwB,wBACxBC,EAA2B,2BAC3BC,EAAoC,oCACpCC,EAA6B,6BAC7BC,EAAa,aACbC,EAAoB,oBACpBC,EAAkB,kBAClBC,EAA2B,2BAC3BC,EAAa,aACbC,EAAa,aACbC,EAAoB,oBAEpBC,EAAwB,wBACxBC,EAAoC,oCACpCC,EAAsB,sBACtBC,EAA0B,0BAC1BC,EAAkB,kBAClBC,EAAwB,wBACxBC,EAA4B,4BAC5BC,EAAmC,mCACnCC,EAAoB,oBACpBC,EAAqB,qBACrBC,EAA0B,2B,2jCC3B1BC,EAAeC,IAAU,CAClCC,MAAO,gBACPC,YAAa,K,mkBCFV,I,EAAMH,EAAeC,IAAU,CAClCG,qBAAsB,CAClBC,WAAW,EACXC,WAAY,GACZC,QAAS,CACLC,KAAM,CACFC,YAAa,EACbC,KAAM,EACNC,UAAW,MAIvBC,WAAY,CACRF,KAAM,EACNC,UAAW,GACXE,cAAe,GACfC,mBAAeC,EACfC,eAAWD,GAEfE,WAAY,CACRZ,WAAW,EACXE,QAAS,GACTW,OAAO,K,0jBCvBR,IAAMlB,EAAe,CACxBY,WAAY,CACRF,KAAM,EACNC,UAAW,IAEfQ,QAAS,CACLd,WAAW,EACXE,QAAS,GACTC,KAAM,IAAIY,KACVF,OAAO,GAEXG,WAAY,GACZC,aAAc,GACdC,sBAAsB,GA0FnB,IAAMC,EAAkBC,aAAgB,qBAEnC/C,IAFmC,aAvF/C,SAAgCgD,EAAhC,GACI,YACOA,EADP,CAEIC,UAHyC,EAARnB,KAIjCW,QAAS,KACFO,EAAMP,QADN,CAEHd,WAAW,SAiFwB,gBAGnC3B,IAHmC,cA5E/C,SAAiCgD,EAAjC,GACI,YACOA,EADP,CAEIC,UAHmD,EAAjBnB,KAIlCW,QAAS,CACLZ,QAAS,CAAEqB,OALoC,EAAXrB,SAMpCF,WAAW,QAsEwB,gBAInC3B,IAJmC,eAjE/C,SAAkCgD,EAAOG,GAAQ,IACrCtB,EAAkBsB,EAAlBtB,QAASC,EAASqB,EAATrB,KACjB,OAAIA,GAAQkB,EAAMC,UACd,KACOD,EADP,CAEIC,UAAWnB,EACXW,QAAS,CACLZ,UACAF,WAAW,KAKhBqB,KAoDoC,MAKtC,qCAtBT,SAA0BA,EAAOG,GAC7B,IAAIC,EAAWJ,EAEf,OADAI,EAASlB,WAAT,KAA2Bc,EAAMd,WAAjC,GAAgDiB,EAAOtB,SAChDuB,KAcoC,MAMtC,qBAvDT,SAAsBJ,EAAOG,GACzB,IAAIC,EAAWJ,EACXJ,EAAeQ,EAASR,aAAaS,QAQzC,OAPIC,MAAMC,QAAQJ,EAAOtB,SACrBe,EAAeO,EAAOtB,QAErBe,EAAaY,SAASL,EAAOtB,UAAYe,EAAaa,OAAOb,EAAac,QAAQP,EAAOtB,SAAU,IAChGe,EAAae,KAAKR,EAAOtB,SAGjC,KAAYuB,EAAZ,CAAsBR,oBAuCqB,MAOtC,qBA3CT,SAAmBI,EAAOG,GACtB,IAAIC,EAAWJ,EADe,EAEiBG,EAAOtB,QAA9C+B,EAFsB,EAEtBA,OAAQC,EAFc,EAEdA,KAAMhB,EAFQ,EAERA,qBAClBF,EAAaS,EAAST,WAAWU,QAarC,OAXIQ,EAAKC,OAAS,EACdD,EAAKE,KAAI,SAAAC,GACL,IAAMC,EAAQtB,EAAWuB,WAAU,SAAAC,GAAO,OAAIA,EAAQC,KAAOJ,KACzDC,GAAS,EAAKtB,EAAWsB,GAAU,CAAEG,GAAIJ,EAAKJ,UAC5CjB,EAAWgB,KAAK,CAAES,GAAIJ,EAAKJ,cAIrCjB,EAAaA,EAAWoB,KAAI,SAAAC,GAAG,MAAK,CAAEI,GAAIJ,EAAII,GAAIR,QAAQ,MAG9D,KAAYR,EAAZ,CAAsBT,aAAYE,4BAoBS,MAQtC,2BAnBT,SAA8BG,GAC1B,IAAII,EAAWJ,EAOf,OANAI,EAASR,aAAe,GACxBQ,EAAST,WAAa,GACtBS,EAASlB,WAAa,CAClBF,KAAM,EACNC,UAAW,IAERmB,KAGoC,GAU3C9B,G,ijBCjHG,IAAMA,EAAe,CACxBK,WAAW,EACXE,QAAS,GACTwC,SAAU,CACNrC,KAAM,EACNsC,MAAO,GACPC,MAAO,EACPxC,YAAa,GAEjByC,OAAQ,CACJC,YAAQpC,EACRqC,SAAS,EACT1C,KAAM,EACNC,UAAW,K,ijBCbZ,IAAMX,EAAe,CACxBmB,QAAS,CACLd,WAAW,EACXE,QAAS,GACToB,UAAW,IAAIP,MAEnBR,WAAY,CACRyC,SAAU,OACVC,KAAM,eACNhC,aAAc,GACdD,WAAY,GACZE,sBAAsB,IAI9B,SAASgC,EAAQC,EAAgBC,GAC7B,OAAOA,GAAmBD,ECT9BE,IAAgBC,SAAS,CAAEC,SJqBD,WAAkC,IAAjClC,EAAiC,uDAAzB1B,EAAc6B,EAAW,uCAExD,OAAQA,EAAOgC,MACX,KAAKC,IAGD,OAFWpC,EAAMqC,MAAM,CAAC,aAAc,SAAUlC,EAAOtB,QAAQW,OAC3C6C,MAAM,CAAC,aAAc,cAAc,GAE3D,KAAKD,IAAgC,WAEjC,OADWpC,EAAMqC,MAAM,CAAC,aAAc,cAAc,GAGxD,KAAKD,IAAgC,aAGjC,OAFWpC,EAAMqC,MAAM,CAAC,aAAc,WAAYlC,EAAOtB,SACrCwD,MAAM,CAAC,aAAc,cAAc,GAG3D,KAAKD,IAA4C,WAE7C,OADWpC,EAAMqC,MAAM,CAAC,uBAAwB,cAAc,GAGlE,KAAKD,IAA4C,aAG7C,OAFWpC,EAAMqC,MAAM,CAAC,uBAAwB,WAAYlC,EAAOtB,SAC/CwD,MAAM,CAAC,uBAAwB,cAAc,GAErE,KAAKD,IAMD,OALWpC,EAAMqC,MAAM,CAAC,cAAb,KACJrC,EAAMd,WADF,GAEJiB,EAAOtB,QAFH,CAGPI,UAAWkB,EAAOtB,QAAQI,WAAae,EAAMd,WAAWD,aAGhE,KAAKmD,IACD,OAAO9D,EACX,QACI,OAAO0B,MItDnBgC,IAAgBC,SAAS,CAAEK,qBDYS,WAAkC,IAAjCtC,EAAiC,uDAAzB1B,EAAc6B,EAAW,uCAC9DC,EAAW,KAAKJ,GAEpB,OAAQG,EAAOgC,MACX,KAAKC,IAA6B,WAG9B,OAFAhC,EAASX,QAAQd,WAAY,EAC7ByB,EAASX,QAAQQ,UAAYE,EAAOrB,KAC7BsB,EAEX,KAAKgC,IAA6B,YAG9B,OAFAhC,EAASX,QAAQd,WAAY,EAC7ByB,EAASX,QAAQZ,QAAU,CAAEqB,OAAQC,EAAOtB,SACrCuB,EAEX,KAAKgC,IAA6B,aAC9B,OAAIP,EAAQ7B,EAAMP,QAAQQ,UAAWE,EAAOrB,OACxCsB,EAASX,QAAQZ,QAAUsB,EAAOtB,QAClCuB,EAASX,QAAQd,WAAY,EAC7ByB,EAASX,QAAQQ,UAAYE,EAAOrB,KAC7BsB,GAGJJ,EAEX,KAAKoC,IAAyC,aAE1C,OADAhC,EAASlB,WAAT,KAA2BkB,EAASlB,WAApC,GAAmDiB,EAAOtB,SACnDuB,EAEX,KAAKgC,IACD,IAAIxC,EAAeQ,EAASlB,WAAWU,aAAaS,QAQpD,OAPIC,MAAMC,QAAQJ,EAAOtB,SACrBe,EAAeO,EAAOtB,QAErBe,EAAaY,SAASL,EAAOtB,UAAYe,EAAaa,OAAOb,EAAac,QAAQP,EAAOtB,SAAU,IAChGe,EAAae,KAAKR,EAAOtB,SAGjC,KAAYuB,EAAZ,CAAsBlB,WAAY,KAAKkB,EAASlB,WAAhB,CAA4BU,mBAGhE,KAAKwC,IACD,GAAI9B,MAAMC,QAAQJ,EAAOtB,SAAU,CAC/B,IAAMc,EAAaQ,EAAOtB,QACpBgB,EAAiD,IAA1BM,EAAOtB,QAAQiC,OAC5C,YAAYV,EAAZ,CAAsBlB,WAAY,KAAKkB,EAASlB,WAAhB,CAA4BS,aAAYE,2BAG5E,IAAM0C,EAAUnC,EAASX,QAAQZ,QAAQ2D,KAAKrC,EAAOtB,QAAU,GAAGuC,GAC5DzB,EAAaS,EAASlB,WAAWS,WAAWU,QACjDV,EAAWa,SAAS+B,IAAY5C,EAAWc,OAAOd,EAAWe,QAAQ6B,GAAU,IAAO5C,EAAWgB,KAAK4B,GAEvG,IAAM1C,EAAwBF,EAAWmB,SAAWV,EAASX,QAAQZ,QAAQ2D,KAAK1B,OAElF,YAAYV,EAAZ,CAAsBlB,WAAY,KAAKkB,EAASlB,WAAhB,CAA4BS,aAAYE,2BAG5E,KAAKuC,IACD,OAAO9D,EAGX,QACI,OAAO0B,MCxEnBgC,IAAgBC,SAAS,CAAEQ,aFQG,WAAkC,IAAjCzC,EAAiC,uDAAzB1B,EAAc6B,EAAW,uCACxDC,EAAW,KAAKJ,GACpB,OAAQG,EAAOgC,MACX,KAAKC,IAA4B,WAE7B,OADAhC,EAASzB,WAAY,EACdyB,EAEX,KAAKgC,IAA4B,aAI7B,OAHAhC,EAASvB,QAAUsB,EAAOtB,QAC1BuB,EAASiB,SAAWlB,EAAOtB,QAAQC,KACnCsB,EAASzB,WAAY,EACdyB,EACX,KAAKgC,IAMD,OALAhC,EAASoB,OAAT,KACOpB,EAASoB,OADhB,GAEOrB,EAAOtB,QAFd,CAGII,UAAWkB,EAAOtB,QAAQI,WAAamB,EAASoB,OAAOvC,YAEpDmB,EACX,KAAKgC,IACD,OAAO9D,EACX,QACI,OAAO0B,ME7BnBgC,IAAgBC,SAAS,CAAES,gBLHI,WAAkC,IAAjC1C,EAAiC,uDAAzB1B,EAAc6B,EAAW,uCAE7D,OAAQA,EAAOgC,MACX,KAAKC,IAAyB,aAG1B,OAFWpC,EAAM2C,IAAI,QAAUxC,EAAOtB,SAAWsB,EAAOtB,QAAQL,OAAUF,EAAaE,OACnEmE,IAAI,cAAgBxC,EAAOtB,SAAWsB,EAAOtB,QAAQJ,aAAgBH,EAAaG,aAG1G,QACI,OAAOuB,MKLnBgC,IAAgBC,SAAS,CAAEnC,oBAEpB,IAAM8C,EAAY,SAAAC,GAAK,MAAK,CAC/BV,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQC,IAAuBH,OAChCI,MAAK,SAAAC,GAAM,OAAIA,OAGTC,EAA4B,SAACnC,EAAKoC,GAAN,MAAmB,CACxDjB,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAAkCrC,EAAKoC,OAChDH,MAAK,SAAAC,GAAM,OAAIA,OAGTI,EAAe,SAAAC,GAAO,MAAK,CACpCpB,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAAqBE,OAC9BN,MAAK,SAAAC,GAAM,OAAIA,OAGTM,EAAkB,SAAAC,GAAQ,MAAK,CACxCtB,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAAwBI,OACjCR,MAAK,SAAAC,GAAM,OAAIA,OAGTQ,EAAwB,iBAAO,CACxCvB,KAAMC,IACNvD,QAAS,CAAEW,OAAO,KAGTmE,EAAqB,SAAAC,GAAM,MAAK,CACzCzB,KAAMC,IACNtD,KAAM,CAAE+E,SAAS,GACjBhF,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAA2BO,OACpCX,MAAK,SAAAC,GAAM,OAAIA,OAGTY,EAAwB,SAAAV,GAAQ,MAAK,CAC9CjB,KAAMC,IACNtD,KAAM,IAAIY,KACVb,QAASwE,IAA8BD,KAG9BW,EAAqB,SAACH,EAAQI,GAAT,MAAqB,CACnD7B,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAAuBO,EAAQI,OACxCf,MAAK,SAAAC,GAAM,OAAIA,OAGTe,EAAuB,SAAAb,GAAQ,MAAK,CAC7CjB,KAAMC,IACNtD,KAAM,IAAIY,KACVb,QAASwE,IAA6BD,KAQ7Bc,EAAsB,SAACN,EAAQI,GAAT,MAAqB,CACpD7B,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQM,IAAwBO,EAAQI,OACzCf,MAAK,SAAAC,GAAM,OAAIA,OAGTiB,EAA0B,SAAAf,GAAQ,MAAK,CAChDjB,KAAMC,IACNvD,QAAS,IAAIiE,SAAQ,SAAAC,GACjBA,EAAQK,MACTH,MAAK,SAAAC,GAAM,OAAIA,OAGTkB,EAAiC,SAAC5C,GAAD,MAAa,CACvDW,KAAMC,IACNvD,QAAS2C,IAGA6C,EAA6B,SAAC7C,GAAD,MAAa,CACnDW,KAAMC,IACNvD,QAAS2C,IAGA8C,EAAY,SAAAlB,GAAQ,MAAK,CAClCjB,KAAMC,IACNvD,QAASuE,IAGAmB,EAAY,SAAAnB,GAAQ,MAAK,CAClCjB,KAAMC,IACNvD,QAASuE,IAGAoB,EAAkB,SAAApB,GAAQ,MAAK,CACxCjB,KAAMC,IACNvD,QAASuE,IAGAqB,EAAkB,SAAArB,GAAQ,MAAK,CACxCjB,KAAMC,IACNvD,QAASuE,IAGAsB,EAAY,SAACtD,EAAIR,GAAL,MAAiB,CACtCuB,KAAMC,IACNvD,QAAS,CAAEuC,KAAIR,YAQN+D,EAAyB,SAACxF,GAAD,MAAoB,CACtDgD,KAAMC,IACNvD,QAASM,IAGAyF,EAAsB,SAACpD,GAAD,MAAa,CAC5CW,KAAMC,IACNvD,QAAS2C,IAGAqD,EAAmB,iBAAO,CACnC1C,KAAMC,IACNvD,QAAS,KAGAiG,EAAuB,iBAAO,CACvC3C,KAAMC,IACNvD,QAAS,KAGAkG,EAAgB,iBAAO,CAChC5C,KAAMC,IACNvD,QAAS,KAGAmG,EAA+B,SAAChE,EAAKoC,GAAN,MAAoB,CAC5DjB,KAAMC,IACNvD,QAASwE,IAAqCrC,EAAKoC,KAG1C6B,EAAkB,SAAC7B,GAAD,MAAe,CAC1CjB,KAAMC,IACNvD,QAASwE,IAAwBD,KAGxB8B,EAAe,SAAC9B,GAAD,MAAe,CACvCjB,KAAMC,IACNvD,QAASwE,IAAwBD,KAGxB+B,GAAwB,SAAC/B,GAAD,MAAc,CAC/CjB,KAAMC,IACNvD,QAASwE,IAA4BD,KAG5BgC,GAAsB,iBAAM,CACrCjD,KAAMC,IACNvD,QAAS,KAGAwG,GAA4B,iBAAM,CAC3ClD,KAAMC,IACNvD,QAAS,M,6SClLN,SAASyG,EAAgBC,GAAc,MACVC,mBAASD,GADC,WACnCE,EADmC,KACzBC,EADyB,OAEhBF,mBAAS,IAFO,WAEnC3C,EAFmC,KAE5B8C,EAF4B,KAY1C,MAAO,CAAEC,aARL,kBAAC,YAAD,CAAWC,MAAO,kBAAC,IAAqBC,IAASC,aAAiBC,QAAS,YACvE,kBAAC,aAAD,KAAYC,aAAW,eAAeC,SAAU,SAAAC,GAAS,OAAIT,EAAYS,IAAYC,MAAOX,GAAc5C,GACrGwD,IAAetF,KAAI,gBAAGqF,EAAH,EAAGA,MAAOP,EAAV,EAAUA,MAAV,OAChB,kBAAC,mBAAD,CAAkBS,IAAKF,EAAOA,MAAOA,EAAOP,MAAOA,SAK5CJ,WAAUC,cAAaC,YAG3C,SAASY,EAAsBhB,GAAc,MACNC,mBAASD,GADH,WACzCiB,EADyC,KAC1BC,EAD0B,OAEtBjB,mBAAS,IAFa,WAEzC3C,EAFyC,KAElC8C,EAFkC,KAgBhD,MAAO,CAAEe,mBAZL,kBAAC,YAAD,CAAWb,MAAO,kBAAC,IAAqBC,IAASa,oBAAwBX,QAAS,SAC9E,kBAAC,WAAD,KACIM,IAAI,QACJnE,KAAK,OACL+D,SAAU,SAAAE,GAAK,OAAIK,EAAiBL,IACpCA,MAAOI,EACPI,kBAAkB,WAClBX,aAAY,sBACRpD,KAIa2D,gBAAeC,mBAAkBd,YAG3D,IAAMkB,EAAY,SAAC,GAA8D,IAA5DC,EAA4D,EAA5DA,MAAOtI,EAAqD,EAArDA,MAAOuI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,sBAA0BnE,EAAY,4DAC9C2C,mBAASsB,GADqC,WAC7EG,EAD6E,KAChEC,EADgE,KAO9EC,EAAc,WAChBD,OAAe7H,IAQnB,OACI,kBAAC,IAAM+H,SAAP,KACI,kBAAC,QAAD,CACIC,QAAQ,QACR7I,MAAOA,EACPoC,OAAQ0G,QAAQL,GAChBM,QAASJ,EACTK,QAAS,CACL,kBAAC,SAAD,CAAQlB,IAAI,OAAOe,QAAQ,UAAUI,QAblC,WACfV,IAAS9D,MAAK,kBATSyE,EASgBV,EARhCnE,EAAM8E,gBAAgBD,GADN,IAAAA,KAUvBP,MAYiB,kBAAC,IAAqBrB,IAAS8B,OAEpC,kBAAC,SAAD,CAAQtB,IAAI,SAASe,QAAQ,YAAYI,QAASN,GAC7C,kBAAC,IAAqBrB,IAAS+B,WAIvChF,EAAMiF,YAMvBjB,EAAUkB,UAAY,CAClBD,SAAUC,IAAUC,IACpBT,QAASQ,IAAUE,KACnBnB,MAAOiB,IAAUG,MACjBC,UAAWJ,IAAUE,KACrBN,gBAAiBI,IAAUE,KAC3BzJ,MAAOuJ,IAAUK,OACjBrB,OAAQgB,IAAUE,KAClBjB,sBAAuBe,IAAUM,QAStBC,sBACX,MAPuB,SAAAC,GACvB,MAAO,CACHZ,gBAAiB,SAAAnF,GAAI,OAAI+F,EAASZ,IAAgBnF,QAI3C8F,CAGbzB,I,mdC5FW2B,EAAqB,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,KAAMzH,EAAU,EAAVA,IACvC,OACI,kBAAC,WAAD,KACOyH,EACC,kBAAC,WAAD,KACI,kBAACC,EAAA,YAAD,CAAaC,UAAU,mBACnB,kBAACC,EAAA,KAAD,CAAMC,UAAWC,eAAaC,GAAIC,MAAO,CAAEC,YAAa,iCACpD,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,QAAD,CAASC,QAAS,kBAAC,IAAqBtD,IAASuD,mBAC7C,kBAACC,EAAA,EAAD,QAGR,0BAAMX,UAAU,aAAaF,EAAKA,KAAKc,aAAed,EAAKA,KAAKe,WAIxE,kBAACC,EAAA,EAAD,CAAoBC,OAAQjB,KAb1B,kBAAC,EAAD,CAAsBzH,IAAKA,MAqBjDwH,EAAmBT,UAAY,CAC3BU,KAAMkB,IAASC,MAAM,CACjBnB,KAAMkB,IAAStB,OACfwB,QAASF,IAAStB,OAClByB,WAAYH,IAAStB,SACtB0B,WACH/I,IAAK2I,IAASvB,QAGX,IAAM4B,EAAuB,SAAC,GAAY,IAAVhJ,EAAU,EAAVA,IACnC,OACI,kBAAC0H,EAAA,YAAD,CAAaC,UAAU,mBACnB,kBAACC,EAAA,KAAD,CAAMC,UAAWC,eAAamB,GAC1B,kBAAC,IAAD,OAAsBnE,IAASoE,qBAA/B,CAAqDC,OAAQ,CAAEnJ,WAEnE,kBAAC4H,EAAA,KAAD,CAAMC,UAAWC,eAAamB,GAC1B,kBAAC,IAAqBnE,IAASsE,0BADnC,IAC+D,kBAACd,EAAA,EAAD,MAC3D,6BACA,uBAAGe,OAAO,SAASC,IAAI,sBAAsBC,KAAK,8CAC9C,kBAAC,IAAqBzE,IAAS0E,kC,ijBAOnDR,EAAqBjC,UAAY,CAC7B/G,IAAK2I,IAASvB,QC3CX,IAAMqC,EAA4B,SAAC,GAA4C,IAA1C9L,EAA0C,EAA1CA,UAAWE,EAA+B,EAA/BA,QAASD,EAAsB,EAAtBA,WAAYoC,EAAU,EAAVA,IACxE,GAAIrC,EACA,MAAO,CAAE6D,KAAO3D,GAAWA,EAAQ2D,MAAS,GAAI1D,KAAM,GAAIH,aAFoB,IAK5E6D,EAAe3D,EAAf2D,KAAM1D,EAASD,EAATC,KACN4L,EAAYlI,GAAQA,EAAK1B,OAW/B,MAAO,CAAE0B,KAVSA,EAAKzB,KAAI,SAAA4J,GAAI,YACxBA,EAAKC,WADmB,CAE3BxJ,GAAIuJ,EAAKvJ,GACTR,OAAQhC,EAAW4B,SAASmK,EAAKvJ,IACjC4C,OAAQ2G,EAAKC,WAAWC,YACxB/C,SAAU6C,EAAKC,WAAWnC,KACpB,kBAAC,EAAD,CAAoBzH,IAAKA,EAAKyH,KAAMkC,EAAKC,WAAWnC,OACpD,kBAAC,EAAD,CAAsBzH,IAAKA,SAGXlC,KAAM,EAAF,GAAOA,EAAP,CAAa4L,cAAc/L,cAItD,SAASmM,EAAuBC,GACnC,IAAIpM,EAAYoM,EAAgBpM,UAChC,IAAKA,EAAW,CACZ,IAAIE,EAAUkM,EAAgBlM,QAAQmM,YAChCxI,EAAe3D,EAAf2D,KAAM1D,EAASD,EAATC,KAoBZ,MAAO,CAAE0D,KAnBcA,EAAKzB,KAAI,SAAA4J,GAAI,YAC7BA,EAD6B,CAEhCC,WAAY,EAAF,GACHD,EAAKC,WADF,CAEN5G,OACI,8BACK2G,EAAKC,WAAWK,gBAAkBN,EAAKC,WAAWtL,UAC/C,kBAAC6J,EAAA,QAAD,CAASC,QAAS,kBAAC,IAAqBtD,IAASoF,wBAC7C,kBAAC,IAAD,OAGJ,GACD,SAC4B7L,IAA9BsL,EAAKC,WAAWtL,WACb+G,IAAe8E,MAAK,SAAAC,GAAM,OAAIC,SAASD,EAAOhF,SAAWuE,EAAKC,WAAWtL,aAAWuG,cAKzE/G,OAAMH,aAGzC,MAAO,CAAE6D,KAAOuI,EAAgBlM,SAAWkM,EAAgBlM,QAAQ2D,MAAS,GAAI1D,KAAM,GAAIH,aAGvF,SAAS2M,EAAqBzK,GACjC,IAoC2B8J,EApCvBhM,EAAYkC,EAAKlC,UACjBa,EAAQqB,EAAKrB,MACjB,IAAKb,IAAca,EAAO,CACtB,IAAIX,EAAUgC,EAAKhC,QAAQmM,YACrBxI,EAAe3D,EAAf2D,KAAM1D,EAASD,EAATC,KA0BZ,MAAO,CAAE0D,KAxBTA,EAAO,CACH+I,OAAQ/I,EAAKoI,WAAWW,OACxBC,YAAaC,sBAAYjJ,EAAKoI,WAAWY,aACzCjC,YAAa/G,EAAKoI,WAAWrB,YAC7B9F,SAAUjB,EAAKoI,WAAWnH,SAC1BiI,SAyBmBf,EAzBKnI,EAAKoI,WAAWnH,SA2B5C,uBAAG4G,OAAO,SAASC,IAAI,sBAAsBC,KAAM,0CAA4CI,GAC1F,kBAAC,IAAqB7E,IAAS6F,UAAc,kBAAC,IAAD,CAAqBhD,UAAU,iBA3B7EiD,WAAYC,EAAgBrJ,EAAKoI,WAAWnH,UAC5CqI,YAAatJ,EAAKoI,WAAWkB,YAC7BC,YAAavJ,EAAKoI,WAAWmB,YAC7BC,cAAexJ,EAAKoI,WAAWoB,cAC/BC,cAAezJ,EAAKoI,WAAWqB,cAC/BC,cAAeC,IAAsBhB,MACjC,SAAAC,GAAM,OAAIA,EAAOhF,QAAU5D,EAAKoI,WAAWwB,iBAAiBC,cAC9DxG,MACFyG,4BAA6B9J,EAAKoI,WAAW2B,mBAC7CH,iBAAkB5J,EAAKoI,WAAWwB,iBAClCpI,OAAQqC,IAAe8E,MAAK,SAAAC,GAAM,OAAIA,EAAOhF,QAAU5D,EAAKoI,WAAWtL,UAAU+M,cAAYxG,MAC7FvG,UAAWkD,EAAKoI,WAAWtL,UAC3BkN,qBAAsBhK,EAAKoI,WAAW6B,YACtCC,sBAAuBlK,EAAKoI,WAAW8B,sBACvCC,yBAA0BnK,EAAKoI,WAAW+B,yBAC1CC,MAAOpK,EAAKoI,WAAWgC,OAGZ9N,OAAMH,aAGzB,MAAO,CAAE6D,KAAM,GAAI1D,KAAM,GAAIH,YAAWa,SAWrC,SAASqM,EAAgBlB,GAC5B,OACI,uBAAGN,OAAO,SAASC,IAAI,sBAAsBC,KAAM,kDAAoDI,GAClG,kBAAC,IAAqB7E,IAAS+G,WAAe,kBAAC,IAAD,OAKpD,IAAMC,EAAqB,SAAAC,GAAO,MAAI,CACzC,CACIvO,MAAO,kBAAC,IAAqBsH,IAASkH,kBACtCvF,QAAS,SAACwF,EAAOC,EAAOC,GAAf,OACLJ,EAAQK,sBAAsB,CAC1B,CACIhM,GAAI+L,EAAQ/L,GACZgL,iBAAkBe,EAAQf,iBAC1B5F,cAAe2G,EAAQb,iCAIvC,CACI9N,MAAO,kBAAC,IAAqBsH,IAASuH,YACtC5F,QAAS,SAACwF,EAAOC,EAAOC,GAAf,OACLJ,EAAQO,gBAAgB,CACpB,CACIlM,GAAI+L,EAAQ/L,GACZ9B,UAAW6N,EAAQ7N,UACnBkH,cAAe2G,EAAQX,4BAM9Be,EAA2B,SAAAR,GAAO,MAAI,CAC/C,CACIvO,MAAO,kBAAC,IAAqBsH,IAASuH,YACtC5F,QAAS,SAACwF,EAAOC,EAAOC,GAAf,OACLJ,EAAQO,gBAAgB,CACpB,CACIlM,GAAI+L,EAAQ/L,GACZ9B,UAAW6N,EAAQ7N,UACnB2L,cAAekC,EAAQlC,cACvBzE,cAAe2G,EAAQX,qBACvBgB,kBAAmBL,EAAQM,gCAMlCC,EAA+B,SAACJ,EAAiBtM,GAAlB,MAA0B,CAClE,CACIxC,MAAO,kBAAC,IAAqBsH,IAASuH,YACtC5F,QAAS,SAACwF,EAAOC,EAAOC,GACpBG,EACI,CAAC,CACGlM,GAAIJ,EAAII,GACR9B,UAAW0B,EAAI1B,UACfkH,cAAexF,EAAIwF,gBAEvB,CAAC,CACGpF,GAAI+L,EAAQ/L,GACZ9B,UAAW6N,EAAQ7N,UACnBkH,cAAe2G,EAAQV,mBAO9BkB,EAAwB,SAACC,EAAQC,GAAT,MAAsB,CACvD,CACIrP,MACIqP,EACM,kBAAC,IAAqB/H,IAASgI,qBAC/B,kBAAC,IAAqBhI,IAASiI,sBAEzCtG,QAAS,SAACwF,EAAOC,EAAOC,GACpBS,EAAO,CAACT,EAAQ/L,U,kCC9L5B,sCA6De4M,IAzDW,SAAC,GAA+E,IAA7EC,EAA6E,EAA7EA,cAAeC,EAA8D,EAA9DA,gBAAiBpH,EAA6C,EAA7CA,MAAOqH,EAAsC,EAAtCA,cAAsC,IAAvBC,gBAAuB,SAEhGC,EAAqB/N,MAAMgO,KAAKL,GAChCM,EAAqBF,GAAsBA,EAAmBvN,OAC5DhC,EAAegI,EAAfhI,KAAM0D,EAASsE,EAATtE,KACRgM,EAAqBlO,MAAMC,QAAQiC,IAASA,EAAK1B,QAAWsN,EAAY5L,EAAK1B,OAAS,EAAI0B,EAAK1B,OAQ/F2N,EAAoB,WACtBP,GAAgB,EAAO,KAGrBQ,EAAkB,WAAM,IAEpB7P,GAAYsP,GAAiBA,EAAc,CAAElP,UAAWH,EAAKC,YAAaC,KAAM,KAAhFH,QACNA,GACIA,EAAQoE,MAAK,YAAwB,IAE3B6D,EAF2B,EAArBtE,KAEWzB,KAAI,SAAA4J,GAAI,OAAIA,EAAKvJ,IAAMuJ,EAAKvJ,IAAMuJ,KACzDuD,GAAgB,EAAMpH,OAYlC,MAAQ,CACJ6H,uBAT2B,WACA,IAAvBJ,EACAG,IAEAD,KAMJ3H,MAAO,CACH,CACItI,MAAOoQ,IAAKC,cAAc/I,IAASgJ,YACnCrH,QAASgH,GAEb,CACIjQ,MAAO,GAAF,OAAKoQ,IAAKC,cAAc/I,IAASiJ,WAAY,CAAEC,MAAOR,KAC3D/G,QAtCa,WAAM,IACnBjF,EAASsE,EAATtE,KACFyM,EAAiBC,IAAM1M,EAAKf,QAAO,SAAAkJ,GAAI,OAAIA,EAAKvJ,MAAIL,KAAI,SAAA4J,GAAI,OAAIA,EAAKvJ,MAAKiN,GAChFH,GAAgB,EAAMe,KAqClB,CACIzQ,MAAO,GAAF,OAAKoQ,IAAKC,cAAc/I,IAASqJ,UAAW,CAAEH,MAAOlQ,EAAKC,YAAcD,EAAKC,YAAc,KAChG0I,QAASiH,O,0rBC6BV,QA/EX,aAAc,4BAedU,SAAW,SAACpQ,GACR,OAAQA,GACJ,IAAK,kBACD,8CAAwC,EAAKwC,OAAOR,IAApD,aAA4D,EAAKqO,cAAcC,MACnF,IAAK,cACD,uCAAiC,EAAKD,cAAcC,MACxD,QACI,oCAA8B,EAAKD,cAAcC,QAtB/C,KA2BdC,WAAa,SAACC,EAAWxQ,EAAMyQ,GAC3B,GAAyB,mBAAdD,EACP,sEAAmEA,IAGvE,IAAK,EAAKE,MAAMlP,SAASxB,GACrB,oBAAcA,EAAd,mBAGJ,IAAK,EAAK2Q,QAAQnP,SAASiP,GACvB,sBAAgBA,EAAhB,sBArCM,KAkDdG,KAlDc,+BAkDP,WAAOJ,EAAWhO,EAAQiO,EAAQzQ,GAAlC,uBAAA6Q,EAAA,yDACH,EAAKN,WAAWC,EAAWxQ,EAAMyQ,GACjC,EAAKjO,OAAOR,IAAMV,MAAMC,QAAQiB,GAAUA,EAAO,GAAK,GAFnD,UAKmBlB,MAAMC,QAAQiB,GALjC,gCAMagO,EAAU,EAAKhO,OAAOR,IAAb,KACVQ,EAAO,GADG,GAEV,EAAK6N,cAFK,CAGbS,YAAaL,KATtB,2DAWWD,EAAU,EAAD,GACRhO,EADQ,GAER,EAAK6N,cAFG,CAGXS,YAAaL,KAdtB,0CAKO5Q,EALP,EAKOA,QALP,UAiBgCA,EAjBhC,iBAiBakR,EAjBb,EAiBOvN,KACFA,EAAkB,SAAXiN,EAAoBO,KAAKC,UAAUF,GAAYA,EAE1DG,uBAAa1N,EAAM,EAAK4M,SAASpQ,GAAOyQ,GApBzC,kIAlDO,4DACVU,KAAKd,cAAgB,CACjBrQ,KAAM,EACNC,UAAWmR,OAAOC,iBAClBf,MAAM,IAAI5P,MAAO4Q,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAK,QAGzEL,KAAK3O,OAAS,CACVR,IAAK,IAGTmP,KAAKT,MAAQ,CAAC,kBAAmB,cAAe,OAAQ,eACxDS,KAAKR,QAAU,CAAC,MAAO,U,2GCehBc,IAxBM,SAAC5K,EAAO6K,EAAaC,EAAQC,GAAU,MAClBC,IAAMrL,WADY,WACjDsL,EADiD,KACpCC,EADoC,OAEjCF,IAAMrL,UAAS,kBAClCwL,KAAS,SAAAvP,QAA2BpC,IAAXoC,GAAwBmP,EAAM,CAAEnP,SAAQzC,KAAM,MAAU,QAD9EiS,EAFiD,YAQxD,OAFAJ,IAAMK,WAAU,kBAAMH,EAAeJ,KAAS,CAACA,IAExC,CACHxO,KAAMgP,wBAAsBC,KAC5BvL,MAAO+I,IAAKC,cAAchJ,GAC1BwL,aAAc,CACV,aAAc,eACdjQ,GAAI,UAAF,OAAYyE,EAAMzE,IACpB8E,SAAU,SAAC+G,EAAO7G,GACd2K,EAAe3K,GACf6K,EAAa7K,IAEjBsK,YAAa9B,IAAKC,cAAc6B,GAChCtK,MAAO0K,M,kCCzBnB,qMAIaQ,EAAmB,SAACC,EAAQvS,EAAM4R,GAAf,OAAyBA,EAAM,CAAE5R,UAEpDwS,EAAoB,SAACD,EAAQE,EAASb,GAAlB,OAA4BA,EAAM,CAAE3R,UAAWwS,EAASzS,KAAM,KAElF0S,EAAe,SAAC3E,GAAD,MACxB,CAAE4E,SAAU,SAACJ,EAAQK,GAAT,OAAwB7E,EAAQ8E,eAAeD,MAGlDE,EAAqB,SAACC,GAA0C,IAA1BC,EAA0B,uDAAP,GAE1DvQ,EAAWsQ,EAAXtQ,OAEFwQ,EAAY,SAAC3L,EAAK4L,GAAN,OACdC,IAAQ7L,GAAKQ,MAAMsL,QAAO,SAAC/J,EAAQsC,GAC/B,GAAIuH,IAAcvH,EAAKvE,MACnBiC,EAAOgK,KAAO1H,EAAK9E,MACnBwC,EAAOjC,MAAQuE,EAAKvE,WAEnB,GAAY,kBAARE,IAA4B,CAAC,OAAQ,SAAS9F,SAAS0R,GAChE,CACI,IAAMI,EAAeN,EAAiB7G,MAAK,qBAAG/E,QAAsB8L,KACpE7J,EAAOgK,KAAOC,GAAgBA,EAAazM,OAASqM,EACpD7J,EAAOjC,MAAQ8L,EAGnB,OAAO7J,IACR,KAGDkK,EAAa,SAACC,EAAalM,GAC7B,OAAOkM,EAAYJ,QAAO,SAACjI,EAAQ+H,GAE/B,OADA/H,EAAOxJ,KAAKsR,EAAU3L,EAAK4L,IACpB/H,IACR,KAGDsI,EAAcC,OAAOC,KAAKR,KAASC,QAAO,SAAClK,EAAO5B,GACpD,GAAY,aAARA,GAAsBoM,OAAOC,KAAKZ,GAAgBvR,SAAS8F,KAAS,CAAC,QAAIjH,GAAWmB,SAASuR,EAAezL,IAAO,CAEnH,IAAMsM,EAA4C,iBAAxBb,EAAezL,IAAqByL,EAAezL,GAAKkK,MAAM,KAClFqC,EAAkBD,GAAcA,EAAW9R,OAAS,GACvByR,EAAWK,EAAYtM,IACvB,CAAC2L,EAAU3L,EAAKyL,EAAezL,KAElE4B,EAAMvH,KAAK,CAAE2F,MAAKsM,aAAYE,SAAUX,IAAQ7L,GAAK9H,MAAOuU,MAAOF,IAGvE,OAAO3K,IACR,IASH,OAPAzG,GAAUgR,EAAY9R,KAClB,CAAE2F,IAAK,SACHwM,SAAUlE,IAAKC,cAAc/I,IAASkN,aACtCD,MAAO,CAAC,CAAEV,KAAM5Q,MAIjBgR,GAGEQ,EAAgB,SAACF,EAAOnC,GAYjCA,EAXoBmC,EAAMX,QAAO,SAACc,EAAKvI,GAQnC,MAPiB,WAAbA,EAAKrE,KAAqBqE,EAAKiI,YAAyC,IAA3BjI,EAAKiI,WAAW9R,OAC7DoS,EAAIvI,EAAKrE,KAAO,GAGhB4M,EAAIvI,EAAKrE,KAAOqE,EAAKiI,WAAWnR,QAAO,SAAA2E,GAAK,OAAKuE,EAAKoI,MAAMI,MAAK,SAAAC,GAAI,OAAIA,EAAKhN,QAAUA,QAAQiN,KAAK,KAGlGH,IACR,O,kCC1EP,8cAuBaI,EACT,kBAAC,WAAD,CAAUtK,MAAO,CAAEuK,OAAQ,SACvB,kBAAC,aAAD,CAAYlM,QAASmM,oBAAkBC,OACnC,kBAAC,QAAD,CAAOC,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAAS8N,2BAEnC,kBAAC,cAAD,KACI,kBAAC,iBAAD,CAAgB5K,MAAO,CAAE6K,WAAY,WACjC,kBAAC,IAAqB/N,IAASgO,0BAC/B,kBAAC,OAAD,KACI,kBAAC,IAAqBhO,IAASiO,0BAEnC,kBAAC,OAAD,CAAMlL,UAAWC,eAAamB,GAC1B,kBAAC,IAAqBnE,IAASkO,uBAC/B,uBAAGzJ,KAAK,mDAAmDF,OAAO,UAAUC,IAAI,uBAC5E,kBAAC,IAAqBxE,IAASmO,uBADnC,KAC8D,kBAAC,IAAD,YASzEC,EACT,kBAAC,WAAD,CAAUlL,MAAO,CAAEuK,OAAQ,SACvB,kBAAC,aAAD,CAAYlM,QAASmM,oBAAkBC,OACnC,kBAAC,QAAD,CAAOC,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAASqO,2BAEnC,kBAAC,cAAD,KACI,kBAAC,iBAAD,CAAgBnL,MAAO,CAAE6K,WAAY,WACjC,kBAAC,OAAD,KACI,kBAAC,IAAqB/N,IAASiO,0BAEnC,kBAAC,OAAD,CAAMlL,UAAWC,eAAamB,GAC1B,kBAAC,IAAqBnE,IAASsO,0BAC/B,uBAAG7J,KAAK,mDAAmDF,OAAO,UAAUC,IAAI,uBAC5E,kBAAC,IAAqBxE,IAASmO,uBADnC,KAC8D,kBAAC,IAAD,YASzEI,EACT,kBAAC,WAAD,CAAUrL,MAAO,CAAEuK,OAAQ,SACvB,kBAAC,aAAD,CAAYlM,QAASmM,oBAAkBC,OACnC,kBAAC,QAAD,CAAOC,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAASwO,6BAEnC,kBAAC,cAAD,KACI,kBAAC,iBAAD,CAAgBtL,MAAO,CAAE6K,WAAY,WACjC,kBAAC,OAAD,KACI,kBAAC,IAAqB/N,IAASyO,yBAEnC,kBAAC,OAAD,CAAM1L,UAAWC,eAAamB,GAC1B,kBAAC,IAAqBnE,IAASsO,0BAC/B,uBAAG7J,KAAK,mDAAmDF,OAAO,UAAUC,IAAI,uBAC5E,kBAAC,IAAqBxE,IAASmO,uBADnC,KAC8D,kBAAC,IAAD,OAHlE,SAaPO,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OAC/B,kBAAC,WAAD,KACI,kBAAC,aAAD,CAAYpN,QAASmM,oBAAkBC,OACnC,kBAAC,iBAAD,CAAgBiB,KAAMC,IAAchB,KAAM,OAC1C,kBAAC,QAAD,CAAOD,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAAS8O,gCAEnC,kBAAC,iBAAD,KACI,kBAAC,IAAqB9O,IAAS+O,+BAEnC,kBAAC,SAAD,CAAQxN,QAAQ,UAAUwB,UAAU,IAAIpB,QAASgN,GAC7C,kBAAC,IAAqB3O,IAASgP,oCAM/CN,EAAoBzM,UAAY,CAC5B0M,aAAc1M,IAAUE,MAGrB,IAAM8M,EACT,kBAAC,WAAD,CAAU/L,MAAO,CAAEuK,OAAQ,SACvB,kBAAC,aAAD,CAAYlM,QAASmM,oBAAkBC,OACnC,kBAAC,QAAD,CAAOC,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAASwO,6BAEnC,kBAAC,cAAD,KACI,kBAAC,iBAAD,CAAgBtL,MAAO,CAAE6K,WAAY,WACjC,kBAAC,OAAD,KACI,kBAAC,IAAqB/N,IAASyO,yBAEnC,kBAAC,IAAqBzO,IAASkP,2BAC/B,uBAAGzK,KAAK,mDAAmDF,OAAO,UAAUC,IAAI,uBAC5E,kBAAC,IAAqBxE,IAASmO,uBADnC,IAC6D,kBAAC,IAAD,OANjE,QAgBHgB,EACT,kBAAC,WAAD,KACI,kBAAC,aAAD,KACI,kBAAC,iBAAD,CAAgBP,KAAMQ,MACtB,kBAAC,QAAD,CAAOxB,aAAa,KAAKC,KAAK,MAC1B,kBAAC,IAAqB7N,IAASqP,mBAEnC,kBAAC,iBAAD,KACI,kBAAC,IAAqBrP,IAASsP,6BAEnC,kBAAC,SAAD,CACI/N,QAAQ,UACRwB,UAAU,IACV0B,KAAK,mFAEL,kBAAC,IAAqBzE,IAASuP,4BAOlCC,EACT,kBAAC,OAAD,CAAM3M,UAAU,wBACZ,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAegL,KAAK,QAExB,kBAAC,WAAD,KACI,kBAAC,IAAqB7N,IAASyP,gB,2GCrI5BC,IAzBY,SAAC5E,GAAmD,IAA5C6E,EAA4C,uDAA5B,GAAIC,EAAwB,uDAAP,GAC/CC,EAAiBF,EAAhCrW,cACe,KAAjBuW,GAAwBA,IACxBA,EAAe,OAGnB,IAAMC,EAAuB,SAAAzL,GACzByG,EAAM,CAAExR,cAA0B,QAAX+K,EAAmB,GAAKA,EAAQnL,KAAM,KAGjE,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAAS+P,eACnC1T,KAAMgP,wBAAsB2E,MAC5BC,SAAU,gBACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACdwP,EAAqBxP,IAEzBU,MACIkP,IAAUC,IAAuBP,EAAgBQ,KAASnV,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UAC5GA,MAAOuP,M,sECDJQ,IArBM,SAACvF,GAA8B,IAAvB6E,EAAuB,uDAAP,GAExBE,EAAiBF,EAA5BnW,UAEA8W,EAAiB,SAAAjM,GACnByG,EAAM,CAAEtR,UAAY6K,EAAOrJ,OAAS,KAAOqJ,EAAO1I,QAAO,SAAA2E,GAAK,MAAc,MAAVA,KAAeiN,KAAK,MAAS,GAAIrU,KAAM,KAG7G,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAAS9B,QACnC7B,KAAMgP,wBAAsBkF,SAC5BhF,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACdgQ,EAAehQ,IAEnBU,MAAOT,IAAetF,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UACpEA,MAAQuP,EAAeA,EAAanF,MAAM,KAAO,O,2LCbhD8F,EAAoB,SAAC,GAA8B,IAA5BzV,EAA4B,EAA5BA,KAAMsH,EAAsB,EAAtBA,UAAWyG,EAAW,EAAXA,KAAW,EAC1CpJ,mBAAS3E,GAApBpB,EADqD,cAEhB+F,mBAAS,KAFO,WAErD+Q,EAFqD,KAErCC,EAFqC,OAGlChR,qBAHkC,WAGrDK,EAHqD,KAG9C4Q,EAH8C,KAKtDC,EAAkBC,uBAAY,WAChCF,EAAUhX,GAA8B,IAAnBA,EAAQqB,QAAgBrB,EAAQ,GAAG+G,eAAkB,MAC3E,CAAC/G,IAEJyR,qBAAU,WAEFsF,EAAmB/W,GAA8B,IAAnBA,EAAQqB,QAAgBrB,EAAQ,GAAG2M,iBAAiBC,YAAe,KAIrGqK,MACD,CAAC7V,EAAM6V,EAAiBjX,IAE3ByR,oBAAUwF,EAAiB,CAAC7V,IAE5B,IAAM+V,EAAsB,SAACC,EAAG5J,GAAU,IAC9B7G,EAAU6G,EAAM6J,cAAhB1Q,MACRoQ,EAAkBpQ,IAehB2Q,EAAsB,CACxB1P,QAAS,UACT7I,MAAOoQ,EAAKC,cAAc/I,IAASkR,6BAA8B,CAAEhI,MAAOvP,EAAQqB,QAAU,KAGhG,OACI,kBAAC,IAAD,CACIgG,MAAOrH,EACPsH,OAhBW,WACf,OAAOkQ,YAAgB,CACnB7K,iBAAkBf,SAASkL,GAC3BvV,IAAKvB,EAAQsB,KAAI,SAAA4J,GAAI,OAAIA,EAAKvJ,MAC9BmL,mBAAoB1G,IACrB5C,KAAKkF,IAYJnB,sBAAuB+P,EACvBvY,MAAOoQ,EAAKC,cAAc/I,IAASoR,yBAEnC,kBAAC,QAAD,CAAOC,WAAS,GACZ,kBAAC,YAAD,KACKvI,EAAKC,cAAc/I,IAASsR,wBAEjC,kBAAC,YAAD,KACI,kBAAC,OAAD,KACI,kBAAC,YAAD,CAAWvR,MAAO+I,EAAKC,cAAc/I,IAASuR,mBAAoBrR,QAAS,kBACtEmG,IAAsBpL,KAAI,SAAA4J,GAAI,OAC3B,kBAAC,QAAD,CACIhC,UAAW,sBACXvC,MAAOuE,EAAKvE,MACZkR,UAAWf,IAAmB5L,EAAKvE,MACnCF,SAAU0Q,EACV/Q,MAAO8E,EAAK9E,MACZS,IAAKqE,EAAKvE,MACVhF,GAAIuJ,EAAKvE,MACTiM,KAAM1H,EAAK9E,MACXI,aAAY0E,EAAK9E,YAI7B,kBAAC,YAAD,CAAWA,MAAO+I,EAAKC,cAAc/I,IAASa,oBAAqBX,QAAS,SACxE,kBAAC,WAAD,CACI7D,KAAK,OACL+D,SAhDA,SAAAE,GACxBqQ,EAASrQ,IAgDeA,MAAOP,EACPe,kBAAkB,WAClBX,aAAY,wBAU5CqQ,EAAkBvO,UAAY,CAC1BlH,KAAMkH,IAAUG,MAChBC,UAAWJ,IAAUE,KACrB2G,KAAM7G,IAAUC,KAGLuP,gBAAWjB,I,wOC5FbkB,EAAiB,SAAC,GAA8B,IAA5B3W,EAA4B,EAA5BA,KAAMsH,EAAsB,EAAtBA,UAAWyG,EAAW,EAAXA,KAAW,EACvCpJ,mBAAS3E,GAApBpB,EADkD,cAEtB6F,YAgBvB7F,GAA8B,IAAnBA,EAAQqB,QAAgBrB,EAAQ,GAAGH,UAAU+M,YAAe,KAhB3EzG,EAFiD,EAEjDA,aAAcH,EAFmC,EAEnCA,SAFmC,EAGXc,YAmBlC9G,GAA8B,IAAnBA,EAAQqB,QAAgBrB,EAAQ,GAAG+G,eAAkB,IAnBpEE,EAHiD,EAGjDA,mBAAoBF,EAH6B,EAG7BA,cAH6B,EAIfhB,oBAAS,GAJM,WAIlDiS,EAJkD,KAInCC,EAJmC,KAyBzD,IAAMX,EAAsB,CACxB1P,QAAS,UACT7I,MAAOoQ,EAAKC,cAAc/I,IAAS6R,+BAAgC,CAAE3I,MAAOvP,EAAQqB,QAAU,KAE5FtC,EAAQoQ,EAAKC,cAAc/I,IAAS8R,oBAAqB,CAAE5I,MAAOvP,EAAQqB,QAAU,IAE1F,OACI,kBAAC,IAAD,CAAWgG,MAAOrH,EAASsH,OA1BZ,WACf,IAAM8Q,EAASpY,EAAQsB,KAAI,SAAA4J,GAAI,OAAIA,EAAKvJ,MACxC,OAAO0W,YAAa,CAChBxY,UAAW+L,SAAS5F,GACpBzE,IAAK6W,EACLpL,YAAajG,IAEhBvD,MAAK,kBAAOwU,GAAiBM,YAAmB,CAAE/W,IAAK6W,OACvD5U,KAAKkF,IAkByCnB,sBAAuB+P,EAAqBvY,MAAOA,GAC9F,kBAAC,QAAD,CAAO2Y,WAAS,GACZ,kBAAC,YAAD,KACKvI,EAAKC,cACF/I,IAASkS,uBACT,CACIhJ,MAAOvP,EAAQqB,QAAU,EACzBmX,MAAOxY,EAAQ,GAAG2B,GAClB8W,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,OAIlC,kBAAC,YAAD,KACI,kBAAC,IAAD,CACIxP,UAAU,aACVyP,SAAS,iCACTC,MAAM,wCAETzJ,EAAKC,cAAc/I,IAASwS,mBAAoB,CAAEtJ,MAAOvP,EAAQqB,QAAU,IAC5E,kBAAC,UAAD,CACIsI,QAASwF,EAAKC,cAAc/I,IAASyS,4BAErC,kBAAC,IAAMnR,SAAP,KACI,kBAAC,IAAD,CACIuB,UAAU,aACV0P,MAAM,+BACNrP,MAAO,CAAEwP,cAAe,iBAKxC,kBAAC,YAAD,KACI,kBAAC,OAAD,CAAMlS,IAAI,OACLV,EACAc,EACD,kBAAC,YAAD,CAAWV,QAAS,aAChB,kBAAC,QAAD,KACI,kBAAC,YAAD,KACI,kBAAC,WAAD,CACIH,MAAO+I,EAAKC,cAAc/I,IAAS2S,iCACnCrX,GAAG,sBACHiR,KAAK,sBACLiF,UAAWG,EACXvR,SAAU,SAAAwS,GAAO,OAAIhB,EAAiBgB,OAG9C,kBAAC,YAAD,KACI,kBAAC,UAAD,CACItP,QAASwF,EAAKC,cAAc/I,IAAS6S,iCAErC,kBAAC,IAAD,CACIhQ,UAAU,aACV0P,MAAM,+BACNrP,MAAO,CAAEwP,cAAe,gBAapEhB,EAAezP,UAAY,CACvBlH,KAAMkH,IAAUG,MAChBC,UAAWJ,IAAUE,KACrB2G,KAAM7G,IAAUC,KAGLuP,gBAAWC,I,iLC3GpBoB,E,+LAiBFtH,iBAAmB,SAACC,EAAQsH,GAAT,OAAwB,EAAKhW,MAAM+N,MAAM,CAAE5R,KAAM6Z,K,EAEpErH,kBAAoB,SAACD,EAAQE,GAAT,OAAqB,EAAK5O,MAAM+N,MAAM,CAAE3R,UAAWwS,EAASzS,KAAM,K,uEAThE8Z,GAClB,OAAIA,EAAUha,OAASqR,KAAKtN,MAAM/D,O,+BAU7B,MACqBqR,KAAKtN,MAAvB/D,EADH,EACGA,KAAMuI,EADT,EACSA,QACNrI,EAAuDF,EAAvDE,KAAmB+Z,EAAoCja,EAAjDC,YAAoCia,EAAala,EAAxBG,UACvC,OACI,kBAAC,IAAMmI,SAAP,KACI,kBAAC,aAAD,CACIpI,KAAMA,GAAQ,EACdia,UAAWF,GAAc,EACzBtH,QAASuH,GAAYE,IACrBC,UAAWhJ,KAAKmB,iBAChB8H,gBAAiBjJ,KAAKqB,kBACtBnK,QAASgS,oBAAkBhS,U,GAhCfiS,aAA1BV,EACK7Q,UAAY,CACf6I,MAAO7I,IAAUE,KACjBnJ,KAAMiJ,IAAUM,OAChBhB,QAASU,IAAUK,QAJrBwQ,EAOKW,aAAe,CAClBlS,QAAS,OA+BFuR,O,sECbAY,IA1BW,SAAC5I,GAA8B,IAAvB6E,EAAuB,uDAAP,GAC1BE,EAAiBF,EAA/BgE,aAGe,KAAjB9D,GAAwBA,IACxBA,EAAe,KAGnB,IAAM+D,EAAsB,SAAAtT,GACxBwK,EAAM,CAAE6I,aAAyB,MAAVrT,GAAiBA,GAAU,GAAIpH,KAAM,KAGhE,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAAS6T,aACnCxX,KAAMgP,wBAAsB2E,MAC5BC,SAAU,eACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACdsT,EAAoBtT,IAExBU,MAAO8S,IAAoB7Y,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UACzEA,MAAOuP,M,sECKJkE,IA1Ba,SAACjJ,GAA8B,IAAvB6E,EAAuB,uDAAP,GAC7BE,EAAiBF,EAA9BqE,YAGe,KAAjBnE,GAAwBA,IACxBA,EAAe,KAGnB,IAAMoE,EAAoB,SAAA3T,GACtBwK,EAAM,CAAEkJ,YAAwB,MAAV1T,GAAiBA,GAAU,GAAIpH,KAAM,KAG/D,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAASkU,eACnC7X,KAAMgP,wBAAsB2E,MAC5BC,SAAU,cACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACd2T,EAAkB3T,IAEtBU,MAAOmT,IAAalZ,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UAClEA,MAAOuP,M,kCC1BnB,sEAoCeuE,IA7BM,SAACtJ,GAA8B,IAAvB6E,EAAuB,uDAAP,GAC3BE,EAAiBF,EAAzBlK,OAEA4O,EAAiB,SAAAhQ,GACnByG,EAAM,CAAErF,OAASpB,EAAOrJ,OAAS,KAAOqJ,EAAO1I,QAAO,SAAA2E,GAAK,MAAc,MAAVA,KAAeiN,KAAK,MAAS,GAAIrU,KAAM,KAG1G,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAASyF,QACnCpJ,KAAMgP,wBAAsBkF,SAC5BN,SAAU,SACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACd+T,EAAe/T,IAEnBU,MAAOsT,IAAerZ,KAAI,SAAA4J,GAAI,MAAK,CAC/B9E,MACI,kBAAC,IAAMuB,SAAP,KACMuD,EAAK0P,SAAW,kBAAC,IAAD,CAAc1R,UAAU,aAAa0P,MAAO1N,EAAK2P,YAClE3P,EAAK9E,OAGdO,MAAOuE,EAAKvE,UAEhBA,MAAQuP,EAAeA,EAAanF,MAAM,KAAO,O,sECL9C+J,IArBY,SAAC3J,GAA8B,IAAvB6E,EAAuB,uDAAP,GACvBE,EAAiBF,EAAnCrJ,iBAEAoO,EAAuB,SAAArQ,GACzByG,EAAM,CAAExE,iBAAmBjC,EAAOrJ,OAAS,KAAOqJ,EAAO1I,QAAO,SAAA2E,GAAK,MAAc,MAAVA,KAAeiN,KAAK,MAAS,GAAIrU,KAAM,KAGpH,MAAO,CACH6G,MAAO+I,IAAKC,cAAc/I,IAAS2U,cACnCtY,KAAMgP,wBAAsBkF,SAC5BN,SAAU,mBACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACdoU,EAAqBpU,IAEzBU,MAAOqF,IAAsBpL,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UAC3EA,MAAQuP,EAAeA,EAAanF,MAAM,KAAO,O,qBCrB7D,IAAIpH,EAAU,EAAQ,MAEA,iBAAZA,IAAsBA,EAAU,CAAC,CAACsR,EAAOC,EAAIvR,EAAS,MAOhE,IAAI7F,EAAU,CAAC,KAAM,EAErB,eAPIqX,EAQJ,gBAAqBvb,GAER,EAAQ,GAAR,CAAmE+J,EAAS7F,GAEtF6F,EAAQyR,SAAQH,EAAOI,QAAU1R,EAAQyR,S,sBCjBlCH,EAAOI,QAAU,EAAQ,GAAR,EAA+D,IAKlFna,KAAK,CAAC+Z,EAAOC,EAAI,wlCAAylC,M,8ZCW5mCI,E,+LAOFC,OAAS,WAAM,MACiB,EAAKnY,MAAzBoY,EADG,EACHA,OACApa,EAFG,EACKqa,QACRra,KAaR,MAAQ,CAAC,CACLsa,YAAY,EACZC,MAAO,CACH,CACIvY,MAAO,CAAEwY,QAAS,GAClB7c,MAbiC,IAJxB,CAAC,SAAU,YAAa,UAAW,cAAe,YAAa,SAAU,aAAaiD,QACvG,SAAAkJ,GAAI,OAAI+H,OAAO4I,UAAUC,eAAeC,KAAK3a,EAAK/B,KAAM6L,IAAS9J,EAAK/B,KAAK6L,MAG7C7J,OAC5BwS,IACA2H,EACI5G,IACqB,IAArBxT,EAAK2B,KAAK1B,OACNiU,SACA1V,O,EAelBoc,iBAAmB,SAACxO,EAAOyO,EAAQ9a,GAAW,IAClC+a,EAAS,EAAK3b,MAAd2b,KAKRA,EAAKD,GAAQ9a,OAASA,EACtB,EAAKgb,SAAS,CACVD,U,EAIRE,eAAiB,SAAC5O,EAAO6O,EAAY5O,GAAU,IACnCgO,EAAY,EAAKrY,MAAjBqY,QACAra,EAAkBqa,EAAlBra,KAAMkM,EAAYmO,EAAZnO,QACRxK,EAAU1B,EAAK2B,KAAK0K,IAAUrM,EAAK2B,KAAK0K,GAAO9L,GACrD2L,EAAQgP,WAAWD,EAAYvZ,I,EAGnCyZ,yBAA2B,WACvB,EAAKJ,UAAS,kBAA6B,CACvCK,oBADU,EAAGA,wB,0DAKZ,MACuB9L,KAAKtN,MAAzBqY,EADH,EACGA,QAASgB,EADZ,EACYA,OACTrb,EAAkBqa,EAAlBra,KAAMkM,EAAYmO,EAAZnO,QACd,OACI,kBAAC,WAAD,KACMlM,EAAKlC,UAkCH,kBAACwd,EAAA,cAAD,CAAeC,QAAS,EAAGC,QAAS,KAjCpC,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CACIC,cAAc,EACdtW,aAAY,0BACZmV,MAAOc,EACPP,KAA4B,IAArB9a,EAAK2B,KAAK1B,OAAgBqP,KAAK6K,SAAWna,EAAK2B,KACtDmP,SAAiC,IAArB9Q,EAAK2B,KAAK1B,OAAgBqP,KAAK0L,oBAAiBxc,EAC5Dmd,WAAmC,IAArB3b,EAAK2B,KAAK1B,OAAgB,SAACmM,EAAOyO,GAAR,OAAmB3O,EAAQ0P,QAAQf,SAAUrc,EACrFmI,QAAgC,IAArB3G,EAAK2B,KAAK1B,OAAgBgM,YAAmBC,QAAW1N,EACnEqd,OAA+B,IAArB7b,EAAK2B,KAAK1B,OAChB6b,YAAa,CAAC,CAAErW,IAAK,YAAc,CAAEA,IAAK,aAA9B,WAA+C4V,IAASrb,EAAK/B,KAAK8C,WAAQvC,EAC1Fud,OAA+B,IAArB/b,EAAK2B,KAAK1B,OAChB,SAACmM,EAAO3G,EAAKuW,GAAb,OACIC,YACIxW,EACAuW,EAFY,CAGX,CAAEvW,IAAK,YAAc,CAAEA,IAAK,aAHjB,WAGkC4V,IAC9Crb,EAAK/B,KAAK8C,KACVmL,EAAQ6D,aACRvR,EAEZ0d,eAAgB,WAEhB,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,QAGR,kBAACC,EAAA,aAAD,KACI,kBAACpE,EAAA,EAAD,CAAmBvR,QAAQ,SAASvI,KAAM+B,EAAK/B,KAAM8R,MAAO7D,EAAQ6D,e,GA/FlD0I,aAAxCyB,EACKhT,UAAY,CACfmT,QAASnT,IAAUC,IACnBkU,OAAQnU,IAAUG,MAClB+S,OAAQlT,IAAUM,QAsG1B,IAMe4U,EANc,SAAApa,GAAK,OAC9B,kBAACqa,GAAgBC,SAAjB,MACK,SAAAjC,GAAO,OAAI,kBAAC,EAAD,KAAiCA,QAASA,GAAarY,Q,0IC/F5Dua,GAxBgB,SAACxM,GAA8B,IAAvB6E,EAAuB,uDAAP,GACnCE,EAAiBF,EAA3B9T,SACNgU,EAAiC,KAAjBA,GAAwBA,EAA0B,OAAV,OAExD,IAAM0H,EAAmB,SAAAjX,GAErBwK,EAAM,CAAEjP,SADRyE,EAAkB,SAAVA,GAA0B,GACTpH,KAAM,KAGnC,MAAO,CACH6G,MAAO+I,KAAKC,cAAc/I,IAASwX,qBACnCnb,KAAMgP,yBAAsB2E,MAC5BC,SAAU,WACV1E,aAAc,CACVnL,SAAU,SAAC+G,EAAO7G,GACdiX,EAAiBjX,IAErBU,MAAOyW,IAA0Bxc,KAAI,SAAA4J,GAAI,MAAK,CAAE9E,MAAO8E,EAAK9E,MAAOO,MAAOuE,EAAKvE,UAC/EA,MAAOuP,K,gkBCCnB,IAAO6H,GAAoC,SAAC3a,GACxC,IAQQqY,EAAYrY,EAAZqY,QACAra,EAA0Bqa,EAA1Bra,KAAMW,EAAoB0Z,EAApB1Z,OAAQuL,EAAYmO,EAAZnO,QACdnN,EAA+C4B,EAA/C5B,aAAcC,EAAiC2B,EAAjC3B,qBAAsB4B,EAAWD,EAAXC,OACtCgc,EAAoB7d,GAAgBA,EAAakB,OAEjD4c,EAAiB1P,YAAkB,CACrCC,cAAerO,EACfsO,gBAAiBnB,EAAQgP,WACzBjV,MAAOjG,EACPsN,cAAe,SAAAwP,GAAG,OAAIzY,YAAa,GAAD,GAAM1D,EAAN,GAAiBmc,EAAjB,CAAsBhc,UAAWH,EAAOG,aAC1EyM,UAAU,IAGR5G,EAAU,CACZ,GACA,CACI3B,MAAOhD,EAAM+L,KAAKC,cAAc/I,IAASkH,kBACzCvF,QAAS,kBAAMsF,EAAQK,sBAAsBxN,EAAamB,KAAI,SAAA4J,GAAI,MAAK,CAAEvJ,GAAIuJ,EAAMyB,iBAAkB,UACrGvJ,MAAO,CAAE+a,YAAaH,IAE1B,CACI5X,MAAOhD,EAAM+L,KAAKC,cAAc/I,IAASuH,YACzC5F,QAAS,kBAAMsF,EAAQO,gBAAgB1N,EAAamB,KAAI,SAAA4J,GAAI,MAAK,CAAEvJ,GAAIuJ,EAAMrL,UAAW,OAAQ,MAChGuD,MAAO,CAAE+a,YAAaH,IAE1B,CACI5X,MAAOhG,EAAuBgD,EAAM+L,KAAKC,cAAc/I,IAAS+X,mBAC1Dhb,EAAM+L,KAAKC,cAAc/I,IAASgY,iBACxCrW,QApCqB,WAAM,IACvByT,EAAYrY,EAAZqY,QACAra,EAA0Bqa,EAA1Bra,KAAMkM,EAAoBmO,EAApBnO,QAERpN,EAF4Bub,EAAX1Z,OACf3B,qBACwF,GAArDgB,EAAK2B,KAAKf,QAAO,SAAAT,GAAG,OAAIA,EAAII,MAAIL,KAAI,SAAAC,GAAG,OAAIA,EAAII,MAC1F2L,EAAQ0P,QAAQ9c,IAgCZkD,MAAO,CAAE+a,WAAsC,IAA1B/c,EAAK/B,KAAKC,eAIvC,OACI,kBAAC,IAAMqI,SAAP,KACI,kBAAC2W,EAAA,eAAD,CACIC,WAAY,CACR/E,UAAWpY,EAAK/B,KAAKC,aAAe,EACpCC,KAAM6B,EAAK/B,KAAKE,MAAQ,EACxByS,QAAS5Q,EAAK/B,KAAKG,WAAa,EAChCka,UAAW,SAAC5H,EAAQvS,GAAT,OAAkBsS,aAAiBC,EAAQvS,EAAM+N,EAAQ6D,QACpEwI,gBAAiB,SAAC7H,EAAQE,GAAT,OAAqBD,aAAkBD,EAAQE,EAAS1E,EAAQ6D,SAErFqN,cAAe,CACXzW,UACA0W,iBAAkB,CAAEN,YAAaH,GAA+C,IAA1B5c,EAAK/B,KAAKC,cAEpEof,WAAY,CACRnP,MAAOyO,EACP3W,MAAO4W,EAAc5W,MACrB8W,WAAsC,IAA1B/c,EAAK/B,KAAKC,aAA2C,IAAtB0e,EAC3C/E,QAASpR,QAAQmW,GACjB9L,SAAU,kBAAK+L,EAAc/O,2BAEjCyP,aAAc,CACVtX,MAAO,CACHuX,aAAavY,IAAS9E,IAAK8E,IAASwY,oBAAqB7c,EAAQsL,EAAQ6D,OACzEwM,GAAuBrQ,EAAQ6D,MAAOpP,GACtCgU,aAAmBzI,EAAQ6D,MAAOpP,GAClC0Y,YAAanN,EAAQ6D,MAAOpP,GAC5BqY,YAAoB9M,EAAQ6D,MAAOpP,GACnC+Y,aAAmBxN,EAAQ6D,MAAOpP,GAClC2U,aAAapJ,EAAQ6D,MAAOpP,GAC5BgY,YAAkBzM,EAAQ6D,MAAOpP,KAGzC+c,oBAAqB,CACjBC,QAAS1M,aAAmBtQ,GAC5Bid,SAAU,SAACC,EAAG/D,GAAJ,OAAU1H,aAAc0H,EAAG5N,EAAQ6D,SAEjDc,aAAY,IACRkM,WAAsC,IAA1B/c,EAAK/B,KAAKC,aACnB2S,aAAa3E,QAQpCyQ,GAAkCzV,UAAY,CAC1CmT,QAASnT,IAAUM,OACnBuG,KAAM7G,IAAUM,QAGpBmV,GAAkCjE,aAAe,CAC7CoF,YAAa,EACb/N,MAAO,aACPiB,eAAgB,cAGpB,IAKe0F,gBALgB,SAAA1U,GAAK,OAChC,kBAACqa,GAAgBC,SAAjB,MACK,SAAAjC,GAAO,OAAI,kBAAC,GAAD,KAAmCA,QAASA,GAAarY,U,wkBCtGtE,IAAMqa,GAAkBrM,IAAM+N,cAAc,IAE7CC,G,YAaF,WAAYhc,GAAO,0BACf,4BAAMA,KAyBVic,aAAe,WACX,OAAOxJ,KA3BQ,EA8BnB1E,MAAQ,WAAuB,IAAtBmO,EAAsB,uDAAP,GACdvd,EAASwd,YAA0BD,GAEzC,EAAKlc,MAAMoc,iBAAiBzd,GAAQyB,KAAK,EAAKic,cAjC/B,EAoCnBnD,WAAa,SAACD,EAAYqD,GACtB,EAAKtc,MAAMyB,UAAU6a,GAAY,KArClB,EAwCnBC,qBAAuB,SAAC3f,GAAY,IACxBP,EAAe,EAAK2D,MAApB3D,WAEFS,EAD2BT,EAAzBW,qBAEFJ,EAAQ+C,KAAKf,QAAO,SAAAT,GAAG,OAAIA,EAAII,MAAIL,KAAI,SAAAC,GAAG,OAAIA,EAAII,MAClDlC,EAAWS,WAAWmB,OAAS5B,EAAWS,WAAa,GAE7D,EAAKkD,MAAM4Z,QAAQ9c,IA/CJ,EAkDnB0f,gBAAkB,SAAAC,GACd,IAAM9d,EAAS,MAAK8d,GACpB9d,EAAO+d,iBAAmB/d,EAAOG,SACjC,IAAM6d,EAAgB,CAClB,kBACA,cACA,eACA,SACA,QACA,SACA,OACA,YACA,OACA,SACA,mBACA,YACA,iBAEJ9M,OAAOC,KAAK2M,GAAWG,SACnB,SAAAnZ,GAAG,YACkBjH,IAAhBmC,EAAO8E,IAAsC,KAAhB9E,EAAO8E,KAAgBkZ,EAAchf,SAAS8F,KAAwB,IAAhB9E,EAAO8E,YACpF9E,EAAO8E,MAEtB,IAAMoZ,EAAcC,IAAG1P,UAAUzO,GACjC,EAAKqB,MAAM+c,QAAQjf,KAAK,IAAM+e,IA1Ef,EA6EnBR,YAAc,WAAM,MACkB,EAAKrc,MAA/B2M,EADQ,EACRA,UAAWtQ,EADH,EACGA,WAEb2gB,EAAenN,OAAO4I,UAAUC,eAAeC,KAAKtc,EAAY,cAAgBA,EAAWyC,SAEjG6N,GAAaA,EAAU,MAAKtQ,EAAN,CAAkByC,SAAUke,KACjD5c,MAAK,SAAA8M,GAAY,IACN3J,EAAU2J,EAAV3J,MACJlH,EAAWW,sBACX,EAAKuf,qBAAqBhZ,MAIlC,EAAKiZ,gBAAgBngB,IA1FN,EA6FnB2S,eAAiB,SAAApC,GAAU,IACfvQ,EAAe,EAAK2D,MAApB3D,WACFsC,EAAS,MAAKtC,EAAR,CAAoByC,UAAWzC,EAAWyC,WAEtDme,KAAelQ,KAAK9L,IAAuBtC,EAAQiO,EAAQ,SAjG5C,EAoGnBrC,sBAAwB,SAAAvM,GAAQ,IACT/B,EAAW,EAAK+D,MAA3BpD,QAAWX,KACnB,EAAK8c,SAAS,CACVtF,kBAAmB,kBAAM,kBAAC,IAAD,CAAmBzV,KAAMA,EAAMsH,UAAW,kBAAMA,YAAUrJ,EAAM,EAAK8R,cAvGnF,EA2GnBtD,gBAAkB,SAAAzM,GAAQ,IACH/B,EAAW,EAAK+D,MAA3BpD,QAAWX,KACnB,EAAK8c,SAAS,CACVmE,YAAa,kBAAM,kBAAC,IAAD,CAAalf,KAAMA,EAAMsH,UAAW,kBAAMA,YAAUrJ,EAAM,EAAK8R,cA5GtF,EAAK5Q,MAAQ,CACTic,oBAAoB,EACpB+D,eAAe,EACf1J,kBAAmB,kBAAM,MACzByJ,YAAa,kBAAM,MACnBlgB,sBAAsB,GAPX,E,iEAWC,IACRX,EAAeiR,KAAKtN,MAApB3D,WACF+gB,EAAcN,IAAGO,MAAM/P,KAAKtN,MAAMsd,SAASxP,QACjDsP,EAAYV,gBAAkD,SAAhCU,EAAYV,gBACtCU,EAAYV,kBACZU,EAAYte,cAAWtC,GAG3B8Q,KAAKS,MAAL,MAAgB1R,EAAhB,GAA+B+gB,M,6CAI/B9P,KAAKtN,MAAMwC,8B,+BA2FN,MACoC8K,KAAKtN,MAAtCpD,EADH,EACGA,QAASP,EADZ,EACYA,WAAYud,EADxB,EACwBA,QACrB7L,EAA8ET,KAA9ES,MAAOiB,EAAuE1B,KAAvE0B,eAAgBkK,EAAuD5L,KAAvD4L,WAAY3O,EAA2C+C,KAA3C/C,sBAAuBE,EAAoB6C,KAApB7C,gBAF7D,EAGsC6C,KAAKnQ,MAAxCsW,EAHH,EAGGA,kBAAmByJ,EAHtB,EAGsBA,YACrBlf,EAAOpB,EACLS,EAAWW,EAAXX,OAER,OAAKA,EA8BMiQ,KAAK2O,aAAa5e,GA5BrB,kBAACgd,GAAgBkD,SAAjB,CACIha,MAAO,CACHvF,OACAW,OAAQ,MAAK2O,KAAKnQ,MAAZ,GAAsBd,GAC5B6N,QAAS,CACL6D,QACAiB,iBACAkK,aACA3O,wBACAE,kBACAmP,aAIR,kBAACnG,EAAD,MACA,kBAACyJ,EAAD,MAEA,kBAACM,EAAA,MAAD,KACI,kBAACC,EAAA,UAAD,KACI,kBAAC,GAAD,CAAuBC,iBAAe,KAE1C,kBAACD,EAAA,UAAD,KACI,kBAAC,EAAD,CAAgBpE,OAAQsE,IAAwBD,iBAAe,W,GA9JzDjH,aAA5BuF,GACK9W,UAAY,CACftI,QAASsI,IAAUC,IACnBwH,UAAWzH,IAAUE,KACrB2X,QAAS7X,IAAUM,OACnB8X,SAAUpY,IAAUM,OACpBnJ,WAAY6I,IAAUM,OACtB4W,iBAAkBlX,IAAUE,KAC5B3D,UAAWyD,IAAUE,KACrBwU,QAAS1U,IAAUE,KACnB5C,0BAA2B0C,IAAUE,MAsK7C,IAUewY,eACXnY,mBAlBJ,YAAmD,IAAxBhG,EAAwB,EAAxBA,qBACvB,MAAO,CACH7C,QAAS6C,GAAwBoe,YAAuBpe,GACxDpD,WAAYoD,GAAwBA,EAAqBpD,eAItC,SAAAqJ,GACvB,MAAO,CACHiH,UAAW,SAAAhO,GAAM,OAAI+G,EAASzE,YAAsBtC,KACpD8C,UAAW,SAAA9C,GAAM,OAAI+G,EAASjE,YAAU9C,KACxCyd,iBAAkB,SAAAzd,GAAM,OAAI+G,EAASpE,YAAwB3C,KAC7Dib,QAAS,SAAAjb,GAAM,OAAI+G,EAAShE,YAAU/C,KACtC6D,0BAA2B,kBAAMkD,EAASlD,mBAK9CiD,CAGEuW,KCvMS8B,UAZF,WAET,OACI,kBAAC,IAAMvZ,SAAP,KACI,kBAACwZ,EAAA,EAAD,CAAqBC,gBAAgB,EAAOC,oBAAkB,IAC9D,kBAACC,EAAA,KAAD,KACI,kBAAC,GAAD","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_VULNERABILITY_STORE = 'CLEAR_VULNERABILITY_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20\n    }\n};\n// Reducer\nexport const SystemsReducer = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: 'true',\n        sort: '-public_date',\n        selectedCves: [],\n        openedCves: [],\n        expandCveDescription: false\n    }\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const VulnerabilitiesStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList.isLoading = true;\n            newState.cveList.timestamp = action.meta;\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList.isLoading = false;\n            newState.cveList.payload = { errors: action.payload };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList.payload = action.payload;\n                newState.cveList.isLoading = false;\n                newState.cveList.timestamp = action.meta;\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.parameters.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, parameters: { ...newState.parameters, selectedCves } };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.parameters.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n        }\n\n        case ActionTypes.CLEAR_VULNERABILITY_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEReducer } from '../Reducers/CVEStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsReducer } from '../Reducers/SystemsStore';\nimport { VulnerabilitiesStore } from '../Reducers/VulnerabilitiesStore';\n\nReducerRegistry.register({ CVEStore: CVEReducer });\nReducerRegistry.register({ VulnerabilitiesStore });\nReducerRegistry.register({ SystemsStore: SystemsReducer });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearVulnerabilitiesStore = () =>({\n    type: ActionTypes.CLEAR_VULNERABILITY_STORE,\n    payload: []\n});\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n                <br/>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://access.redhat.com/articles/2968471\">\n                    <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n                </a>\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editBusinessRisk} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showBusinessRiskModal([\n                {\n                    id: rowData.id,\n                    business_risk_id: rowData.business_risk_id,\n                    justification: rowData.business_risk_justification\n                }\n            ])\n    },\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_justification\n                }\n            ])\n    }\n];\n\nexport const systemCveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    cve_status_id: rowData.cve_status_id,\n                    justification: rowData.status_justification,\n                    cve_justification: rowData.cve_status_justification\n                }\n            ])\n    }\n];\n\nexport const systemExposedTableRowActions = (showStatusModal, cve) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) => {\n            showStatusModal(\n                [{\n                    id: cve.id,\n                    status_id: cve.status_id,\n                    justification: cve.justification\n                }],\n                [{\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_text\n                }]\n            );\n        }\n    }\n];\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"@media screen and (max-width: 1100px) {\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\", \"\"]);\n\n// exports\n","import React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            canSelectAll={false}\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    let { show_all: currentValue } = currentFilter;\n    currentValue = (currentValue === '' || !currentValue) ? 'show' :  'hide';\n\n    const filterByNoAffect = value => {\n        value = value === 'hide' ? true : '';\n        apply({ show_all: value, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default notAffectingCvesFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","import React, { Component } from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { VULNERABILITIES_HEADER } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { constructFilterParameters, updateRef } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport './vulnerabilities.scss';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearVulnerabilitiesStore\n} from '../../../Store/Actions/Actions';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        clearVulnerabilitiesStore: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    componentWillUnmount() {\n        this.props.clearVulnerabilitiesStore();\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n\n        this.props.changeParameters(params).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n\n        DownloadReport.exec(fetchCveListByAccount, params, format, 'cves');\n    };\n\n    showBusinessRiskModal = cves => {\n        const { cveList: { meta } } = this.props;\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={() => updateRef(meta, this.apply)} />\n        });\n    };\n\n    showStatusModal = cves => {\n        const { cveList: { meta } } = this.props;\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={() => updateRef(meta, this.apply)} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={VULNERABILITIES_HEADER} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params)),\n        clearVulnerabilitiesStore: () => dispatch(clearVulnerabilitiesStore())\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} showDownloadButton />\n            <Main>\n                <VulnerabilitiesCves/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}