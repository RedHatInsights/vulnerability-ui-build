{"version":3,"sources":["webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss?a20a","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.js"],"names":["content","module","i","options","transform","undefined","locals","exports","push","VulnerabilitiesTableWithContext","noCves","props","entity","cves","context","filter","item","meta","hasOwnProperty","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","this","header","params","selectedCves","rows","map","cve","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","isSelectable","cells","sortBy","createSortBy","sort","onSort","key","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","bool","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCvesCount","size","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","showStatusList","Boolean","filterValues","Remediation","systemId","DownloadReportKebab","downloadReport","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","title","transforms","sortable","classNames","columnTransforms","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","then","sendRequest","cveNames","state","concat","forEach","add","Set","setState","createUrlParams","allParams","show_irrelevant","show_all","allowedParams","Object","keys","includes","queryString","qs","stringify","history","fetchData","parameters","showAllParam","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","StatusDropdown","setCallback","queryObject","parse","location","search","cveList","createCveListByAccount","errors","Provider","Stack","StackItem","func","withRouter","connect","VulnerabilitiesStore","dispatch","changeCveListParameters","CVEs","setHeader","breadcrumbs","dispatchSetHeader","dispatchAction","VulnerabilitiesCVEs","Page","VulnerabilityHeader"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pf-c-tabs.vulnerability-tabs {\\n  background-color: var(--pf-global--BackgroundColor--100);\\n  padding-left: var(--pf-c-page__main-section--md--PaddingLeft); }\\n\", \"\"]);\n\n// exports\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        isSelectable: propTypes.bool,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves } = params;\n        const rows = cves.data.map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve);\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={(this.props.isSelectable && this.handleOnSelect) || undefined}\n                            cells={header}\n                            rows={rows}\n                            sortBy={createSortBy(header, cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(key, direction, header, cves.meta.sort, methods.apply)\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DownloadReportKebab from '../../PresentationalComponents/DownloadReportKebab/DownloadReportKebab';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    {showRemediationButton && (\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                        />\n                    )}\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <DownloadReportKebab downloadReport={methods.downloadReport} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount } from '../../../Store/Actions/Actions';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'Description',\n        key: 'description',\n        transforms: [classNames('col-width-description')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    { title: 'Publish date', key: 'public_date', transforms: [sortable, classNames('col-width-10')] },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set() };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        StatusDropdown.setCallback(this.sendRequest);\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            [].concat(cveNames).forEach(cveName => {\n                isSelected ? selectedCves.add(cveName) : selectedCves.delete(cveName);\n            });\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam });\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    render() {\n        const { cveList, parameters } = this.props;\n        const { apply, downloadReport, selectCves } = this;\n        const cves = createCveListByAccount(cveList);\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            fetchResource: fetchCveListByAccount\n                        }\n                    }}\n                >\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && VulnerabilitiesStore.cveList,\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nclass CVEs extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    dispatchSetHeader() {\n        this.props.setHeader({\n            title: 'Vulnerability',\n            breadcrumbs: []\n        });\n    }\n\n    render() {\n        this.dispatchSetHeader();\n        return <VulnerabilitiesCves />;\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport CVEs from '../CVEs/CVEs';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport './VulnerabilitiesCVEs.scss';\n\nclass VulnerabilitiesCVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Page>\n                <VulnerabilityHeader />\n                <Main>\n                    <CVEs />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(VulnerabilitiesCVEs)\n);\n"],"sourceRoot":""}