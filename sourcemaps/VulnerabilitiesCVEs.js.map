{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"names":["VulnerabilitiesTableWithContext","noCves","props","entity","cves","context","heightAuto","cells","colSpan","title","filter","item","Object","prototype","hasOwnProperty","call","meta","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnCollapse","event","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","id","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","aria-label","onSelect","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","handleCveDescription","openedCves","params","expandCveDescription","cve","map","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","business_risk_id","isDisabled","kebabItemEditStatus","showStatusModal","status_id","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","show_all","multiRow","SearchFilter","placeholder","intl","formatMessage","messages","searchFilterLabel","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","disabled","ToolbarItem","FilterChips","filterCveSearchTerm","bool","defaultProps","totalNumber","injectIntl","React","createContext","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","then","sendRequest","cveNames","selectCve","toggleCveDescription","cveList","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showReportLink","showAllParam","response","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","BusinessRiskModal","updateRef","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","impact","cvssBaseScore","systemsExposed","businessRisk","status","Provider","Stack","StackItem","showAllCheckbox","func","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","useState","setShowReportLink","VulnerabilityHeader","showBreadcrumb","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","toString","getDefaultLabel","handleOnRadioChange","_","currentTarget","justification","successNotification","businessRiskUpdateSuccessful","count","onSave","setBusinessRisk","parseInt","business_risk_text","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","businessRiskOptions","isChecked","onChange","name","justificationLabel","type","resizeOrientation","CveStatusModal","useStatusSelect","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalOverwriteCheckbox","checked","content","cveStatusModalOverwriteTooltip","style","verticalAlign","marginRight","font-size","color","isFilled","cveStatusModalInfo","cveStatusModalInfoTooltip"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForCVE : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus,\n    filterCveSearchTerm\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersCVSSScore,\n            filtersSeverity,\n            filtersBusinessRisk,\n            filtersPublishDate,\n            filtersStatus\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCves}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} disabled={cves.data.length === 0} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('hide-description')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.systemsExposed),\n                key: 'systems_affected',\n                transforms: [sortable, classNames('col-width-10')] },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')] }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(VulnerabilitiesCves)\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon\n                                        font-size=\"var(--pf-global--FontSize--xl)\"\n                                        color=\"var(--pf-global--active-color--400)\"\n                                    />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    {intl.formatMessage(messages.cveStatusModalInfo)}\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                style={{ verticalAlign: '-0.125em' }}\n                                            />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n"],"sourceRoot":""}