{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","length","business_risk_id","toString","getDefaultLabel","handleOnRadioChange","_","event","value","currentTarget","justification","successNotification","variant","title","formatMessage","messages","businessRiskUpdateSuccessful","count","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","businessRiskOptions","isChecked","onChange","key","name","aria-label","justificationLabel","type","resizeOrientation","propTypes","array","func","any","injectIntl","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalOverwriteCheckbox","checked","content","cveStatusModalOverwriteTooltip","className","style","verticalAlign","marginRight","font-size","color","isFilled","cveStatusModalInfo","cveStatusModalInfoTooltip","Fragment","VulnerabilitiesTableWithContext","noCves","props","entity","context","heightAuto","cells","colSpan","filter","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onSelect","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","handleCveDescription","openedCves","params","expandCveDescription","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","isDisabled","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","multiRow","SearchFilter","placeholder","searchFilterLabel","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","disabled","ToolbarItem","FilterChips","filterCveSearchTerm","bool","defaultProps","totalNumber","React","createContext","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showReportLink","showAllParam","response","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","impact","cvssBaseScore","systemsExposed","businessRisk","status","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","setShowReportLink","VulnerabilityHeader","showBreadcrumb"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon\n                                        font-size=\"var(--pf-global--FontSize--xl)\"\n                                        color=\"var(--pf-global--active-color--400)\"\n                                    />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    {intl.formatMessage(messages.cveStatusModalInfo)}\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                style={{ verticalAlign: '-0.125em' }}\n                                            />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForCVE : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), [], {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCves}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} disabled={cves.data.length === 0} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('hide-description')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.systemsExposed),\n                key: 'systems_affected',\n                transforms: [sortable, classNames('col-width-10')] },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')] }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(VulnerabilitiesCves)\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}