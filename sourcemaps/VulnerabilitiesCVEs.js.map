{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Helpers/VulnerabilitiesHelper.js"],"names":["CVEs","props","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","emptyStore","entity","Component","Vulnerabilities","VulnerabilitiesCves","params","react_default","a","createElement","React","defaultProps","header","title","key","width","hasSort","Fragment","info_circle_icon","fetchResource","fetchCveListByAccount","dataMapper","cveList","isLoading","payload","asMutable","data","meta","map","row","id","cells","MiscHelper","attributes","impact","synopsis","description","cvss3_score","cvss2_score","concat","systems_affected","public_date","showAllCheckbox","propTypes","func","array","bool","string","routerParams","connect","dispatchAction","emptyCveList"],"mappings":"wRASMA,cACF,SAAAA,EAAYC,GAAO,OAAAC,IAAAC,KAAAH,GAAAI,IAAAD,KAAAE,IAAAL,GAAAM,KAAAH,KACTF,wEAINE,KAAKF,MAAMM,8CAGN,IACGC,EAAWL,KAAKF,MAAhBO,OACFC,EAAaD,GAAUE,mBAAoBC,sBAC3CC,EAAUJ,GAAU,CAAEA,WAAaL,KAAKF,MAC9C,OAAOY,EAAAC,EAAAC,cAACN,EAAcG,UAbXI,IAAMP,WAuBzBT,EAAKiB,aAAe,CAChBC,OAAQ,CACJ,CAAEC,MAAO,IAAKC,IAAK,SAAUC,MAAO,GACpC,CAAEF,MAAO,OAAQC,IAAK,WAAYC,MAAO,IACzC,CAAEF,MAAO,cAAeC,IAAK,cAAeE,SAAS,EAAOD,MAAO,IACnE,CACIF,MACIN,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KACK,kBADL,IACwBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,OAG5BJ,IAAK,aACLC,MAAO,IAEX,CAAEF,MAAO,kBAAmBC,IAAK,mBAAoBC,MAAO,IAC5D,CAAEF,MAAO,eAAgBC,IAAK,cAAeC,MAAO,KAExDI,cAAeC,IACfC,WChDG,SAAgCC,GACnC,IAAIC,EAAYD,EAAQC,UACxB,IAAKA,EAAW,CACZ,IAAIC,EAAUF,EAAQE,QAAQC,YAC1BC,EAAOF,EAAQE,KACfC,EAAOH,EAAQG,KAYnB,MAAO,CAAED,KAXTA,EAAOA,EAAKE,IAAI,SAAAC,GAAG,MAAK,CACpBC,GAAID,EAAIC,GACRC,MAAO,CACHC,IAAiCH,EAAII,WAAWC,QAChDL,EAAII,WAAWE,SACfH,IAAoBH,EAAII,WAAWG,YAAa,KAChDP,EAAII,WAAWI,aAAgBR,EAAII,WAAWK,aAAf,GAAAC,OAAiCV,EAAII,WAAWK,YAAhD,UAAuE,MACtGT,EAAII,WAAWO,iBACfR,IAAuBH,EAAII,WAAWQ,iBAG/Bd,OAAMJ,aAGzB,MAAO,CAAEG,KAAM,GAAIC,KAAOL,EAAQE,SAAWF,EAAQE,QAAQG,MAAS,GAAIJ,cD6B1EmB,iBAAiB,GAGrBhD,EAAKiD,UAAY,CACbtB,WAAYsB,IAAUC,KACtBzB,cAAewB,IAAUC,KACzBhC,OAAQ+B,IAAUE,MAClBH,gBAAiBC,IAAUG,KAC3B5C,OAAQyC,IAAUI,OAClB9C,WAAY0C,IAAUC,MAGXI,iCACXC,kBACI,KAvCmB,WACvB,MAAO,CACHhD,WAAY,kBAAMiD,YAAeC,kBAoCrCF,CAGEvD","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { InfoCircleIcon } from '@patternfly/react-icons';\nimport { routerParams, Vulnerabilities, VulnerabilitiesCves } from '@red-hat-insights/insights-frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { emptyCveList, fetchCveListByAccount } from '../../../Store/Actions/Actions';\n\nclass CVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillUnmount() {\n        this.props.emptyStore();\n    }\n\n    render() {\n        const { entity } = this.props;\n        const Component = (entity && Vulnerabilities) || VulnerabilitiesCves;\n        const params = (entity && { entity }) || this.props;\n        return <Component {...params} />;\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        emptyStore: () => dispatchAction(emptyCveList())\n    };\n};\n\nCVEs.defaultProps = {\n    header: [\n        { title: ' ', key: 'impact', width: 5 },\n        { title: 'Name', key: 'synopsis', width: 15 },\n        { title: 'Description', key: 'description', hasSort: false, width: 50 },\n        {\n            title: (\n                <React.Fragment>\n                    {'CVSS Base Score'} <InfoCircleIcon />\n                </React.Fragment>\n            ),\n            key: 'cvss_score',\n            width: 10\n        },\n        { title: 'Systems Exposed', key: 'systems_affected', width: 10 },\n        { title: 'Publish date', key: 'public_date', width: 10 }\n    ],\n    fetchResource: fetchCveListByAccount,\n    dataMapper: createCveListByAccount,\n    showAllCheckbox: true\n};\n\nCVEs.propTypes = {\n    dataMapper: propTypes.func,\n    fetchResource: propTypes.func,\n    header: propTypes.array,\n    showAllCheckbox: propTypes.bool,\n    entity: propTypes.string,\n    emptyStore: propTypes.func\n};\n\nexport default routerParams(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import * as MiscHelper from './MiscHelper';\n\nexport function createCveListByAccount(cveList) {\n    let isLoading = cveList.isLoading;\n    if (!isLoading) {\n        let payload = cveList.payload.asMutable();\n        let data = payload.data;\n        let meta = payload.meta;\n        data = data.map(row => ({\n            id: row.id,\n            cells: [\n                MiscHelper.processImpactForTable(row.attributes.impact),\n                row.attributes.synopsis,\n                MiscHelper.truncate(row.attributes.description, 200),\n                row.attributes.cvss3_score || (row.attributes.cvss2_score && `${row.attributes.cvss2_score} (v2)`) || 'N/A',\n                row.attributes.systems_affected,\n                MiscHelper.processDate(row.attributes.public_date)\n            ]\n        }));\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCurrentVulnerabilitiesCard(impacts) {\n    let dataSet = impacts.payload;\n    let isLoading = impacts.isLoading;\n    if (!isLoading) {\n        dataSet = impacts.payload;\n    }\n\n    dataSet = { content: dataSet, isLoading };\n    return dataSet;\n}\n"],"sourceRoot":""}