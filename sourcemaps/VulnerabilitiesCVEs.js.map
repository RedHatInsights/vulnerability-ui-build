{"version":3,"sources":["webpack:///./src/Components/SmartComponents/BusinessRiskModal/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss?a20a","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.js"],"names":["BusinessRiskModal","cves","updateRef","props","useState","cveList","setCveList","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","length","business_risk_id","toString","getDefaultLabel","handleOnRadioChange","_","event","value","currentTarget","handleClose","undefined","justification","modal","open","isSmall","title","isOpen","Boolean","onClose","actions","key","variant","onClick","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","addNotification","fieldId","businessRiskOptions","isChecked","onChange","name","aria-label","helperText","type","Fragment","propTypes","bool","func","array","connect","dispatch","data","content","module","i","options","transform","locals","exports","push","VulnerabilitiesTableWithContext","noCves","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","handleOnCollapse","rowKey","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","rowData","showBusinessRiskModal","business_risk_justification","isLoading","colSize","rowSize","Table","onSelect","cells","onCollapse","openCve","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","any","object","params","expandCve","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCves","selectedCvesCount","kebabOptions","kebabItemEditBusinessRisk","isDisabled","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","showStatusList","filterValues","Remediation","systemId","BaseKebab","dropdownItems","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","createUrlParams","allParams","show_irrelevant","show_all","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","fetchData","parameters","showAllParam","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","StatusDropdown","setCallback","queryObject","parse","location","search","errors","Provider","Stack","StackItem","withRouter","VulnerabilitiesStore","createCveListByAccount","changeCveListParameters","CVEs","setHeader","breadcrumbs","dispatchSetHeader","dispatchAction","VulnerabilitiesCVEs","Page","VulnerabilityHeader"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Button, Form, FormGroup, Modal, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\n\nexport const BusinessRiskModal = ({ cves, updateRef, ...props }) => {\n    const [cveList, setCveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const createNotification = () => {\n        return props.addNotification({\n            variant: 'success',\n            title: `Business risk updated for ${cveList.length} CVEs`\n        });\n    };\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleClose = () => {\n        setCveList(undefined);\n    };\n\n    const handleSave = () => {\n        setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        })\n        .then(updateRef)\n        .then(() => createNotification());\n\n        handleClose();\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const modal = open && (\n        <Modal\n            isSmall\n            title=\"Edit business risk\"\n            isOpen={Boolean(cveList)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <Stack>\n                <StackItem>Business risk can be used to mark which CVEs are most important to you business.</StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'} helperText=\"100 character limit\">\n                            <TextInput type=\"text\" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </Modal>\n    );\n\n    return <React.Fragment>{modal}</React.Fragment>;\n};\n\nBusinessRiskModal.propTypes = {\n    open: propTypes.bool,\n    onClose: propTypes.func,\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BusinessRiskModal);\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pf-c-tabs.vulnerability-tabs {\\n  background-color: var(--pf-global--BackgroundColor--100);\\n  padding-left: var(--pf-c-page__main-section--md--PaddingLeft); }\\n\", \"\"]);\n\n// exports\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { expandCve } from '../../../Store/Actions/Actions';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object,\n        openCve: propTypes.func\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        const actions = [\n            {\n                title: 'Edit business risk',\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            }\n        ];\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => this.props.openCve(rowKey)}\n                            actions={actions}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default connect(\n    null,\n    mapDispatchToProps\n)(VulnerabilitiesTable);\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    {showRemediationButton && (\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                        />\n                    )}\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <BaseKebab dropdownItems={kebabOptions} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../BusinessRiskModal/BusinessRiskModal';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-15')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    { title: 'Publish date', key: 'public_date', transforms: [sortable, classNames('col-width-10')] },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            BusinessRiskModal: () => null\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        StatusDropdown.setCallback(this.sendRequest);\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames);\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam });\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal open cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal } = this;\n        const { BusinessRiskModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            fetchResource: fetchCveListByAccount\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nclass CVEs extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    dispatchSetHeader() {\n        this.props.setHeader({\n            title: 'Vulnerability',\n            breadcrumbs: []\n        });\n    }\n\n    render() {\n        this.dispatchSetHeader();\n        return <VulnerabilitiesCves />;\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport CVEs from '../CVEs/CVEs';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport './VulnerabilitiesCVEs.scss';\n\nclass VulnerabilitiesCVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Page>\n                <VulnerabilityHeader />\n                <Main>\n                    <CVEs />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(VulnerabilitiesCVEs)\n);\n"],"sourceRoot":""}