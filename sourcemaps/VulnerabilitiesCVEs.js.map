{"version":3,"sources":["webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss?a20a","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.js"],"names":["content","module","i","options","transform","undefined","locals","exports","push","VulnerabilitiesTableWithContext","noCves","props","entity","cves","context","filter","item","meta","hasOwnProperty","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","event","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","id","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","actions","title","onClick","rowData","showBusinessRiskModal","business_risk_id","justification","business_risk_justification","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","onCollapse","openCve","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","object","func","connect","dispatch","params","expandCve","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCves","selectedCvesCount","kebabOptions","kebabItemEditBusinessRisk","map","isDisabled","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","Filters","showStatusList","Boolean","filterValues","Remediation","systemId","BaseKebab","dropdownItems","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","then","sendRequest","cveNames","selectCve","createUrlParams","allParams","show_irrelevant","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","fetchData","parameters","showAllParam","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","BusinessRiskModal","open","updateRef","StatusDropdown","setCallback","queryObject","parse","location","search","cveList","errors","Provider","Stack","StackItem","withRouter","VulnerabilitiesStore","createCveListByAccount","changeCveListParameters","CVEs","setHeader","breadcrumbs","dispatchSetHeader","dispatchAction","VulnerabilitiesCVEs","Page","VulnerabilityHeader"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pf-c-tabs.vulnerability-tabs {\\n  background-color: var(--pf-global--BackgroundColor--100);\\n  padding-left: var(--pf-c-page__main-section--md--PaddingLeft); }\\n\", \"\"]);\n\n// exports\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { expandCve } from '../../../Store/Actions/Actions';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object,\n        openCve: propTypes.func\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        const actions = [\n            {\n                title: 'Edit business risk',\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            }\n        ];\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => this.props.openCve(rowKey)}\n                            actions={actions}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default connect(\n    null,\n    mapDispatchToProps\n)(VulnerabilitiesTable);\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    <SelectAllCheckbox\n                        selectedItems={selectedCvesCount}\n                        selectorHandler={methods.selectCves}\n                        cves={cves}\n                        fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                    />\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <BaseKebab dropdownItems={kebabOptions} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../BusinessRiskModal/BusinessRiskModal';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            BusinessRiskModal: () => null\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        StatusDropdown.setCallback(this.sendRequest);\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam });\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal open cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal } = this;\n        const { BusinessRiskModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            fetchResource: fetchCveListByAccount\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nclass CVEs extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    dispatchSetHeader() {\n        this.props.setHeader({\n            title: 'Vulnerability',\n            breadcrumbs: []\n        });\n    }\n\n    render() {\n        this.dispatchSetHeader();\n        return <VulnerabilitiesCves />;\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport CVEs from '../CVEs/CVEs';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport './VulnerabilitiesCVEs.scss';\n\nclass VulnerabilitiesCVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Page>\n                <VulnerabilityHeader />\n                <Main>\n                    <CVEs />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(VulnerabilitiesCVEs)\n);\n"],"sourceRoot":""}