{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","length","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","value","currentTarget","successNotification","variant","title","formatMessage","messages","businessRiskUpdateSuccessful","count","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","businessRiskOptions","isChecked","onChange","key","name","aria-label","justificationLabel","type","resizeOrientation","propTypes","array","func","any","injectIntl","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalOverwriteCheckbox","checked","content","cveStatusModalOverwriteTooltip","className","style","verticalAlign","marginRight","font-size","color","isFilled","cveStatusModalInfo","cveStatusModalInfoTooltip","Fragment","VulnerabilitiesTableWithContext","noCves","props","entity","context","heightAuto","cells","colSpan","filter","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onSelect","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","object","VulnerabilitiesTable","CVETableContext","Consumer","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","selectPageNumber","itemLabel","number","handleUnselectAll","handleSelectAll","payload","page_size","total_items","page","handleOnCheckboxChange","selectNone","onClick","selectPage","collectedItems","union","selectAll","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","publishDate","conditionalFilterType","radio","urlParam","filterValues","PublicDateOptions","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSSOptions","impactFilter","impact","filterByImpact","values","join","checkbox","IMPACT_OPTIONS","split","SearchFilter","placeholder","search","React","searchValue","setSearchValue","debounce","handleSearch","text","searchLabel","securityRuleFilter","security_rule","filterBySecurityRule","securityRules","securityRulesOptions","businessRiskFilter","filterByBusinessRisk","businessRisk","statusFilter","filterByStatus","status","STATUS_OPTIONS","notAffectingCvesFilter","show_all","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","exportConfig","kebabExportAsJson","kebabExportAsCsv","_event","fileType","downloadReport","kebabAction","callback","isDisabled","Button","isInline","buildActiveFilters","currentFilters","filterChips","keys","FILTERS","reduce","includes","paramValues","filteredValues","push","category","chips","VulnerabilitiesToolbarWithContext","showRemediationButton","params","selectedCves","expandCveDescription","selectedCvesCount","selectOptions","ops","Remediation","systemId","editBusinessRisk","showBusinessRiskModal","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","openedCves","pagination","itemCount","perPage","onSetPage","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","Boolean","filterConfig","searchFilter","activeFiltersConfig","filters","onDelete","e","i","removeFilters","obj","some","chip","bool","defaultProps","totalNumber","createContext","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","find","parseFloat","to","cvss_from","cvss_to","publicEntry","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","forEach","queryString","qs","stringify","history","fetchData","showReportLink","showAllParam","response","date","Date","toISOString","replace","fetchCveListByAccount","Number","MAX_SAFE_INTEGER","data_format","JSON","downloadFile","StatusModal","isStatuskOpen","queryObject","parse","location","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","systemsExposed","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","setShowReportLink","VulnerabilityHeader","showBreadcrumb"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon\n                                        font-size=\"var(--pf-global--FontSize--xl)\"\n                                        color=\"var(--pf-global--active-color--400)\"\n                                    />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    {intl.formatMessage(messages.cveStatusModalInfo)}\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                style={{ verticalAlign: '-0.125em' }}\n                                            />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForCVE : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = multiRow ? data.length / 2 : data.length;\n    const itemLabel = number => (number > 1 && 'items') || 'item';\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, undefined);\n    };\n\n    const handleSelectAll = () => {\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage)} (${selectPageNumber} ${itemLabel(selectPageNumber)})`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll)} (${meta.total_items ? meta.total_items : 0} \n                    ${itemLabel(meta.total_items)})`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PublicDateOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PublicDateOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSSOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSSOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(messages.searchLabel),\n        filterValues: {\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { securityRulesOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst securityRuleFilter = (apply, currentFilter = {}) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: securityRulesOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { businessRiskOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: businessRiskOptions.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    const { show_all: currentValue } = currentFilter;\n    const filterByNoAffect = value => {\n        if (value === '1') {\n            value = '';\n\n        } else {\n            value = 'true';\n        }\n\n        apply({ show_all: value });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default  notAffectingCvesFilter;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const  kebabAction = (label, callback, isDisabled =  false) =>{\n    const color = { color: (isDisabled ? '' : 'black') };\n    return (\n        <Button variant=\"link\" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>\n            {label}\n        </Button>\n    );\n};\n\nexport const buildActiveFilters = (currentFilters) =>{\n    const { filter } = currentFilters;\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n            const paramValues = currentFilters[key].split(',');\n            const filteredValues = paramValues.reduce((values, filter) =>{\n                values.push(FILTERS[key].items.reduce((object, item) => {\n\n                    if (filter === item.value) {\n                        object.name = item.label;\n                        object.value = item.value;\n                    }\n\n                    return object;\n                }, {}));\n\n                return values;\n            }, []);\n\n            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport Remediation from '../Remediation/Remediation';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport { handleChangePage, handleSetPageSize, kebabAction,\n    exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { showRemediationButton, entity, context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} /> || '',\n        kebabAction(\n            props.intl.formatMessage(messages.editBusinessRisk),\n            () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            !selectedCvesCount,\n        ),\n        kebabAction(\n            props.intl.formatMessage(messages.editStatus),\n            () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            !selectedCvesCount,\n        ),\n        kebabAction(\n            expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            handleCveDescription,\n            false\n        )\n\n    ];\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 1,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(props.intl.formatMessage(messages.searchLabel), filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {exportConfig(methods)}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.object,\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves--${date}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('hide-description')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.systemsExposed),\n                key: 'systems_affected',\n                transforms: [sortable, classNames('col-width-10')] },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')] }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(VulnerabilitiesCves)\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}