{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","length","meta","data","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","payload","page_size","total_items","page","then","map","item","id","handleOnCheckboxChange","title","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","filter","selectAll","SearchFilter","label","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","undefined","handleSearch","useEffect","type","conditionalFilterType","text","filterValues","onChange","event","value","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","kebabExportAsJson","kebabExportAsCsv","onSelect","fileType","downloadReport","kebabAction","callback","isDisabled","color","isInline","key","buildActiveFilters","currentFilters","filterChips","Object","keys","FILTERS","reduce","array","includes","paramValues","split","filteredValues","values","push","object","name","category","chips","searchLabel","removeFilters","obj","some","chip","join","PaginationWrapper","pageNumber","props","nextProps","this","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","string","defaultProps","BusinessRiskModal","cves","updateRef","cveList","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","justification","business_risk_id","toString","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","onSave","setBusinessRisk","parseInt","cve","business_risk_text","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","businessRiskOptions","isChecked","aria-label","justificationLabel","resizeOrientation","any","injectIntl","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","cveStatusModalInfo","content","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","module","i","options","transform","locals","exports","securityRuleFilter","currentFilter","dynamicFilters","currentValue","security_rule","filterBySecurityRule","securityRules","radio","urlParam","unionWith","securityRulesOptions","isEqual","statusFilter","filterByStatus","status","checkbox","STATUS_OPTIONS","VulnerabilitiesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","header","isLoading","colSize","rowSize","Table","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","VulnerabilitiesTable","CVETableContext","Consumer","publishDateFilter","publish_date","filterByPublishDate","publishDate","PublicDateOptions","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSSOptions","impactFilter","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","notAffectingCvesFilter","show_all","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","VulnerabilitiesToolbarWithContext","showRemediationButton","params","selectedCves","expandCveDescription","selectedCvesCount","selectOptions","ops","Remediation","systemId","editBusinessRisk","showBusinessRiskModal","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","openedCves","pagination","actionsConfig","dropdownProps","bulkSelect","Boolean","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","onDelete","e","bool","totalNumber","createContext","VulnerabilitiesCves","processError","config","cvssEntry","find","parseFloat","to","cvss_from","cvss_to","publicEntry","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","forEach","queryString","qs","stringify","history","fetchData","showAllParam","response","DownloadReport","exec","fetchCveListByAccount","StatusModal","isStatuskOpen","queryObject","parse","location","errors","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","systemsExposed","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","VulnerabilityHeader","showBreadcrumb","showDownloadButton"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const  kebabAction = (label, callback, isDisabled =  false) =>{\n    const color = { color: (isDisabled ? '' : 'black') };\n    return (\n        <Button variant=\"link\" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>\n            {label}\n        </Button>\n    );\n};\n\nexport const buildActiveFilters = (currentFilters) =>{\n    const { filter } = currentFilters;\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n            const paramValues = currentFilters[key].split(',');\n            const filteredValues = paramValues.reduce((values, filter) =>{\n                values.push(FILTERS[key].items.reduce((object, item) => {\n\n                    if (filter === item.value) {\n                        object.name = item.label;\n                        object.value = item.value ;\n                    }\n                    else if (key === 'security_rule')\n                    {\n                        object.name = filter;\n                        object.value = filter;\n                    }\n\n                    return object;\n                }, {}));\n                return values;\n            }, []);\n\n            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","/* eslint-disable camelcase */\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items, page_size } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={total_items || 0}\n                    perPage={page_size || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { securityRulesOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = '';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === '0' ? '' : values  });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(securityRulesOptions, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PublicDateOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PublicDateOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSSOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSSOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { businessRiskOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: businessRiskOptions.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    const { show_all: currentValue } = currentFilter;\n    const filterByNoAffect = value => {\n        if (value === '1') {\n            value = '';\n\n        } else {\n            value = 'true';\n        }\n\n        apply({ show_all: value });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default  notAffectingCvesFilter;\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport Remediation from '../Remediation/Remediation';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport { handleChangePage, handleSetPageSize, kebabAction,\n    exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { showRemediationButton, entity, context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} /> || '',\n        kebabAction(\n            props.intl.formatMessage(messages.editBusinessRisk),\n            () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            !selectedCvesCount\n        ),\n        kebabAction(\n            props.intl.formatMessage(messages.editStatus),\n            () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            !selectedCvesCount\n        ),\n        kebabAction(\n            expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            handleCveDescription,\n            cves.meta.total_items === 0\n        )\n\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    isDisabled: !selectedCvesCount && cves.meta.total_items === 0,\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {exportConfig(methods)}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.object,\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, PublicDateOptions } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n\n        DownloadReport.exec(fetchCveListByAccount, params, format, 'cves');\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('hide-description')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.systemsExposed),\n                key: 'systems_affected',\n                transforms: [sortable, classNames('col-width-10')] },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')] }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(VulnerabilitiesCves)\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} showDownloadButton />\n            <Main>\n                <VulnerabilitiesCves/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}