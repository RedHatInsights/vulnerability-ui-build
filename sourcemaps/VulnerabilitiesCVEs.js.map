{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss?a20a","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/VulnerabilitiesCVEs/VulnerabilitiesCVEs.js"],"names":["BusinessRiskModal","cves","updateRef","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","length","business_risk_id","toString","getDefaultLabel","handleOnRadioChange","_","event","value","currentTarget","justification","successNotification","variant","title","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","gutter","fieldId","businessRiskOptions","isChecked","onChange","key","name","aria-label","type","propTypes","array","func","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveIds","setCveStatus","status_text","setSystemCveStatus","checked","size","color","isFilled","content","module","i","options","transform","undefined","locals","exports","push","VulnerabilitiesTableWithContext","noCves","props","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onSelect","cells","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","any","object","connect","dispatch","params","expandCve","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","isDisabled","kebabItemEditStatus","showStatusModal","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","createUrlParams","allParams","show_irrelevant","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","fetchData","parameters","showAllParam","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","withRouter","VulnerabilitiesStore","createCveListByAccount","changeCveListParameters","CVEs","setHeader","breadcrumbs","dispatchSetHeader","VulnerabilitiesCVEs","Page","VulnerabilityHeader"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\n\nexport const BusinessRiskModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Business risk updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title=\"Edit business risk\">\n            <Stack gutter={'md'}>\n                <StackItem>Business risk can be used to mark which CVEs are most important to you business.</StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'}>\n                            <TextInput type=\"text\" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default BusinessRiskModal;\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title=\"Set status for this CVE and all hosts\"\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label=\"Do not overwrite individual host status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching hosts. Any new matching hosts will have the\n                                    status &quot;Not review&quot;\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./VulnerabilitiesCVEs.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pf-c-tabs.vulnerability-tabs {\\n  background-color: var(--pf-global--BackgroundColor--100);\\n  padding-left: var(--pf-c-page__main-section--md--PaddingLeft); }\\n\", \"\"]);\n\n// exports\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { expandCve } from '../../../Store/Actions/Actions';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object,\n        openCve: propTypes.func\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => this.props.openCve(rowKey)}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default connect(\n    null,\n    mapDispatchToProps\n)(VulnerabilitiesTable);\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [filtersShowAll, filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                        />\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam });\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nclass CVEs extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    dispatchSetHeader() {\n        this.props.setHeader({\n            title: 'Vulnerability',\n            breadcrumbs: []\n        });\n    }\n\n    render() {\n        this.dispatchSetHeader();\n        return <VulnerabilitiesCves />;\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport CVEs from '../CVEs/CVEs';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport './VulnerabilitiesCVEs.scss';\n\nclass VulnerabilitiesCVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Page>\n                <VulnerabilityHeader />\n                <Main>\n                    <CVEs />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(VulnerabilitiesCVEs)\n);\n"],"sourceRoot":""}