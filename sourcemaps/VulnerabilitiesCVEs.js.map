{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","length","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","value","currentTarget","successNotification","variant","title","formatMessage","messages","businessRiskUpdateSuccessful","count","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","businessRiskOptions","className","isChecked","onChange","key","name","aria-label","justificationLabel","type","resizeOrientation","propTypes","array","func","any","injectIntl","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","content","cveStatusModalInfoTooltip","Fragment","style","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","meta","data","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","payload","page_size","total_items","page","handleOnCheckboxChange","selectNone","onClick","selectPage","collectedItems","union","filter","selectAll","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","undefined","handleSearch","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","kebabExportAsJson","kebabExportAsCsv","onSelect","fileType","downloadReport","kebabAction","callback","isDisabled","isInline","buildActiveFilters","currentFilters","filterChips","Object","keys","FILTERS","reduce","includes","paramValues","split","filteredValues","values","push","object","category","chips","searchLabel","removeFilters","obj","some","chip","join","VulnerabilitiesTableWithContext","noCves","props","entity","context","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","Component","VulnerabilitiesTable","CVETableContext","Consumer","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","publishDate","radio","urlParam","PublicDateOptions","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSSOptions","impactFilter","impact","filterByImpact","checkbox","IMPACT_OPTIONS","hasIcon","iconColor","securityRuleFilter","security_rule","filterBySecurityRule","securityRules","securityRulesOptions","businessRiskFilter","filterByBusinessRisk","businessRisk","statusFilter","filterByStatus","status","STATUS_OPTIONS","notAffectingCvesFilter","show_all","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","VulnerabilitiesToolbarWithContext","showRemediationButton","params","selectedCves","expandCveDescription","selectedCvesCount","selectOptions","ops","Remediation","systemId","editBusinessRisk","showBusinessRiskModal","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","openedCves","pagination","itemCount","onSetPage","onPerPageSelect","actionsConfig","dropdownProps","bulkSelect","Boolean","filterConfig","searchFilter","activeFiltersConfig","filters","onDelete","e","i","bool","defaultProps","totalNumber","createContext","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","find","parseFloat","to","cvss_from","cvss_to","publicEntry","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","forEach","queryString","qs","stringify","history","fetchData","showReportLink","showAllParam","response","DownloadReport","exec","fetchCveListByAccount","StatusModal","isStatuskOpen","queryObject","parse","location","errors","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","systemsExposed","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","setShowReportLink","VulnerabilityHeader","showBreadcrumb"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(messages.cve),\n        filterValues: {\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const  kebabAction = (label, callback, isDisabled =  false) =>{\n    const color = { color: (isDisabled ? '' : 'black') };\n    return (\n        <Button variant=\"link\" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>\n            {label}\n        </Button>\n    );\n};\n\nexport const buildActiveFilters = (currentFilters) =>{\n    const { filter } = currentFilters;\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n            const paramValues = currentFilters[key].split(',');\n            const filteredValues = paramValues.reduce((values, filter) =>{\n                values.push(FILTERS[key].items.reduce((object, item) => {\n\n                    if (filter === item.value) {\n                        object.name = item.label;\n                        object.value = item.value;\n                    }\n\n                    return object;\n                }, {}));\n\n                return values;\n            }, []);\n\n            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForCVE : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PublicDateOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PublicDateOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSSOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSSOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { securityRulesOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst securityRuleFilter = (apply, currentFilter = {}) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = '';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === '0' ? '' : values  });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: securityRulesOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { businessRiskOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: businessRiskOptions.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '' });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    const { show_all: currentValue } = currentFilter;\n    const filterByNoAffect = value => {\n        if (value === '1') {\n            value = '';\n\n        } else {\n            value = 'true';\n        }\n\n        apply({ show_all: value });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default  notAffectingCvesFilter;\n","/* eslint-disable camelcase */\n\nimport React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport Remediation from '../Remediation/Remediation';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport { handleChangePage, handleSetPageSize, kebabAction,\n    exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { showRemediationButton, entity, context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} /> || '',\n        kebabAction(\n            props.intl.formatMessage(messages.editBusinessRisk),\n            () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            !selectedCvesCount\n        ),\n        kebabAction(\n            props.intl.formatMessage(messages.editStatus),\n            () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            !selectedCvesCount\n        ),\n        kebabAction(\n            expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            handleCveDescription,\n            cves.meta.total_items === 0\n        )\n\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    isDisabled: !selectedCvesCount && cves.meta.total_items === 0,\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(props.intl.formatMessage(messages.searchLabel), filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {exportConfig(methods)}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.object,\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func,\n        showReportLink: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters, showReportLink } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n\n            showReportLink(true);\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n\n        DownloadReport.exec(fetchCveListByAccount, params, format, 'cves');\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('hide-description')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.systemsExposed),\n                key: 'systems_affected',\n                transforms: [sortable, classNames('col-width-10')] },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')] }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(VulnerabilitiesCves)\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React, { useState } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    const [showReportLink, setShowReportLink] = useState(false);\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showReportLink={showReportLink} showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves showReportLink={setShowReportLink}/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}