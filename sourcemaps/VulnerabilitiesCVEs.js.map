{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","length","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","value","currentTarget","successNotification","title","formatMessage","businessRiskUpdateSuccessful","count","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","businessRiskModalTitle","gutter","businessRiskModalInfo","businessRiskLabel","fieldId","BUSINESS_RISK_OPTIONS","isChecked","onChange","key","name","aria-label","justificationLabel","type","resizeOrientation","array","any","injectIntl","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","status_text","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","content","cveStatusModalInfoTooltip","Fragment","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","object","string","defaultProps","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","publishDate","conditionalFilterType","radio","urlParam","filterValues","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","values","filter","join","checkbox","IMPACT_OPTIONS","hasIcon","iconColor","split","businessRiskFilter","filterByBusinessRisk","businessRisk","module","i","options","transform","undefined","locals","exports","push","VulnerabilitiesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","Object","prototype","hasOwnProperty","call","data","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","header","isLoading","colSize","rowSize","Table","onSelect","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","VulnerabilitiesTable","CVETableContext","Consumer","notAffectingCvesFilter","show_all","filterByNoAffect","filterAffectingCVEs","AFFECTING_SYSTEMS_OPTIONS","VulnerabilitiesToolbarWithContext","showRemediationButton","params","selectedCves","expandCveDescription","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","Remediation","systemId","editBusinessRisk","showBusinessRiskModal","isDisabled","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","openedCves","pagination","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","securityRuleFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","bool","totalNumber","downloadReport","React","createContext","VulnerabilitiesCves","processError","filterParams","constructFilterParameters","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","fetchData","showAllParam","response","format","DownloadReport","exec","fetchCveListByAccount","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","VULNERABILITIES_HEADER","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","VulnerabilityHeader","showBreadcrumb","showDownloadButton"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","import React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows={(cves.data.length === 0) ? this.noCves() : cves.data}\n                            onSelect={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            onCollapse={!(cves.data.length === 0) ? (event, rowKey) => methods.openCve(rowKey) : undefined}\n                            actions={!(cves.data.length === 0) ? cveTableRowActions(methods) : undefined}\n                            sortBy={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { AFFECTING_SYSTEMS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst notAffectingCvesFilter = (apply, currentFilter = {}) => {\n    let { show_all: currentValue } = currentFilter;\n    currentValue = (currentValue === '' || !currentValue) ? 'show' :  'hide';\n\n    const filterByNoAffect = value => {\n        value = value === 'hide' ? true : '';\n        apply({ show_all: value, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterAffectingCVEs),\n        type: conditionalFilterType.radio,\n        urlParam: 'show_all',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByNoAffect(value);\n            },\n            items: AFFECTING_SYSTEMS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n\n};\n\nexport default  notAffectingCvesFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport Remediation from '../Remediation/Remediation';\nimport { CVETableContext } from './VulnerabilitiesCves';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport notAffectingCvesFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/NotAffectingCVEsFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst  VulnerabilitiesToolbarWithContext = (props) => {\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    };\n\n    const { showRemediationButton, entity, context } = props;\n    const { cves, params, methods } = context;\n    const { selectedCves, expandCveDescription, filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all }),\n        multiRow: true\n    });\n\n    const actions = [\n        showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} /> || '',\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        notAffectingCvesFilter(methods.apply, params),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n\n        </React.Fragment>\n    );\n};\n\nVulnerabilitiesToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.object,\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nVulnerabilitiesToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(VulnerabilitiesToolbar);\n","import React, { Component } from 'react';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { VULNERABILITIES_HEADER } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { constructFilterParameters } from '../../../Helpers/MiscHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport './vulnerabilities.scss';\n\nexport const CVETableContext = React.createContext({});\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n\n        this.props.changeParameters(params).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = Object.prototype.hasOwnProperty.call(parameters, 'show_all') && !parameters.show_all;\n\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n\n        DownloadReport.exec(fetchCveListByAccount, params, format, 'cves');\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={VULNERABILITIES_HEADER} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} showDownloadButton />\n            <Main>\n                <VulnerabilitiesCves/>\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}