{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTable.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/VulnerabilitiesCves.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js"],"names":["BusinessRiskModal","cves","updateRef","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","useEffect","length","business_risk_id","toString","getDefaultLabel","handleOnRadioChange","_","event","value","currentTarget","justification","successNotification","variant","title","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","onSuccessNotification","gutter","fieldId","businessRiskOptions","isChecked","onChange","key","name","aria-label","type","propTypes","array","func","CveStatusModal","useStatusSelect","status_id","StatusSelect","statusId","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cveIds","setCveStatus","status_text","setSystemCveStatus","Fragment","content","checked","style","marginRight","size","color","isFilled","VulnerabilitiesTableWithContext","noCves","props","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnCollapse","rowKey","isOpen","rows","state","setState","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","handleBusinessRiskToggle","isBusinessRiskOpen","this","header","isLoading","colSize","rowSize","Table","onSelect","cells","onCollapse","openCve","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","any","object","VulnerabilitiesTable","CVETableContext","Consumer","VulnerabilitiesToolbarWithContext","handleCveDescription","openedCves","params","expandCveDescription","showRemediationButton","selectedCves","selectedCvesCount","filterCategories","filtersShowAll","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","isDisabled","kebabItemEditStatus","showStatusModal","undefined","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","multiRow","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","VulnerabilitiesToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","VulnerabilitiesCves","processError","GenericError","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","changeParameters","sendRequest","cveNames","selectCve","toggleCveDescription","parameters","createUrlParams","allParams","show_irrelevant","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","showAllParam","response","payload","fetchCveListByAccount","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","StatusModal","isStatuskOpen","queryObject","parse","location","search","errors","Provider","Stack","StackItem","showAllCheckbox","withRouter","connect","VulnerabilitiesStore","createCveListByAccount","dispatch","changeCveListParameters","expandCve","CVEs","VulnerabilityHeader","showBreadcrumb"],"mappings":"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","file":"js/VulnerabilitiesCVEs.js","sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { businessRiskOptions } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\n\nexport const BusinessRiskModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    useEffect(() => {\n        getDefaultBusinessRisk(), getDefaultLabel();\n    }, [cves]);\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    function getDefaultBusinessRisk() {\n        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n    }\n\n    function getDefaultLabel() {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Business risk updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title=\"Edit business risk\">\n            <Stack gutter={'md'}>\n                <StackItem>\n                    Business risk can be used to identify, track, and address CVEs that have meaningful impact to your\n                    organization.\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label=\"Business risk\" fieldId={'businessRiskId'}>\n                            {businessRiskOptions.map(item => (\n                                <Radio\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label=\"Justification\" fieldId={'label'}>\n                            <TextInput type=\"text\" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default BusinessRiskModal;\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CveStatusModal = ({ cves, updateRef }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n    const title = cveList.length > 1 ? 'Set status for these CVEs and all systems' : 'Set status for this CVE and all systems';\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Checkbox\n                                label={\n                                    <React.Fragment>\n                                        Do not overwrite individual system status{' '}\n                                        <Tooltip\n                                            content=\"When checked, this setting does not change any pre-existing\n                                        statuses set on individual systems for this CVE.\"\n                                        >\n                                            <React.Fragment>\n                                                <OutlinedQuestionCircleIcon />\n                                            </React.Fragment>\n                                        </Tooltip>\n                                    </React.Fragment>\n                                }\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={checked => setCheckboxState(checked)}\n                            />\n                        </FormGroup>\n                        <FormGroup fieldId={'info'}>\n                            <Split>\n                                <SplitItem style={{ marginRight: 'var(--pf-global--spacer--xs)' }}>\n                                    <InfoCircleIcon size=\"md\" color=\"var(--pf-global--active-color--400)\" />\n                                </SplitItem>\n                                <SplitItem isFilled>\n                                    This status is applied to all existing matching systems. Any new matching systems will have\n                                    the status &quot;Not reviewed&quot;{' '}\n                                    <Tooltip\n                                        content='Example: If a new system is added and matches to this vulnerability,\n                                    it will be given a status \"Not reviewed\"'\n                                    >\n                                        <React.Fragment>\n                                            <OutlinedQuestionCircleIcon />\n                                        </React.Fragment>\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func\n};\n\nexport default CveStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse = (event, rowKey, isOpen) => {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    handleBusinessRiskToggle = () => {\n        this.setState(({ isBusinessRiskOpen }) => ({\n            isBusinessRiskOpen: !isBusinessRiskOpen\n        }));\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { cves, methods } = context;\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={cves.data}\n                            onCollapse={(event, rowKey) => methods.openCve(rowKey)}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={6} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesTable = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default VulnerabilitiesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersShowAll,\n    filtersStatus\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './VulnerabilitiesCves';\n\nclass VulnerabilitiesToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCve(openedCves);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription } = params;\n        const selectedCvesCount = selectedCves && selectedCves.length;\n        const filterCategories = [\n            filtersShowAll,\n            filtersCVSSScore,\n            filtersSeverity,\n            filtersBusinessRisk,\n            filtersPublishDate,\n            filtersStatus\n        ];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                selectedCves.map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, selectedCves.map(item => ({ id: item, status_id: '0' })), undefined, {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            items={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops, show_all: !params.show_all })}\n                            multiRow\n                        />\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst VulnerabilitiesToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <VulnerabilitiesToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default VulnerabilitiesToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { changeCveListParameters, fetchCveListByAccount, selectCve, expandCve } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport './vulnerabilities.scss';\nimport SystemCveTable from './VulnerabilitiesTable';\nimport SystemCveTableToolbar from './VulnerabilitiesTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n\n    { title: 'Systems exposed', key: 'systems_affected', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass VulnerabilitiesCves extends Component {\n    static propTypes = {\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        parameters: propTypes.object,\n        changeParameters: propTypes.func,\n        selectCve: propTypes.func,\n        openCve: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isBusinessRiskOpen: false,\n            isStatuskOpen: false,\n            BusinessRiskModal: () => null,\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const { parameters } = this.props;\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.apply({ ...parameters, ...queryObject });\n    }\n\n    processError = () => {\n        return GenericError;\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.props.changeParameters(config).then(this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        this.props.selectCve(cveNames || []);\n    };\n\n    toggleCveDescription = (cveList) => {\n        const { parameters } = this.props;\n        const { expandCveDescription } = parameters;\n        const openedCves = expandCveDescription\n            ? cveList.data.filter(cve => cve.id).map(cve => cve.id)\n            : parameters.openedCves.length ? parameters.openedCves : [];\n\n        this.props.openCve(openedCves);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        params.show_irrelevant = !params.show_all;\n        const allowedParams = [\n            'show_irrelevant',\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, parameters } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = parameters.hasOwnProperty('show_all') && !parameters.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...parameters, show_all: showAllParam })\n        .then(response => {\n            const { value } = response;\n            if (parameters.expandCveDescription) {\n                this.toggleCveDescription(value);\n            }\n        });\n\n        this.createUrlParams(parameters);\n    };\n\n    downloadReport = format => {\n        const { parameters } = this.props;\n        const params = { ...parameters, show_all: !parameters.show_all };\n        let { payload } = fetchCveListByAccount({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => <StatusModal cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, parameters, openCve } = this.props;\n        const { apply, downloadReport, selectCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: { ...this.state, ...parameters },\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: fetchCveListByAccount,\n                            openCve\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showAllCheckbox />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} showAllCheckbox />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ VulnerabilitiesStore }) {\n    return {\n        cveList: VulnerabilitiesStore && createCveListByAccount(VulnerabilitiesStore),\n        parameters: VulnerabilitiesStore && VulnerabilitiesStore.parameters\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListByAccount(params)),\n        selectCve: params => dispatch(selectCve(params)),\n        changeParameters: params => dispatch(changeCveListParameters(params)),\n        openCve: params => dispatch(expandCve(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(VulnerabilitiesCves)\n);\n","import { Main } from '@redhat-cloud-services/frontend-components';\nimport React from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport VulnerabilitiesCves from './VulnerabilitiesCves';\n\nconst CVEs = () => {\n    return (\n        <React.Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                <VulnerabilitiesCves />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nexport default CVEs;\n"],"sourceRoot":""}