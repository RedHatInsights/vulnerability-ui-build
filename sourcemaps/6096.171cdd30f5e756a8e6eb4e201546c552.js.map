{"version":3,"file":"js/6096.1639650143370.c18fef43c713194cae1f.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/disconnected-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(spinner_1.default.spinner, spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0]?.cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? cveList[0]?.justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\n\nconst Remediation = ({ cves, systems, manyRules, addNotification: dispatchNotification, isDisabled }) => {\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, attributes: { rule } }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n\n    return (\n        <RemediationButton\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatchNotification(result.getNotification())}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </RemediationButton>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    addNotification: propTypes.func,\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint=\"grid-lg\"\n                    ouiaId=\"cves-table\"\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context, canExport }) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, selectedRowsRawData, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n    const remediableCves = selectedRowsRawData.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData, true),\n                props: { isDisabled: !selectedCvesCount }\n            })] : []),\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                isDisabled: cves.meta.total_items === 0,\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={(canRemediate && entity &&\n                <Remediation\n                    isDisabled={remediableCves.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={{\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                    securityRuleFilter(methods.apply, parameters),\n                    knownExploitFilter(methods.apply, parameters),\n                    impactFilter(methods.apply, parameters),\n                    useCvssBaseScoreFilter(methods.apply, parameters),\n                    businessRiskFilter(methods.apply, parameters),\n                    publishDateFilter(methods.apply, parameters),\n                    statusFilter(methods.apply, parameters),\n                    useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),\n                    remediationFilter(methods.apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={canExport && {\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any,\n    canExport: propTypes.bool\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import { createIcon } from '../createIcon';\n\nexport const DisconnectedIconConfig = {\n  name: 'DisconnectedIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M107.625758,511.919812 C107.647579,453.639819 120.473237,396.076275 145.195758,343.299812 L66.0757577,263.919812 C64.9757577,266.019812 63.7857577,268.019812 62.6857577,270.119812 C-38.2858609,455.136708 -13.6478565,683.418046 124.475758,842.629812 C134.640866,854.227038 149.304208,860.890207 164.725758,860.920803 C177.621501,860.999229 190.089847,856.300444 199.725758,847.729812 C222.045758,828.339812 224.235758,794.349812 204.725758,771.959812 C142.116482,699.791587 107.639971,607.46129 107.625758,511.919812 Z M298.965758,512.769812 C298.965758,507.959812 299.165758,503.349812 299.465758,498.849812 L223.695758,422.919812 C195.943021,511.49644 210.859555,607.936744 264.075758,683.989812 C272.417691,695.880397 286.040845,702.947712 300.565758,702.92092 C309.717884,702.984827 318.661486,700.187766 326.145758,694.919812 C346.244069,680.682503 351.030068,652.865563 336.845758,632.729812 C312.094475,597.618928 298.858215,555.687799 298.965758,512.729812 L298.965758,512.769812 Z M903.425758,837.839812 C1064.25516,648.181373 1062.68818,369.557312 899.735758,181.719812 C890.46515,170.983736 877.290268,164.395355 863.139154,163.418898 C848.98804,162.442441 835.033106,167.158807 824.375758,176.519812 C802.005758,195.919812 799.815758,229.919812 819.185758,252.309812 C945.123654,397.620078 948.572544,612.370403 827.365758,761.649812 L754.005758,688.159812 C755.244385,686.815558 756.37773,685.377981 757.395758,683.859812 C792.844775,633.759435 811.790626,573.852791 811.595758,512.479812 C811.595758,450.189812 792.735758,390.599812 756.695758,340.199812 C749.880846,330.567 739.510358,324.044705 727.876268,322.074416 C716.242178,320.104127 704.302408,322.848071 694.695758,329.699812 C674.625758,343.899812 670.135758,371.699812 684.215758,391.799812 C733.317078,460.966176 735.688504,552.965658 690.215758,624.569812 L615.045758,549.479812 C619.447596,537.503845 621.679174,524.839047 621.635758,512.079812 C621.657896,451.518897 572.616613,402.388105 512.055758,402.299812 C499.315423,402.259246 486.670236,404.494336 474.715758,408.899812 L82.6457577,15.6398121 C64.3651324,-2.58558468 34.7711544,-2.54081316 16.5457577,15.7398121 C-1.67963909,34.0204373 -1.63486757,63.6144153 16.6457577,81.8398121 L120.475758,185.919812 L196.535758,261.919812 L333.185758,398.799812 L408.845758,474.589812 L549.005758,614.969812 L941.455758,1008.21981 C959.733621,1026.4673 989.34327,1026.44268 1007.59076,1008.16481 C1025.83825,989.886948 1025.81362,960.2773 1007.53576,942.029812 L903.425758,837.839812 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const DisconnectedIcon = createIcon(DisconnectedIconConfig);\n\nexport default DisconnectedIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyState } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\";\nimport { EmptyStateIcon } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js\";\nimport { EmptyStateBody } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js\";\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\nimport { Button } from \"@patternfly/react-core/dist/esm/components/Button/Button.js\";\nimport DisconnectedIcon from \"@patternfly/react-icons/dist/esm/icons/disconnected-icon\";\n\nvar NotConnected = function NotConnected(_ref) {\n  var titleText = _ref.titleText,\n      bodyText = _ref.bodyText,\n      buttonText = _ref.buttonText;\n  return /*#__PURE__*/React.createElement(EmptyState, null, /*#__PURE__*/React.createElement(EmptyStateIcon, {\n    icon: DisconnectedIcon\n  }), /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h5\",\n    size: \"lg\"\n  }, titleText), /*#__PURE__*/React.createElement(EmptyStateBody, null, bodyText), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    component: \"a\",\n    href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"pf-u-mt-lg\"\n  }, buttonText));\n};\n\nNotConnected.propTypes = {\n  titleText: propTypes.node,\n  bodyText: propTypes.node,\n  buttonText: propTypes.node\n};\nNotConnected.defaultProps = {\n  titleText: 'This system isn’t connected to Insights yet',\n  bodyText: 'To get started, activate the Insights client for this system.',\n  buttonText: 'Learn how to activate the Insights client'\n};\nexport default NotConnected;","import React, {\n    useMemo,\n    useEffect,\n    Fragment,\n    createContext,\n    useState\n} from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport {\n    constructFilterParameters,\n    useUrlParams,\n    updateRef\n} from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = (\n    {\n        entity,\n        intl,\n        allowedCveActions,\n        showHeaderLabel,\n        setPageTitle,\n        canExport\n    }) => {\n\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const selectedRowsRawData = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedRowsRawData || []\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs, columns), [systemCVEs, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        } else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            if (setPageTitle) {\n                document.title = `${entity.display_name}\n                    - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n            }\n\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map(\n            ({\n                id,\n                attributes:\n                {\n                    // eslint-disable-next-line camelcase\n                    cve_status_id,\n                    // eslint-disable-next-line camelcase\n                    status_id,\n                    status_text: justification,\n                    // eslint-disable-next-line camelcase\n                    cve_status_text: cve_justification\n                },\n                ...rest\n                // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest })\n        );\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type=\"systemDetail\"\n            />\n        ));\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    selectedRowsRawData,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnModalOpen,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal/>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemDetail(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar\n                            entity={entity.id}\n                            canExport={canExport}\n                        />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nexport const ConnectedSystemCves = injectIntl(SystemCVEs);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentFilter","currentValue","remediation","filterByRemediation","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","event","items","REMEDIATION_OPTIONS","item","split","CvePairStatusModal","cveList","updateRef","inventoryList","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","count","systemName","onFailureNotification","autoDismiss","description","modalTitle","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","key","fieldId","name","isChecked","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","cves","systems","manyRules","dispatchNotification","addNotification","baseIssueTemplate","system","fallback","size","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","rule","issue","rule_id","mergeObjectPropertyBy","acc","cveID","attributes","remediationProvider","onRemediationCreated","result","getNotification","connect","dispatch","notification","routerParams","SystemCvesTableWithContext","context","header","entity","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","isEmpty","data","rows","includes","selected","index","current","find","opened","isOpen","undefined","isLoading","SkeletonTable","colSize","rowSize","TableVariant","Fragment","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","secondParagraph","onSelect","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","CVETableContext","Consumer","SystemCveToolbarWithContext","canExport","parameters","selectedRowsRawData","canRemediate","advisory","selectedCvesCount","remediableCves","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","actions","onClick","showStatusModal","setColumnModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","actionsConfig","dropdownProps","bulkSelect","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","height","width","svgPath","yOffset","xOffset","NotConnected","_ref","titleText","bodyText","buttonText","EmptyState","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Button","component","href","target","rel","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","useDispatch","StatusModal","setStatusModal","isFirstLoad","setFirstLoad","isColumnModalOpen","systemCVEs","useSelector","SystemCvesStore","columns","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","document","fetchCveListBySystem","clearSystemCvesStore","payload","errors","ErrorHandler","code","Provider","format","DownloadReport","clearNotifications","iSelected","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_text","fetchSystemDetailsIds","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsSystemDetail","isModalOpen","setModalOpen","Stack","StackItem","TextContent","Text","TextVariants","SystemCveTableToolbar","SystemCveTable","column","isShown","isShownByDefault","ConnectedSystemCves","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"sourceRoot":""}