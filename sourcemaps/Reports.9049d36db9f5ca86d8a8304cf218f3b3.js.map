{"version":3,"file":"js/Reports.fe71a42bfc23ef3e7aca.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack:///./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js"],"sourcesContent":["import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text  } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport CVElabels from '../Common/CVElabels';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    const [legendHeader, ...restCVSSHeader] = CVSSHeader;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}\n            >\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                        colorSchema=\"orange\"\n                        legendHeader={legendHeader}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[restCVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}\n            >\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3)}\n                withColumn={false}\n            >\n                {\n                    topCves.map(({\n                        synopsis,\n                        known_exploit: hasExploit,\n                        security_rule: hasRule,\n                        description,\n                        cvss3_score: cvss3,\n                        systems_affected: systemsAffected\n                    }) => (\n                        <Panel\n                            key={synopsis}\n                            title={synopsis}\n                            description={cveDesc(description)}\n                            labels={<CVElabels hasExploit={hasExploit} hasRule={hasRule} intl={intl} />}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cvss3).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {systemsAffected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport truncate from 'lodash/truncate';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}>{`${truncate(rule, { length: 320 })}\\n\\n`}</Text>\n            {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap, rulesChart } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRulesSection)}\n            >\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"bar\"\n                        subTitle=\"rules\"\n                        title=\"Rules\"\n                        data={rulesChart}\n                        colorSchema=\"orange\"\n                        legend={false}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}\n            >\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity}/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array,\n        rulesChart: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    // if there's no CVE with N/A CVSS do not display N/A in graph/table\n    if (cvesBySeverity?.na?.count === 0) {\n        delete cvesBySeverity.na;\n        delete CVSSMapping.na;\n    }\n\n    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const CVSSData = Object.values(cvesBySeverity).reverse().map((\n        { count, percentage, known_exploit_count: knownExploitsCount }) =>\n        [intl.formatMessage(messages.executiveReportOfTotal,\n            {\n                count,\n                percentage\n            }\n        ), knownExploitsCount.toString()]\n    );\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n\n            if (percentageInfo && fieldData.percentage) {\n                value = fieldData.percentage;\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });\n\n    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);\n\n    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));\n\n    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));\n\n    const coverPageData = { totalSystems, totalCves, totalRules };\n\n    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };\n\n    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number,\n        rules_by_severity: PropTypes.object,\n        rules_total: PropTypes.number,\n        top_rules: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport FooterPDF from './Common/FooterPDF';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n\n        let data;\n\n        try {\n            data = await getExecutiveReport();\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        const report = buildExecReport({ data, intl });\n        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.security_rule === true));\n        setExploit(() => data.top_cves.some(cve => cve.known_exploit === true));\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (\n        <Fragment>\n            <a onClick={() => handleDownloadButton()}>\n                {intl.formatMessage(messages.executiveReportCardButton)}\n            </a>\n            {\n                renderPDF && <DownloadButton\n                    type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n                    fileName={`vulnerability_executive-report--${date}.pdf`}\n                    buttonProps={{ variant: 'link', isInline: true }}\n                    groupName=\"Red Hat Insights\"\n                    asyncFunction={dataFetch}\n                    allPagesHaveTitle={false}\n                    showButton={false}\n                    footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                    label={\n                        isLoading\n                            ? intl.formatMessage(messages.loading)\n                            : intl.formatMessage(messages.executiveReportCardButton)\n                    }\n                    onSuccess={() => {\n                        setRenderPDF(false);\n                    }}\n\n                />\n            }\n        </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\nimport { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n}) => {\n    const [toggleSwitch, setToggleSwitch] = useState('all');\n\n    const activeFilters = [\n        'rule_presence',\n        'known_exploit',\n        'impact',\n        'cvss_filter',\n        'business_risk_id',\n        'status_id',\n        'publish_date'\n    ];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (toggleSwitch === 'all') {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [toggleSwitch, setColumnsToInclude]);\n\n    return (\n        <Modal\n            width=\"50rem\"\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId={'custom-report-modal'}\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-filter-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm' },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={toggleSwitch === 'all'}\n                            onChange={() => setToggleSwitch('all')} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={toggleSwitch === 'custom'}\n                            onChange={() => setToggleSwitch('custom')}/>\n                    </ToggleGroup>\n\n                    {toggleSwitch === 'custom' &&\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className=\"pf-u-mb-md\"\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation=\"vertical\"\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={ style } src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React,  { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../../../Helpers/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA } from '../../../Helpers/constants';\nimport styles from './Common/styles';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <React.Fragment>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                label={messages.configModalExportReport}\n            />}\n        </React.Fragment>\n    );\n};\n\nexport default ReportsPage;\n"],"names":["CounterItem","counter","label","style","styles","propTypes","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","date","dateFormat","Date","type","props","children","systems","cves","rules","withColumn","SecondPage","cveDesc","description","length","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","legendHeader","restCVSSHeader","titleProps","title","chartType","subTitle","colorSchema","withHeader","rows","flex","map","value","synopsis","hasExploit","known_exploit","hasRule","security_rule","cvss3","cvss3_score","systemsAffected","systems_affected","labels","CVElabels","Number","parseFloat","toFixed","toString","ThirdPage","rulesDesc","rule","associatedCves","truncate","join","topRules","rulesHeader","rulesBySeverityMap","rulesChart","legend","name","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","na","count","CVSSMapping","Object","keys","reverse","EXEC_RULES_SEVERITY_MAP","values","percentage","knownExploitsCount","known_exploit_count","mapFields","fields","percentageInfo","arr","field","fieldData","undefined","push","recentCvesMapping","x","y","coverPageData","cvesData","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","dataFetch","msg","getExecutiveReport","autoDismiss","report","buildExecReport","some","cve","toISOString","split","onClick","fileName","buttonProps","isInline","groupName","asyncFunction","allPagesHaveTitle","showButton","footer","FooterPDF","onSuccess","ReportConfigModal","isModalOpen","isOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","toggleSwitch","setToggleSwitch","activeFilters","useEffect","CVE_REPORT_FILTERS","Modal","width","ouiaId","onClose","actions","Button","isDisabled","isCvssRangeValid","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","id","filterId","component","selectProps","options","items","filterName","ToggleGroup","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","includes","newValue","parameter","filter","item","handleCheckboxChange","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","dispatch","useDispatch","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructFilterParameters","filters","buildFilters","isReportDynamic"],"sourceRoot":""}