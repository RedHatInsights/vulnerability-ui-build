{"version":3,"file":"js/SystemDetailsPage.f45d54f57f0cea82c2c4.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyStateExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nconst SystemDetails = ({ entity, isOptOut, optOutSystemHandler, loaded }) => {\n    return entity && loaded && isOptOut ? (\n        <EmptyStateExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n    ) : (\n        <ConnectedSystemCves\n            entity={{ id: entity?.id, display_name: entity?.display_name }}\n            allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n            showHeaderLabel\n            setPageTitle\n        />\n    );\n};\n\nSystemDetails.propTypes = {\n    entity: propTypes.object,\n    isOptOut: propTypes.bool,\n    loaded: propTypes.bool,\n    optOutSystemHandler: propTypes.func\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS, ReadOnlyNotification } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nimport { AppInfo, DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst InventoryDetail = ({ fetchSystemDetails, systemDetails = {}, optOutSystem, match, addNotification, intl, errors }) => {\n    const inventoryId = match.params.inventoryId;\n\n    useEffect(() => {\n        fetchSystemDetails(inventoryId);\n    }, [fetchSystemDetails, inventoryId]);\n\n    const notifications = systemName => ({\n        exclude: {\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationExcludeSuccess, { count: 1, systemName })\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationExcludeFailureTitle, { count: 1, systemName }),\n                description: intl.formatMessage(messages.notificationDetailExcludeFailureBody, { count: 1 })\n            }\n        },\n        include: {\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationIncludeSuccessTitle, { count: 1, systemName }),\n                description: intl.formatMessage(messages.notificationIncludeSuccessBody, { count: 1 })\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationIncludeFailureTitle, { count: 1, systemName }),\n                description: intl.formatMessage(messages.notificationDetailIncludeFailureBody, { count: 1 })\n            }\n        }\n    });\n\n    const handleOptOutSystem = toExclude => {\n        optOutSystem(inventoryId, toExclude).then(() => {\n            const systemName = systemDetails.entity.display_name;\n\n            fetchSystemDetails(inventoryId);\n            addNotification(toExclude\n                ? notifications(systemName).exclude.success\n                : notifications(systemName).include.success);\n        }).catch(error => {\n            const systemName = systemDetails.entity.display_name;\n\n            addNotification(error.status === '503' ? ReadOnlyNotification : toExclude\n                ? notifications(systemName).exclude.failure\n                : notifications(systemName).include.failure);\n        });\n    };\n\n    const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n    return (\n        <DetailWrapper>\n            <Header\n                title=\"\"\n                breadcrumbs={[\n                    {\n                        title: PATHS.systemsPage.title,\n                        to: PATHS.systemsPage.to,\n                        loaded: true\n                    },\n                    {\n                        title: entity?.display_name || intl.formatMessage(messages.invalidSystem),\n                        isActive: true,\n                        loaded\n                    }\n                ]}\n            >\n                {!errors && (\n                    <InventoryDetailHead\n                        onLoad={({ mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(),\n                                ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, handleOptOutSystem))\n                            });\n                        }}\n                        hideBack\n                        actions={\n                            entity && [\n                                isOptOut\n                                    ? {\n                                        title: intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                        onClick: () => handleOptOutSystem(false)\n                                    }\n                                    : {\n                                        title: intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                        onClick: () => handleOptOutSystem(true)\n                                    }\n                            ]\n                        }\n                    />\n                )}\n            </Header>\n            <Main>\n                <AppInfo optOutSystemHandler={handleOptOutSystem} />\n            </Main>\n        </DetailWrapper>\n    );\n};\n\nInventoryDetail.propTypes = {\n    fetchSystemDetails: propTypes.func,\n    systemDetails: propTypes.object,\n    optOutSystem: propTypes.func,\n    match: propTypes.object,\n    addNotification: propTypes.func,\n    intl: propTypes.any,\n    errors: propTypes.object\n};\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"names":["SystemDetails","entity","isOptOut","optOutSystemHandler","loaded","buttonAction","id","display_name","allowedCveActions","showHeaderLabel","setPageTitle","propTypes","withRouter","connect","entityDetails","opt_out","initialState","InventoryDetail","fetchSystemDetails","systemDetails","optOutSystem","match","addNotification","intl","errors","inventoryId","params","useEffect","notifications","systemName","exclude","success","variant","title","formatMessage","messages","count","failure","autoDismiss","description","include","handleOptOutSystem","toExclude","then","error","status","ReadOnlyNotification","DetailWrapper","Header","breadcrumbs","PATHS","to","isActive","InventoryDetailHead","onLoad","mergeWithEntities","mergeWithDetail","INVENTORY_ACTION_TYPES","ReducerRegistry","state","action","type","FETCH_SYSTEM_DETAILS","payload","data","LOAD_ENTITY_FULFILLED","activeApps","name","component","LOAD_ENTITY_REJECTED","systemDetailsPageStore","hideBack","actions","onClick","Main","AppInfo","injectIntl","SystemCvesStore","cveList","dispatch","system","optOutSystemAction","notification"],"sourceRoot":""}