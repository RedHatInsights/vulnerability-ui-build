{"version":3,"file":"js/662.4ab19e3ff661471d48a8.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js"],"sourcesContent":["import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0].status_id && item.justification === cveList[0].justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0].status_id && item.justification === arr[0].justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0].status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0].cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0].status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0].justification);\n\n                    return sameAsEachOther ? inventoryList[0].justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0].cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0].cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0].justification);\n\n                    return sameAsEachOther ? cveList[0].justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0].status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0].status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId={'status-modal'}\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport { AnsibeTowerIcon } from '@patternfly/react-icons';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\n\nconst Remediation = ({ cves, systems, manyRules, addNotification: dispatchNotification }) => {\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            issues = systems.reduce((prev, { id: systemID, cve: cveID, rule }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, rules }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rules?.rule_id) {\n                    issue.id = `${issue.id}:${rules.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n\n    return (\n        <RemediationButton\n            fallback={null}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            isDisabled={cves.length === 0 || systems.length === 0}\n            onRemediationCreated={result => dispatchNotification(result.getNotification())}\n        >\n            <AnsibeTowerIcon size=\"sm\" color={'var(--pf-global--BackgroundColor--100)'} />\n            &nbsp;\n            <FormattedMessage {...messages.remediateLabel} />\n        </RemediationButton>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    addNotification: propTypes.func,\n    manyRules: propTypes.bool\n};\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n"],"names":["CvePairStatusModal","cveList","updateRef","inventoryList","intl","type","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","item","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","messages","count","length","systemName","onFailureNotification","autoDismiss","description","modalTitle","items","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","key","fieldId","label","name","isChecked","onChange","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","cves","systems","manyRules","dispatchNotification","addNotification","baseIssueTemplate","system","fallback","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","cveID","rule","issue","rule_id","mergeObjectPropertyBy","acc","rules","remediationProvider","onRemediationCreated","result","getNotification","size","connect","dispatch","notification","routerParams"],"sourceRoot":""}