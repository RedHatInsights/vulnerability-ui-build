{"version":3,"file":"js/LandingPage.1649674245321.c0908e225e029bb229bc.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Dashbar/Dashbar.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title: <EmptyStateNoCVEs secondParagraph={messages.emptyStateThereShouldBeCVEs} />\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    canCollapseAll={false}\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, intl }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    business_risk_id: attributes.business_risk_id,\n                    justification: attributes.business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    exposed_systems_count: attributes.systems_affected,\n                    justification: attributes.status_text,\n                    status_id: attributes.status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll={{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { CVES_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const [[canEditStatusOrBusinessRisk, canEditPairStatus, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const selectedRowsRawData = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedRowsRawData\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered/> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            selectedRowsRawData,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal/>\n                        <CveStatusModal/>\n                        <ColumnManagementModal\n                            appliedColumns={columns}\n                            applyColumns={newColumns => dispatch(changeColumnsCveList(newColumns))}\n                            isModalOpen={isColumnModalOpen}\n                            setModalOpen={setColumnModalOpen}\n                        />\n\n                        <Stack>\n                            <StackItem>\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized/>\n        );\n    } else {\n        return <ErrorHandler code={cves.errors.status}/>;\n    }\n\n};\n\nexport default CVEs;\n","import React, { useEffect, useState } from 'react';\nimport { Card, Grid, GridItem, StackItem, Stack, Alert, CardBody, Text } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { CVES_ALLOWED_PARAMS, impactList, CVES_DEFAULT_FILTERS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCveListParameters } from '../../../Store/Actions/Actions';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport propTypes from 'prop-types';\nimport { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';\nimport WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { useIntl } from 'react-intl';\n\nconst DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {\n    return (\n        <Card isFullHeight className=\"card-box\">\n            <CardBody>\n                <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold\">\n                    {title}\n                </Text>\n                <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs\">\n                    <a onClick={onLinkClick}>\n                        {hasIcon && (<SecurityIcon\n                            color={impactList[impact]?.iconColor}\n                            size=\"sm\"\n                            className=\"pf-u-mr-sm\" />\n                        )}\n                        {count}\n                    </a>\n                </Text>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport { DashbarItem };\n\nDashbarItem.propTypes = {\n    title: propTypes.node,\n    count: propTypes.number.isRequired,\n    impact: propTypes.oneOf(Object.keys(impactList)),\n    onLinkClick: propTypes.func.isRequired,\n    hasIcon: propTypes.bool\n};\n\nconst Dashbar = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [urlParameters] = useUrlParams([CVES_ALLOWED_PARAMS]);\n    const [dashbar, setDashbar] = useState({});\n    const [announcement, setAnnouncement] = useState({});\n    const [isDashbarLoading, setDashbarLoading] = useState(true);\n\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    // reset filters and apply passed ones\n    const applyOnly = (filterParams = {}) => {\n        const chips = buildActiveFilters(parameters);\n        removeFilters(chips, apply, true, filterParams);\n    };\n\n    useEffect(() => {\n        const fetchAnnouncements = async () => {\n            let data = await getAnnouncement();\n            setAnnouncement(data);\n        };\n\n        const fetchDashbar = async () => {\n            let data = await getDashbar();\n            setDashbar(data);\n            setDashbarLoading(false);\n        };\n\n        fetchAnnouncements();\n        fetchDashbar();\n    }, []);\n\n    return (urlParameters?.dashbar === 'true' &&\n        <Main style={{ paddingBottom: 0 }}>\n            <Stack hasGutter>\n                <StackItem>\n                    {!isDashbarLoading ? (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}\n                                    count={dashbar?.exploitable_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, known_exploit: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}\n                                    count={dashbar?.cves_with_rule}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, rule_presence: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}\n                                    count={dashbar?.critical_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '7' })}\n                                    impact=\"Critical\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}\n                                    count={dashbar?.important_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '5' })}\n                                    impact=\"Important\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                        </Grid>\n                    ) : (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                        </Grid>\n                    )}\n                </StackItem>\n                {announcement?.message && (\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}\n                        >{announcement.message}\n                        </Alert>\n                    </StackItem>\n                )}\n            </Stack>\n        </Main>\n    );\n};\n\nexport default Dashbar;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\nimport Dashbar from '../Dashbar/Dashbar';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Dashbar />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","canCollapseAll","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","messages","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","meta","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","affecting","filterByAffecting","values","join","page","label","intl","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","canExport","useState","exportPDF","setExportPDF","params","isAllExpanded","selectedRowsRawData","filter","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","attributes","business_risk_id","justification","business_risk_text","isDisabled","showStatusModal","exposed_systems_count","systems_affected","status_text","status_id","setColumnModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","isFirstLoad","setFirstLoad","isColumnModalOpen","useRbac","PERMISSIONS","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","columns","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","status","Spinner","centered","Provider","format","DownloadReport","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","expandCve","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveList","isModalOpen","setModalOpen","Stack","StackItem","column","isShown","isShownByDefault","DashbarItem","impact","onLinkClick","hasIcon","Card","isFullHeight","className","CardBody","Text","color","impactList","iconColor","size","Object","keys","useIntl","dashbar","setDashbar","announcement","setAnnouncement","isDashbarLoading","setDashbarLoading","applyOnly","fetchAnnouncements","getAnnouncement","fetchDashbar","getDashbar","Main","style","paddingBottom","hasGutter","Grid","GridItem","span","md","WithLoader","LoaderType","height","exploitable_cves","known_exploit","cves_with_rule","rule_presence","critical_cves","important_cves","message","Alert","isInline","Popover","enableFlip","position","headerContent","bodyContent","footerContent","href","target","rel","verticalAlign","Header","showBreadcrumb"],"sourceRoot":""}