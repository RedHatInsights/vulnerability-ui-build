{"version":3,"file":"js/998.c26c66d202fd3b6871b4.js","mappings":"44BAKO,IAAMA,EAAe,CACxBC,QAAS,GACTC,KAAM,GACNC,SAAU,GACVC,aAAc,IAGlB,SAASC,EAAgBJ,EAASK,GAY9B,GAXKA,EAAMF,eACPE,EAAMF,aAAe,IAGpBE,EAAMC,SACPD,EAAMC,OAAS,CACXC,IAAK,UACLC,UAAW,SAIfH,EAAMI,OAAQ,CACd,IAAIC,EAAiBL,EAAMJ,KAAKU,MAAK,qBAAGC,eACxC,UAAsDZ,GAAjDa,EAAL,KAAiBC,EAAjB,KAAuCC,EAAvC,WACIC,EAAiBX,EAAML,QAAQiB,MAAK,kBAAqB,YAArB,EAAGV,OACvCW,EAAab,EAAML,QAAQiB,MAAK,kBAAqB,SAArB,EAAGV,OAEvCW,EAAa,CAAC,EAAD,KAAMA,GAAN,IAAkBC,MAAO,CAAEC,MAAO,OAC/CJ,EAAiB,CAAC,EAAD,KACVA,GADU,IAEbK,WAAY,CAACC,EAAAA,EAAUC,EAAAA,IACvBC,eAAgB,CAACD,EAAAA,OAGrB,IAAIE,EAAgB,CAACZ,GAAJ,eAAmBK,IAAnB,OAAkCH,IAAlC,OAAkDC,GAAlD,CAAkEF,IAMnF,OAJIJ,GACAe,EAAcC,OAAO,EAAG,EAAGC,EAAAA,IAG/B,OACOtB,GADP,IAEIL,QAASyB,EACTxB,KAAMI,EAAMJ,KAAK2B,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBC,UAAyC,IAA/BzB,EAAMF,aAAa0B,EAAIE,WAK7C,OAAO1B,EAGJ,IAAM2B,EAA2B,SAAChC,GAAD,OAAa,WAAkC,IAAjCK,EAAiC,uDAAzBN,EAAckC,EAAW,uCACnF,OAAQA,EAAOC,MACX,IAAK,0BACD,OAAO9B,EAAgBJ,EAASK,GACpC,KAAK8B,EAAAA,GACD,OAAOC,EAAAA,EAAAA,IAAW/B,EAAO4B,GAC7B,IAAK,aACD,cACO5B,GADP,IAEIJ,KAAMI,EAAMJ,KAAK2B,KAAI,SAAAC,GAAG,cACjBA,GADiB,IAEpBQ,OAAQR,EAAIE,KAAOE,EAAOK,QAAQP,GAAKE,EAAOK,QAAQD,OAASR,EAAIQ,cAG/E,IAAK,wBACD,OAAOtC,EACX,QACI,OAAOM","sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { nowrap, sortable } from '@patternfly/react-table';\nimport { SYSTEMS_ADVISORY_COLUMN } from '../../Helpers/constants';\nimport { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: {}\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n        let [nameColumn, remediationColumn, ...restColumns] = columns;\n        let lastSeenColumn = state.columns.find(({ key }) => key === 'updated');\n        let tagsColumn = state.columns.find(({ key }) => key === 'tags');\n\n        tagsColumn = [{ ...tagsColumn, props: { width: 10 } }];\n        lastSeenColumn = [{\n            ...lastSeenColumn,\n            transforms: [sortable, nowrap],\n            cellTransforms: [nowrap]\n        }];\n\n        let mergedColumns = [nameColumn, ...tagsColumn, ...restColumns, ...lastSeenColumn, remediationColumn];\n\n        if (hasPatchAccess) {\n            mergedColumns.splice(3, 0, SYSTEMS_ADVISORY_COLUMN);\n        }\n\n        return {\n            ...state,\n            columns: mergedColumns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] === true\n            }))\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(state, action);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n"],"names":["initialState","columns","rows","entities","selectedRows","modifyInventory","state","sortBy","key","direction","loaded","hasPatchAccess","some","patchAccess","nameColumn","remediationColumn","restColumns","lastSeenColumn","find","tagsColumn","props","width","transforms","sortable","nowrap","cellTransforms","mergedColumns","splice","SYSTEMS_ADVISORY_COLUMN","map","row","selected","id","inventoryEntitiesReducer","action","type","ActionTypes","selectRows","isOpen","payload"],"sourceRoot":""}