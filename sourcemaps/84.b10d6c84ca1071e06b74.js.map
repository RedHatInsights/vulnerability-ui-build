{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"names":["FooterPDF","hasRule","hasExploit","style","styles","intlFormatWithBold","messages","propTypes","DownloadCVEsReport","filters","params","reportData","buttonProps","isReportDynamic","label","props","intl","useIntl","useState","loading","setLoading","setSecurityRulesPresent","setExploit","addNotification","useNotification","otherPagesPDF","data","chunkArray","otherPagesPDFLength","cvesFetch","msg","formatMessage","getCveListByAccount","DownloadReport","sort","affecting","cves","meta","userNotes","insights","chrome","auth","getUser","user","knownExploitCount","filter","attributes","known_exploit","length","map","cve","rules","status","STATUS_OPTIONS","item","value","status_id","toString","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","title","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","processData","header","includes","firstPage","firstPagePDF","splice","firstPagePDFLength","type","otherPages","cvePage","index","tablePage","page","orientation","size","fileName","component","asyncFunction","allPagesHaveTitle","footer","reportName","reportTitle","defaultProps"],"mappings":"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","file":"js/84.c0f90cba6b7b450462b6.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength, otherPagesPDFLength } from './ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, otherPagesPDFLength(reportData, params), true);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.customReportNotificationCve) });\n\n        let { data: cves, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                orientation={'landscape'}\n                size={'A4'}\n                type={''}\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"sourceRoot":""}