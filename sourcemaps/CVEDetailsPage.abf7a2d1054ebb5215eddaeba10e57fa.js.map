{"version":3,"file":"js/CVEDetailsPage.1674122030803.228b1c98e3ee0d7f3c38.js","mappings":"0PAMWA,E,mEACX,SAAWA,GACPA,EAAkC,QAAI,UACtCA,EAAmC,SAAI,UAC1C,CAHD,CAGGA,IAA6BA,EAA2B,CAAC,IAC5D,MAAMC,EAAe,CAACC,EAAOC,MACpBA,GAAWD,EAAQ,GAGxBC,EAAQC,MAAMC,YAAY,SAAgBH,EAAMI,WAAW,EAExD,MAAMC,UAA0B,YACnCC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,qBAAuB,cAC5BD,KAAKE,MAAQ,CACTC,WAAYL,EAAMK,WAE1B,CACAC,oBAAoBC,EAAYC,EAAoBC,EAAqBC,GACrE,OAAIA,GAAgD,KAAvBF,EAClBA,EAENE,GAAiD,KAAxBD,EAGvBF,EAFIE,CAGf,CACAE,oBACI,GAAIT,KAAKF,MAAMY,UAAYrB,EAAyBsB,UAAYX,KAAKF,MAAMc,iBAAkB,CACzF,MAAMC,EAAoBb,KAAKC,qBAAqBa,QACpDxB,EAAaU,KAAKF,MAAMc,iBAAkBC,EAC9C,CACJ,CACAE,mBAAmBC,GACf,GAAIhB,KAAKF,MAAMY,UAAYrB,EAAyBsB,UAChDK,EAAUJ,mBAAqBZ,KAAKF,MAAMc,iBAAkB,CAC5D,MAAMC,EAAoBb,KAAKC,qBAAqBa,QACpDxB,EAAaU,KAAKF,MAAMc,iBAAkBC,EAC9C,CACJ,CACAI,SACI,MAAMC,EAAKlB,KAAKF,OAASqB,SAAUC,EAAY,SAE/CC,EAAQ,UAAEC,EAAS,WAAEjB,EAAU,mBAAEC,EAAkB,oBAAEC,EAAmB,cAAEgB,EAAa,SAAEC,EAAQ,WAAErB,EAAU,WAAEsB,EAAU,YAAEC,EAAW,eAAEC,EAAc,WAAEC,EAAU,UAAEC,EAAS,QAAEnB,EAAO,iBAEtLE,GAAqBM,EAAIpB,GAAQ,IAAAgC,QAAOZ,EAAI,CAAC,WAAY,WAAY,YAAa,aAAc,qBAAsB,sBAAuB,gBAAiB,WAAY,aAAc,aAAc,cAAe,iBAAkB,aAAc,YAAa,UAAW,qBAC7Q,IAAIC,EAAWC,EACXZ,EAAwBL,OAET4B,IAAf5B,IACAK,EAAwBR,KAAKE,MAAMC,WACnCgB,EAAWa,IACPhC,KAAKiC,SAAS,CAAE9B,WAAY6B,IAAU,IAAMZ,EAAapB,KAAKE,MAAMC,aAAY,GAGxF,MAAM+B,EAAqBlC,KAAKI,oBAAoBC,EAAYC,EAAoBC,EAAqBC,GACnG2B,GAAoBV,GAAe,gBAAoB,SAAU,CAAEH,WAAW,IAAAc,KAAI,6BAAiCC,KAAM,SAAU,gBAAiB7B,EAAuB8B,QAAS,IAAMnB,GAAUX,IACtME,IAAYrB,EAAyBsB,UAAa,gBAAoB,OAAQ,CAAEW,WAAW,IAAAc,KAAI,kCAC3F,gBAAoB,KAAgB,CAAE,eAAe,KACzD,gBAAoB,OAAQ,CAAEd,WAAW,IAAAc,KAAI,kCAAuCb,GAAiBW,IACzG,OAAQ,gBAAoB,MAAOK,OAAOC,OAAO,CAAElB,WAAW,IAAAc,KAAI,sBAA0B5B,GAAyB,uBAA2Ba,GAAY,qBAAyBI,GAAc,uBAA2C,UAAhBC,GAA2B,wBAA4BC,GAAkB,yBAA6BC,GAAc,uBAA2BlB,IAAYrB,EAAyBsB,UAAY,uBAA2BW,IAAcxB,GACncY,IAAYrB,EAAyBoD,SAAWN,EAChD,gBAAoB,MAAO,CAAEO,IAAK1C,KAAKC,qBAAsBqB,WAAW,IAAAc,KAAI,8BAAkCO,OAAQjC,IAAYrB,EAAyBsB,WAAaH,EAAuBoC,GAAIf,GAAaL,GAChNd,IAAYrB,EAAyBsB,UAAYwB,EACzD,EAEJvC,EAAkBiD,YAAc,oBAChCjD,EAAkBkD,aAAe,CAC7BxB,UAAW,GACXjB,WAAY,GACZC,mBAAoB,GACpBC,oBAAqB,GAErBY,SAAWhB,IAAwB,EACnCkB,UAAU,EACVI,YAAY,EACZC,YAAa,UACbC,gBAAgB,EAChBC,YAAY,EACZC,UAAW,GACXnB,QAAS,U,sHCjFN,MAAMqC,EAAQ7B,IACjB,IAAI,SAAEM,EAAW,KAAI,UAAEF,EAAY,GAAE,UAAE0B,EAAY,MAAK,OAAEC,EAAM,WAAEC,EAAU,KAAEC,EAAI,OAAEC,EAAM,KAAEC,EAAI,UAAEC,EAAS,WAAEC,EAAU,aAAEC,EAAY,UAAEC,EAAS,MAAEC,EAAK,eAAEC,EAAc,QAAEC,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAEC,EAAK,MAAEtE,GAAUyB,EAAIpB,GAAQ,IAAAgC,QAAOZ,EAAI,CAAC,WAAY,YAAa,YAAa,SAAU,aAAc,OAAQ,SAAU,OAAQ,YAAa,aAAc,eAAgB,YAAa,QAAS,iBAAkB,UAAW,YAAa,WAAY,QAAS,UACxc,MAAM8C,EAAYhB,EAClB,OAAQ,gBAAoBgB,EAAWzB,OAAOC,OAAO,CAAElB,WAAW,IAAAc,KAAI,UAAa,QAAqBa,EAAQ,MAAS,QAAqBC,EAAY,MAAS,QAAqBC,EAAM,MAAS,QAAqBC,EAAQ,MAAS,QAAqBC,EAAM,MAAS,QAAqBC,EAAW,MAAS,QAAqBC,EAAY,MAAS,QAAqBC,EAAc,MAAS,QAAqBC,EAAW,MAAS,QAAqBC,EAAO,MAAS,QAAqBC,EAAgB,MAAS,QAAqBC,EAAS,MAAS,QAAqBC,EAAW,MAAS,QAAqBC,EAAU,KAASxC,GAAY7B,MAAOA,GAASsE,EAAQxB,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG/C,IAAQ,QAAqBsE,EAAO,gBAAqChC,GAAajC,GAAQ0B,EAAU,EAEpzBuB,EAAKF,YAAc,M,sHCLZ,MAAMoB,EAAY/C,IACrB,IAAI,SAAEM,EAAW,KAAI,UAAEF,EAAY,GAAE,UAAE0B,EAAY,MAAK,OAAEC,EAAM,KAAEE,EAAI,OAAEC,EAAM,KAAEC,EAAI,UAAEI,EAAS,MAAEC,EAAK,UAAEG,EAAS,MAAEE,EAAK,MAAEtE,GAAUyB,EAAIpB,GAAQ,IAAAgC,QAAOZ,EAAI,CAAC,WAAY,YAAa,YAAa,SAAU,OAAQ,SAAU,OAAQ,YAAa,QAAS,YAAa,QAAS,UAClR,MAAM8C,EAAYhB,EAClB,OAAQ,gBAAoBgB,EAAWzB,OAAOC,OAAO,CAAC,EAAG1C,EAAO,CAAEwB,WAAW,IAAAc,MAAI,QAAqBa,EAAQ,MAAS,QAAqBE,EAAM,MAAS,QAAqBC,EAAQ,MAAS,QAAqBC,EAAM,MAAS,QAAqBI,EAAW,MAAS,QAAqBC,EAAO,MAAS,QAAqBG,EAAW,KAASvC,GAAY7B,MAAOA,GAASsE,EAAQxB,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAG/C,IAAQ,QAAqBsE,EAAO,gBAAqChC,IAAcP,EAAU,EAErgByC,EAASpB,YAAc,U,kFCThB,MAAMqB,EAAqB,CAChCC,KAAM,eACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,kdACTC,QAAS,EACTC,QAAS,GAGEC,GAAe,QAAWP,GAEvC,G,0ECOA,QAPyB,SAAUhD,GAC/B,IAAI8B,EAAY9B,EAAG8B,UAAWlD,EAdI,SAAU4E,EAAGC,GAC/C,IAAIC,EAAI,CAAC,EACT,IAAK,IAAIC,KAAKH,EAAOnC,OAAOuC,UAAUC,eAAeC,KAAKN,EAAGG,IAAMF,EAAEM,QAAQJ,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjCnC,OAAO2C,sBACtB,KAAIC,EAAI,EAAb,IAAgBN,EAAItC,OAAO2C,sBAAsBR,GAAIS,EAAIN,EAAEO,OAAQD,IAC3DR,EAAEM,QAAQJ,EAAEM,IAAM,GAAK5C,OAAOuC,UAAUO,qBAAqBL,KAAKN,EAAGG,EAAEM,MACvEP,EAAEC,EAAEM,IAAMT,EAAEG,EAAEM,IAF4B,CAItD,OAAOP,CACX,CAI0C9C,CAAOZ,EAAI,CAAC,cAIlD,OAHA,IAAAoE,YAAU,WACNC,QAAQC,MAAM,sDAAsDC,OAAOzC,EAAW,KAAMlD,EAChG,GAAG,KACK,UAAM,MAAO,CAAE0B,SAAU,EAAC,SAAK,KAAM,CAAEA,SAAU,wCAAyC,UAAM,KAAM,CAAEA,SAAU,CAAC,kBAAmBwB,MAAe,SAAK,OAAQ,CAAExB,SAAU,wDAC1L,C,iLCnBIkE,EAAsC,WAStC,OARAA,EAAWnD,OAAOC,QAAU,SAASoC,GACjC,IAAK,IAAIF,EAAGS,EAAI,EAAGQ,EAAIC,UAAUR,OAAQD,EAAIQ,EAAGR,IAE5C,IAAK,IAAIN,KADTH,EAAIkB,UAAUT,GACO5C,OAAOuC,UAAUC,eAAeC,KAAKN,EAAGG,KACzDD,EAAEC,GAAKH,EAAEG,IAEjB,OAAOD,CACX,EACOc,EAASG,MAAM7F,KAAM4F,UAChC,EAUIE,EAAe,SAAUhG,GACzB,IAAIiG,GAAU,UACVC,GAAQ,UACRC,EAAMnG,EAAMkD,UAChB,OAAQ,SAAKiD,EAAKP,EAAS,CAAEpE,UAAW,IAAWxB,EAAMwB,UAAW,cAAgB,CAAEE,UAAU,SAAK,EAAA0E,SAAUR,EAAS,CAAES,SAAUrG,EAAMqG,UAAY,CAAE3E,UAAU,SAAK,EAAA4E,kBAAmBV,EAAS,CAAEK,QAASA,EAASC,MAAOA,EAAOK,QAAS,YAAaC,OAAQ,mBAAoBC,MAAO,YAAaC,gBAAgB,SAAK,IAAoBd,EAAS,CAAE1C,UAAW,sBAAuB+C,QAASA,EAASC,MAAOA,GAASlG,IAAS4C,IAAK5C,EAAM2G,UAAY3G,SACvc,EACAgG,EAAaY,UAAY,CACrBP,SAAU,SACVM,SAAU,WACVzD,UAAW,WACX1B,UAAW,YAEf,IAAIqF,EAAW,gBAAiB,SAAU7G,EAAO4C,GAAO,OAAO,SAAKoD,EAAcJ,EAAS,CAAEe,SAAU/D,GAAO5C,GAAS,IACvH6G,EAASD,UAAY,CACjBP,SAAU,SACVnD,UAAW,WACX1B,UAAW,YAEfqF,EAAS7D,aAAe,CACpBqD,UAAW,SAAK,EAAAS,SAAUlB,EAAS,CAAEpE,UAAW,aAAe,CAAEE,UAAU,SAAK,EAAAqF,QAAS,CAAEC,KAAM,UACjG9D,UAAW,WAEf,S,qOC7BI+D,EAAW,IAAIC,EAAAA,GAAAA,SACnBD,EAASE,KAAO,WACZ,IAAIA,EAAOD,EAAAA,GAAAA,SAAAA,UAAAA,KAAAA,MAAqChH,KAAM4F,WACtD,OAAOqB,EAAKC,QAAQ,MAAO,gDAC9B,EAEDF,EAAAA,GAAAA,WAAkB,CAAED,SAAAA,IAEpB,IAAMI,EAAkB,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,KAAMzG,EAA+B,EAA/BA,SAAU0G,EAAqB,EAArBA,KAASvH,GAAY,YAG5D,OAAQsH,GACJ,kBAAC,IAActH,EACX,kBAAC,IAAD,CAAawB,UAAU,oBAClBX,GAAYyG,EAAKhC,OAASkC,EAAAA,GAEnB,kBAAC,IAAD,CACIlC,OAAQkC,EAAAA,GACRC,WAAYF,EAAKG,cAAcC,EAAAA,EAAAA,UAC/BC,aAAcL,EAAKG,cAAcC,EAAAA,EAAAA,UACjCL,MAAMJ,EAAAA,EAAAA,IAAOI,GACbO,cAAY,IAGhB,0BAAMC,wBAfJ,SAACR,GAAD,MAAW,CAAES,OAAQC,IAAaV,GAAlC,CAe6BW,EAAcf,EAAAA,EAAAA,IAAOI,OAO3E,EAEDD,EAAgBrE,aAAe,CAC3BnC,UAAU,EACVsG,KAAM,MAGVE,EAAgBT,UAAY,CACxBW,KAAMW,IAAAA,UAAoB,CACtBA,IAAAA,OACAA,IAAAA,SAEJrH,SAAUqH,IAAAA,KACVZ,KAAMY,IAAAA,OAAAA,YAGV,SAAeC,EAAAA,EAAAA,IAAWd,E,2GCnB1B,QApC2B,SAACe,EAAiBrC,GAEzC,IAAMsC,GAAmBC,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUF,gBAA5B,KAAiD,GACtF,GAA8DG,EAAAA,EAAAA,eAAc,CACxEjC,QAAS,YACTE,MAAO,YACPD,OAAQ,sBAHZ,kBAASiC,GAAT,aAAwD,CAAC,EAAzD,GAASA,sBAAuBC,EAAhC,EAAgCA,oBAMhC,OAAOA,EACD,CACEA,EACI,CACIC,MAAOpB,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,eAC1BpF,KAAM,WACNO,GAAI,eACJ8F,MAAOH,EACHL,EACMA,EAAgBS,MAAM,KACtB,IAEVC,SAAU,SAACC,EAAOH,GAEd,IAAMI,EAAWvG,OAAOwG,OAAOL,GAC1BM,SAAQ,SAACF,GAAD,OAAcvG,OAAO0G,KAAKH,EAA1B,IACRnJ,WACLkG,EAAM,CAAEqD,aAAcJ,EAAUK,KAAM,GACzC,EACDC,YAAa/B,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBAEpCU,IAGN,EACT,C,iuBCQD,QAvC2B,SAACtC,GAAkE,IAA3DwD,EAA2D,uDAA3C,CAAC,EAAGC,EAAuC,uDAAtB,GAAsB,yCAAbC,GAAa,aACtFC,EAAe,GAEfH,EAAcI,gBACdD,EAAeA,EAAa/D,OAAO4D,EAAcI,cAAcd,MAAM,OAGrEU,EAAcK,OACdF,EAAeA,EAAa/D,OAAO4D,EAAcK,KAAKf,MAAM,OAGhE,IAAMgB,EAAuB,SAAAZ,GACzBlD,EAAM,EAAD,OACE0D,EAAOK,WAAa,CAAEF,KAAMX,EAAOc,KAAK,WAAQ9H,KAC/CwH,EAAOK,WAAa,CAAEH,cAAeV,EAAOc,KAAK,WAAQ9H,IAF5D,IAGDoH,KAAM,IAEb,EAEKW,EAAgB,WAClB,IAAMC,EAAQR,EAAOO,cAAgBP,EAAOO,cAAgBE,EAAAA,GAE5D,OAAOC,IAAUF,EAAOT,EAAgBY,KAASC,KAAI,kBAAuB,CAAE1B,MAAzB,EAAGA,MAA6BC,MAAhC,EAAUA,MAAV,GACxD,EAED,MAAO,CACHD,MAAOpB,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBAC1BpF,KAAM+H,EAAAA,EAAAA,SACNC,IAAK,gBACLC,aAAc,CACV1B,SAAU,SAACC,EAAOH,GACdiB,EAAqBjB,EACxB,EACDqB,MAAOD,IACPpB,MAAOc,GAGlB,C,+FCjBD,QAtBqB,SAAC3D,GAA8B,IAAvBwD,EAAuB,uDAAP,CAAC,EAEzBG,EAAiBH,EAA5BkB,UAEAC,EAAiB,SAAAzB,GACnBlD,EAAM,CAAE0E,UAAYxB,EAAO3D,OAAS,KAAO2D,EAAO0B,QAAO,SAAA/B,GAAK,MAAc,MAAVA,CAAJ,IAAmBmB,KAAK,MAAS,GAAIV,KAAM,GAC5G,EAED,MAAO,CACHV,MAAOpB,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,cAC1BpF,KAAM+H,EAAAA,EAAAA,SACNC,IAAK,SACLC,aAAc,CACV1B,SAAU,SAACC,EAAOH,GACd8B,EAAe9B,EAClB,EACDqB,MAAOW,EAAAA,GAAAA,KAAmB,SAAAC,GAAI,MAAK,CAAElC,MAAOkC,EAAKlC,MAAOC,MAAOiC,EAAKjC,MAAtC,IAC9BA,MAAQc,EAAeA,EAAab,MAAM,KAAO,IAG5D,C,6HCpBKiC,EAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,UAAxB,OACpBF,GAAcC,IACX,kBAAC,IAAD,CAAYxJ,UAAU,8BACjBuJ,GAAc,kBAAC,IAAD,CAAmBE,UAAWA,IAC5CD,GAAW,kBAAC,IAAD,CAAWC,UAAWA,IAJrB,EAQzBH,EAAiBlE,UAAY,CACzBmE,WAAYnE,IAAAA,KAAAA,WACZoE,QAASpE,IAAAA,KAAAA,WACTqE,UAAWrE,IAAAA,MAGf,S,utBCdA,IAAMsE,EAAoB,SAAC,GAAD,IAAGvL,EAAH,EAAGA,MAAO6B,EAAV,EAAUA,UAAWyJ,EAArB,EAAqBA,UAArB,OACtB,kBAAC,IAAD,CAASE,QAAS,kBAAC,IAAqBxD,EAAAA,EAAAA,0BACpC,kBAAC,IAAD,CAAOyD,MAAM,MAAMzL,MAAK,KAAOA,GAAS6B,UAAW,CAAC,aAAcA,GAAYyJ,UAAWA,GACrF,kBAAC,IAAqBtD,EAAAA,EAAAA,eAHR,EAQ1BuD,EAAkBtE,UAAY,CAC1BjH,MAAOuI,IAAAA,OACP1G,UAAW0G,IAAAA,OACX+C,UAAW/C,IAAAA,MAGf,S,sUCXMmD,EAA4B,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,cAAe/D,EAAW,EAAXA,KAE/BgE,EAGbD,EAHAE,YACAC,EAEAH,EAFAG,YACStE,EACTmE,EADAI,QAEEC,EAAiBF,GAA+B,YAAhBA,EAEtC,OACI,kBAACG,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAACC,EAAA,EAAD,CAAOC,WAAS,GAERL,GACI,kBAACM,EAAA,EAAD,CAAWzK,UAAU,cACjB,kBAACyB,EAAA,EAAD,KACI,kBAACkB,EAAA,EAAD,KAAWoD,EAAKG,cAAcC,EAAAA,EAAAA,aAA9B,KACA,kBAACxD,EAAA,EAAD,CAAUd,KAAM,CAAEV,QAAS,SACvB,kBAACuJ,EAAA,EAAD,CACIC,UAAWL,EAAQK,UACnBvL,QAASwL,EAAAA,EAAAA,eACTpF,KAAK,MAEJuE,MAOzB,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,UAAWL,EAAQK,UACnBvL,QAASwL,EAAAA,EAAAA,UACTzM,MAAO,CAAE2E,OAAQ,QAASC,MAAO,SAG7BoH,EACI,kBAACU,EAAA,EAAD,CAAa1M,MAAO,CAAE2M,UAAW,YAC7B,kBAACC,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,GAAiBf,IAEtC,kBAAC,KAAD,QAIhB,kBAACQ,EAAA,EAAD,CAAWzK,UAAU,yBAChB2F,GApCL,GA2CnB,EAEDkE,EAA0BzE,UAAY,CAClC0E,cAAe1E,IAAAA,IACfW,KAAMX,IAAAA,KAGV,SAAeuB,EAAAA,EAAAA,IAAWkD,G,sIClEboB,EAAU,CACnBC,GAAI,CACArI,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBACtBiF,EAAGrF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,mBACtBmF,EAAGvF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,wBAG9BoF,GAAI,CACA1I,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ4D,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9BsF,GAAI,CACA5I,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9BuF,GAAI,CACA7I,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBwF,EAAG5F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,wBAG9ByF,EAAG,CACC/I,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJoE,EAAG9F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,uBACtB2F,EAAG/F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,uBAG9B2F,EAAG,CACCjJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9B4F,EAAG,CACClJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9BiF,EAAG,CACCvI,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9B6F,KAAM,CACFnJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,wBACzBsB,OAAQ,CACJ,MAAO,KAKNwE,EAAU,CACnBf,GAAI,CACArI,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBACtBiF,EAAGrF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,6BACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBAG9BoF,GAAI,CACA1I,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0D,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,kBACtBkF,EAAGtF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACtBqF,EAAGzF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9B+F,GAAI,CACArJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,iBACzBsB,OAAQ,CACJ0E,EAAGpG,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBACtByF,EAAG7F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBACtBgF,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9B2F,EAAG,CACCjJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJqE,EAAG/F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBACtBmF,EAAGvF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBACtBgF,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9B4F,EAAG,CACClJ,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJqE,EAAG/F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBACtBmF,EAAGvF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBACtBgF,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,oBAG9BiF,EAAG,CACCvI,KAAMkD,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,gBACzBsB,OAAQ,CACJqE,EAAG/F,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,sBACtBmF,EAAGvF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qBACtBgF,EAAGpF,EAAAA,EAAAA,cAAmBI,EAAAA,EAAAA,qB,WC9F5BiG,EAAa,SAAC,GAA4E,IAdpEC,EAAQC,EAC5BC,EAa6BC,EAA2D,EAA1EC,cAA2CC,EAA+B,EAA9CC,cAA4BC,EAAkB,EAAlBA,MAAO7G,EAAW,EAAXA,KAC3E8G,GAAWH,EAAe,WAAgBF,GAAe,aAAe,WACxEM,EAAaJ,GAAeF,EAE5BO,GAlB0BT,EAiBVI,GAAezB,GAAauB,GAAeP,EAhB7DM,EAAM,CAAC,GADaF,EAkBSS,IAf7BT,EAAOhF,MAAM,KAAK2F,SAAQ,SAAAC,GACtB,MAAiBA,EAAK5F,MAAM,KAA5B,eAAK0B,EAAL,KAAUmE,EAAV,KACMrK,EAAOyJ,EAAavD,IAAQuD,EAAavD,GAAKlG,KAC9CuE,EAASkF,EAAavD,IAAQuD,EAAavD,GAAKtB,OAAOyF,IAAS,MAClErK,IACA0J,EAAI1J,GAAQuE,EAEnB,IACEmF,GAWP,cAFOQ,EAAaI,YAGhB,kBAAC/C,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAACO,EAAA,EAAD,KACI,kBAACuC,EAAA,EAAD,CACI9L,GAAG,eACH+L,SAAS,SACTC,SAAS,OACTC,YAAU,EACVC,cAAa,UAAKX,EAAL,YAAgB9G,EAAKG,cAAcC,EAAAA,EAAAA,yBAChDsH,YACI,kBAAC/C,EAAA,EAAD,CAAYC,UAAWL,EAAQK,UAAW+C,QAAS,EAAGC,QAAS,EAAGvO,QAASwL,EAAAA,EAAAA,cACtEkC,EACI,kBAACc,EAAA,EAAD,CACG,aAAW,mBACXxO,QAASyO,EAAAA,EAAAA,QACTC,eAAe,GACfC,MACI,CAAChI,EAAKG,cAAcC,EAAAA,EAAAA,kBAChBJ,EAAKG,cAAcC,EAAAA,EAAAA,kBAE3B6H,KAAM/M,OAAOgN,QAAQlB,IAErB,kBAAC,IAAD,MACA,kBAAC,IAAD,OA3Bf,QAiCD,kBAACmB,EAAA,EAAD,CAAOC,SAAO,EAACnO,UAAU,sBACpB6M,EADL,IACe9G,EAAKG,cAAcC,EAAAA,EAAAA,wBAC9B,kBAAC,KAAD,CACIyD,MAAM,yCACN5J,UAAU,iBAKtB,kBAAC0K,EAAA,EAAD,CAAYC,UAAWL,EAAQK,UAAWxM,MAAO,CAAE4E,MAAO,UACtD,0BAAM/C,UAAU,cAAc4M,GAC9B,0BAAMtL,GAAG,uBACJyE,EAAKG,cAAcC,EAAAA,EAAAA,QAAmB,MACtC2G,aAAA,EAAAA,EAAYsB,UAAUtB,EAAWnJ,QAAQ,KAAO,KA9CpD,QAKL,GAgDnB,EAEDyI,EAAWhH,UAAY,CACnBqH,cAAerH,IAAAA,OACfuH,cAAevH,IAAAA,OACfwH,MAAOxH,IAAAA,IACPW,KAAMX,IAAAA,KAGV,SAAeuB,EAAAA,EAAAA,IAAWyF,GCxF1B,IAAMiC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOlH,EAAV,EAAUA,MAAOuC,EAAjB,EAAiBA,QAAjB,OAChC,kBAACyD,EAAA,EAAD,CAAS9L,GAAG,UAAUmM,YAAa9D,EAAS6D,cAAc,GAAGH,SAAS,SAClEkB,SAAUC,SAASC,cAAc,mBACjC,kBAAClE,EAAA,EAAD,CAAOvK,UAAU,mBACb,kBAACyK,EAAA,EAAD,KACI,kBAACyD,EAAA,EAAD,CAAOC,SAAO,GAAEG,IAEpB,kBAAC7D,EAAA,EAAD,KACI,2BAAIrD,KARgB,EAcpCiH,EAA4BjJ,UAAY,CACpCkJ,MAAOlJ,IAAAA,IACPgC,MAAOhC,IAAAA,IACPuE,QAASvE,IAAAA,KAGb,U,qCCRMsJ,EAAwB,SAAC,GAA2F,IAAzF5E,EAAyF,EAAzFA,cAAe6E,EAA0E,EAA1EA,4BAA6BC,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,sBACpF9I,GAAO+I,EAAAA,EAAAA,KACPC,GAAaC,EAAAA,EAAAA,IAAiBlF,EAAcmF,QAAU,WAGzCC,EAMfpF,EANAqF,cAC6BC,EAK7BtF,EALAuF,4BACAC,EAIAxF,EAJAwF,OACsBC,EAGtBzF,EAHA0F,qBACuBC,EAEvB3F,EAFA4F,sBAC0BC,EAC1B7F,EADA8F,yBAGEC,EACFJ,GACAxO,OAAO0G,KAAK8H,GAAqB5G,KAAI,SAAAQ,GAAI,MAAI,CACzCD,EAAAA,GAAAA,MAAoB,SAAAkG,GAAM,OAAIA,EAAOlI,QAAUiC,EAAKhL,UAA1B,IAAsC8I,MAChEsI,EAAoBpG,GAAMhL,WAFW,IAKvCyR,EACF,kBAACvF,EAAA,EAAD,CAAOvK,UAAU,aACb,kBAACyK,EAAA,EAAD,KACI,kBAACyD,EAAA,EAAD,CAAOlO,UAAU,cACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,qBAG5B,kBAACsE,EAAA,EAAD,KAAY2E,GAA6B,MACxCT,GAA+B,kBAAClE,EAAA,EAAD,CAAWzK,UAAU,cACjD,kBAAC+P,EAAA,GAAD,CACI3Q,QAAQ,YACR4B,QAAS6N,GAER9I,EAAKG,cAAcC,EAAAA,EAAAA,qBAM9B6J,EACF,kBAACzF,EAAA,EAAD,CAAOvK,UAAU,aACb,kBAACyK,EAAA,EAAD,KACI,kBAACyD,EAAA,EAAD,CAAOlO,UAAU,cACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,YAEvBmJ,GAAU,KACX,kBAACpB,EAAA,EAAD,CAAOlO,UAAU,yBACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,oBAEvBoJ,GAAuB,MAE3BI,EAAyB,GACtB,kBAAClF,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,wBAAI7K,UAAU,2BAElB,kBAACkO,EAAA,EAAD,CAAOC,SAAO,GACTpI,EAAKG,cAAcC,EAAAA,EAAAA,8BAExB,kBAACyH,EAAA,EAAD,CACI,aAAW,iBACXE,eAAe,GACfC,MAAO,CAAChI,EAAKG,cAAcC,EAAAA,EAAAA,aAAuBJ,EAAKG,cAAcC,EAAAA,EAAAA,QACrE6H,KAAM6B,EACN7P,UAAU,yBACVZ,QAAQ,WAER,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIXuP,GAA+B,kBAAClE,EAAA,EAAD,CAAWzK,UAAU,cACjD,kBAAC+P,EAAA,GAAD,CAAQ3Q,QAAQ,YAAY4B,QAAS4N,GAAkB7I,EAAKG,cAAcC,EAAAA,EAAAA,eAKtF,OACI,kBAACiE,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAACC,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACwF,EAAA,EAAD,CAAOzF,WAAS,GACZ,kBAAC0F,EAAA,EAAD,KACI,kBAAC,EAAD,CACI5B,MAAOvI,EAAKG,cAAcC,EAAAA,EAAAA,mBAC1BiB,MACI,kBAACsD,EAAA,EAAD,CAAYC,UAAWL,EAAQK,UAAWxM,MAAO,CAAE4E,MAAO,UACrDmM,GAETvF,QAASmG,KAGjB,kBAACI,EAAA,EAAD,CAAWlQ,UAAU,cACjB,kBAAC,EAAD,CACIsO,MAAOvI,EAAKG,cAAcC,EAAAA,EAAAA,aAC1BwD,QAASqG,EACT5I,MACI,kBAACsD,EAAA,EAAD,CAAYC,UAAWL,EAAQK,UAAWxM,MAAO,CAAE4E,MAAO,UACtD,8BACK4M,EAAyB,GACtB,kBAAC,KAAD,CAAyB/F,MAAM,yCAChC,IACF0F,SAS7B,kBAAC7E,EAAA,EAAD,KACI,kBAACyD,EAAA,EAAD,CAAOlO,UAAU,aAAamO,SAAO,GAChCpI,EAAKG,cAAcC,EAAAA,EAAAA,SAExB,kBAACuE,EAAA,EAAD,CAAYC,UAAWL,EAAQK,UAAWxM,MAAO,CAAE4E,MAAO,UACtD,0BAAMzB,GAAG,kBAAkBnD,MAAO,CAAEyL,MAAOmF,EAAWnF,QAClD,kBAACuG,EAAA,EAAD,CAAQlB,OAAQF,EAAWT,MAAO8B,UAAQ,OAKtD,kBAAC3F,EAAA,EAAD,KACI,kBAAC,EAAD,CACIgC,cAAe3C,EAAc2C,cAC7BE,cAAe7C,EAAc6C,cAC7BC,OAAOyD,EAAAA,EAAAA,GAAevG,EAAcwG,YAAaxG,EAAcyG,gBAhDvE,GAuDnB,EAED7B,EAAsBtJ,UAAY,CAC9B0E,cAAe1E,IAAAA,IACfuJ,4BAA6BvJ,IAAAA,KAC7BwJ,gBAAiBxJ,IAAAA,KACjByJ,sBAAuBzJ,IAAAA,MAG3B,U,iGCjKIhB,GAAsC,WAStC,OARAA,GAAWnD,OAAOC,QAAU,SAASoC,GACjC,IAAK,IAAIF,EAAGS,EAAI,EAAGQ,EAAIC,UAAUR,OAAQD,EAAIQ,EAAGR,IAE5C,IAAK,IAAIN,KADTH,EAAIkB,UAAUT,GACO5C,OAAOuC,UAAUC,eAAeC,KAAKN,EAAGG,KACzDD,EAAEC,GAAKH,EAAEG,IAEjB,OAAOD,CACX,EACOc,GAASG,MAAM7F,KAAM4F,UAChC,EAkBIkM,GAAiB,CACjB,EAAG,CAAEC,MAAM,UAAK,GAAAC,oBAAqB,CAAC,GAAI5K,KAAM,MAAO8D,MAAO,QAC9D,EAAG,CAAE6G,MAAM,UAAK,GAAAE,WAAY,CAAC,GAAI7K,KAAM,WAAY8D,MAAO,QAC1D,EAAG,CAAE6G,MAAM,UAAK,GAAAG,kBAAmB,CAAC,GAAI9K,KAAM,YAAa8D,MAAO,UAClE,EAAG,CAAE6G,MAAM,UAAK,GAAAI,iBAAkB,CAAC,GAAI/K,KAAM,WAAY8D,MAAO,QAMpE,SAJoB,SAAUhK,GAC1B,IAAIkR,EAAKlR,EAAGwH,MAAOA,OAAe,IAAP0J,EAAgB,EAAIA,EAAIhL,EAAOlG,EAAGkG,KAAMiL,EAAWnR,EAAGmR,SAAUC,EAAOpR,EAAGoR,KAAMxS,EAxBzE,SAAU4E,EAAGC,GAC/C,IAAIC,EAAI,CAAC,EACT,IAAK,IAAIC,KAAKH,EAAOnC,OAAOuC,UAAUC,eAAeC,KAAKN,EAAGG,IAAMF,EAAEM,QAAQJ,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjCnC,OAAO2C,sBACtB,KAAIC,EAAI,EAAb,IAAgBN,EAAItC,OAAO2C,sBAAsBR,GAAIS,EAAIN,EAAEO,OAAQD,IAC3DR,EAAEM,QAAQJ,EAAEM,IAAM,GAAK5C,OAAOuC,UAAUO,qBAAqBL,KAAKN,EAAGG,EAAEM,MACvEP,EAAEC,EAAEM,IAAMT,EAAEG,EAAEM,IAF4B,CAItD,OAAOP,CACX,CAcuH9C,CAAOZ,EAAI,CAAC,QAAS,OAAQ,WAAY,SAC5J,OAAQ,UAAK,GAAAsO,MAAO9J,GAAS,CAAC,EAAG4M,EAAMxS,EAAO,CAAEoL,MAAO4G,GAAepJ,GAAOwC,MAAO6G,MAAOM,GAAYP,GAAepJ,GAAOqJ,MAAQ,CAAEvQ,SAAU4F,GAAQ0K,GAAepJ,GAAOtB,OACnL,E,gECGMmL,GAAc,SAAC,GAA8D,IAA5DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,+BAAgCrL,EAAW,EAAXA,KAC9DsL,GAAWC,EAAAA,EAAAA,MAEXC,EAAc,GAAGpN,OAAO+M,GAAOM,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,iBAAmBF,EAAEE,gBAAlC,IAM1C,OACIJ,GAAeA,EAAY1I,KAAI,SAACT,EAAMwJ,GAAP,aAC3BxJ,EAAKyJ,SACD,kBAACC,EAAA,EAAD,CAAM9R,UAAU,WAAW+I,IAAKX,EAAK2J,QAASC,OAAQ,sBAAwBJ,GAC1E,kBAACtT,GAAA,EAAD,CAAmBS,WACf,kBAACkR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWlQ,UAAU,cACjB,kBAAC6K,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,IACb,kBAACiH,GAAA,EAAD,CAAWjS,UAAU,eACpBoI,EAAK6B,eAIlB,kBAACiG,EAAA,EAAD,CAAW5O,GAAG,iCACT8G,EAAK2J,SACF,kBAAClH,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACIzJ,GAAG,0BACHN,QAAS,SAAAuG,GAvBf,IAAC2K,IAwBmC9J,EAAK2J,QAvBvEV,EAASD,EAA+B,CAAEhJ,KAAM8J,KAwBR3K,EAAM4K,iBACT,EACDzQ,UAAWsJ,EAAAA,EAAAA,OAEX,kBAAC,MAAD,CACIjC,IAAKX,EAAK2J,QACVK,GAAE,gBAAWjB,EAAX,kBAA6B/I,EAAK2J,UAGhChM,EAAKG,cACDC,EAAAA,EAAAA,wBACA,CACIkM,MAAK,UAAEjK,EAAKuJ,wBAAP,SAA4B,UAUrE,kBAACW,EAAA,EAAD,CAAUtS,UAAU,kBAChB,kBAACuS,EAAA,EAAD,CAAM/H,WAAS,GACX,kBAACgI,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACnI,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAAC5E,GAAA,EAAD,CAAiBC,KAAMsC,EAAKyJ,WAEhC,kBAACpH,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACoF,EAAA,EAAD,KACK7H,EAAKuK,aACF,kBAACzC,EAAA,EAAD,KACI,kBAAChC,EAAA,EAAD,CAAOlO,UAAU,oBACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,SAExB,kBAACyM,EAAA,EAAD,CACIjJ,QAAS1I,OAAOwG,OAAOoL,EAAAA,IAAgBzK,EAAKuK,YAAc,IAE1D,kBAAC,GAAD,CACIvL,MAAOgB,EAAKuK,YACZ3S,UAAU,qBAK1B,kBAACkQ,EAAA,EAAD,KACI,kBAAChC,EAAA,EAAD,CAAOlO,UAAU,oBACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,eAExB,kBAACyM,EAAA,EAAD,CACIjJ,QAASmJ,EAAAA,GAAuB1K,EAAK2K,cAEpCC,EAAAA,GAAqB5K,EAAK2K,eAGnC,kBAAC7C,EAAA,EAAD,KACI,kBAAChC,EAAA,EAAD,CAAOlO,UAAU,oBACZ+F,EAAKG,cAAcC,EAAAA,EAAAA,mBAExB,kBAAC8J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACM9H,EAAK6K,eAGC,kBAAC,EAAAC,SAAD,KACI,kBAAC,MAAD,CACIlT,UAAU,+BAEb+F,EAAKG,cAAcC,EAAAA,EAAAA,KACpB,kBAACyM,EAAA,EAAD,CACIjJ,QAAS5D,EAAKG,cACVC,EAAAA,EAAAA,4BAGJ,kBAAC,KAAD,CACInG,UAAU,6CAbxB+F,EAAKG,cAAcC,EAAAA,EAAAA,KAqB7B,kBAAC+J,EAAA,EAAD,CAAWlQ,UAAU,cAChBoI,EAAK+K,iBACF,kBAACpI,EAAA,EAAD,KACI,kBAAC,MAAD,CACI/K,UAAU,4BAEb+F,EAAKG,cAAcC,EAAAA,EAAAA,uBAYhDiC,EAAKgL,eACL,kBAAC3I,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACI/K,UAAU,aACV0B,UAAWsJ,EAAAA,EAAAA,GAEX,uBACIhL,UAAU,UACVqT,KAAI,UAAKC,EAAAA,GAAL,YAAkBlL,EAAKgL,eAC3BG,OAAO,SACPC,IAAI,uBAGAzN,EAAKG,cAAcC,EAAAA,EAAAA,sBAEvB,kBAAC,MAAD,CAAqBnG,UAAU,sBAS3D,kBAACwS,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC7H,EAAA,EAAD,KACI,kBAACqD,EAAA,EAAD,KACKnI,EAAKG,cAAcC,EAAAA,EAAAA,iBAExB,kBAAC4E,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,EAAgBhL,UAAU,8BACtCmR,EADL,KACiBpL,EAAKG,cAAcC,EAAAA,EAAAA,SADpC,IAGQiC,EAAKqL,gBACAtK,QAAO,SAAAuK,GAAG,OAAIA,IAAQvC,CAAZ,IACVtI,KAAI,SAAC6K,EAAKC,GAAN,OACD,uBACI3T,UAAU,sBACV+I,IAAK4K,EACLN,KAAI,UAAKO,EAAAA,GAAL,YAAkBF,IAErBA,EANJ,IASJG,QAAO,SAACC,EAAM7G,GAAP,MAAgB,CAAC6G,EAAM,KAAM7G,EAA7B,GAAoC,CAAC,WAvK1D,GAmLtC,EAEDgE,GAAYzP,aAAe,CACvB0P,MAAO,IAGXD,GAAY7L,UAAY,CACpBW,KAAMW,IAAAA,IACNwK,MAAOxK,IAAAA,MACPyK,SAAUzK,IAAAA,OACV0K,+BAAgC1K,IAAAA,MAGpC,UAAeC,EAAAA,EAAAA,IAAWsK,I,gBC5Ob8C,GAAsB,WAC/B,IAAMhO,GAAO+I,EAAAA,EAAAA,KACb,OACI,kBAACgD,EAAA,EAAD,CAAM9R,UAAU,WAAWgS,OAAO,sBAC9B,kBAAC1T,GAAA,EAAD,CAAmBS,WACf,kBAAC8L,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,IACb,kBAACtB,GAAA,EAAD,CAAmB1J,UAAU,eAC5B+F,EAAKG,cAAcC,EAAAA,EAAAA,uBAI5B,kBAACmM,EAAA,EAAD,KACKvM,EAAKG,cAAcC,EAAAA,EAAAA,2BAKvC,E,YCHK6N,GAAmB,SAAC,GAA2C,IAAzC7C,EAAyC,EAAzCA,SAAU8C,EAA+B,EAA/BA,yBAC5B5C,GAAWC,EAAAA,EAAAA,MACXvL,GAAO+I,EAAAA,EAAAA,KAMb,OACImF,EAA2B,GAC3B,kBAACnC,EAAA,EAAD,CAAM9R,UAAU,WAAWgS,OAAO,sBAC9B,kBAAC1T,GAAA,EAAD,CAAmBS,WACf,kBAACkR,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWlQ,UAAU,cACjB,kBAAC6K,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,IACb,kBAACkJ,GAAA,EAAD,CAAoBlU,UAAU,eAC7B+F,EAAKG,cAAcC,EAAAA,EAAAA,0BAIhC,kBAAC+J,EAAA,EAAD,CAAW5O,GAAG,iCACV,kBAACuJ,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CACIzJ,GAAG,0BACHN,QAAS,SAAAuG,GApBjC8J,GAASD,EAAAA,EAAAA,IAA+B,CAAEhJ,KAAM+L,EAAAA,MAsBpB5M,EAAM4K,iBACT,EACDzQ,UAAWsJ,EAAAA,EAAAA,OAEX,kBAAC,MAAD,CACIoH,GAAE,gBAAWjB,IAGTpL,EAAKG,cACDC,EAAAA,EAAAA,wBACA,CACIkM,MAAO4B,UAUvC,kBAAC3B,EAAA,EAAD,CAAUtS,UAAU,kBACf+F,EAAKG,cAAcC,EAAAA,EAAAA,yBAAmC,CAAEiO,UAAU,MAKtF,EAEDJ,GAAiB5O,UAAY,CACzB+L,SAAUzK,IAAAA,OACVuN,yBAA0BvN,IAAAA,QAG9B,YCzEA,IAAM2N,GAAwB,SAAC,GAMzB,IALFC,EAKE,EALFA,KACAlD,EAIE,EAJFA,+BACAzC,EAGE,EAHFA,4BACAC,EAEE,EAFFA,gBACAC,EACE,EADFA,sBAEA,OACI,kBAAC0D,EAAA,EAAD,CAAM/H,WAAS,GACX,kBAACgI,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC,EAAD,CAA2B5I,cAAewK,EAAKA,QAGnD,kBAAC9B,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,GAAI1S,UAAU,yBAC/B,kBAAC,EAAD,CACI8J,cAAewK,EAAKA,KACpB3F,4BAA6BA,EAC7BC,gBAAiBA,EACjBC,sBAAuBA,KAI3ByF,EAAKA,KAAKC,eAAiB,kBAACR,GAAD,MAG/B,kBAAC,GAAD,CACI3C,+BAAgCA,EAChCD,SAAUmD,EAAKA,KAAKnD,SACpBD,MAAOoD,EAAKA,KAAKpD,QAErB,kBAAC,GAAD,CACIC,SAAUmD,EAAKA,KAAKnD,SACpB8C,yBAA0BK,EAAKA,KAAKE,8BAInD,EAEDH,GAAsBjP,UAAY,CAC9BkP,KAAMlP,IAAAA,OACNgM,+BAAgChM,IAAAA,KAChCuJ,4BAA6BvJ,IAAAA,KAC7BwJ,gBAAiBxJ,IAAAA,KACjByJ,sBAAuBzJ,IAAAA,MAG3B,Y,u0BClCO,IAAMqP,GAA6B,SAAC,GAerC,IAdFC,EAcE,EAdFA,QACAC,EAaE,EAbFA,QACAC,EAYE,EAZFA,iBACAC,EAWE,EAXFA,aACAC,EAUE,EAVFA,kBACAC,EASE,EATFA,iBACAC,EAQE,EARFA,UACAC,EAOE,EAPFA,gBACAC,EAME,EANFA,cACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,kBACAC,EAEE,EAFFA,UACApV,EACE,EADFA,SAEM6F,GAAO+I,EAAAA,EAAAA,KACLvK,EAA6E6Q,EAA7E7Q,MAAOqK,EAAsEwG,EAAtExG,gBAAiB2G,EAAqDH,EAArDG,aAAcC,EAAuCJ,EAAvCI,eAAgBC,EAAuBL,EAAvBK,mBACtDC,EAAmBhB,EAAnBgB,SAAUC,EAASjB,EAATiB,KAEZC,EAAoBf,EAAa1L,QAAO,SAAA0M,GAAM,OAAIA,EAAOC,cAAgBC,EAAAA,EAA3B,IAE9CC,EAAe,CAAC,IAAJ,gBACXX,EAAoB,CAAC,CACpBlO,MAAOpB,EAAKG,cAAcC,EAAAA,EAAAA,YAC1BnF,QAAS,kBAAM4N,EAAgB,CAACgG,GAAmBC,EAA1C,EACTrW,MAAO,CAAEyX,YAAanB,KACrB,IALS,CAMd,CACI3N,MAAOpB,EAAKG,cAAcC,EAAAA,EAAAA,4BAC1BnF,QAAS,kBAAMyU,GAAmB,EAAzB,KAIXS,GAAeC,EAAAA,GAAAA,GACjB,SACAhQ,EAAAA,EAAAA,kBACAA,EAAAA,EAAAA,mBACAgP,EAAWhM,OACX5E,GAGE6R,GAAiBD,EAAAA,GAAAA,GACnB,WACAhQ,EAAAA,EAAAA,SACAA,EAAAA,EAAAA,uBACAgP,EAAWkB,SACX9R,GAGE+R,GAAkBC,EAAAA,GAAAA,GACpBpB,EAAWvN,aACXrD,GAGEiS,GAAkBC,EAAAA,GAAAA,IAAc,CAClC/B,QAAAA,EACAG,aAAAA,EACAC,kBAAAA,EACAS,aAAAA,EACAmB,cAAe,SAAAC,GAAG,OAAIC,EAAAA,EAAAA,IAA4B,GAAD,IAAGtV,GAAIqT,GAAYQ,GAAewB,GAAjE,IAStB,OANIzB,GACIR,EAAQJ,KAAKnL,QAAO,SAAA0N,GAAG,YAAmBpW,IAAfoW,EAAInW,MAAR,IAA8BoD,OAAS,GAC9DkR,EAAUN,GAAS,GAIpB,kBAAC,EAAAxB,SAAD,KACH,kBAAC4D,GAAA,EAAD,CACI9W,UAAU,+BACV+W,aAAczB,GAAa,GAAJ,CACnBW,WAAgC,IAApBN,EAAKqB,WACjBhF,OAAQ,WACL+E,EAAAA,GAAAA,IAAa,CAAEvB,eAAAA,KAEtByB,gBAAkBvB,GACd,kBAACwB,GAAA,EAAD,CACIC,WAAS,EACTlB,WAAoC,IAAxBpB,EAAa/Q,OACzBsT,QAASxB,EACTyB,KAAM,CAAE/V,GAAIqT,EAASzD,MAAO6D,KAGpCuC,cAAe,CACXC,QAASvB,EACTwB,cAAe,CAAExF,OAAQ,oBAE7ByF,oBAAqB,CACjBC,SAASC,EAAAA,GAAAA,IAAmB,GAAD,GAAMxC,GAAcJ,GAC/C6C,SAAU,SAACC,EAAGC,GAAJ,OAAcC,EAAAA,GAAAA,IAAcD,EAAOvT,EAAnC,EACVyT,YAAajS,EAAKG,cAAcC,EAAAA,EAAAA,eAEpC8R,WAAYzB,EACZ0B,aAAc,CACVzP,MAAO,CACHyN,GACAiC,EAAAA,GAAAA,GACI5T,EACA4Q,EACAJ,EACA,CACIzM,WAAW,EACXE,cAAeE,EAAAA,GAAAA,QAA6B,SAAAW,GAAI,MAAmB,SAAfA,EAAKjC,KAAT,OAGxDgR,EAAAA,GAAAA,GAAa7T,EAAO4Q,GACpBiB,GAZC,gBAaEE,GAbF,EAcD+B,EAAAA,GAAAA,GAAkB9T,EAAO4Q,MAGjCH,UAAWC,EAAkB,CACzBC,cAAAA,EACAlU,QAAS,kBAAMgU,EAAUN,EAASQ,EAAzB,EACTe,WAAgC,IAApBN,EAAKqB,iBACjBvW,IAEPP,EAER,EAEDuU,GAA2BrP,UAAY,CACnCsP,QAAS4D,EAAAA,GACTnD,WAAY/P,IAAAA,OACZuP,QAASvP,IAAAA,OACTwP,iBAAkBxP,IAAAA,OAClB2P,iBAAkB3P,IAAAA,OAClB4P,UAAW5P,IAAAA,KACX6P,gBAAiB7P,IAAAA,KACjB8P,cAAe9P,IAAAA,KACfyP,aAAczP,IAAAA,MACd0P,kBAAmB1P,IAAAA,OACnBlF,SAAUkF,IAAAA,KACVgQ,QAAShQ,IAAAA,MAAgB,CACrBb,MAAOa,IAAAA,KACPmQ,aAAcnQ,IAAAA,KACdwJ,gBAAiBxJ,IAAAA,KACjBoQ,eAAgBpQ,IAAAA,KAChBqQ,mBAAoBrQ,IAAAA,OAExBiQ,kBAAmBjQ,IAAAA,KACnBkQ,UAAWlQ,IAAAA,M,knBChIf,IAAMmT,GAAsB,SAAC,GAGvB,IAFFxS,EAEE,EAFFA,KAAM4O,EAEJ,EAFIA,QAASC,EAEb,EAFaA,iBAAkBG,EAE/B,EAF+BA,iBACjCE,EACE,EADFA,gBAAiBI,EACf,EADeA,kBAAmBC,EAClC,EADkCA,UAAWkD,EAC7C,EAD6CA,aAAcC,EAC3D,EAD2DA,iBAE7D,GAEsBC,EAAAA,GAAAA,IAAQ,CAC1BC,EAAAA,GAAAA,WACD,aAJH,eACIC,GADJ,kBAEAC,EAFA,KAMMxH,GAAWC,EAAAA,EAAAA,MACjB,GAA0CwH,EAAAA,EAAAA,WAAS,GAAnD,eAAO5D,EAAP,KAAsB6D,EAAtB,KACA,GAAsCD,EAAAA,EAAAA,WAAS,kBAAM,kBAAM,IAAN,CAAN,IAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAAsCC,EAAAA,EAAAA,IAAaC,EAAAA,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAgDP,EAAAA,EAAAA,WAAS,GAAzD,eAAOQ,EAAP,KAA0B7D,EAA1B,KAEMhN,GAAQ3B,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAUiH,OAAQ,EAApC,GAAwCuL,EAAAA,IAC5DvC,GAAalQ,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUyS,KAA5B,IACzB7D,GAAO7O,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAU4O,IAA5B,IACnBzR,GAAQ4C,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAU7C,QAAS,CAAC,CAAtC,IACpB2Q,GAAe/N,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAU8N,eAAgB,EAA5C,IAC3BC,GAAoBhO,EAAAA,EAAAA,KAAY,kBAAGC,EAAH,EAAGA,SAAH,iBAAkBA,aAAlB,EAAkBA,EAAU+N,yBAA5B,QAAiD,CAAjD,IAChCY,GAAW5O,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAA,EAAAA,EAAU0S,UAAU,CAAtC,IAEvBtE,GAAarO,EAAAA,EAAAA,KACf,qBAAG4S,oBAA8CvE,UAAjD,GACAoE,EAAAA,IAEEI,IAAU7S,EAAAA,EAAAA,KACZ,qBAAG4S,oBAA8CC,OAAjD,IAGEpV,GAAQ,SAACqV,GAAD,OAAYvI,GAASD,EAAAA,EAAAA,IAA+BwI,GAApD,GAId5V,EAAAA,EAAAA,YAAU,kBAAMO,GAAM6U,EAAZ,GAA4B,KAEtCpV,EAAAA,EAAAA,YAAU,kBAAMqV,EAAa,SAAKlE,GAAeQ,GAAvC,GAAgD,CAAC0D,EAAclE,EAAYQ,KAErF3R,EAAAA,EAAAA,YAAU,WACN,OAAO,WACHqN,GAASwI,EAAAA,EAAAA,MACZ,CACJ,GAAE,CAACxI,IAEJ,IAUMzC,GAAkB,SAACyI,EAAMyC,GAC3Bb,GACI,kBAAM,kBACF,kBAACc,GAAA,EAAD,CACIC,QAAS3C,EACT4C,UAAW,WACPxB,IACApH,GAAS6I,EAAAA,EAAAA,IAAgBvF,GAC5B,EACDwF,cAAeL,EACf/Y,KAAK,kBARP,CAAN,GAWP,EASKqZ,IAAcC,EAAAA,GAAAA,GAChBC,GAAAA,GACA,CACIhZ,GAAIqT,EACJ4F,WAAYC,EAAAA,KAIpB,IAAwC1B,EAAAA,EAAAA,UAAS,GAAjD,iBAAO2B,GAAP,MAAsBC,GAAtB,OACA1W,EAAAA,EAAAA,YAAU,kBAAM0W,GAAeD,GAAgB,EAArC,GAAyC,CAACd,KASpD,OACI,kBAACpP,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAMrJ,UAAWsJ,EAAAA,EAAAA,IACZjF,EAAKG,cAAcC,EAAAA,EAAAA,mBAIhC,kBAACsE,EAAA,EAAD,KACKoO,EAAqB,kBAACtT,GAAA,EAAD,CAASoV,UAAQ,IACnCzW,SAAAA,EAAO0W,WAAahC,EACd,kBAACiC,GAAA,EAAD,CAAcC,KAAM5W,aAAF,EAAEA,EAAO6W,YAC3B,kBAACC,GAAA,EAAD,CACEC,uBAAqB,EACrBC,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,kBACPC,GAAAA,EAAAA,SAAA,MACOD,GACCE,EAAAA,GAAAA,GAAyBC,EAAAA,IADT,IAGZzT,KAAM0T,OAAOpG,EAAWtN,MAAQ,GAChC2T,QAAS,IACLrG,EAAW3D,MAAQ,CACnBiK,OAAQ,CACJ1S,IAAKoM,EAAW3D,KAAK5L,QAAQ,KAAM,IACnC5D,UAAWmT,EAAW3D,KAAKkK,MAAM,MAAQ,OAAS,WAMzE,EACDC,WAAY,CACRC,gBAAgB,EAChBC,cAAc,EACdC,eAAgB,kBAAMzG,GAAqB2B,IACvC+E,EAAAA,EAAAA,IAA6BnN,GAAiBgG,EADlC,EAEhBxV,QAASyO,EAAAA,EAAAA,SAEbmO,gBAAiB,CACb/F,YAAae,GAEjBiF,cAAY,EACZC,YAAU,EACV9a,IAAKoX,EACL2D,aAAW,EACXpT,IAAI,YACJqT,cAAe,CACXC,oBAAqB,MACdlH,IAGXmH,WAAYrH,EACZsH,eAAgB9B,GAChBd,QAAS,SAAA6C,GAAc,OA7D1BC,EA6D2CD,EA5DrD7C,GACFxQ,QAAO,SAAAuT,GAAM,uBAAIA,EAAOC,eAAX,QAAsBD,EAAOE,gBAA7B,IACb/T,KAAI,SAAA6T,GAAM,gBAAUD,EAAiBI,MAAK,gBAAG9T,EAAH,EAAGA,IAAH,OAAa2T,EAAO3T,MAAQA,CAA5B,KAAqC2T,EAArE,IAHE,IAAAD,CA6D0B,EACvBrC,YAAaA,GACb0C,YAA4B,IAAf9F,EACb+F,YAA4B,IAAf/F,EACbgG,cAAe,SAACC,EAAItJ,EAAIjT,EAAT,OAAmBY,EAAnB,EAAmBA,GAAnB,OAA4B+P,GAAS6L,EAAAA,EAAAA,IAAU5b,EAAIZ,GAAnD,EACfyc,YAAa,CAAEC,KAAK,GACpBC,eAAgB,kBAAC,KAAD,OAEhB,kBAAC5I,GAAD,CACIC,QAAS,CAAEJ,KAAM7L,EAAOkN,KAAM,CAAEqB,WAAAA,GAActB,SAAAA,GAC9CP,WAAYA,EACZR,QAASA,EACTK,UA3FV,SAACN,EAASQ,GACxBR,EAAQJ,KAAKtH,SAAQ,SAAA6J,GACjBxF,GAAU6L,EAAAA,EAAAA,IAAUrG,EAAIvV,IAAK4T,GAChC,IACD6D,GAAkB7D,EACrB,EAuF2BD,gBAAiBA,EACjBC,cAAeA,EACfL,aAAcA,EACdC,kBAAmBA,EACnBF,iBAAkBA,EAClBG,iBAAkBA,EAClBK,QAAS,CACLI,eA5HT,SAAA8H,GACnBC,GAAAA,EAAAA,KACIC,EAAAA,GADJ,IAEMlc,GAAIqT,GAAYQ,GAClBmI,EACA,mBACA,SAAAG,GAAY,OAAIpM,GAASqM,EAAAA,GAAAA,IAAgBD,GAA7B,IAA6C,kBAAMpM,GAASsM,EAAAA,GAAAA,MAAf,GAEhE,EAqH+BpZ,MAAAA,GACAgR,aA1IX,SAACqI,EAASC,GAAV,OAAwBxM,GAASyM,EAAAA,EAAAA,IAAWF,EAASC,GAArD,EA2IWjP,gBAAAA,GACA6G,mBAAAA,GAEJJ,kBAAmBA,EACnBC,UAAWA,GAEV0D,GAAe,kBAACA,EAAD,MAChB,kBAAC+E,GAAA,EAAD,CACIC,eAAgBrE,GAChBsE,aAAc,SAAAC,GAAU,OAAI7M,GAAS8M,EAAAA,EAAAA,IAAuBD,GAApC,EACxBE,YAAa9E,EACb+E,aAAc5I,OAOjD,EAED8C,GAAoBnT,UAAY,CAC5BW,KAAMX,IAAAA,OACNuP,QAASvP,IAAAA,OACTwP,iBAAkBxP,IAAAA,OAClB2P,iBAAkB3P,IAAAA,MAClB6P,gBAAiB7P,IAAAA,KACjBiQ,kBAAmBjQ,IAAAA,KACnBkQ,UAAWlQ,IAAAA,KACXoT,aAAcpT,IAAAA,OACdqT,iBAAkBrT,IAAAA,MAGtB,UAAeuB,EAAAA,EAAAA,IAAW4R,I,uCCvNbnO,GAAiBkU,IAAAA,cAAoB,CAAE3T,WAAW,IA4J/D,SA1JuB,WAAM,QACnB0G,GAAWC,EAAAA,EAAAA,MACXkH,EAAe8F,IAAAA,YACf5C,GAAQ6C,EAAAA,GAAAA,MACRxY,GAAO+I,EAAAA,EAAAA,KAEb,GAAkH4J,EAAAA,GAAAA,IAAQ,CACtHC,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,4BACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,2BAJJ,iCAAQtD,EAAR,KAA2B1G,EAA3B,KAAwD2G,EAAxD,KAAmEkJ,EAAnE,KAAiGC,EAAjG,KAOA,GAAkB3F,EAAAA,EAAAA,UAAS4C,EAAM9B,OAAOlG,KAAjCiB,GAAP,eACA,GAAyCmE,EAAAA,EAAAA,WAAS,kBAAM,kBAAM,IAAN,CAAN,IAAlD,eAAO4F,EAAP,KAAsBC,EAAtB,KACA,GAAsC7F,EAAAA,EAAAA,WAAS,kBAAM,kBAAM,IAAN,CAAN,IAA/C,eAAOE,EAAP,KAAoBC,EAApB,KAEM2F,GAAU9X,EAAAA,EAAAA,KACZ,qBAAG4S,oBAA8C3K,UAAjD,IAEEA,GAAa8P,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,IAAqBF,EAA3B,GAAqC,CAACA,IAC3D5H,GAAalQ,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,aAAlB,EAAkBA,EAAUyS,KAA5B,KAE/BxV,EAAAA,EAAAA,YAAU,WACNqN,GAAS6I,EAAAA,EAAAA,IAAgBvF,GAC5B,GAAE,CAACtD,EAAUsD,IAEd,IAAM8D,EAAmB,kBACrBpH,GAASwI,EAAAA,EAAAA,OACTrB,EAAahZ,QAAQuf,cAAe,CAAElX,KAAM,GAFvB,EAKnBgH,EAAwB,SAAAwI,GAC1BsH,GACI,kBAAM,kBACF,kBAACK,GAAA,EAAD,CAAmBC,MAAI,EAAC5H,KAAMA,EAAM4C,UAAW,kBAAM5I,GAAS6I,EAAAA,EAAAA,IAAgBvF,GAA/B,GAD7C,CAAN,GAGP,EAEK/F,EAAkB,SAAAyI,GACpB4B,GACI,kBAAM,kBACF,kBAACiG,GAAA,EAAD,CACI7H,KAAMA,EACN4C,UAAW,SAAAkF,GACP9N,GAAS6I,EAAAA,EAAAA,IAAgBvF,IACzBwK,GAA0B1G,GAC7B,EACDpD,kBAAmBA,GAPrB,CAAN,GAUP,GAEDrR,EAAAA,EAAAA,YAAU,WACN,OAAO,WACHqN,GAAS+N,EAAAA,EAAAA,OACT/N,GAASsM,EAAAA,GAAAA,MACZ,CACJ,GAAE,CAACtM,IAEJ,IAAQnN,EAAgB6K,EAAhB7K,MAAOoQ,EAASvF,EAATuF,KAETM,EAAmB,CACrBtT,GAAIqT,EACJ1L,UAAW8F,EAAWuF,KAAKrL,UAC3BoW,cAAetQ,EAAWuF,KAAK9E,qBAC/B8P,sBAAuBtI,GAAc,GAGnCuI,EAAyB,CAC3BC,iBAAkBzQ,EAAWuF,KAAKkL,iBAClCle,GAAIqT,EACJ0K,cAAetQ,EAAWuF,KAAKjF,6BAG7BoQ,EAAa,EACfC,EAAAA,GAAAA,IAA0B7Q,EAAuB,CAAC0Q,KAClDI,EAAAA,GAAAA,IAAoB/Q,EAAiB,CAACgG,KAElC1D,EAAUoD,EAAVpD,MACF6D,EAAmB7D,GAASA,EAAMrI,KACpC,kBAAuC,CAAEzB,MAAzC,EAAG2K,QAAqD5K,MAAxD,EAAoB8C,YAApB,IAGE2V,EAAoB,SAAAC,GAAW,MACjC,CACI,CACIvR,MAAOwR,EAAAA,GAAAA,SAAAA,MACP1N,GAAI0N,EAAAA,GAAAA,SAAAA,GACJrG,QAAQ,GAEZ,CACInL,MAAOuR,EACP9f,UAAU,EACV0Z,QAAQ,GAViB,EAcrC,OACI,kBAACrP,GAAe2V,SAAhB,CAAyB3Y,MAAO2H,GAAc,CAAEpE,UAAWoE,EAAWpE,WAAa8T,IAC9ED,EACGta,SAAAA,EAAO0W,SACH,kBAAC,aAAD,KACI,kBAAC,KAAD,CAAQtM,MAAOqG,EAASqL,YAAaJ,EAAkB7Z,EAAKG,cAAcC,EAAAA,EAAAA,iBAC1E,kBAAC0U,GAAA,EAAD,CAAcC,KAAM5W,aAAF,EAAEA,EAAO6W,aAG/B,kBAAC,EAAA7H,SAAD,KACI,kBAAC,KAAD,CACI5E,MAAOgG,EAAK2L,eAAiBtL,EAAU,MAAQL,EAAK2L,eAAiBtL,EACrE4C,QAAS5I,GAA+B8Q,EACxCS,cAAc,cACdF,YAAaJ,EAAkBjL,GAC/BwL,OAAQ,CACJ,kBAAC7W,GAAA,EAAD,CACIP,IAAI,SACJQ,aAAa,UAACqV,EAAQhB,QAAQtJ,YAAjB,QAAC,EAAsB8L,WAAW7L,eAC/C/K,SAAS,UAAAoV,EAAQhB,QAAQtJ,YAAhB,eAAsB8L,WAAWlP,MAAMpN,QAAS,MAIjE,kBAAC,GAAD,CACIsN,+BAAgCA,EAAAA,GAChCzC,4BAA6BA,EAC7B2F,KAAMvF,EACNH,gBAAiB,kBAAMA,EAAgB,CAACgG,GAAvB,EACjB/F,sBAAuB,kBAAMA,EAAsB,CAAC0Q,GAA7B,IAE3B,kBAACvG,EAAD,MACA,kBAAC0F,EAAD,OAEJ,kBAAC2B,EAAA,EAAD,KACI,kBAAC,GAAD,CACI1L,QAASA,EACTI,iBAAkBA,EAClBH,iBAAkBA,EAClBK,iBAAiB/D,aAAA,EAAAA,EAAOpN,QAAS,EACjCuR,kBAAmBA,EACnBC,UAAWA,EACXkD,aAAcA,EACdC,iBAAkBA,MAKlC,kBAAC,aAAD,KACI,kBAAC,KAAD,CAAQnK,MAAOqG,EAASqL,YAAaJ,EAAkBjL,KACvD,kBAAC,KAAD,OAKnB,C,8PCzKM,SAAS2L,EAAgBC,GAC5B,OAAgCzH,EAAAA,EAAAA,UAASyH,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0B3H,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOta,EAAP,KAAckiB,EAAd,KAYA,MAAO,CAAEC,aATL,kBAAC,IAAD,CAAWxZ,MAAO,kBAAC,IAAqBhB,EAAAA,EAAAA,aAA0Bya,QAAQ,YACtE,kBAAC,KAAD,QAAY,aAAW,eAAetZ,SAAU,SAAAuZ,GAAS,OAAIJ,EAAYI,EAAhB,EAA4BzZ,MAAOoZ,GAAchiB,GACrG4K,EAAAA,GAAAA,KAAmB,gBAAGhC,EAAH,EAAGA,MAAOD,EAAV,EAAUA,MAAV,OAChB,kBAAC,IAAD,CAAkB4B,IAAK3B,EAAOA,MAAOA,EAAOD,MAAOA,GADnC,MAOTqZ,SAAAA,EAAUC,YAAAA,EAAaC,SAAAA,EACjD,CAEM,SAASI,EAAsBP,GAClC,OAA0CzH,EAAAA,EAAAA,UAASyH,GAAnD,eAAOlB,EAAP,KAAsB0B,EAAtB,KACA,GAA0BjI,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOta,EAAP,KAAckiB,EAAd,KAgBA,MAAO,CAAEM,mBAbL,kBAAC,IAAD,CAAW7Z,MAAO,kBAAC,IAAqBhB,EAAAA,EAAAA,oBAAiCya,QAAQ,SAC7E,kBAAC,MAAD,QACI7X,IAAI,QACJhI,KAAK,OACLuG,SAAU,SAAAF,GAAK,OAAI2Z,EAAiB3Z,EAArB,EACfA,MAAOiY,EACP4B,kBAAkB,WAClB,aAAW,qBACX9iB,MAAO,CAAE+iB,UAAW,YAChB1iB,KAIa6gB,cAAAA,EAAe0B,iBAAAA,EAAkBL,SAAAA,EACjE,CAEM,IAAMS,EAAY,SAAC,GAA6F,IAA3F1Y,EAA2F,EAA3FA,MAAO6F,EAAoF,EAApFA,MAAO8S,EAA6E,EAA7EA,OAAQC,EAAqE,EAArEA,sBAAuBC,EAA8C,EAA9CA,sBAAuBtP,EAAuB,EAAvBA,OAAQ9R,EAAe,EAAfA,SACpG,GAAsC4Y,EAAAA,EAAAA,UAASrQ,GAA/C,eAAO8Y,EAAP,KAAoBC,EAApB,KAEMnQ,GAAWC,EAAAA,EAAAA,MAEXmQ,EAAc,WAChBD,OAAe/gB,EAClB,EAYD,OACI,kBAAC,IAAD,CACIrB,QAAQ,QACRkP,MAAOA,EACP5N,OAAQghB,QAAQH,GAChBI,QAASF,EACTlK,QAAS,CACL,kBAAC,KAAD,CAAQxO,IAAI,OAAO3J,QAAQ,UAAU4S,OAAO,OAAOhR,QAjB5C,WACfogB,IACKQ,MAAK,kBAAMvQ,GAASqM,EAAAA,EAAAA,IAAgB2D,GAA/B,IADV,OAEW,SAACnd,GAAD,OAAWmN,GAASqM,EAAAA,EAAAA,IACN,QAAjBxZ,EAAMoL,OAAmBuS,EAAAA,GACJ,QAAjB3d,EAAMoL,OAAmBwS,EAAAA,GACnBR,GAHP,IAIXG,GACH,GAUe,kBAAC,IAAqBtb,EAAAA,EAAAA,OAE1B,kBAAC,KAAD,CAAQ4C,IAAI,SAAS3J,QAAQ,YAAY4S,OAAO,QAAQhR,QAASygB,GAC7D,kBAAC,IAAqBtb,EAAAA,EAAAA,UAG9B6L,OAAQA,GAEP9R,EAGZ,EAEDihB,EAAU/b,UAAY,CAClBlF,SAAUkF,IAAAA,IACVuc,QAASvc,IAAAA,KACTqD,MAAOrD,IAAAA,MACP6U,UAAW7U,IAAAA,KACXkJ,MAAOlJ,IAAAA,OACPgc,OAAQhc,IAAAA,KACRic,sBAAuBjc,IAAAA,OACvBkc,sBAAuBlc,IAAAA,OACvB4M,OAAQ5M,IAAAA,QAGZ,S,ypBClGO,IAAM2c,EAAe,CACxBpI,QAAS,GACT3L,KAAM,GACNjH,SAAU,GACV0S,QAAQ,EACRuI,YAAY,EACZC,eAAe,EACfC,UAAW,CAAC,EACZzG,OAAQ,CACJ1S,IAAK,UACL/G,UAAW,QAEf6F,KAAM,EACN2T,QAAS,GACT3G,aAAc,GACdC,kBAAmB,GAGvB,SAASqN,EAAgBxI,EAAS/a,EAAOwjB,GACrC,IAAI/L,EAAWsD,EAAQkD,MAAK,kBAAqB,aAArB,EAAG9T,GAAH,IAa5B,OAXKnK,EAAMiW,eACPjW,EAAMiW,aAAe,IAGpBjW,EAAM6c,SACP7c,EAAM6c,OAAS,CACX1S,IAAK,UACL/G,UAAW,SAIfpD,EAAM6a,SACe7a,EAAMoP,KAAKqU,MAAK,qBAAGC,WAAH,KAEdjM,IACnBA,EAASsG,SAAU,GAGhB,EAAP,KACO/d,GADP,IAEI+a,QAAAA,EACA3L,KAAMpP,EAAMoP,KAAKnF,KAAI,SAAAgO,GAAG,cACjBA,GADiB,IAEpB0L,SAAU3jB,EAAMiW,aAAawN,MAAK,SAAAG,GAAW,OAAIA,EAAYlhB,KAAOuV,EAAIvV,EAA3B,MAAkC,GAF3D,IAIxBqU,KAAMyM,EAAOxE,QAAQjI,QAItB/W,CACV,CAEM,IAAMyc,EAA2B,SAAC1B,GAAD,OAAa,WAAkC,IAAjC/a,EAAiC,uDAAzBmjB,EAAcK,EAAW,uCAC/EK,EAAW,EAAH,GAAQ7jB,GAEpB,OAAQwjB,EAAOrhB,MACX,KAAK2hB,EAAAA,GAA4B,aAC7B,OAAOP,EAAgBxI,EAAS8I,EAAUL,GAC9C,KAAKM,EAAAA,GACD,OAAO5E,EAAAA,EAAAA,IAAW2E,EAAUL,EAAQA,EAAOvE,WAC/C,KAAK6E,EAAAA,GACD,OAAO,EAAP,KACOD,GADP,IAEIzU,KAAMyU,EAASzU,KAAKnF,KAAI,SAAAgO,GAAG,cACpBA,GADoB,IAEvBnW,OAAQmW,EAAIvV,KAAO8gB,EAAOxE,QAAQtc,GAAK8gB,EAAOxE,QAAQld,OAASmW,EAAInW,QAF5C,MAKnC,KAAKgiB,EAAAA,GACD,OAAOX,EACX,QACI,OAAOU,EAElB,CArBuC,C","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/NotVulnerableBox.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport lineClamp from '@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSectionVariant;\n(function (ExpandableSectionVariant) {\n    ExpandableSectionVariant[\"default\"] = \"default\";\n    ExpandableSectionVariant[\"truncate\"] = \"truncate\";\n})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));\nconst setLineClamp = (lines, element) => {\n    if (!element || lines < 1) {\n        return;\n    }\n    element.style.setProperty(lineClamp.name, lines.toString());\n};\nexport class ExpandableSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.expandableContentRef = React.createRef();\n        this.state = {\n            isExpanded: props.isExpanded\n        };\n    }\n    calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n        if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n            return toggleTextExpanded;\n        }\n        if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n            return toggleTextCollapsed;\n        }\n        return toggleText;\n    }\n    componentDidMount() {\n        if (this.props.variant === ExpandableSectionVariant.truncate && this.props.truncateMaxLines) {\n            const expandableContent = this.expandableContentRef.current;\n            setLineClamp(this.props.truncateMaxLines, expandableContent);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.variant === ExpandableSectionVariant.truncate &&\n            prevProps.truncateMaxLines !== this.props.truncateMaxLines) {\n            const expandableContent = this.expandableContentRef.current;\n            setLineClamp(this.props.truncateMaxLines, expandableContent);\n        }\n    }\n    render() {\n        const _a = this.props, { onToggle: onToggleProp, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isActive, className, toggleText, toggleTextExpanded, toggleTextCollapsed, toggleContent, children, isExpanded, isDetached, displaySize, isWidthLimited, isIndented, contentId, variant, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        truncateMaxLines } = _a, props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\", \"variant\", \"truncateMaxLines\"]);\n        let onToggle = onToggleProp;\n        let propOrStateIsExpanded = isExpanded;\n        // uncontrolled\n        if (isExpanded === undefined) {\n            propOrStateIsExpanded = this.state.isExpanded;\n            onToggle = isOpen => {\n                this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n            };\n        }\n        const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n        const expandableToggle = !isDetached && (React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": propOrStateIsExpanded, onClick: () => onToggle(!propOrStateIsExpanded) },\n            variant !== ExpandableSectionVariant.truncate && (React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon) },\n                React.createElement(AngleRightIcon, { \"aria-hidden\": true }))),\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, toggleContent || computedToggleText)));\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, variant === ExpandableSectionVariant.truncate && styles.modifiers.truncate, className) }, props),\n            variant === ExpandableSectionVariant.default && expandableToggle,\n            React.createElement(\"div\", { ref: this.expandableContentRef, className: css(styles.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: contentId }, children),\n            variant === ExpandableSectionVariant.truncate && expandableToggle));\n    }\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded) => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: '',\n    variant: 'default'\n};\n//# sourceMappingURL=ExpandableSection.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport * as flexToken from '@patternfly/react-tokens/dist/esm/l_flex_item_Order';\nimport { formatBreakpointMods, setBreakpointCssVars } from '../../helpers/util';\nexport const Flex = (_a) => {\n    var { children = null, className = '', component = 'div', spacer, spaceItems, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order, style } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"spacer\", \"spaceItems\", \"grow\", \"shrink\", \"flex\", \"direction\", \"alignItems\", \"alignContent\", \"alignSelf\", \"align\", \"justifyContent\", \"display\", \"fullWidth\", \"flexWrap\", \"order\", \"style\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.flex, formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(direction, styles), formatBreakpointMods(alignItems, styles), formatBreakpointMods(alignContent, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(justifyContent, styles), formatBreakpointMods(display, styles), formatBreakpointMods(fullWidth, styles), formatBreakpointMods(flexWrap, styles), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, flexToken.l_flex_item_Order.name)) : undefined }, props), children));\n};\nFlex.displayName = 'Flex';\n//# sourceMappingURL=Flex.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport * as flexToken from '@patternfly/react-tokens/dist/esm/l_flex_item_Order';\nimport { formatBreakpointMods, setBreakpointCssVars } from '../../helpers/util';\nexport const FlexItem = (_a) => {\n    var { children = null, className = '', component = 'div', spacer, grow, shrink, flex, alignSelf, align, fullWidth, order, style } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"spacer\", \"grow\", \"shrink\", \"flex\", \"alignSelf\", \"align\", \"fullWidth\", \"order\", \"style\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(formatBreakpointMods(spacer, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(fullWidth, styles), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, flexToken.l_flex_item_Order.name)) : undefined }), children));\n};\nFlexItem.displayName = 'FlexItem';\n//# sourceMappingURL=FlexItem.js.map","import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (appliedVersions, apply) => {\n    /* operatingSystems are obtained from the Inventory store */\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n        appName: 'inventory',\n        scope: 'inventory',\n        module: './OsFilterHelpers'\n    });\n\n    return buildOSFilterConfig\n        ? [\n            buildOSFilterConfig(\n                {\n                    label: intl.formatMessage(messages.osFilterLabel),\n                    type: 'checkbox',\n                    id: 'rhel_version',\n                    value: toGroupSelectionValue(\n                        appliedVersions\n                            ? appliedVersions.split(',')\n                            : []\n                    ),\n                    onChange: (event, value) => {\n                    /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                        const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .toString();\n                        apply({ rhel_version: versions, page: 1 });\n                    },\n                    placeholder: intl.formatMessage(messages.osFilterPlaceholder)\n                },\n                operatingSystems\n            )\n        ]\n        : [];\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nvar VALUE_TO_STATE = {\n    1: { icon: _jsx(AngleDoubleDownIcon, {}), text: 'Low', color: 'blue' },\n    2: { icon: _jsx(EqualsIcon, {}), text: 'Moderate', color: 'gold' },\n    3: { icon: _jsx(AngleDoubleUpIcon, {}), text: 'Important', color: 'orange' },\n    4: { icon: _jsx(CriticalRiskIcon, {}), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"rest\"]);\n    return (_jsx(Label, __assign({}, rest, props, { color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }, { children: text || VALUE_TO_STATE[value].text })));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Text,\n    TextContent,\n    TextVariants,\n    SplitItem,\n    Split,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './CSAwRuleBox.scss';\nimport NotVulnerableLabel from '../Snippets/NotVulnerableLabel';\nimport { changeExposedSystemsParameters } from '../../../Store/Actions/Actions';\nimport { ONLY_NON_VULNERABLE_SYSTEMS } from '../../../Helpers/constants';\n\nconst NotVulnerableBox = ({ synopsis, notVulnerableSystemCount }) => {\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const handleExposedSystemFilter = () => {\n        dispatch(changeExposedSystemsParameters({ rule: ONLY_NON_VULNERABLE_SYSTEMS }));\n    };\n\n    return (\n        notVulnerableSystemCount > 0 &&\n        <Card className=\"card-box\" ouiaId=\"not-vulnerable-box\">\n            <ExpandableSection toggleText={\n                <Split>\n                    <SplitItem className=\"pf-u-mr-xl\">\n                        <TextContent>\n                            <Text component={TextVariants.h4}>\n                                <NotVulnerableLabel className=\"pf-u-mr-sm\" />\n                                {intl.formatMessage(messages.notVulnerableBoxTitle)}\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                    <SplitItem id=\"filter-affected-systems-split\">\n                        <TextContent>\n                            <Text\n                                id=\"filter-affected-systems\"\n                                onClick={event => {\n                                    handleExposedSystemFilter();\n                                    event.stopPropagation();\n                                }}\n                                component={TextVariants.small}\n                            >\n                                <Link\n                                    to={`/cves/${synopsis}`}\n                                >\n                                    {\n                                        intl.formatMessage(\n                                            messages.filterByAffectedSystems,\n                                            {\n                                                count: notVulnerableSystemCount\n                                            }\n                                        )\n                                    }\n                                </Link>\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                </Split>\n            }>\n                <CardBody className=\"rule-card-body\">\n                    {intl.formatMessage(messages.notVulnerableDescription, { multiple: true })}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nNotVulnerableBox.propTypes = {\n    synopsis: PropTypes.string,\n    notVulnerableSystemCount: PropTypes.number\n};\n\nexport default NotVulnerableBox;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\nimport NotVulnerableBox from '../CSAwRuleBox/NotVulnerableBox';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n            <NotVulnerableBox\n                synopsis={data.data.synopsis}\n                notVulnerableSystemCount={data.data.affected_but_not_vulnerable}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    ANSIBLE_REMEDIATION, RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRows.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    ...osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded),\n                isDisabled: meta.totalItems === 0\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    // TODO: let InventoryTable render its own toolbar instead of using custom one\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n                                <ColumnManagementModal\n                                    appliedColumns={columns}\n                                    applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={setColumnModalOpen}\n                                />\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["ExpandableSectionVariant","setLineClamp","lines","element","style","setProperty","toString","ExpandableSection","constructor","props","super","this","expandableContentRef","state","isExpanded","calculateToggleText","toggleText","toggleTextExpanded","toggleTextCollapsed","propOrStateIsExpanded","componentDidMount","variant","truncate","truncateMaxLines","expandableContent","current","componentDidUpdate","prevProps","render","_a","onToggle","onToggleProp","isActive","className","toggleContent","children","isDetached","displaySize","isWidthLimited","isIndented","contentId","__rest","undefined","isOpen","setState","computedToggleText","expandableToggle","css","type","onClick","Object","assign","default","ref","hidden","id","displayName","defaultProps","Flex","component","spacer","spaceItems","grow","shrink","flex","direction","alignItems","alignContent","alignSelf","align","justifyContent","display","fullWidth","flexWrap","order","Component","FlexItem","PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","console","error","concat","__assign","n","arguments","apply","BaseInvTable","history","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","innerRef","propTypes","InvTable","Bullseye","Spinner","size","renderer","marked","link","replace","CSAwRuleSummary","text","intl","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","appliedVersions","operatingSystems","useSelector","entities","useLoadModule","toGroupSelectionValue","buildOSFilterConfig","label","value","split","onChange","event","versions","values","flatMap","keys","rhel_version","page","placeholder","currentFilter","dynamicFilters","config","currentValue","rule_presence","rule","filterBySecurityRule","isDynamic","join","dropdownItems","items","RULE_PRESENCE_OPTIONS","unionWith","isEqual","map","conditionalFilterType","key","filterValues","status_id","filterByStatus","filter","STATUS_OPTIONS","item","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","content","color","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","description","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","WithLoader","isLoading","LoaderType","TextContent","textAlign","Text","TextVariants","V3names","AV","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","val","cvssVersion","Popover","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","TableVariant","gridBreakPoint","cells","rows","entries","Label","isLarge","substring","SnippetWithHeaderAndPopover","title","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","BusinessRiskPopoverContent","Button","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","_b","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","index","summary","Card","rule_id","ouiaId","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","cve","_i","CVES_PATH","reduce","prev","KnownExploitSummary","NotVulnerableBox","notVulnerableSystemCount","NotVulnerableLabel","ONLY_NON_VULNERABLE_SYSTEMS","multiple","CVEDetailsPageSummary","data","known_exploit","affected_but_not_vulnerable","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","downloadReport","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","isDisabled","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemIdsByCve","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","securityRuleFilter","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","shallowEqual","total","loaded","CVEDetailsPageStore","columns","params","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selecting","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","React","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","attributes","Main","useStatusSelect","initialValue","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","handleClose","Boolean","onClose","then","ReadOnlyNotification","NotAuthorizedNotification","initialState","tagsLoaded","allTagsLoaded","invConfig","modifyInventory","action","some","patchAccess","selected","selectedRow","newState","ActionTypes"],"sourceRoot":""}