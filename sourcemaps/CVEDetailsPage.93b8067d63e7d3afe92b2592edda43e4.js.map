{"version":3,"file":"js/CVEDetailsPage.1655725215669.a2579f7fbca9ce20f0fb.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Unable to load inventory component\"),\n        React.createElement(\"h2\", null,\n            \"Failed to load \",\n            component),\n        React.createElement(\"code\", null, \"More info can be found in browser console output.\")));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant=\"checkbox\"\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label=\"os-version-filter\"\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport '../InsightsLabel/labels.css';\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nimport React from 'react';\nvar VALUE_TO_STATE = {\n    1: { icon: React.createElement(AngleDoubleDownIcon, null), text: 'Low', color: 'blue' },\n    2: { icon: React.createElement(EqualsIcon, null), text: 'Moderate', color: undefined },\n    3: { icon: React.createElement(AngleDoubleUpIcon, null), text: 'Important', color: 'orange' },\n    4: { icon: React.createElement(CriticalRiskIcon, null), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, className = _a.className, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"className\", \"rest\"]);\n    return (React.createElement(Label, __assign({}, rest, props, { className: value === 2 ? 'ins-c-label-2' : '', color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }), text || VALUE_TO_STATE[value].text));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemsByCVE\n} from '../../../Store/Actions/Actions';\nimport {\n    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        // TODO: change it back to fetchAffectedSystemsIdsByCve when the endpoint return also a remediation field\n        fetchResource: ops => fetchAffectedSystemsByCVE({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRows.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_ABSENCE_OPTIONS\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded)\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n                                <ColumnManagementModal\n                                    appliedColumns={columns}\n                                    applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={setColumnModalOpen}\n                                />\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","_a","component","props","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","__rest","useEffect","console","error","concat","__assign","assign","n","arguments","apply","this","BaseInvTable","history","store","Cmp","className","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","size","renderer","marked","link","replace","CSAwRuleSummary","text","truncate","intl","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","filterValue","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","filterValues","children","variant","onToggle","onSelect","_","changedLabel","newValue","changedValue","version","value","includes","splice","rhel_version","join","page","selections","map","item","placeholderText","loadingVariant","onClick","style","maxHeight","overflow","slice","option","index","isDisabled","disabled","key","description","currentFilter","dynamicFilters","config","currentValue","rule_presence","rule","filterBySecurityRule","values","isDynamic","undefined","dropdownItems","items","RULE_PRESENCE_OPTIONS","unionWith","isEqual","onChange","event","status_id","filterByStatus","filter","STATUS_OPTIONS","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","content","color","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","grow","default","WithLoader","isLoading","LoaderType","TextContent","textAlign","Text","TextVariants","V3names","AV","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","val","cvssVersion","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","TableVariant","gridBreakPoint","cells","rows","entries","Label","isLarge","substring","SnippetWithHeaderAndPopover","title","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","keys","toString","BusinessRiskPopoverContent","Button","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","_b","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","cve","_i","CVES_PATH","reduce","prev","KnownExploitSummary","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","downloadReport","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemsByCVE","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","securityRuleFilter","RULE_ABSENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","useSelector","entities","shallowEqual","total","loaded","CVEDetailsPageStore","columns","params","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","notification","addNotification","clearNotifications","payload","selecting","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","current","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","isActive","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","attributes","Main","useStatusSelect","initialValue","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","handleClose","Boolean","onClose","then","ReadOnlyNotification","NotAuthorizedNotification","initialState","tagsLoaded","allTagsLoaded","invConfig","modifyInventory","state","action","some","patchAccess","selected","selectedRow","newState","ActionTypes"],"sourceRoot":""}