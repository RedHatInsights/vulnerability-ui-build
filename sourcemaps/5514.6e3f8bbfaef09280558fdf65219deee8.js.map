{"version":3,"file":"js/5514.1675706984372.ed2236b2d6074ca61303.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/AsyncComponent/index.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter, isInline = false, 'aria-label': ariaLabel, 'aria-labelledBy': ariaLabelledBy } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(spinner_1.default.spinner, isInline ? spinner_1.default.modifiers.inline : spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), (ariaLabel && { 'aria-label': ariaLabel }), (ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy }), (!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0]?.cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? cveList[0]?.justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport classNames from 'classnames';\nvar BaseAsyncComponent = function (_a) {\n    var appName = _a.appName, scope = _a.scope, module = _a.module, _b = _a.fallback, fallback = _b === void 0 ? (_jsx(Bullseye, { children: _jsx(Spinner, { size: \"xl\" }) })) : _b, innerRef = _a.innerRef, className = _a.className, _c = _a.component, Cmp = _c === void 0 ? 'section' : _c, props = __rest(_a, [\"appName\", \"scope\", \"module\", \"fallback\", \"innerRef\", \"className\", \"component\"]);\n    var SCProps = __assign({ className: className, appName: appName, module: module, scope: scope !== null && scope !== void 0 ? scope : appName, ErrorComponent: fallback, ref: innerRef, fallback: fallback }, props);\n    return (_jsx(Cmp, __assign({ className: classNames(className, appName) }, { children: _jsx(ScalprumComponent, __assign({}, SCProps)) })));\n};\nvar AsynComponent = React.forwardRef(function (props, ref) { return _jsx(BaseAsyncComponent, __assign({ innerRef: ref }, props)); });\nexport default AsynComponent;\n//# sourceMappingURL=index.js.map","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst Remediation = ({ cves, systems, manyRules, isDisabled }) => {\n    const dispatch = useDispatch();\n\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, rule }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatch(addNotification(result.getNotification()))}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </AsyncComponent>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default Remediation;\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentFilter","currentValue","remediation","filterByRemediation","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","REMEDIATION_OPTIONS","item","split","CvePairStatusModal","cveList","updateRef","inventoryList","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","count","systemName","onFailureNotification","autoDismiss","description","modalTitle","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","fieldId","name","isChecked","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","__assign","Object","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","this","BaseAsyncComponent","_a","appName","scope","module","_b","fallback","Bullseye","children","Spinner","size","innerRef","_c","component","Cmp","props","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","SCProps","ErrorComponent","ref","ScalprumComponent","Remediation","cves","systems","manyRules","dispatch","useDispatch","baseIssueTemplate","system","AsyncComponent","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","rule","issue","rule_id","mergeObjectPropertyBy","acc","cveID","remediationProvider","onRemediationCreated","result","addNotification","getNotification"],"sourceRoot":""}