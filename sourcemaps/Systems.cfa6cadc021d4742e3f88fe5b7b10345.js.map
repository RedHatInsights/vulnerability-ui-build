{"version":3,"file":"js/Systems.0d99975d2f4be25e59b6.js","mappings":"orCAcA,IAAMA,EAAwB,SAAC,GAOzB,IANFC,EAME,EANFA,QACAC,EAKE,EALFA,OAKE,IAJFC,WAAAA,OAIE,MAJW,GAIX,EAHFC,EAGE,EAHFA,YACAC,EAEE,EAFFA,MACGC,GACD,YACIC,GAAOC,EAAAA,EAAAA,KACb,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8CC,EAAAA,EAAAA,MAA9C,eAAOC,EAAP,KAAwBC,EAAxB,KACQC,EAAmDC,EAAAA,GAAAA,uBAA3BC,EAA2BD,EAAAA,GAAAA,wBAE3DE,EAAAA,EAAAA,YAAU,WACNP,GAAW,GACXE,EAAgB,CAAEM,IAAKZ,EAAKa,cAAcC,EAAAA,EAAAA,qCAC3C,IAEH,IAAMC,EAAgB,SAAAC,GAAI,OAAIC,EAAAA,EAAAA,IAAWD,EAAMR,IAEzCU,EAAY,mCAAG,sHAKWC,EAAAA,EAAAA,IAAW,EAAD,KAC3BxB,GACAyB,EAAAA,EAAAA,gBAPM,gBAKVJ,EALU,EAKVA,KAAMK,EALI,EAKJA,KALI,uDAWbd,IACAD,EAAgB,CACZgB,QAAS,SACTC,aAAa,EACbX,IAAKZ,EAAKa,cAAcC,EAAAA,EAAAA,wCACxBU,YAAaxB,EAAKa,cAAcC,EAAAA,EAAAA,yCAhBvB,kBAmBN,IAnBM,eAsBXW,GAAYC,EAAAA,EAAAA,GAAa,CAC3BV,KAAMA,EAAKW,OAAO,EAAGjB,GACrBW,KAAAA,EACA3B,QAAAA,EACAM,KAAAA,IAGE4B,EAAab,EAAcC,GAEjCZ,GAAW,GAEXG,IACAD,EAAgB,CAAEgB,QAAS,UAAWV,IAAKZ,EAAKa,cAAcC,EAAAA,EAAAA,qCAlC7C,mBAqCbW,GArCa,eAsCVG,EAAWC,KAAI,SAACC,EAAYC,GAAb,OACdC,EAAAA,EAAAA,GAAU,CAAEhB,KAAMc,EAAYG,KAAMF,EAAO/B,KAAAA,EAAMkC,OAAQtC,GAAcA,EAAWsC,eAvCzE,yDAAH,qDA4ClB,OACI,6BACI,kBAAC,MAAD,UACQnC,EADR,CAEIoC,SAAU,KACVrC,MAAOK,EAAUH,EAAKa,cAAcC,EAAAA,EAAAA,SAAoBd,EAAKa,cAAcf,GAC3EsC,cAAelB,EACfrB,YAAW,GAAIwC,UAAW,UAAaxC,GACvCyC,WAAYtC,EAAKa,cAAcC,EAAAA,EAAAA,qBAC/ByB,KAAM,GACNC,SAAQ,UAAKpB,EAAAA,EAAAA,SAAwB,eAA7B,QACRqB,mBAAmB,EACnBC,KAAM,KACNC,YAAa,iBAM7BlD,EAAsBmD,aAAe,CACjC9C,MAAOgB,EAAAA,EAAAA,kBAGXrB,EAAsBoD,UAAY,CAC9BnD,QAASmD,IAAAA,UAAoB,CACzBA,IAAAA,MACAA,IAAAA,SAEJlD,OAAQkD,IAAAA,OACRjD,WAAYiD,IAAAA,OACZhD,YAAagD,IAAAA,OACb/C,MAAO+C,IAAAA,UAAoB,CACvBA,IAAAA,MACAA,IAAAA,UAIR,U,qCCtFA,QAxBuB,SAACC,GAA8B,IAAvBC,EAAuB,uDAAP,GAC3BC,EAAiBD,EAA3BE,SAEAC,EAAmB,SAACC,GACtBL,EAAM,CACFG,SAAUE,EAAOC,OAAS,EAAID,MAAAA,OAApB,EAAoBA,EAAQE,KAAK,UAAOC,EAClDrB,KAAM,KAId,MAAO,CACHnC,MAAOE,EAAAA,EAAAA,cAAmBc,EAAAA,EAAAA,iCAC1ByB,KAAMgB,EAAAA,EAAAA,SACNC,SAAU,WACVC,aAAc,CACVC,SAAU,SAACC,EAAOC,GACdV,EAAiBU,IAErBC,MAAOC,EAAAA,GAAAA,KAA4B,kBAAuB,CAAEhE,MAAzB,EAAGA,MAA6B8D,MAAhC,EAAUA,UAC7CA,OAAOZ,MAAAA,OAAA,EAAAA,EAAcI,QAAS,EAAIJ,MAAAA,OAA3B,EAA2BA,EAAce,MAAM,UAAOT,K,olBCFzE,IAAMU,EAAsB,SAAC,GAQvB,IAPFC,EAOE,EAPFA,aACAC,EAME,EANFA,kBACAC,EAKE,EALFA,oBACAnE,EAIE,EAJFA,KACAoE,EAGE,EAHFA,WACAC,EAEE,EAFFA,QACAC,EACE,EADFA,QAEA,GAAkCpE,EAAAA,EAAAA,WAAS,GAA3C,eAAOqE,EAAP,KAAkBC,EAAlB,KACQ1B,EAAsDwB,EAAtDxB,MAAO2B,EAA+CH,EAA/CG,aAAcC,EAAiCJ,EAAjCI,SAAUC,EAAuBL,EAAvBK,mBACjCC,GAAWC,EAAAA,EAAAA,MAgBXC,GAAaC,EAAAA,EAAAA,UAAQ,WACvB,MAAO,CACHC,iBAAkBb,EAAoBc,MAAK,mBAAoC,IAApC,EAAGC,WAC9CC,iBAAkBhB,EAAoBc,MAAK,mBAAoC,IAApC,EAAGC,cAEnD,CAACf,IAEEiB,EAAe,CACjB,GACA,CACItF,MAAOE,EAAKa,cAAcC,EAAAA,EAAAA,2BAAqC,CAAEuE,MAAOnB,IACxEoB,QAAS,kBAAMZ,EAAST,EAAcE,MAAAA,OAAf,EAAeA,EAAsB,GAAGoB,cAAc,IAC7ExF,MAAO,CAAEyF,YAAatB,IAAsBY,EAAWK,mBAE3D,CACIrF,MAAOE,EAAKa,cAAcC,EAAAA,EAAAA,2BAAqC,CAAEuE,MAAOnB,IACxEoB,QAAS,kBAAMZ,EAAST,EAAcE,MAAAA,OAAf,EAAeA,EAAsB,GAAGoB,cAAc,EAAOtB,IACpFlE,MAAO,CAAEyF,YAAatB,IAAsBY,EAAWE,mBAE3D,CACIlF,MAAOE,EAAKa,cAAcC,EAAAA,EAAAA,4BAC1BwE,QAAS,kBAAMX,GAAmB,MAIpCc,GAAkBC,EAAAA,EAAAA,IAAc,CAClCC,QAAStB,EACTJ,aAAAA,EACAC,kBAAAA,EACAO,aAAAA,EACAmB,cAAe,SAAAC,GAAG,OAAIC,EAAAA,EAAAA,IAAgB,OAAK1B,GAAeyB,OAG9D,OAAO,kBAAC,EAAAE,SAAD,KACH,kBAACC,EAAA,EAAD,CACIC,UAAU,+BACVC,WAAYT,EACZU,cAAe,CACXC,QAAShB,EACTiB,cAAe,CAAEC,OAAQ,oBAE7BC,aAAc,CACV1C,MAAO,EACH2C,EAAAA,EAAAA,GACI,SACA1F,EAAAA,EAAAA,kBACAA,EAAAA,EAAAA,mBACAsD,EAAWqC,OACX3D,GAEJ4D,EAAe5D,EAAOsB,KAG9BuC,oBAAqB,CACjBjH,SAASkH,EAAAA,EAAAA,IAAmBxC,GAC5ByC,SAAU,SAACC,EAAGC,EAAOC,GAAX,OAAqBC,EAAAA,EAAAA,IAAcF,EAAOzC,EAAQxB,MAAOkE,EAAOE,EAAAA,KAC1EC,YAAanH,EAAKa,cAAcC,EAAAA,EAAAA,cAChCsG,mBAAmBC,EAAAA,EAAAA,IAAuBjD,EAAY8C,EAAAA,GAAyBI,EAAAA,KAEnFC,aAAY,GACR/B,WAAyC,IAA7BnB,EAAQhD,KAAKmG,YACzBC,WAAY,EAACC,EAAAA,EAAAA,IAAqBnD,EAAWC,IAC7C8B,OAAQ,WACLiB,EAAAA,EAAAA,IAAa,CAAEI,eA7EP,SAAAC,GACnB,IAAIjI,EAAS,KAAKyE,GAClBhD,EAAAA,EAAAA,KACIyG,EAAAA,GACAlI,EACAiI,EACA,eACA,SAAAE,GAAY,OAAIlD,GACZtE,EAAAA,EAAAA,IAAgBwH,OAEpB,kBAAMlD,GAASrE,EAAAA,EAAAA,gBAuEjBgE,GACE,kBAAC,EAAD,CACIwD,YAAY,EACZpI,OAAQyE,EACR1E,SAASkH,EAAAA,EAAAA,IAAmBxC,GAC5B4D,UAAW,kBAAMxD,GAAa,QAQ9CR,EAAoBnB,UAAY,CAC5BwB,QAAS4D,EAAAA,GACT7D,WAAYvB,IAAAA,OACZoB,aAAcpB,IAAAA,MACdqB,kBAAmBrB,IAAAA,OACnBsB,oBAAqBtB,IAAAA,MACrByB,QAASzB,IAAAA,MAAgB,CACrB6B,SAAU7B,IAAAA,KACVC,MAAOD,IAAAA,KACP4B,aAAc5B,IAAAA,KACd8B,mBAAoB9B,IAAAA,OAExB7C,KAAM6C,IAAAA,KAGV,SAAeqF,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,IAAWnE,I,ysBCQf,SA9HoB,WAChB,IAAMoE,EAAeC,IAAAA,YACfzD,GAAWC,EAAAA,EAAAA,MACX7E,GAAOC,EAAAA,EAAAA,KACb,GAAsCqI,EAAAA,EAAAA,IAAaC,EAAAA,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEMpE,GAAUqE,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUC,OAAQ,KAAIC,EAAAA,IAC9DC,GAAaJ,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAlB,EAAkBA,EAAUI,SACrD9E,GAAeyE,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAU1E,eAAgB,MACvEC,EAAoB8E,OAAOC,KAAKhF,GAAcb,QAAU,EACxDe,GAAsBuE,EAAAA,EAAAA,KAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkBA,MAAAA,OAAA,EAAAA,EAAUxE,sBAAuB,MAErFC,GAAasE,EAAAA,EAAAA,KAAY,qBAAGQ,iBAAwCvJ,SAAQkJ,EAAAA,IAClF,GAAgCH,EAAAA,EAAAA,KAAY,qBAAGQ,iBAAwCC,SAA/EC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAElB,GAA8BnJ,EAAAA,EAAAA,UAASoJ,EAAAA,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgDtJ,EAAAA,EAAAA,WAAS,GAAzD,eAAOuJ,EAAP,KAA0B9E,EAA1B,MAQAhE,EAAAA,EAAAA,YAAU,WACN,OAAO,WACHiE,GAAS8E,EAAAA,EAAAA,OACT9E,GAAS+E,EAAAA,EAAAA,UAEd,CAAC/E,IAEJ,IAAM9B,EAAQ,SAACnD,GAAD,OAAYiF,GAASgF,EAAAA,EAAAA,IAAoBjK,MAEvDgB,EAAAA,EAAAA,YAAU,kBAAMmC,EAAM0F,KAAgB,KAEtCqB,EAAAA,GAAAA,KAAqB,kBAAMpB,EAAa,MAAKrE,MAAe,CAACA,IAE7D,IAOMM,GAAWoF,EAAAA,EAAAA,KALU,kBACvBlF,GAAS+E,EAAAA,EAAAA,OACTvB,EAAa2B,QAAQC,cAAe,CAAE/H,KAAM,OAI1CgI,GAAcC,EAAAA,EAAAA,GAAeC,EAAAA,GAAsB1B,GAEzD,GAAwCvI,EAAAA,EAAAA,UAAS,GAAjD,eAAOkK,EAAP,KAAsBC,EAAtB,KAGA,OAFA1J,EAAAA,EAAAA,YAAU,kBAAM0J,EAAeD,EAAgB,KAAI,CAACb,IAGhD,kBAAC,EAAAxD,SAAD,KACI,kBAACuE,GAAA,EAAD,CACIC,eAAgBhB,EAChBiB,aAAchB,EACdiB,YAAahB,EACbiB,aAAc/F,IAElB,kBAACgG,EAAA,EAAD,CAAQC,MAAO5K,EAAKa,cAAcC,EAAAA,EAAAA,4BAAsC+J,gBAAgB,IACxF,kBAACC,EAAA,EAAD,KACK1B,EACK,kBAAC2B,EAAA,EAAD,CAAcC,KAAM3B,IAElB,kBAAC4B,EAAA,EAAD,CACIC,uBAAqB,EACrBC,OAAQ,YAA2B,IAAxBC,EAAwB,EAAxBA,kBACPC,EAAAA,EAAAA,SAAA,MACOD,GACCE,EAAAA,EAAAA,GAAyBhC,EAAAA,IADT,IAGZrH,KAAMsJ,OAAOnH,EAAWnC,MAAQ,GAChCuJ,QAASD,OAAOnH,EAAWqH,WAAa,KACpCrH,EAAWsH,MAAQ,CACnBC,OAAQ,CACJC,IAAKxH,EAAWsH,KAAKG,QAAQ,KAAM,IACnCC,UAAW1H,EAAWsH,KAAKK,MAAM,MAAQ,OAAS,aAO1EC,WAAY,CACRC,gBAAgB,EAChBC,cAAc,EACdC,gBAAgB9H,MAAAA,OAAA,EAAAA,EAASjB,QAAS,GAC1B,SAACgJ,GAAD,OAAaC,EAAAA,EAAAA,IAAsBD,EAAS1H,IACpDpD,QAASgL,EAAAA,EAAAA,SAEbC,cAAY,EACZC,YAAU,EACVC,IAAKrE,EACLsE,aAAW,EACXC,cAAe,CACXC,oBAAqB,MACdxI,IAGXyI,YAAiC,KAApBxI,MAAAA,OAAA,EAAAA,EAASjB,QACtB0J,eAAgB1C,EAChBb,QAAS,SAAAwD,GAAc,OAlF1BC,EAkF2CD,EAjFrDxD,EACF9C,QAAO,SAAAwG,GAAM,OAAIA,EAAOC,WACxBrL,KAAI,SAAAoL,GAAM,gBAAUD,EAAiBG,MAAK,gBAAGvB,EAAH,EAAGA,IAAH,OAAaqB,EAAOrB,MAAQA,MAASqB,MAHnE,IAAAD,GAmFG/C,YAAaA,EACbmD,YAAa,CAAEC,KAAK,GACpBC,eAAgB,kBAAC,MAAD,OAEhB,kBAAC,EAAD,CACIlJ,WAAYA,EACZC,QAAS,CAAErD,KAAMqD,EAAShD,KAAM,CAAEmG,YAAasB,IAC/C7E,aAAcA,EACdC,kBAAmBA,EACnBC,oBAAqBA,EACrBG,QAAS,CACLI,SAAAA,EACA5B,MAAAA,EACA2B,aA7EX,SAAC8I,GAAD,OAAa3I,GAAS4I,EAAAA,EAAAA,IAAWD,KA8EtB5I,mBAAAA,GAEJyB,SAAO","sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n    const { systemsReportRestPages, systemsReportFirstPage } = PDF_REPORT_PER_PAGE;\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(data, systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        let data;\n        let meta;\n\n        try {\n            ({ data, meta } = await getSystems({\n                ...params,\n                ...DownloadReport.defaultParams\n            }));\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                fallback={null}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst SystemsTableToolbar = ({\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    intl,\n    parameters,\n    systems,\n    methods\n}) => {\n    const [exportPDF, setExportPDF] = useState(false);\n    const { apply, handleSelect, doOptOut, setColumnModalOpen } = methods;\n    const dispatch = useDispatch();\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(\n            fetchSystems,\n            params,\n            format,\n            'system-list',\n            notification => dispatch(\n                addNotification(notification)\n            ),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const kebabProps = useMemo(() => {\n        return {\n            selectedExcluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === true),\n            selectedIncluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === false)\n        };\n    }, [selectedRowsRawData]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, true),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, false, selectedRows),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }\n        },\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const bulkSelectProps = useBulkSelect({\n        rawData: systems,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={bulkSelectProps}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    clearSystemStore,\n    clearInventoryStore,\n    selectRows\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useGetEntities, useOptOutSystems } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nconst SystemsPage = () => {\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = Object.keys(selectedRows).length || 0;\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n\n    const parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);\n    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);\n\n    const [columns, setColumns] = useState(SYSTEMS_HEADER);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const apply = (params) => dispatch(changeSystemsParams(params));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useDeepCompareEffect(() => setUrlParams({ ...parameters }), [parameters]);\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const doOptOut = useOptOutSystems(onRefreshInventory);\n    const getEntities = useGetEntities(APIHelper.getSystems, setUrlParams);\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    return (\n        <Fragment>\n            <ColumnManagementModal\n                appliedColumns={columns}\n                applyColumns={setColumns}\n                isModalOpen={isColumnModalOpen}\n                setModalOpen={setColumnModalOpen}\n            />\n            <Header title={intl.formatMessage(messages.vulnerabilitySystemsHeader)} showBreadcrumb={false} />\n            <Main>\n                {hasError\n                    ? <ErrorHandler code={errorCode} />\n                    : (\n                        <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: Number(parameters.page_size || 20),\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: systems?.length > 0\n                                    && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                variant: TableVariant.compact\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            hasCheckbox={systems?.length !== 0}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems />}\n                        >\n                            <SystemsTableToolbar\n                                parameters={parameters}\n                                systems={{ data: systems, meta: { total_items: totalItems } }}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                selectedRowsRawData={selectedRowsRawData}\n                                methods={{\n                                    doOptOut,\n                                    apply,\n                                    handleSelect,\n                                    setColumnModalOpen\n                                }}\n                                actions\n                            />\n                        </InventoryTable>\n                    )}\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default SystemsPage;\n"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","useNotification","addNotification","clearNotifications","systemsReportRestPages","PDF_REPORT_PER_PAGE","systemsReportFirstPage","useEffect","msg","formatMessage","messages","otherPagesPDF","data","chunkArray","systemsFetch","getSystems","DownloadReport","meta","variant","autoDismiss","description","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","fallback","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","length","join","undefined","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","SystemsTableToolbar","selectedRows","selectedRowsCount","selectedRowsRawData","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","setColumnModalOpen","dispatch","useDispatch","kebabProps","useMemo","selectedExcluded","some","opt_out","selectedIncluded","kebabOptions","count","onClick","display_name","isDisabled","bulkSelectProps","useBulkSelect","rawData","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","className","bulkSelect","actionsConfig","actions","dropdownProps","ouiaId","filterConfig","useSearchFilter","filter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","total_items","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","notification","showButton","onSuccess","dataShape","withRouter","injectIntl","inventoryRef","React","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","useSelector","entities","rows","shallowEqual","totalItems","total","Object","keys","SystemsPageStore","error","hasError","errorCode","SYSTEMS_HEADER","columns","setColumns","isColumnModalOpen","clearSystemStore","clearInventoryStore","changeSystemsParams","useDeepCompareEffect","useOptOutSystems","current","onRefreshData","getEntities","useGetEntities","APIHelper","columnCounter","setColumnCount","ColumnManagementModal","appliedColumns","applyColumns","isModalOpen","setModalOpen","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","Number","perPage","page_size","sort","sortBy","key","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","hasCheckbox","columnsCounter","defaultColumns","inventoryColumns","column","isShown","find","hideFilters","all","noSystemsTable","payload","selectRows"],"sourceRoot":""}