{"version":3,"file":"js/Systems.e29c6d25ef12c75fb94b.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n\n        let data;\n        let meta;\n\n        try {\n            ({ data, meta } = await getSystems({\n                ...params,\n                ...DownloadReport.defaultParams\n            }));\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, PDF_REPORT_PER_PAGE.systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst SystemsTableToolbar = ({\n    selectedRows,\n    selectedRowsCount,\n    intl,\n    parameters,\n    systems,\n    methods\n}) => {\n    const [exportPDF, setExportPDF] = useState(false);\n    const { apply, handleSelect, doOptOut } = methods;\n    const dispatch = useDispatch();\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const selectedRowsData = systems?.data.filter(s => selectedRows[s.id] === true);\n\n    const kebabProps = useMemo(() => {\n        return {\n            selectedExcluded: selectedRowsData.some(({ opt_out: optOut }) => optOut === true),\n            selectedIncluded: selectedRowsData.some(({ opt_out: optOut }) => optOut === false)\n        };\n    }, [selectedRowsData]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(null, selectedRowsData.length === 1 ? selectedRowsData[0].display_name : null, true),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(null, selectedRowsData.length === 1 ? selectedRowsData[0].display_name : null, false),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const bulkSelectProps = useBulkSelect({\n        rawData: systems,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={bulkSelectProps}\n            actionsConfig={{\n                actions: kebabOptions,\n                kebabToggleProps: { isDisabled: !selectedRowsCount || systems.meta.total_items === 0 },\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, Fragment, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    clearSystemStore,\n    clearInventoryStore,\n    selectRows\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { nowrap, TableVariant } from '@patternfly/react-table';\nimport { useGetEntities, useOptOutSystems } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nconst createColumns = (defaultColumns) => {\n    let [nameColumn, ...restColumns] = SYSTEMS_HEADER;\n    let lastSeenColumn = defaultColumns.find(({ key }) => key === 'updated');\n    let tagsColumn = defaultColumns.find(({ key }) => key === 'tags');\n\n    tagsColumn = { ...tagsColumn, props: { width: 10, isStatic: true } };\n    lastSeenColumn = { ...lastSeenColumn, transforms: [nowrap], cellTransforms: [nowrap], props: { width: 20 } };\n\n    let mergedColumns = [nameColumn, tagsColumn, ...restColumns, lastSeenColumn];\n\n    return mergedColumns;\n};\n\nconst SystemsPage = () => {\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = Object.keys(selectedRows).length || 0;\n\n    const parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);\n    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const apply = (params) => dispatch(changeSystemsParams(params));\n\n    useEffect(() =>  apply(urlParameters), []);\n\n    useDeepCompareEffect(() => setUrlParams({ ...parameters }), [parameters]);\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const doOptOut = useOptOutSystems({ selectedRows, selectedRowsCount, onRefreshInventory });\n    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, []);\n    const getEntities = useGetEntities(APIHelper.getSystems, setUrlParams);\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                <Fragment>\n                    { hasError\n                        ? <ErrorHandler code={errorCode} />\n                        : (\n                            <InventoryTable\n                                disableDefaultColumns\n                                onLoad={({ mergeWithEntities }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(\n                                            inventoryEntitiesReducer(SYSTEMS_HEADER)\n                                        )\n                                    });\n                                }}\n                                tableProps={{\n                                    isStickyHeader: true,\n                                    canSelectAll: false,\n                                    actionResolver: systems?.length > 0\n                                        && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                    variant: TableVariant.compact\n                                }}\n                                showTagModal\n                                isFullView\n                                ref={inventoryRef}\n                                autoRefresh\n                                customFilters={{\n                                    vulnerabilityParams: {\n                                        ...parameters\n                                    }\n                                }}\n                                hasCheckbox={systems?.length !== 0}\n                                columnCounter={columnCounter}\n                                columns={(defaultColumns) => createColumns(defaultColumns)}\n                                getEntities={getEntities}\n                                hideFilters={{ all: true }}\n                                noSystemsTable={<EmptyStateNoSystems />}\n                            >\n                                <SystemsTableToolbar\n                                    parameters = {parameters}\n                                    systems = {{ data: systems, meta: { total_items: totalItems } }}\n                                    selectedRows = {selectedRows}\n                                    selectedRowsCount={selectedRowsCount}\n                                    methods = {{\n                                        doOptOut,\n                                        apply,\n                                        handleSelect\n                                    }}\n                                    actions\n                                />\n                            </InventoryTable>\n                        )}\n                </Fragment>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default SystemsPage;\n"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","useNotification","addNotification","clearNotifications","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","systemsFetch","msg","formatMessage","messages","getSystems","DownloadReport","meta","variant","autoDismiss","description","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","length","join","undefined","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","SystemsTableToolbar","selectedRows","selectedRowsCount","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","dispatch","useDispatch","selectedRowsData","filter","s","id","kebabProps","useMemo","selectedExcluded","some","opt_out","selectedIncluded","kebabOptions","count","onClick","display_name","isDisabled","bulkSelectProps","useBulkSelect","rawData","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","className","bulkSelect","actionsConfig","actions","kebabToggleProps","total_items","dropdownProps","ouiaId","filterConfig","useSearchFilter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","notification","showButton","onSuccess","dataShape","withRouter","injectIntl","inventoryRef","React","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","useSelector","entities","rows","shallowEqual","totalItems","total","Object","keys","SystemsPageStore","error","hasError","errorCode","useEffect","clearSystemStore","clearInventoryStore","changeSystemsParams","useDeepCompareEffect","useOptOutSystems","onRefreshInventory","current","onRefreshData","columnCounter","getEntities","useGetEntities","APIHelper","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","hasCheckbox","columns","defaultColumns","nameColumn","restColumns","lastSeenColumn","find","key","tagsColumn","width","isStatic","transforms","nowrap","cellTransforms","createColumns","hideFilters","all","noSystemsTable","payload","selectRows"],"sourceRoot":""}