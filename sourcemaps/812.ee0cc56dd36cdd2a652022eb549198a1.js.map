{"version":3,"file":"js/812.00e0928ac4b43a4b4e2c.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => {\n\n    return (\n        <View style={styles.labelsWrapper}>\n            {hasExploit &&\n                <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                    <InsightsLabel\n                        icon={false}\n                        width={isSmall ? 62 : 75}\n                        variant={4}\n                        label={intl.formatMessage(messages.knownExploit)}\n                        textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                        labelStyle={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: '#c9190b',\n                            height: isSmall ? 16 : 20\n                        }}\n                    />\n                </View>\n            }\n            { hasRule &&\n                <View style={styles.label}>\n                    <InsightsLabel\n                        icon={false}\n                        width={isSmall ? 59 : 63}\n                        label={intl.formatMessage(messages.securityRuleLabel)}\n                        textStyle={ isSmall ? styles.smallText : undefined }\n                        labelStyle={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: '#bee1f4',\n                            height: isSmall ? 16 : 20\n                        }}\n                    />\n                </View>\n            }\n        </View>\n    );\n};\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    FILTERS, CVE_REPORT_FILTERS,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? item.chips.length === FILTERS[item.key]?.items.length\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cvefilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cvefilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersExcluded)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersIncluded))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableExcluded)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n"],"names":["CVElabels","intl","hasRule","hasExploit","isSmall","style","styles","width","icon","variant","label","formatMessage","messages","textStyle","left","undefined","labelStyle","border","borderWidth","borderColor","height","propTypes","firstPagePDF","data","meta","filters","isReportDynamic","reportData","user","type","filtersBuilder","reduce","obj","item","key","filter","category","values","PUBLIC_DATE_OPTIONS","val","value","chips","timespan_label","map","name","join","isAllChosen","CVE_REPORT_FILTERS","SYSTEM_REPORT_FILTERS","component","CheckboxCustomFilter","length","FILTERS","items","cvefilterStringSegments","msg","lowercase","systemsFilterStringSegments","filterStringSegments","i","hasOwnProperty","isFirst","isLast","includedValues","Fragment","intlFormatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","find","multiValue","Object","cve_count","total_items","toString","system_count","header","includes","knownExploitCount","userNotes","identity","first_name","last_name","tablePage","defaultProps","PropTypes","page","POSSIBLE_HEADERS","hit","columnBuilder","hitColumns","headerContent","push","forEach","concat","id","hasRules","cve","rules","cveRows","knownExploit","attributes","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","system","display_name","os","opt_out","formatDate","updated","withHeader","rows"],"sourceRoot":""}