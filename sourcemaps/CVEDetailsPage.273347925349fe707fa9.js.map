{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js"],"names":["CVEDetailsPageDescription","cveAttributes","intl","publishDate","public_date","description","link","rh_link","Stack","hasGutter","StackItem","className","formatMessage","messages","TextContent","Text","component","TextVariants","propTypes","injectIntl","WithLoader","props","undefined","loading","variant","Spinner","centered","CVEPageOverviewItemLoader","TrendBoxLoader","CurrentVulnerabilitiesItemLoader","Skeleton","size","SkeletonSize","children","height","width","x","y","rx","ry","speed","primaryColor","secondaryColor","cx","cy","r","V3names","AV","name","values","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","split","forEach","curr","key","val","value","cvssVersion","CVEPageContext","Consumer","context","isLoading","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","Table","aria-label","TableVariant","gridBreakPoint","cells","rows","Object","entries","Label","isLarge","color","score","substring","indexOf","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","keys","map","item","STATUS_OPTIONS","toString","label","brPopoverContent","statusPopoverContent","Split","SplitItem","style","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","concat","sort","a","b","systems_affected","Fragment","rule","index","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","onClick","ruleId","rule_key","rule_presence","Link","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","text","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","defaultProps","PropTypes","KnownExploitSummary","useIntl","KnownExploitLabel","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTable","useState","StatusModal","setStatusModal","selectedHosts","setSelectedHosts","inventory","React","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","affectedSystems","useSelector","CVEDetailsPageStore","affectedSystemsByCVE","parameters","shallowEqual","metadata","payload","meta","items","useMemo","createExposedSystemsTable","apply","config","handleSelect","isChecked","middlewareListener","on","callback","newSelected","selected","onSelect","useEffect","useDeepCompareEffect","fetchAffectedSystemsByCVE","selectMultipleEntities","clearCveStore","clearInventoryStore","showStatusModal","cves","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","type","kebabOptions","cveStatusDetails","includes","inventory_id","display_name","status_id","justification","status_text","isDisabled","length","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","total_items","fetchResource","ops","fetchAffectedSystemsIdsByCve","selectedHostsData","s","sortingHeader","patch_access","SYSTEMS_EXPOSED_SORTING_HEADER","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","_event","direction","handleSortColumn","sortBy","createSortBy","actionResolver","rowData","rowIndex","systemExposedTableRowActions","showTags","expandable","ref","page","perPage","page_size","total","isLoaded","onRefresh","pageSize","per_page","current","limit","onRefreshData","hasCheckbox","showActions","onExpandClick","_e","isOpen","expandRow","PrimaryToolbar","exportConfig","downloadReport","format","params","DownloadReport","dedicatedAction","Remediation","manyRules","systems","filterRuleValues","actionsConfig","actions","kebabToggleProps","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","statusFilter","advisory","withRouter","CVEDetailsPage","match","cveName","BusinessModal","setBusinessRisk","details","createCveDetailsPage","exposedSystems","CveStatusModal","error","exposed_systems_count","kebabItems","kebabItemEditBusinessRisk","BusinessRiskModal","open","business_risk_id","kebabItemEditStatus","InvalidObject","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","loaded","isActive","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","methods","handleCveDetailsError"],"mappings":"0eAMMA,EAA4B,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KAE/BC,EAGbF,EAHAG,YACAC,EAEAJ,EAFAI,YACSC,EACTL,EADAM,QAGJ,OACI,kBAACC,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,CAAWC,UAAU,cACjB,6BACKT,EAAKU,cAAcC,iBADxB,KACiDV,IAGrD,kBAACO,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,OAAiBZ,KAG1C,kBAACK,EAAA,EAAD,CAAWC,UAAU,yBAChBL,KAOjBN,EAA0BkB,UAAY,CAClCjB,cAAeiB,QACfhB,KAAMgB,SAGV,SAAeC,QAAWnB,G,4JChCpBoB,EAAa,SAAAC,GACf,QAAcC,IAAVD,IAAyC,IAAlBA,EAAME,QAC7B,OAAQF,EAAMG,SACV,IAAK,UACD,OAAO,kBAACC,EAAA,EAAD,CAASC,UAAQ,IAC5B,IAAK,sBACD,OAAO,kBAACC,EAAD,MACX,IAAK,OACD,OAAO,kBAAC,KAAD,MACX,IAAK,aACD,OAAO,kBAAC,KAAD,MACX,IAAK,WACD,OAAO,kBAACC,EAAD,MACX,IAAK,6BACD,OAAO,kBAACC,EAAD,MACX,QACI,OAAO,kBAACC,EAAA,EAAD,CAAUC,KAAMC,SAInC,OAAOX,EAAMY,UAIXN,EAA4B,WAC9B,OACI,kBAAC,KAAD,CAAeO,OAAQ,GAAIC,MAAO,KAC9B,0BAAMC,EAAE,KAAKC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OACnD,0BAAME,EAAE,IAAIC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,MAAMD,OAAO,SAK1DN,EAAiB,WACnB,OACI,kBAAC,KAAD,CAAeM,OAAQ,IAAKC,MAAO,KAC/B,0BAAMC,EAAE,SAASC,EAAE,SAASC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,IAAID,OAAO,MAC3D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,KAAKD,OAAO,OAC1D,0BAAME,EAAE,OAAOC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,MAAMD,OAAO,SAKhEL,EAAmC,WACrC,OACI,kBAAC,KAAD,CAAeK,OAAQ,GAAIC,MAAO,IAAKK,MAAO,EAAGC,aAAa,UAAUC,eAAe,WACnF,0BAAMN,EAAE,QAAQC,EAAE,QAAQC,GAAG,IAAIC,GAAG,IAAIJ,MAAM,SAASD,OAAO,UAC9D,4BAAQS,GAAG,KAAKC,GAAG,KAAKC,EAAE,SAKtCzB,EAAWF,UAAY,CACnBK,QAASL,SACTM,QAASN,YAGb,U,eC9Da4B,EAAU,CACnBC,GAAI,CACAC,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,yBACtBsC,EAAGjD,kBAAmBW,0BACtBuC,EAAGlD,kBAAmBW,uBACtBwC,EAAGnD,kBAAmBW,4BAG9ByC,GAAI,CACAN,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJG,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9B2C,GAAI,CACAR,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9B4C,GAAI,CACAT,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtB6C,EAAGxD,kBAAmBW,4BAG9B8C,EAAG,CACCX,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJW,EAAG1D,kBAAmBW,2BACtBgD,EAAG3D,kBAAmBW,2BAG9BgD,EAAG,CACCb,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BiD,EAAG,CACCd,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BsC,EAAG,CACCH,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BkD,KAAM,CACFf,KAAM9C,kBAAmBW,4BACzBoC,OAAQ,CACJ,MAAO,KAKNe,EAAU,CACnBjB,GAAI,CACAC,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,yBACtBsC,EAAGjD,kBAAmBW,iCACtBuC,EAAGlD,kBAAmBW,yBAG9ByC,GAAI,CACAN,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJC,EAAGhD,kBAAmBW,sBACtBuC,EAAGlD,kBAAmBW,qBACtB0C,EAAGrD,kBAAmBW,wBAG9BoD,GAAI,CACAjB,KAAM9C,kBAAmBW,qBACzBoC,OAAQ,CACJiB,EAAGhE,kBAAmBW,0BACtB8C,EAAGzD,kBAAmBW,wBACtBqC,EAAGhD,kBAAmBW,wBAG9BgD,EAAG,CACCb,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,wBAG9BiD,EAAG,CACCd,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,wBAG9BsC,EAAG,CACCH,KAAM9C,kBAAmBW,oBACzBoC,OAAQ,CACJY,EAAG3D,kBAAmBW,0BACtBwC,EAAGnD,kBAAmBW,yBACtBqC,EAAGhD,kBAAmBW,yB,6BC9F5BsD,EAAa,SAAA9C,GACf,IAfwB+C,EAAQC,EAC5BC,EAcmBC,EAAkDlD,EAAjEmD,cAA2CC,EAAsBpD,EAArCqD,cAA4BxE,EAASmB,EAATnB,KAC1DyE,GAAWF,EAAe,WAAgBF,GAAe,aAAe,WACxEK,EAAaH,GAAeF,EAE5BM,GAnB0BR,EAkBVI,GAAe3B,GAAayB,GAAeP,EAjB7DM,EAAM,IADcF,EAmBSQ,IAhB7BR,EAAOU,MAAM,KAAKC,SAAQ,SAAAC,GACtB,MAAiBA,EAAKF,MAAM,KAA5B,eAAKG,EAAL,KAAUC,EAAV,KACMlC,EAAOqB,EAAaY,IAAQZ,EAAaY,GAAKjC,KAC9CmC,EAASd,EAAaY,IAAQZ,EAAaY,GAAKhC,OAAOiC,IAAS,MAClElC,IACAsB,EAAItB,GAAQmC,MAGjBb,GAWiBrB,GAAW4B,EAA3BO,aAAR,OAAmCP,EAAnC,IAEA,OACI,kBAACQ,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAACzE,EAAA,EAAD,KACI,kBAAC,EAAD,CAAYS,QAASgE,EAAQC,WACzB,kBAACC,EAAA,EAAD,CACIC,GAAG,eACHC,SAAS,SACTC,SAAU,OACVC,YAAU,EACVC,cAAa,UAAMnB,EAAN,YAAiBzE,EAAKU,cAAcC,6BACjDkF,YACInB,EAEQ,kBAACoB,EAAA,EAAD,CACIC,aAAY,mBACZzE,QAAS0E,YACTC,eAAe,GACfC,MACI,CAAClG,EAAKU,cAAcC,sBAChBX,EAAKU,cAAcC,sBAE3BwF,KAAMC,OAAOC,QAAQtD,IAErB,kBAAC,IAAD,MACA,kBAAC,IAAD,OA7BnB,OAkCG,kBAAC,aAAD,KACI,kBAACuD,EAAA,EAAD,CAAOC,SAAO,EAAC9F,UAAU,sBACpBgE,EADL,IACezE,EAAKU,cAAcC,4BAC9B,kBAAC,KAAD,CACI6F,MAAO,yCACP/F,UAAU,mBAO9B,kBAAC,EAAD,CAAYY,QAASgE,EAAQC,WACzB,0BAAM7E,UAAU,cAAcU,EAAMsF,OACpC,0BAAMjB,GAAG,uBACJxF,EAAKU,cAAcC,YAAmB,MACtC+D,aAAA,EAAAA,EAAYgC,UAAUhC,EAAWiC,QAAQ,KAAO,KAlDpD,aA2DzB1C,EAAWjD,UAAY,CACnBsD,cAAetD,WACfwD,cAAexD,WACfyF,MAAOzF,QACPhB,KAAMgB,SAGV,SAAeC,QAAWgD,GC7F1B,IAAM2C,EAA8B,SAAAzF,GAChC,IAAQ0F,EAA0B1F,EAA1B0F,MAAO5B,EAAmB9D,EAAnB8D,MAAO6B,EAAY3F,EAAZ2F,QAEtB,OACI,kBAACvB,EAAA,EAAD,CAASC,GAAG,UAAUK,YAAaiB,EAASlB,cAAe,GAAIG,aAAW,wBAAwBN,SAAS,QACvGsB,SAAUC,SAASC,cAAc,mBACjC,kBAAC3G,EAAA,EAAD,CAAOG,UAAU,mBACb,kBAACD,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAOC,SAAO,GAAEM,IAEpB,kBAACrG,EAAA,EAAD,KACI,2BAAIyE,OAOxB2B,EAA4B5F,UAAY,CACpC6F,MAAO7F,QACPiE,MAAOjE,QACP8F,QAAS9F,SAEb,U,2BCbMkG,GAAwB,SAAC,GAA4B,IAA1BnH,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KACtCmH,GAAaC,QAAiBrH,EAAcsH,QAAU,WAGzCC,EAMfvH,EANAwH,cAC6BC,EAK7BzH,EALA0H,4BACAC,EAIA3H,EAJA2H,OACsBC,EAGtB5H,EAHA6H,qBACuBC,EAEvB9H,EAFA+H,sBAC0BC,EAC1BhI,EADAiI,yBAGEC,EACFJ,GACAzB,OAAO8B,KAAKL,GAAqBM,KAAI,SAAAC,GAAI,MAAI,CACzCC,WAAoB,SAAAX,GAAM,OAAIA,EAAOzC,QAAUmD,EAAKE,cAAYC,MAChEV,EAAoBO,GAAME,eAG5BE,EACF,kBAAClI,EAAA,EAAD,CAAOG,UAAU,aACb,kBAACD,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,cACZT,EAAKU,cAAcC,yBAG5B,kBAACH,EAAA,EAAD,KAAYgH,GAA6B,OAI3CiB,EACF,kBAACnI,EAAA,EAAD,CAAOG,UAAU,aACb,kBAACD,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,cACZT,EAAKU,cAAcC,gBAEvB+G,GAAU,KAEX,kBAACpB,EAAA,EAAD,CAAO7F,UAAU,yBACZT,EAAKU,cAAcC,wBAEvBgH,GAAuB,MAE3BI,EAAyB,GACtB,kBAACvH,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,wBAAIH,UAAU,2BAElB,kBAAC6F,EAAA,EAAD,CAAOC,SAAO,GACTvG,EAAKU,cAAcC,kCAExB,kBAACmF,EAAA,EAAD,CACIC,aAAW,iBACXE,eAAe,GACfC,MAAO,CAAClG,EAAKU,cAAcC,iBAAuBX,EAAKU,cAAcC,YACrEwF,KAAM8B,EACNxH,UAAU,yBACVa,QAAQ,WAER,kBAAC,IAAD,MACA,kBAAC,IAAD,SAOpB,OACI,kBAAChB,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACkI,EAAA,EAAD,CAAOnI,WAAS,GACZ,kBAACoI,EAAA,EAAD,KACI,kBAAC,EAAD,CACI9B,MAAO7G,EAAKU,cAAcC,uBAC1BsE,MAAOqC,EACPR,QAAS0B,KAGjB,kBAACG,EAAA,EAAD,CAAWlI,UAAU,cACjB,kBAAC,EAAD,CACIoG,MAAO7G,EAAKU,cAAcC,iBAC1BmG,QAAS2B,EACTxD,MACI,8BACK8C,EAAyB,GACtB,kBAAC,KAAD,CAAyBvB,MAAO,yCACjC,IACFkB,QAQzB,kBAAClH,EAAA,EAAD,KACI,kBAAC8F,EAAA,EAAD,CAAO7F,UAAU,aAAa8F,SAAO,GAChCvG,EAAKU,cAAcC,aAExB,0BAAM6E,GAAG,kBAAkBoD,MAAO,CAAEpC,MAAOW,EAAWX,QAClD,kBAACqC,GAAA,EAAD,CAAQxB,OAAQF,EAAWN,MAAOiC,UAAQ,MAIlD,kBAACtI,EAAA,EAAD,KACI,kBAAC,EAAD,CACI8D,cAAevE,EAAcuE,cAC7BE,cAAezE,EAAcyE,cAC7BiC,OAAOsC,OAAehJ,EAAciJ,YAAajJ,EAAckJ,kBAOnF/B,GAAsBlG,UAAY,CAC9BjB,cAAeiB,QACfhB,KAAMgB,SAGV,UAAeC,QAAWiG,I,wIChGpBgC,GAAc,SAAC,GAA8D,IAA5DC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,+BAAgCrJ,EAAW,EAAXA,KAC9DsJ,GAAWC,mBAEXC,EAAc,GAAGC,OAAON,GAAOO,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,iBAAmBF,EAAEE,oBAO5E,OAAO,kBAAC,EAAAC,SAAD,KACFN,GAAeA,EAAYrB,KAAI,SAAC4B,EAAMC,GAAP,aAC5BD,EAAKE,SACD,kBAACC,GAAA,EAAD,CAAMzJ,UAAU,WAAWsE,IAAKgF,EAAKI,QAASC,OAAQ,sBAAwBJ,GAC1E,kBAACK,GAAA,EAAD,CAAmBC,WACf,kBAAC5B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWlI,UAAU,cACjB,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACb,kBAACwJ,GAAA,EAAD,CAAW9J,UAAU,eACpBsJ,EAAK5J,eAIlB,kBAACwI,EAAA,EAAD,CAAWnD,GAAG,iCACTuE,EAAKI,SACF,kBAACvJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACI2E,GAAG,0BACHgF,QAAS,kBAxBdC,EAwB8CV,EAAKI,aAtBlFb,EAASD,EADM,CAAEqB,SAAUD,EAAQE,cAAe,UADpB,IAACF,GAyBK3J,UAAWC,WAEX,kBAAC,GAAA6J,KAAD,CACI7F,IAAKgF,EAAKI,QACVU,GAAE,gBAAWzB,EAAX,sBAAiCW,EAAKI,UAGpCnK,EAAKU,cACDC,4BACA,CACImK,MAAK,UAAEf,EAAKF,wBAAP,SAA4B,UAUrE,kBAACkB,GAAA,EAAD,CAAUtK,UAAU,kBAChB,kBAACuK,EAAA,EAAD,CAAMzK,WAAS,GACX,kBAAC0K,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC7K,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAAC4K,GAAA,EAAD,CAAiBC,KAAMtB,EAAKE,WAEhC,kBAACzJ,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAAC8H,EAAA,EAAD,KACKqB,EAAKuB,aACF,kBAAC3C,EAAA,EAAD,KACI,kBAACrC,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,aAExB,kBAAC4K,GAAA,EAAD,CACIzE,QAASV,OAAOrD,OAAOyI,MAAgBzB,EAAKuB,YAAc,IAE1D,kBAACG,GAAA,EAAD,CACIxG,MAAO8E,EAAKuB,YACZ7K,UAAU,qBAK1B,kBAACkI,EAAA,EAAD,KACI,kBAACrC,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,mBAExB,kBAAC4K,GAAA,EAAD,CACIzE,QAAS4E,KAAuB3B,EAAK4B,cAEnCC,KAAqB7B,EAAK4B,eAGpC,kBAAChD,EAAA,EAAD,KACI,kBAACrC,EAAA,EAAD,CAAO7F,UAAU,oBACZT,EAAKU,cAAcC,uBAExB,kBAAC+H,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACOoB,EAAK8B,eAGA,kBAAC,EAAA/B,SAAD,KACI,kBAAC,MAAD,CACIrJ,UAAU,+BAEbT,EAAKU,cAAcC,SACpB,kBAAC4K,GAAA,EAAD,CACIzE,QAAS9G,EAAKU,cACVC,gCAGJ,kBAAC,KAAD,CACIF,UAAU,6CAbxBT,EAAKU,cAAcC,SAqB7B,kBAACgI,EAAA,EAAD,CAAWlI,UAAU,cACfsJ,EAAK+B,iBACP,kBAACjL,EAAA,EAAD,KACI,kBAAC,MAAD,CACIJ,UAAU,4BAEbT,EAAKU,cAAcC,2BAY5CoJ,EAAKgC,eACT,kBAACvL,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIJ,UAAU,aACVK,UAAWC,OAEX,uBACIN,UAAU,UACVuL,KAAI,UAAKC,KAAL,YAAkBlC,EAAKgC,eAC3BG,OAAO,SACPC,IAAI,uBAGAnM,EAAKU,cAAcC,0BAEvB,kBAAC,MAAD,CAAqBF,UAAU,sBASvD,kBAACwK,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAACvK,EAAA,EAAD,KACI,kBAAC0F,EAAA,EAAD,KACKtG,EAAKU,cAAcC,qBAExB,kBAACE,EAAA,EAAD,CAAMC,UAAWC,MAAgBN,UAAU,8BACtC2I,EADL,KACiBpJ,EAAKU,cAAcC,aADpC,IAGQoJ,EAAKqC,gBACJC,QAAO,SAAAC,GAAG,OAAIA,IAAQlD,KACtBjB,KAAI,SAACmE,EAAKC,GAAN,OACD,uBACI9L,UAAU,sBACVsE,IAAKwH,EACLP,KAAI,UAAKQ,KAAL,YAAkBF,IAErBA,MAGRG,QAAO,SAACC,EAAM5H,GAAP,MAAgB,CAAC4H,EAAM,KAAM5H,KAAO,CAAC,iBAc7FoE,GAAYyD,aAAe,CACvBxD,MAAO,IAGXD,GAAYlI,UAAY,CACpBhB,KAAM4M,QACNzD,MAAOyD,UACPxD,SAAUwD,WACVvD,+BAAgCuD,UAGpC,UAAe3L,QAAWiI,I,4BCzOb2D,GAAsB,WAC/B,IAAM7M,GAAO8M,UACb,OACI,kBAAC5C,GAAA,EAAD,CAAMzJ,UAAU,WAAW2J,OAAO,sBAC9B,kBAACC,GAAA,EAAD,CAAmBC,WACf,kBAAC1J,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACb,kBAACgM,GAAA,EAAD,CAAmBtM,UAAU,eAC5BT,EAAKU,cAAcC,2BAI5B,kBAACoK,GAAA,EAAD,KACK/K,EAAKU,cAAcC,0BCTlCqM,GAAwB,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,KAAM5D,EAAqC,EAArCA,+BACnC,OACI,kBAAClE,GAAeC,SAAhB,MACK,SAAAC,GAAO,OACJ,kBAAC2F,EAAA,EAAD,CAAMzK,WAAS,GACX,kBAAC0K,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,IACjB,kBAAC,EAAD,CAAY9J,QAASgE,EAAQC,UAAWhE,QAAQ,WAC5C,kBAAC,EAAD,CAA2BvB,cAAekN,EAAKA,SAIvD,kBAAChC,EAAA,EAAD,CAAUC,GAAI,EAAGC,GAAI,GAAI1K,UAAU,yBAC/B,kBAAC,GAAD,CAAuBV,cAAekN,EAAKA,QAG3CA,EAAKA,KAAKC,eAAiB,kBAACL,GAAD,MAG/B,kBAAC,GAAD,CACIxD,+BAAkCA,EAClCD,SAAU6D,EAAKA,KAAK7D,SACpBD,MAAO8D,EAAKA,KAAK9D,aAQzC6D,GAAsBhM,UAAY,CAC9BiM,KAAMjM,WACNqI,+BAAgCrI,UAGpC,Y,qyBCJA,IAAMmM,GAAsB,SAAChM,GAAU,MACnC,GAAsCiM,eAAS,kBAAM,kBAAM,SAA3D,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,mBAAShM,GAAnD,eAAOmM,EAAP,KAAsBC,EAAtB,KAEMC,EAAYC,gBACZpE,GAAWC,mBACjB,GAAsCoE,QAAaC,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAsCV,eAAS,GAA/C,eAAOW,EAAP,KAAqBC,EAArB,KAEMC,GAAkBC,kBACpB,qBAAGC,oBAA8CC,wBAG/C9I,GAAY4I,kBACd,qBAAGC,oBAA8CC,qBAAqB9I,aAGpE+I,GAAaH,kBACf,qBAAGC,oBAA8CE,aACjDC,gBAGEC,GAAWL,kBACb,qBAAGC,oBAA8CC,qBAAqBI,QAAQC,QAE5EC,GAAQC,cAAQ,kBAAMC,QAA0B,GAAD,GAAMX,GAAmB9M,EAAMmL,OAAM,CAAC2B,EAAiB9M,EAAMmL,MAE5GuC,EAAQ,SAACC,GAAD,OAAYxF,GACtBD,QAA+ByF,KAc7BC,EAAe,SAACC,EAAWR,GAE7BhB,EADsBgB,GAAoB,KAW9CS,YAA0B,CACtBC,GAAI,gBACJC,SAAU,SAAAX,GAAO,OATJ,SAACA,GACd,IAAMY,EAAcZ,EAAQvB,KAAKoC,SAAb,CAAyBb,EAAQvB,KAAKzH,IAAtC,gBAA8C+H,GAAiB,KAC7EA,GAAiBA,EAAclB,QAAO,SAAAjE,GAAI,OAAIA,IAASoG,EAAQvB,KAAKzH,MAE1EuJ,EAAa,EAAOK,GAKCE,CAASd,OAGlCe,gBAAU,WACNV,EAAMhB,GACNG,GAAc,KAEf,KAEHwB,SAAqB,WACZzB,IACDD,EAAa,GAAD,GAAMO,IAClB/E,GAASmG,QAA0BtO,EAAMmL,IAAP,MAAiB+B,QAExD,CAACA,EAAYN,KAEhBwB,gBAAU,WACFhC,GACAjE,GAASoG,QAAuBnC,MAErC,CAACA,EAAejE,KAEnBiG,gBAAU,WACN,OAAO,WACHjG,GAASqG,WACTrG,GAASsG,cAEd,CAACtG,IAEJ,IAKMuG,EAAkB,SAACC,EAAMC,GAC3BzC,GACI,kBAAM,kBACF,kBAAC0C,GAAA,EAAD,CACIC,QAASH,EACTI,UAAW,YACPA,OAAUxB,EAAMD,KAAMI,IACtBsB,QAAgBhP,EAAMmL,MAE1B8D,cAAeL,EACfM,KAAM,wBAehBC,EAAe,CAAC,GAClB,CACI/H,MAAOpH,EAAMnB,KAAKU,cAAcC,gBAChC6J,QAAS,kBAAMqF,EACX,CAAC1O,EAAMoP,kBAZG7B,EAAMzB,KAAKZ,QAAO,SAAAjE,GAAI,OAAImF,EAAciD,SAASpI,EAAKqI,iBAE9CtI,KAAI,kBACzB,CAAEsI,aADuB,EAAGA,aACZC,aADS,EAAiBA,aACZC,UADL,EAA+BA,UACfC,cADhB,EAA0CC,kBAapE1P,MAAO,CAAE2P,YAAavD,GAA0C,IAAzBA,EAAcwD,UAIvDC,GAAgBrC,cAAQ,kBAAMsC,QAAkB,CAClDC,cAAe3D,GAAiB,GAChC4D,gBAAiBpC,EACjBL,MAAOA,EAAMzB,MAAQyB,GAAS,CAAEzB,KAAM,GAAIwB,KAAM,CAAE2C,YAAa,IAC/DC,cAAe,SAAAC,GAAG,OAAIC,QAA6BpQ,EAAMmL,IAAP,SAAiB+B,GAAeiD,SAClF,CAAC5C,EAAOnB,EAAec,EAAYlN,EAAMmL,MAEvCkF,GAAoB7C,cAAQ,kBAC9BD,aAD8B,EAC9BA,EAAOzB,KAAKZ,QAAO,SAAAoF,GAAC,OAAIlE,aAAJ,EAAIA,EAAeiD,SAASiB,EAAEjM,SACnD,CAAC+H,EAAemB,IAEbgD,EAAgBhD,SAAA,UAAAA,EAAOD,YAAP,SAAakD,aAC7BC,KACAA,aAAsC,SAAAxJ,GAAI,MAAiB,aAAbA,EAAKrD,OAiBzD,OACI,kBAAC,aAAD,KACI,kBAACzE,EAAA,EAAD,CAAOC,WAAS,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWC,QACZI,EAAMnB,KAAKU,cAAcC,uBAItC,kBAACH,EAAA,EAAD,KACI,kBAACqR,GAAA,EAAD,CACIC,uBAAqB,EACrBC,OAAQ,YAA4C,IAAzCC,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,gBAC1BC,cAAA,SACOF,GAAkBG,QAAyBC,QAC3CH,OAGXI,WAAY,CACRC,gBAAgB,EAChBC,cAAc,EACdC,OAAS9D,EAAMzB,KAAK8D,OAAS,GA/BtC,SAAC0B,EAAQzI,EAAO0I,GAAhB,OACXC,QACI3I,EACA0I,EACAhB,EACA7D,EAAcnE,KACdmF,IA0BgB+D,OAASlE,EAAMzB,KAAK8D,OAAS,IArCjD8B,QACInB,EACAnD,EAAS7E,MAoCOoJ,eAAgB,SAACC,EAASC,GAAV,OACZtE,EAAMzB,KAAK8D,OAAS,IACpBkC,QACIpD,EACA1O,EAAMoP,iBACNyC,EAASA,WAGjB1R,QAAS0E,aAEbkN,UAAQ,EACRnO,IAAK,YACLoO,YAAU,EACVC,IAAK3F,EACLiB,MAAOA,EAAMzB,KACboG,KAAM9E,GAAYA,EAAS8E,MAAQ,EACnCC,QAAS/E,GAAYA,EAASgF,WAAa,GAC3CC,MAAOjF,GAAYA,EAAS6C,aAAe,EAC3CqC,UAAWnO,EACXoO,UAxKK,SAAC,GAAiC,IAA/BL,EAA+B,EAA/BA,KAAgBM,EAAe,EAAzBC,UAE1BnG,EAAUoG,SAAYtF,EAAS8E,OAASA,GAAQ9E,EAASuF,QAAUH,GACnE9E,EAAM,CAAEwE,OAAME,UAAWI,IAGzBpF,GAAYA,EAAS6C,aAAeuC,GAAYlG,EAAUoG,SAC1DpG,EAAUoG,QAAQE,cAAc,CAAEV,OAAME,UAAWI,KAkKvCK,YAAatF,GAA0B,IAAjBA,EAAMqC,OAC5BkD,YAAavF,GAA0B,IAAjBA,EAAMqC,OAC5BmD,cAAe,SAACC,EAAI5H,EAAI6H,EAAT,OAAmB5O,EAAnB,EAAmBA,GAAnB,OAA4B8D,GAAS+K,QAAU7O,EAAI4O,MAElE,kBAACE,GAAA,EAAD,CACI7T,UAAU,+BACV8T,aAAY,IACRzD,WAAuC,IAA3BpC,EAAMD,KAAK2C,eAAuB7D,GAA0C,IAAzBA,EAAcwD,QAC7E3G,OAAQ,WACLmK,SAAa,CAAEC,eA5HvB,SAAAC,GACnB,IAAIC,EAAS,CAACvT,EAAMmL,IAAP,MAAiB+B,IAC9BsG,UAAoBlF,KAA2BiF,EAAQD,EAAQ,uBA4H3CG,iBAAmBtP,GACf,kBAACuP,GAAA,EAAD,CACIC,WAAS,EACTC,QAASvD,EACT1B,KAAM,CAAEtK,GAAIrE,EAAMmL,IAAKnD,MAAOhI,EAAM6T,oBAG5CC,cAAe,CACXC,QAAS5E,EACT6E,iBAAkB,CAAErE,YAAavD,GAA0C,IAAzBA,EAAcwD,QAChEqE,cAAe,CAAEhL,OAAQ,oBAE7BiL,oBAAqB,CACjBC,SAASC,SAAmB,GAAD,GAAMlH,GAAclN,EAAM6T,kBACrDQ,SAAU,SAACC,EAAGC,GAAJ,OAAcC,SAAcD,EAAO7G,IAC7C+G,YAAazU,EAAMnB,KAAKU,cAAcC,mBAE1CkV,WAAY7E,GAAiB,CACzBlG,MAAOyC,GAAiBA,EAAcwD,OACtCrC,MAAOsC,EAActC,MACrBoC,WAAuC,IAA3BpC,EAAMD,KAAK2C,eAAuB7D,GAA0C,IAAzBA,EAAcwD,QAC7E+E,QAASC,QAAQxI,GAAiBA,EAAcwD,QAChD3G,OAAQ,cACRkF,SAAU,kBAAM0B,EAAcgF,2BAElCC,aAAc,CACVvH,MAAO,EACHwH,QACI,SACAvV,sBACAA,uBACA0N,EAAWhC,OAAQwC,IAEvBsH,QAAmBtH,EAAOR,EAAYlN,EAAM6T,mBAC5CoB,QAAavH,EAAOR,IACpB6H,QAAa,WAAYvV,aAAmBA,WAAiB0N,EAAWgI,SAAUxH,OAI7FxB,GAAe,kBAACA,EAAD,WAQxCF,GAAoBnM,UAAY,CAC5BhB,KAAMgB,WACNsL,IAAKtL,WACLuP,iBAAkBvP,WAClBgU,iBAAkBhU,WAGtB,UAAeC,SACXqV,QACInJ,K,4BC9RKhI,GAAiBuI,kBAAoB,CAAEpI,WAAW,IAEzDiR,GAAiB,SAACpV,GAAU,QACxBmI,GAAWC,mBACjB,GAAkB6D,cAASjM,EAAMqV,MAAM9B,OAAOpI,KAAvCmK,GAAP,eACA,GAAyCrJ,eAAS,kBAAM,kBAAM,SAA9D,eAAOsJ,EAAP,KAAsBC,EAAtB,KACA,GAAsCvJ,eAAS,kBAAM,kBAAM,SAA3D,eAAOC,EAAP,KAAoBC,EAApB,KAEMsJ,GAAU1I,kBACZ,qBAAGC,oBAA8ChH,cAE/CA,GAAawH,cAAQ,kBAAMkI,QAAqBD,KAAU,CAACA,IAE3DE,GAAiB5I,kBACnB,qBAAGC,oBAA8CC,yBAGrDmB,gBAAU,WACNjG,GAAS6G,QAAgBsG,MAC1B,CAACnN,EAAUmN,IAEd,IA2CY,IApCN5G,EAAkB,SAAAC,GACpBxC,GACI,kBAAM,kBACF,kBAACyJ,GAAA,EAAD,CACIjH,KAAMA,EACNI,UAAW,WACP5G,GAAS6G,QAAgBsG,IACzBnN,GAASmG,QAA0BgH,YAM/CO,EAAgB7P,EAAhB6P,MAAO/J,EAAS9F,EAAT8F,KAETsD,EAAmB,CACrB/K,GAAIiR,EACJ9F,UAAWxJ,EAAW8F,KAAK0D,UAC3BC,cAAezJ,EAAW8F,KAAKrF,qBAC/BqP,uBAAuBH,SAAA,UAAAA,EAAgBtI,eAAhB,mBAAyBC,YAAzB,eAA+B2C,cAAe,GAEnE8F,EAAa,EACfC,UA7B0B,SAAArH,GAC1B6G,GACI,kBAAM,kBACF,kBAACS,GAAA,EAAD,CAAmBC,MAAI,EAACvH,KAAMA,EAAMI,UAAW,kBAAM5G,GAAS6G,QAAgBsG,aA0BrC,CAC7C,CACIa,iBAAkBnQ,EAAW8F,KAAKqK,iBAClC9R,GAAIiR,EACJ7F,cAAezJ,EAAW8F,KAAKxF,gCAGvC8P,SAAoB1H,EAAiB,CAACU,KAElCpH,EAAU8D,EAAV9D,MACF6L,EAAmB7L,GAASA,EAAMhB,KACpC,kBAAuC,CAAElD,MAAzC,EAAGkF,QAAqD5B,MAAxD,EAAoBpI,gBAGxB,OAAK6W,EAgDG,kBAAC,aAAD,KACI,kBAAC,KAAD,CAAQnQ,MAAO4P,IACf,kBAACe,EAAA,EAAD,OAhDJ,kBAAC,aAAD,KACI,kBAACrS,GAAesS,SAAhB,CAAyBxS,MAAOkC,GAAc,CAAE7B,UAAW6B,EAAW7B,YAClE,kBAAC,KAAD,CACIuB,MAAOoG,EAAKyK,eAAiBjB,EAAU,MAAQxJ,EAAKyK,eAAiBjB,EACrEvB,QAASgC,EACTS,cAAe,cACfC,YAAa,CACT,CACI/Q,MAAOgR,oBACPhN,GAAIgN,iBACJC,QAAQ,GAEZ,CACIjR,MAAO4P,EACPsB,UAAU,EACVD,QAAQ,IAGhBE,OAAQ,CACJ,kBAACC,GAAA,EAAD,CACIlT,IAAI,SACJmT,aAAa,UAACtB,EAAQpI,QAAQvB,YAAjB,QAAC,EAAsBkL,WAAWjL,eAC/CkL,SAAS,UAAAxB,EAAQpI,QAAQvB,YAAhB,eAAsBkL,WAAWhP,MAAM4H,QAAS,MAIjE,kBAAC,GAAD,CACI1H,+BAAgCA,KAChC4D,KAAM9F,IAEV,kBAACkG,EAAD,MACA,kBAACqJ,EAAD,OAEJ,kBAAC2B,EAAA,EAAD,KACI,kBAAC,GAAD,CACI/L,IAAKmK,EACLzB,iBAAkBA,EAClBzE,iBAAkBA,EAClB+H,QAAS,CAAEzI,yBAgBvC0G,GAAevV,UAAY,CACvBwV,MAAOxV,WACPmG,WAAYnG,WACZmP,gBAAiBnP,SACjBuX,sBAAuBvX,UAE3B,UAAesV,QAAWC","file":"js/CVEDetailsPage.df76feee2dab955532aa.js","sourcesContent":["import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n\n    return (\n        <Stack hasGutter>\n            <StackItem className=\"pf-u-mt-sm\">\n                <div>\n                    {intl.formatMessage(messages.publishDate)}: {publishDate}\n                </div>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.p}>{description}</Text>\n                </TextContent>\n            </StackItem>\n            <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                {link}\n            </StackItem>\n        </Stack>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport ContentLoader, { BulletList, List } from 'react-content-loader';\n\nconst WithLoader = props => {\n    if (props === undefined || props.loading !== false) {\n        switch (props.variant) {\n            case 'spinner':\n                return <Spinner centered />;\n            case 'cvePageOverviewItem':\n                return <CVEPageOverviewItemLoader />;\n            case 'list':\n                return <List />;\n            case 'bulletList':\n                return <BulletList />;\n            case 'trendBox':\n                return <TrendBoxLoader />;\n            case 'currentVulnerabilitiesItem':\n                return <CurrentVulnerabilitiesItemLoader />;\n            default:\n                return <Skeleton size={SkeletonSize.lg} />;\n        }\n    }\n\n    return props.children;\n};\n\n// Loaders\nconst CVEPageOverviewItemLoader = () => {\n    return (\n        <ContentLoader height={61} width={120}>\n            <rect x=\"35\" y=\"0\" rx=\"0\" ry=\"0\" width=\"50\" height=\"35\" />\n            <rect x=\"0\" y=\"45\" rx=\"0\" ry=\"0\" width=\"120\" height=\"16\" />\n        </ContentLoader>\n    );\n};\n\nconst TrendBoxLoader = () => {\n    return (\n        <ContentLoader height={100} width={300}>\n            <rect x=\"388.58\" y=\"109.13\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n            <rect x=\"11.58\" y=\"16.13\" rx=\"0\" ry=\"0\" width=\"37\" height=\"62\" />\n            <rect x=\"52.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"76.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"4.58\" y=\"82.13\" rx=\"0\" ry=\"0\" width=\"154\" height=\"22\" />\n        </ContentLoader>\n    );\n};\n\nconst CurrentVulnerabilitiesItemLoader = () => {\n    return (\n        <ContentLoader height={50} width={200} speed={2} primaryColor=\"#f3f3f3\" secondaryColor=\"#ecebeb\">\n            <rect x=\"82.58\" y=\"15.13\" rx=\"0\" ry=\"0\" width=\"110.88\" height=\"21.42\" />\n            <circle cx=\"25\" cy=\"25\" r=\"25\" />\n        </ContentLoader>\n    );\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string\n};\n\nexport default WithLoader;\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    // eslint-disable-next-line no-unused-vars\n    const { cvssVersion, ...values } = parsedVector;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <WithLoader loading={context.isLoading}>\n                        <Popover\n                            id=\"popover-cvss\"\n                            position=\"bottom\"\n                            maxWidth={'100%'}\n                            enableFlip\n                            headerContent={ `${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}` }\n                            bodyContent={\n                                cvssVector ?\n                                    (\n                                        <Table\n                                            aria-label={'Metric breakdown'}\n                                            variant={TableVariant.compact}\n                                            gridBreakPoint=\"\"\n                                            cells={\n                                                [intl.formatMessage(messages.cvssVectorMetric),\n                                                    intl.formatMessage(messages.cvssVectorValue)]\n                                            }\n                                            rows={Object.entries(values)}\n                                        >\n                                            <TableHeader />\n                                            <TableBody />\n                                        </Table>\n                                    ) : (notAvailable)\n                            }\n                        >\n                            <React.Fragment>\n                                <Label isLarge className=\"pf-u-mb-xs pointer\">\n                                    {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                                    <OutlinedQuestionCircleIcon\n                                        color={'var(--pf-global--secondary-color--100)'}\n                                        className=\"pf-u-ml-xs\"\n                                    />\n                                </Label>\n                            </React.Fragment>\n                        </Popover>\n                    </WithLoader>\n\n                    <WithLoader loading={context.isLoading}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent={''} aria-label=\"Business risk popover\" position=\"right\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack className=\"popover-content\">\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from '../CVEDetailsPageDescription/SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <Split hasGutter>\n                    <SplitItem>\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.businessRiskLabel)}\n                            value={businessRisk}\n                            content={brPopoverContent}\n                        />\n                    </SplitItem>\n                    <SplitItem className=\"pf-u-ml-lg\">\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.statusLabel)}\n                            content={statusPopoverContent}\n                            value={\n                                <span>\n                                    {systemsStatusDivergent > 0 && (\n                                        <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />\n                                    )}{' '}\n                                    {status}\n                                </span>\n                            }\n                        />\n                    </SplitItem>\n                </Split>\n            </StackItem>\n\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\" isLarge>\n                    {intl.formatMessage(messages.impact)}\n                </Label>\n                <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                    <Shield impact={cveDetails.title} hasLabel/>\n                </span>\n            </StackItem>\n\n            <StackItem>\n                <CvssVector\n                    cvss2_metrics={cveAttributes.cvss2_metrics}\n                    cvss3_metrics={cveAttributes.cvss3_metrics}\n                    score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        const params = { rule_key: ruleId, rule_presence: 'true' };\n        dispatch(changeExposedSystemsParameters(params));\n    };\n\n    return <Fragment>\n        {sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\"/>\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={() => handleExposedSystemFilter(rule.rule_id)}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule_key=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            { RISK_OF_CHANGE_LABEL[rule.change_risk] }\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                { !rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                { rule.reboot_required &&\n                                                                <Text>\n                                                                    <PowerOffIcon\n                                                                        className=\"pf-u-mr-xs powerOffIcon\"\n                                                                    />\n                                                                    {intl.formatMessage(messages.rebootRequired)}\n                                                                </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                        <StackItem>\n                                            <TextContent>\n                                                <Text\n                                                    className=\"pf-u-mt-xs\"\n                                                    component={TextVariants.p}\n                                                >\n                                                    <a\n                                                        className=\"kb-link\"\n                                                        href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                        target=\"_blank\"\n                                                        rel=\"noopener noreferrer\"\n                                                    >\n                                                        {\n                                                            intl.formatMessage(messages.knowledgebaseArticle)\n                                                        }\n                                                        <ExternalLinkAltIcon className=\"l-sm-spacer\"/>\n                                                    </a>\n                                                </Text>\n                                            </TextContent>\n                                        </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                .filter(cve => cve !== synopsis)\n                                                .map((cve, _i) =>\n                                                    <a\n                                                        className=\"associated-cve-link\"\n                                                        key={_i}\n                                                        href={`${CVES_PATH}/${cve}`}\n                                                    >\n                                                        {cve}\n                                                    </a>\n                                                )\n                                                .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))}\n    </Fragment>;\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitBody)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport WithLoader from '../WithLoader/WithLoader';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Grid hasGutter>\n                    <GridItem md={8} sm={12}>\n                        <WithLoader loading={context.isLoading} variant=\"spinner\">\n                            <CVEDetailsPageDescription cveAttributes={data.data} />\n                        </WithLoader>\n                    </GridItem>\n\n                    <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                        <CVEDetailsPageSidebar cveAttributes={data.data} />\n                    </GridItem>\n                    {\n                        data.data.known_exploit && <KnownExploitSummary/>\n                    }\n\n                    <CSAwRuleBox\n                        changeExposedSystemsParameters = {changeExposedSystemsParameters}\n                        synopsis={data.data.synopsis}\n                        rules={data.data.rules}\n                    />\n                </Grid>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useUrlParams, updateRef, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport Remediation from '../Remediation/Remediation';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport {\n    selectMultipleEntities,\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearCveStore,\n    fetchAffectedSystemsIdsByCve,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    SYSTEMS_EXPOSED_SORTING_HEADER\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nconst SystemsExposedTable = (props) => {\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n\n    const affectedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const isLoading = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading\n    );\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n\n    const metadata = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta\n    );\n    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems }, props.cve), [affectedSystems, props.cve]);\n\n    const apply = (config) => dispatch(\n        changeExposedSystemsParameters(config)\n    );\n\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n\n        if (inventory.current && (metadata.page !== page || metadata.limit !== pageSize)) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        const selectedHosts = payload ? payload : [];\n        setSelectedHosts(selectedHosts);\n    };\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]\n            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));\n        }\n    }, [parameters, isFirstMount]);\n\n    useEffect(() => {\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        let params = [props.cve, { ...parameters }];\n        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        updateRef(items.meta, apply);\n                        fetchCveDetails(props.cve);\n                    }}\n                    inventoryList={inventories}\n                    type={'systemsExposed'}\n                />\n\n        );\n    };\n\n    const getSelectedSystemsData = () => {\n        let systemsList = items.data.filter(item => selectedHosts.includes(item.inventory_id));\n        // eslint-disable-next-line camelcase\n        systemsList = systemsList.map(({ inventory_id, display_name, status_id, status_text: justification }) =>\n            ({ inventory_id, display_name, status_id, justification })); // omit properties we don't need\n\n        return systemsList;\n    };\n\n    const kebabOptions = ['',\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal(\n                [props.cveStatusDetails],\n                getSelectedSystemsData()\n            ),\n            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n        }\n    ];\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedHosts || [],\n        selectorHandler: handleSelect,\n        items: items.data && items || { data: [], meta: { total_items: 0 } },\n        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })\n    }), [items, selectedHosts, parameters, props.cve]);\n\n    const selectedHostsData = useMemo(() => (\n        items?.data.filter(s => selectedHosts?.includes(s.id))\n    ), [selectedHosts, items]);\n\n    const sortingHeader = items?.meta?.patch_access\n        ? SYSTEMS_EXPOSED_SORTING_HEADER\n        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');\n\n    const sortBy = () =>\n        createSortBy(\n            sortingHeader,\n            metadata.sort\n        );\n\n    const onSort = (_event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            sortingHeader,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <React.Fragment>\n            <Stack hasGutter>\n                <StackItem>\n                    <TextContent>\n                        <Text component={TextVariants.h2}>\n                            {props.intl.formatMessage(messages.affectsSystems)}\n                        </Text>\n                    </TextContent>\n                </StackItem>\n                <StackItem>\n                    <InventoryTable\n                        disableDefaultColumns\n                        onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),\n                                ...mergeWithDetail()\n                            });\n                        }}\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            onSort: (items.data.length > 0) && onSort,\n                            sortBy: (items.data.length > 0) && sortBy(),\n                            actionResolver: (rowData, rowIndex) => (\n                                items.data.length > 0 &&\n                                systemExposedTableRowActions(\n                                    showStatusModal,\n                                    props.cveStatusDetails,\n                                    rowIndex.rowIndex\n                                )\n                            ),\n                            variant: TableVariant.compact\n                        }}\n                        showTags\n                        key={'inventory'}\n                        expandable\n                        ref={inventory}\n                        items={items.data}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        isLoaded={!isLoading}\n                        onRefresh={inventoryRefresh}\n                        hasCheckbox={items && items.length !== 0}\n                        showActions={items && items.length !== 0}\n                        onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                    >\n                        <PrimaryToolbar\n                            className=\"vuln-systems-primary-toolbar\"\n                            exportConfig={{\n                                isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                ouiaId: 'export',\n                                ...exportConfig({ downloadReport })\n                            }}\n                            dedicatedAction={(!isLoading &&\n                                <Remediation\n                                    manyRules\n                                    systems={selectedHostsData}\n                                    cves={{ id: props.cve, rules: props.filterRuleValues }}\n                                />\n                            )}\n                            actionsConfig={{\n                                actions: kebabOptions,\n                                kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 },\n                                dropdownProps: { ouiaId: 'toolbar-actions' }\n                            }}\n                            activeFiltersConfig={{\n                                filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),\n                                onDelete: (_, chips) => removeFilters(chips, apply),\n                                deleteTitle: props.intl.formatMessage(messages.resetFilters)\n                            }}\n                            bulkSelect={selectOptions && {\n                                count: selectedHosts && selectedHosts.length,\n                                items: selectOptions.items,\n                                isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                checked: Boolean(selectedHosts && selectedHosts.length),\n                                ouiaId: 'bulk-select',\n                                onSelect: () => selectOptions.handleOnCheckboxChange()\n                            }}\n                            filterConfig={{\n                                items: [\n                                    searchFilter(\n                                        'filter',\n                                        messages.systemsSearchName,\n                                        messages.searchFilterByName,\n                                        parameters.filter, apply\n                                    ),\n                                    securityRuleFilter(apply, parameters, props.filterRuleValues),\n                                    statusFilter(apply, parameters),\n                                    searchFilter('advisory', messages.advisory, messages.search, parameters.advisory, apply)\n                                ]\n                            }}\n                        />\n                        {StatusModal && <StatusModal />}\n                    </InventoryTable>\n                </StackItem>\n            </Stack>\n        </React.Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cve: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsByCVE\n} from '../../../Store/Actions/Actions';\nimport { withRouter } from 'react-router-dom';\nimport { PATHS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = (props) => {\n    const dispatch = useDispatch();\n    const [cveName] = useState(props.match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n\n    const exposedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        dispatch(fetchCveDetails(cveName));\n                        dispatch(fetchAffectedSystemsByCVE(cveName));\n                    }}\n                />\n        );\n    };\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: exposedSystems?.payload?.meta?.total_items || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    if (!error) {\n        return (\n            <React.Fragment>\n                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>\n                    <Header\n                        title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                        actions={kebabItems}\n                        actionsOuiaId={'cve-actions'}\n                        breadcrumbs={[\n                            {\n                                title: PATHS.cvesPage.title,\n                                to: PATHS.cvesPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: cveName,\n                                isActive: true,\n                                loaded: true\n                            }\n                        ]}\n                        labels={[\n                            <GroupedCVELabels\n                                key=\"labels\"\n                                hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                hasRule={details.payload.data?.attributes.rules.length > 0}\n                            />\n                        ]}\n                    >\n                        <CVEDetailsPageSummary\n                            changeExposedSystemsParameters={changeExposedSystemsParameters}\n                            data={cveDetails}\n                        />\n                        <StatusModal />\n                        <BusinessModal />\n                    </Header>\n                    <Main>\n                        <SystemsExposedTable\n                            cve={cveName}\n                            filterRuleValues={filterRuleValues}\n                            cveStatusDetails={cveStatusDetails}\n                            methods={{ showStatusModal }}\n                        />\n                    </Main>\n                </CVEPageContext.Provider>\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n                <Header title={cveName}/>\n                <InvalidObject />\n            </React.Fragment>\n        );\n    }\n};\n\nCVEDetailsPage.propTypes = {\n    match: propTypes.object,\n    cveDetails: propTypes.object,\n    fetchCveDetails: propTypes.func,\n    handleCveDetailsError: propTypes.func\n};\nexport default withRouter(CVEDetailsPage);\n"],"sourceRoot":""}