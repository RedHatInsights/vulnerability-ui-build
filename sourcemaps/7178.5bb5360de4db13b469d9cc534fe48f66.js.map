{"version":3,"file":"js/7178.1650640195442.bf1078e847bf1f736ec9.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactTable = require(\"@patternfly/react-table\");\n\nvar _Skeleton = require(\"../Skeleton\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar SkeletonTable = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(SkeletonTable, _React$Component);\n\n  var _super = _createSuper(SkeletonTable);\n\n  function SkeletonTable() {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, SkeletonTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createColumns\", function () {\n      var colSize = _this.props.colSize;\n      return (0, _toConsumableArray2[\"default\"])(Array(colSize)).map(function () {\n        return {\n          title: /*#__PURE__*/_react[\"default\"].createElement(_Skeleton.Skeleton, {\n            size: _Skeleton.SkeletonSize.sm\n          })\n        };\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getColumns\", function () {\n      var _this$props = _this.props,\n          paddingColumnSize = _this$props.paddingColumnSize,\n          columns = _this$props.columns;\n      return _this.newArray(paddingColumnSize).map(function () {\n        return '';\n      }).concat(columns || _this.createColumns());\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createRows\", function () {\n      var _this$props2 = _this.props,\n          colSize = _this$props2.colSize,\n          rowSize = _this$props2.rowSize,\n          columns = _this$props2.columns,\n          paddingColumnSize = _this$props2.paddingColumnSize;\n      var numberOfCols = columns ? columns.length : colSize;\n      return _this.newArray(rowSize).map(function () {\n        return {\n          disableSelection: true,\n          cells: _this.newArray(paddingColumnSize).map(function () {\n            return '';\n          }).concat(_this.newArray(numberOfCols).map(function () {\n            return {\n              title: /*#__PURE__*/_react[\"default\"].createElement(_Skeleton.Skeleton, {\n                size: _Skeleton.SkeletonSize.md\n              })\n            };\n          }))\n        };\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"selectVariant\", function () {\n      var hasRadio = _this.props.hasRadio;\n      return hasRadio ? (_reactTable.RowSelectVariant === null || _reactTable.RowSelectVariant === void 0 ? void 0 : _reactTable.RowSelectVariant.radio) || 'radio' : (_reactTable.RowSelectVariant === null || _reactTable.RowSelectVariant === void 0 ? void 0 : _reactTable.RowSelectVariant.checkbox) || 'checkbox';\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"newArray\", function (size) {\n      return (0, _toConsumableArray2[\"default\"])(Array(size));\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(SkeletonTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          canSelectAll = _this$props3.canSelectAll,\n          isSelectable = _this$props3.isSelectable,\n          sortBy = _this$props3.sortBy,\n          variant = _this$props3.variant;\n      return /*#__PURE__*/_react[\"default\"].createElement(_reactTable.Table, {\n        cells: this.getColumns(),\n        rows: this.createRows(),\n        sortBy: sortBy,\n        \"aria-label\": \"Loading\",\n        onSelect: isSelectable,\n        selectVariant: isSelectable ? this.selectVariant() : null,\n        canSelectAll: canSelectAll,\n        variant: variant\n      }, /*#__PURE__*/_react[\"default\"].createElement(_reactTable.TableHeader, null), /*#__PURE__*/_react[\"default\"].createElement(_reactTable.TableBody, null));\n    }\n  }]);\n  return SkeletonTable;\n}(_react[\"default\"].Component);\n\nSkeletonTable.propTypes = {\n  colSize: _propTypes[\"default\"].number,\n  rowSize: _propTypes[\"default\"].number,\n  columns: _propTypes[\"default\"].array,\n  paddingColumnSize: _propTypes[\"default\"].number,\n  sortBy: _propTypes[\"default\"].shape({\n    index: _propTypes[\"default\"].number,\n    direction: _propTypes[\"default\"].oneOf(['asc', 'desc'])\n  }),\n  isSelectable: _propTypes[\"default\"].bool,\n  canSelectAll: _propTypes[\"default\"].bool,\n  hasRadio: _propTypes[\"default\"].bool,\n  variant: _propTypes[\"default\"].string\n};\nSkeletonTable.defaultProps = {\n  rowSize: 0,\n  paddingColumnSize: 0,\n  canSelectAll: false,\n  isSelectable: false,\n  hasRadio: false,\n  variant: null\n};\nvar _default = SkeletonTable;\nexports[\"default\"] = _default;","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, size, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton\n                    size={size ?? SkeletonSize.lg}\n                    {...props}\n                    style={{ display: 'inline-block', ...props.style }}\n                />;\n            default:\n                return <Skeleton size={size ?? SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node,\n    size: propTypes.string\n};\n\nexport default WithLoader;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool.isRequired\n};\n\nexport default injectIntl(CveStatusModal);\n"],"names":["_interopRequireDefault","exports","_toConsumableArray2","_classCallCheck2","_createClass2","_assertThisInitialized2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_react","_reactTable","_Skeleton","_propTypes","SkeletonTable","_React$Component","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","_isNativeReflectConstruct","result","Super","NewTarget","this","constructor","arguments","apply","_this","_len","length","args","Array","_key","concat","colSize","props","map","title","createElement","Skeleton","size","SkeletonSize","sm","_this$props","paddingColumnSize","columns","newArray","createColumns","_this$props2","rowSize","numberOfCols","disableSelection","cells","md","hasRadio","RowSelectVariant","radio","checkbox","key","value","_this$props3","canSelectAll","isSelectable","sortBy","variant","Table","getColumns","rows","createRows","onSelect","selectVariant","TableHeader","TableBody","Component","propTypes","number","array","shape","index","direction","oneOf","bool","string","defaultProps","_default","kebabItemDownloadPDF","loading","downloadReport","component","onClick","messages","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","children","centered","TableVariant","style","display","Object","keys","BusinessRiskModal","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","currentTarget","onSuccessNotification","formatMessage","count","onFailureNotification","autoDismiss","description","items","onSave","setBusinessRisk","parseInt","cve","item","id","business_risk_text","then","error","ouiaId","hasGutter","fieldId","BUSINESS_RISK_OPTIONS","className","isChecked","onChange","name","type","resizeOrientation","minHeight","injectIntl","CveStatusModal","canEditPairStatus","useStatusSelect","every","status_id","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","filter","exposed_systems_count","Promise","all","setCveStatus","status_text","setSystemCveStatus","cveId","b","chunks","fontSize","color","content","checked","verticalAlign"],"sourceRoot":""}