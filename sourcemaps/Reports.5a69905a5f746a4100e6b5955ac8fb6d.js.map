{"version":3,"file":"js/Reports.1640168351282.00e35b07561187f68562.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack:///./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js","webpack:///./src/Helpers/DownloadReport.js"],"sourcesContent":["import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text  } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport CVElabels from '../Common/CVElabels';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    const [legendHeader, ...restCVSSHeader] = CVSSHeader;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}\n            >\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                        colorSchema=\"orange\"\n                        legendHeader={legendHeader}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[restCVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}\n            >\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3)}\n                withColumn={false}\n            >\n                {\n                    topCves.map(({\n                        synopsis,\n                        known_exploit: hasExploit,\n                        rule_presence: hasRule,\n                        description,\n                        cvss3_score: cvss3,\n                        systems_affected: systemsAffected\n                    }) => (\n                        <Panel\n                            key={synopsis}\n                            title={synopsis}\n                            description={cveDesc(description)}\n                            labels={<CVElabels hasExploit={hasExploit} hasRule={hasRule} intl={intl} />}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cvss3).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {systemsAffected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport truncate from 'lodash/truncate';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}>{`${truncate(rule, { length: 320 })}\\n\\n`}</Text>\n            {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap, rulesChart } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRulesSection)}\n            >\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"bar\"\n                        subTitle=\"rules\"\n                        title=\"Rules\"\n                        data={rulesChart}\n                        colorSchema=\"orange\"\n                        legend={false}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}\n            >\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity}/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array,\n        rulesChart: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    // if there's no CVE with N/A CVSS do not display N/A in graph/table\n    if (cvesBySeverity?.na?.count === 0) {\n        delete cvesBySeverity.na;\n        delete CVSSMapping.na;\n    }\n\n    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const CVSSData = Object.values(cvesBySeverity).reverse().map((\n        { count, percentage, known_exploit_count: knownExploitsCount }) =>\n        [intl.formatMessage(messages.executiveReportOfTotal,\n            {\n                count,\n                percentage\n            }\n        ), knownExploitsCount.toString()]\n    );\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n\n            if (percentageInfo && fieldData.percentage) {\n                value = fieldData.percentage;\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });\n\n    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);\n\n    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));\n\n    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));\n\n    const coverPageData = { totalSystems, totalCves, totalRules };\n\n    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };\n\n    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number,\n        rules_by_severity: PropTypes.object,\n        rules_total: PropTypes.number,\n        top_rules: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport FooterPDF from './Common/FooterPDF';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const dataFetch = async () => {\n        let data;\n\n        try {\n            data = await getExecutiveReport();\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        const report = buildExecReport({ data, intl });\n        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.rule_presence === true));\n        setExploit(() => data.top_cves.some(cve => cve.known_exploit === true));\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const onDownloadButtonClick = () => {\n        setRenderPDF(true);\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    };\n\n    return (\n        <Fragment>\n            <a onClick={() => onDownloadButtonClick()}>\n                {isLoading\n                    ? intl.formatMessage(messages.loading)\n                    : intl.formatMessage(messages.executiveReportCardButton)}\n            </a>\n            {\n                renderPDF && <DownloadButton\n                    fallback={<div />}\n                    type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n                    fileName={`vulnerability_executive-report--${date}.pdf`}\n                    buttonProps={{ variant: 'link', isInline: true }}\n                    groupName=\"Red Hat Insights\"\n                    asyncFunction={dataFetch}\n                    allPagesHaveTitle={false}\n                    showButton={false}\n                    footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                    onSuccess={() => {\n                        setRenderPDF(false);\n                    }}\n\n                />\n            }\n        </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\n\nconst SelectCustomSorter = ({ sorterData, setSorterData, selectProps, options }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnSelectChange = (optionName) => {\n        const optionValue = options.find(item => item.label === optionName).value;\n        setSorterData(optionValue);\n        setOpen(false);\n    };\n\n    return (\n        <Select\n            variant=\"single\"\n            direction=\"up\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={options.find(item => item.value === sorterData).label}\n            key=\"custom-sorter\"\n            onSelect={(event, optionName) => { handleOnSelectChange(optionName); }}\n            width=\"auto\"\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption width=\"100%\" key={item.label} value={item.label}/>\n            )}\n        </Select>\n    );\n};\n\nSelectCustomSorter.propTypes = {\n    sorterData: propTypes.object,\n    setSorterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default SelectCustomSorter;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport {\n    CVE_REPORT_FILTERS,\n    PDF_REPORT_USER_NOTE_MAX_LENGTH,\n    CUSTOM_REPORT_SORT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\nimport { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\nimport SelectCustomSorter from '../../PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    sorterData,\n    setFilterData,\n    setSorterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n}) => {\n    const [includeAllColumns, setIncludeAllColumns] = useState(true);\n\n    const activeFilters = [\n        'rule_presence',\n        'known_exploit',\n        'impact',\n        'cvss_filter',\n        'business_risk_id',\n        'status_id',\n        'publish_date',\n        'rhel_version'\n    ];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (includeAllColumns) {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [includeAllColumns, setColumnsToInclude]);\n\n    return (\n        <Modal\n            width=\"50rem\"\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId=\"custom-report-modal\"\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        ...CVE_REPORT_FILTERS[filterId],\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: { className: 'pf-u-mr-sm pf-u-mb-sm',\n                                            ...CVE_REPORT_FILTERS[filterId].selectProps },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={includeAllColumns}\n                            onChange={() => setIncludeAllColumns(true)} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={!includeAllColumns}\n                            onChange={() => setIncludeAllColumns(false)} />\n                    </ToggleGroup>\n\n                    {includeAllColumns ||\n                        <div style={styles.collumns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className=\"pf-u-mb-md\"\n                                    />\n                                )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportSortDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        <SelectCustomSorter sorterData={sorterData} setSorterData={setSorterData}\n                            selectProps={{ className: 'pf-u-mr-sm pf-u-mb-sm' }}\n                            options={CUSTOM_REPORT_SORT_OPTIONS}/>\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation=\"vertical\"\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    sorterData: propTypes.object,\n    setFilterData: propTypes.func,\n    setSorterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={style} src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { buildFilters, constructReportParameters } from '../../../Helpers/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA, CUSTOM_REPORT_DEFAULT_SORT, PERMISSIONS } from '../../../Helpers/constants';\nimport styles from './Common/styles';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst ReportsPage = () => {\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.advancedReporting]);\n\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        isLoading ? <Spinner centered /> :\n            isUserAuthorized ?\n                <React.Fragment>\n                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />\n                    <Main>\n                        <Grid hasGutter lg={3} md={4} sm={12}>\n                            <GridItem>\n                                <Card className=\"report-card\">\n                                    <CardTitle>\n                                        <ChartPieSolid style={styles.pieChartIcon} />\n                                        <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                            {intl.formatMessage(messages.executiveReportCardTitle)}\n                                        </span>\n                                    </CardTitle>\n                                    <CardBody>\n                                        {intl.formatMessage(messages.executiveReportCardDescription)}\n                                    </CardBody>\n                                    <CardFooter>\n                                        <DownloadExecutive />\n                                    </CardFooter>\n                                </Card>\n                            </GridItem>\n                            <GridItem>\n                                <Card className=\"report-card\">\n                                    <CardTitle>\n                                        <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\" />\n                                        <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                            {intl.formatMessage(messages.customReportCardTitle)}\n                                        </span>\n                                    </CardTitle>\n                                    <CardBody>\n                                        {intl.formatMessage(messages.customReportCardDescription)}\n                                    </CardBody>\n                                    <CardFooter>\n                                        <a className=\"create-report\" onClick={() => setModalOpen(true)}>\n                                            {intl.formatMessage(messages.customReportCardButton)}\n                                        </a>\n                                    </CardFooter>\n                                </Card>\n                            </GridItem>\n                        </Grid>\n                    </Main>\n                    <ReportConfigModal\n                        isOpen={isModalOpen}\n                        columnsToInclude={columnsToInclude}\n                        setColumnsToInclude={setColumnsToInclude}\n                        filterData={filterData}\n                        sorterData={sorterData}\n                        userNotes={userNotes}\n                        reportTitle={reportTitle}\n                        setReportTitle={setReportTitle}\n                        setUserNotes={setUserNotes}\n                        setFilterData={setFilterData}\n                        setSorterData={setSorterData}\n                        handleModalClose={(handleModalClose)}\n                        handleDownloadButton={handleDownloadButton}\n                    />\n\n                    {downloadCVEReport && <DownloadCVEsReport\n                        key=\"download\"\n                        reportData={{\n                            header: columnsToInclude,\n                            reportTitle,\n                            userNotes\n                        }}\n                        showButton={false}\n                        onSuccess={handleModalClose}\n                        params={constructReportParameters(filterData, sorterData)}\n                        filters={buildFilters(filterData)}\n                        isReportDynamic\n                        label={messages.configModalExportReport}\n                    />}\n                </React.Fragment>\n                : <NoAccessPage title={intl.formatMessage(messages.reportsPageTitle)} />\n\n    );\n};\n\nexport default ReportsPage;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { intl } from '../Utilities/IntlProvider';\nimport messages from '../Messages';\n\nclass DownloadReport {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: null\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n\n        this.notifications = {\n            start: {\n                variant: 'info',\n                title: intl.formatMessage(messages.notificationReportDownloadStart)\n            },\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationReportDownloadSuccess)\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            }\n        };\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    };\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    };\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page, showNotification, clearNotification) => {\n        showNotification(this.notifications.start);\n\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = params?.id || null;\n\n        try {\n            let { payload } = await fetchData({\n                ...params.id && { id: params.id },\n                ...params,\n                ...this.defaultParams,\n                data_format: format,\n                report: 'true'\n            });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n\n            clearNotification();\n            showNotification(this.notifications.success);\n        } catch (error) {\n            clearNotification();\n            showNotification(this.notifications.failure);\n\n            throw `${error}`;\n        }\n    };\n}\n\nexport default new DownloadReport();\n"],"names":["CounterItem","counter","label","style","styles","propTypes","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","date","dateFormat","Date","type","props","children","systems","cves","rules","withColumn","SecondPage","cveDesc","description","length","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","legendHeader","restCVSSHeader","titleProps","title","chartType","subTitle","colorSchema","withHeader","rows","flex","map","value","synopsis","hasExploit","known_exploit","hasRule","rule_presence","cvss3","cvss3_score","systemsAffected","systems_affected","labels","CVElabels","Number","parseFloat","toFixed","toString","ThirdPage","rulesDesc","rule","associatedCves","truncate","join","topRules","rulesHeader","rulesBySeverityMap","rulesChart","legend","name","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","na","count","CVSSMapping","Object","keys","reverse","EXEC_RULES_SEVERITY_MAP","values","percentage","knownExploitsCount","known_exploit_count","mapFields","fields","percentageInfo","arr","field","fieldData","undefined","push","recentCvesMapping","x","y","coverPageData","cvesData","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","dataFetch","getExecutiveReport","autoDismiss","msg","report","buildExecReport","some","cve","toISOString","split","onClick","fallback","fileName","buttonProps","isInline","groupName","asyncFunction","allPagesHaveTitle","showButton","footer","FooterPDF","onSuccess","SelectCustomSorter","sorterData","setSorterData","selectProps","options","isOpen","setOpen","Select","direction","onToggle","placeholderText","find","item","onSelect","event","optionName","optionValue","handleOnSelectChange","width","SelectOption","ReportConfigModal","isModalOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","includeAllColumns","setIncludeAllColumns","activeFilters","useEffect","CVE_REPORT_FILTERS","Modal","ouiaId","onClose","actions","Button","isDisabled","isCvssRangeValid","cvss_filter","from","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","id","filterId","component","items","filterName","ToggleGroup","ToggleGroupItem","text","isSelected","Checkbox","isChecked","entries","includes","newValue","parameter","filter","handleCheckboxChange","CUSTOM_REPORT_SORT_OPTIONS","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","useRbac","PERMISSIONS","isUserAuthorized","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","CUSTOM_REPORT_DEFAULT_SORT","dispatch","useDispatch","Spinner","centered","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructReportParameters","filters","buildFilters","isReportDynamic","NoAccessPage","filename","page","defaultParams","checkTypes","fetchData","format","pages","formats","exec","showNotification","clearNotification","notifications","start","data_format","payload","response","JSON","stringify","downloadFile","success","failure","this","page_size","Math","min","MAX_SAFE_INTEGER","replace"],"sourceRoot":""}