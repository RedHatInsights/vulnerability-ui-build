{"version":3,"file":"js/450.920bdbf6a0f0e54da0e5.js","mappings":"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","sources":["webpack:///./src/Helpers/Hooks.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport {\n    addNotification as addNotificationFEC,\n    clearNotifications as clearNotificationsFEC\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { optOutSystemsAction } from '../../src/Store/Actions/Actions';\nimport messages from '../Messages';\nimport { ReadOnlyNotification } from './constants';\n\nexport const useNotification = (config) => {\n    const dispatch = useDispatch();\n\n    const globalConfig = {\n        variant: 'info',\n        ...config\n    };\n\n    useEffect(() => {\n        return () => {\n            if (!config.preventClear) {\n                dispatch(clearNotificationsFEC());\n            }\n        };\n    }, [dispatch]);\n\n    const addNotification = ({ msg, ...config }) =>\n        dispatch(\n            addNotificationFEC({\n                title: msg,\n                ...globalConfig,\n                ...config\n            })\n        );\n\n    const clearNotifications = () =>\n        dispatch(clearNotificationsFEC());\n\n    return [addNotification, clearNotifications];\n};\n\nexport const useGetEntities = (fetchApi, { id, setUrlParams }) => {\n\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, vulnerabilityParams }\n    ) => {\n        const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n        const params = {\n            ...vulnerabilityParams,\n            page,\n            page_size: perPage,\n            sort\n        };\n\n        setUrlParams({ ...params });\n\n        const items = await fetchApi(\n            {\n                ...id && { id },\n                ...params\n            }\n        );\n\n        return {\n            results: items?.data?.map(row => ({ id: row.id, ...row.attributes })),\n            total: items?.meta?.total_items\n        };\n    };\n\n    return getEntities;\n};\n\nexport const useOptOutSystems = onRefreshInventory => {\n    const [addSuccessNotification] = useNotification({ variant: 'success' });\n    const [addFailureNotification] = useNotification({ variant: 'danger', autoDismiss: false });\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    /**\n     * Excludes/included provided system(s), if toggling one system systemId and systemName have to be set.\n     * If toggling multiple systems, these two params are ignored and system info will be extracted from selectedRows.\n     * @param {object} affectedRows - object with keys representing ids of systems to opt out/in\n     * @param {?string} systemName - display name of a system if only a single system is toggled\n     * @param {bool} isIncluded - if true systems will be excluded, else included\n     */\n    return (affectedRows, systemName, isIncluded) => {\n        const count = Object.keys(affectedRows).length;\n\n        dispatch(optOutSystemsAction(Object.keys(affectedRows), isIncluded))\n            .then(() => {\n                addSuccessNotification(isIncluded\n                    ? {\n                        msg: intl.formatMessage(messages.notificationExcludeSuccess, { count, systemName })\n                    }\n                    : {\n                        msg: intl.formatMessage(messages.notificationIncludeSuccessTitle, { count, systemName }),\n                        description: intl.formatMessage(messages.notificationIncludeSuccessBody)\n                    }\n                );\n            }).catch(error => {\n                addFailureNotification(error.status === '503'\n                    ? ReadOnlyNotification\n                    : isIncluded\n                        ? {\n                            msg: intl.formatMessage(messages.notificationExcludeFailureTitle, { count, systemName }),\n                            description: intl.formatMessage(messages.notificationExcludeFailureBody, { count })\n                        }\n                        : {\n                            msg: intl.formatMessage(messages.notificationIncludeFailureTitle, { count, systemName }),\n                            description: intl.formatMessage(messages.notificationIncludeFailureBody, { count })\n                        }\n                );\n            }).finally(onRefreshInventory);\n    };\n};\n\n// Temp solution to suppoint\nconst mapSelectedRows = ({ id, inventory_id: inventoryId }) => ({ id: id ? id : inventoryId, selected: true });\n\nexport const useBulkSelect = ({ rawData, selectedRows, selectedRowsCount, handleSelect, fetchResource, multiRow = false }) => {\n    const intl = useIntl();\n    const { meta, data } = rawData;\n\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = rawData ?? {};\n        handleSelect(data?.map(mapSelectedRows));\n    };\n\n    const handleUnselect = () => {\n        let toSelect = [];\n        Object.keys(selectedRows).forEach((id) => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n\n            return toSelect;\n        });\n\n        handleSelect(toSelect);\n    };\n\n    const handleSelectAll = async () => {\n\n        let { payload } = await fetchResource({ page_size: meta.total_items, page: 1 });\n\n        payload.then(({ data }) => handleSelect(data.map(mapSelectedRows)));\n    };\n\n    return {\n        count: selectedRowsCount,\n        checked: !!selectedRowsCount,\n        isDisabled: meta.total_items === 0 && selectedRowsCount === 0,\n        ouiaId: 'bulk-select',\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselect\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ],\n        onSelect: () => !selectedRowsCount ? handleSelectAll() : handleUnselect()\n    };\n\n};\n"],"names":["useNotification","config","dispatch","useDispatch","globalConfig","variant","useEffect","preventClear","clearNotificationsFEC","msg","addNotificationFEC","title","useGetEntities","fetchApi","id","setUrlParams","getEntities","_items","orderBy","orderDirection","page","perPage","per_page","vulnerabilityParams","sort","params","page_size","items","results","data","map","row","attributes","total","meta","total_items","useOptOutSystems","onRefreshInventory","addSuccessNotification","autoDismiss","addFailureNotification","intl","useIntl","affectedRows","systemName","isIncluded","count","Object","keys","length","optOutSystemsAction","then","formatMessage","messages","description","error","status","ReadOnlyNotification","mapSelectedRows","inventoryId","inventory_id","selected","useBulkSelect","rawData","selectedRows","selectedRowsCount","handleSelect","fetchResource","multiRow","selectPageNumber","Array","isArray","handleUnselect","toSelect","forEach","push","handleSelectAll","payload","checked","isDisabled","ouiaId","onClick","onSelect"],"sourceRoot":""}