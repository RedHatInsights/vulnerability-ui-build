{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","addNotification","useNotification","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","systemsFetch","msg","formatMessage","messages","getSystems","DownloadReport","meta","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","length","join","undefined","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","SystemsTableToolbar","selectedRows","totalSelectedRows","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","kebabProps","useMemo","selectedRowsData","filter","s","id","selectedExcluded","some","opt_out","selectedIncluded","kebabOptions","count","onClick","isDisabled","bulkSelectProps","useBulkSelect","rawData","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","className","bulkSelect","actionsConfig","actions","kebabToggleProps","total_items","dropdownProps","ouiaId","filterConfig","useSearchFilter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","showButton","onSuccess","dataShape","withRouter","injectIntl","inventoryRef","React","dispatch","useDispatch","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","useSelector","entities","rows","shallowEqual","totalItems","total","Object","keys","SystemsPageStore","error","hasError","errorCode","useEffect","clearSystemStore","clearInventoryStore","changeSystemsParams","useDeepCompareEffect","useOptOutSystems","onRefreshInventory","current","onRefreshData","columnCounter","getEntities","useGetEntities","APIHelper","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","variant","TableVariant","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","hasCheckbox","columns","defaultColumns","nameColumn","restColumns","lastSeenColumn","find","key","tagsColumn","width","isStatic","cellTransforms","nowrap","createColumns","hideFilters","all","payload","selectRows"],"mappings":"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","file":"js/Systems.921a631c0ef1b3fc3845.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.customReportNotificationSystem) });\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, PDF_REPORT_PER_PAGE.systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\n\nconst SystemsTableToolbar = ({\n    selectedRows,\n    totalSelectedRows,\n    intl,\n    parameters,\n    systems,\n    methods\n}) => {\n    const [exportPDF, setExportPDF] = useState(false);\n    const { apply, handleSelect, doOptOut } = methods;\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const kebabProps = useMemo(() => {\n        const selectedRowsData = systems?.data.filter(s => selectedRows[s.id] === true);\n        return {\n            selectedExcluded: selectedRowsData.some(({ opt_out: optOut }) => optOut === true),\n            selectedIncluded: selectedRowsData.some(({ opt_out: optOut }) => optOut === false)\n        };\n    }, [selectedRows, systems]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: totalSelectedRows }),\n            onClick: () => doOptOut(null, true),\n            props: { isDisabled: !totalSelectedRows || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: totalSelectedRows }),\n            onClick: () => doOptOut(null, false),\n            props: { isDisabled: !totalSelectedRows || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const bulkSelectProps = useBulkSelect({\n        rawData: systems,\n        selectedRows,\n        totalSelectedRows,\n        handleSelect,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={bulkSelectProps}\n            actionsConfig={{\n                actions: kebabOptions,\n                kebabToggleProps: { isDisabled: !totalSelectedRows || systems.meta.total_items === 0 },\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedRows: propTypes.array,\n    totalSelectedRows: propTypes.number,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, Fragment, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    clearSystemStore,\n    clearInventoryStore,\n    selectRows\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { nowrap, TableVariant } from '@patternfly/react-table';\nimport { useGetEntities, useOptOutSystems } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport * as APIHelper from '../../../Helpers/APIHelper';\n\nconst createColumns = (defaultColumns) => {\n    let [nameColumn, ...restColumns] = SYSTEMS_HEADER;\n    let lastSeenColumn = defaultColumns.find(({ key }) => key === 'updated');\n    let tagsColumn = defaultColumns.find(({ key }) => key === 'tags');\n\n    tagsColumn = { ...tagsColumn, props: { width: 10, isStatic: true } };\n    lastSeenColumn = { ...lastSeenColumn, cellTransforms: [nowrap], props: { width: 20 } };\n\n    let mergedColumns = [nameColumn, tagsColumn, ...restColumns, lastSeenColumn];\n\n    return mergedColumns;\n};\n\nconst SystemsPage = () => {\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const totalSelectedRows = Object.keys(selectedRows).length || 0;\n\n    const parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);\n    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const apply = (params) => dispatch(changeSystemsParams(params));\n\n    useEffect(() =>  apply(urlParameters), []);\n\n    useDeepCompareEffect(() => setUrlParams({ ...parameters }), [parameters]);\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const doOptOut = useOptOutSystems({ selectedRows, totalSelectedRows, onRefreshInventory });\n\n    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, []);\n    const getEntities = useGetEntities(APIHelper.getSystems, setUrlParams);\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                <Fragment>\n                    { hasError\n                        ? <ErrorHandler code={errorCode} />\n                        : (\n                            <InventoryTable\n                                disableDefaultColumns\n                                onLoad={({ mergeWithEntities }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(\n                                            inventoryEntitiesReducer(SYSTEMS_HEADER)\n                                        )\n                                    });\n                                }}\n                                tableProps={{\n                                    isStickyHeader: true,\n                                    canSelectAll: false,\n                                    actionResolver: systems?.length > 0\n                                        && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                    variant: TableVariant.compact\n                                }}\n                                showTagModal\n                                isFullView\n                                ref={inventoryRef}\n                                autoRefresh\n                                customFilters={{\n                                    vulnerabilityParams: {\n                                        ...parameters\n                                    }\n                                }}\n                                hasCheckbox={systems?.length !== 0}\n                                columnCounter={columnCounter}\n                                columns={(defaultColumns) => createColumns(defaultColumns)}\n                                getEntities={getEntities}\n                                hideFilters={{ all: true }}\n                            >\n                                <SystemsTableToolbar\n                                    parameters = {parameters}\n                                    systems = {{ data: systems, meta: { total_items: totalItems } }}\n                                    selectedRows = {selectedRows}\n                                    totalSelectedRows={totalSelectedRows}\n                                    methods = {{\n                                        doOptOut,\n                                        apply,\n                                        handleSelect\n                                    }}\n                                    actions\n                                />\n                            </InventoryTable>\n                        )}\n                </Fragment>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default SystemsPage;\n"],"sourceRoot":""}