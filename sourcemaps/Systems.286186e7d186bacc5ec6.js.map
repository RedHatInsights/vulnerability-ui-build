{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","addNotification","useNotification","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","systemsFetch","msg","formatMessage","messages","getSystems","DownloadReport","meta","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","length","join","undefined","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","SystemsTableToolbar","selectedHosts","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","middlewareListener","on","callback","payload","newSelected","selected","id","filter","item","onSelect","kebabProps","useMemo","selectedHostsData","s","includes","selectedExcluded","some","attributes","opt_out","selectedIncluded","kebabOptions","count","onClick","isDisabled","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","className","bulkSelect","total_items","checked","Boolean","ouiaId","handleOnCheckboxChange","actionsConfig","actions","kebabToggleProps","dropdownProps","filterConfig","useSearchFilter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","showButton","onSuccess","dataShape","withRouter","injectIntl","setSelectedHosts","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","variant","inventory","React","dispatch","useDispatch","useSelector","entities","rows","shallowEqual","totalItems","total","SystemsPageStore","error","hasError","errorCode","useEffect","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","useDeepCompareEffect","systemId","optOut","optOutSystemsAction","then","current","onRefreshData","description","columnCounter","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","Number","perPage","page_size","sort","sortBy","key","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","hasCheckbox","columns","defaultColumns","nameColumn","restColumns","lastSeenColumn","find","tagsColumn","width","isStatic","cellTransforms","nowrap","createColumns","getEntities","_items","orderBy","orderDirection","per_page","APIHelper","Promise","resolve","results","insights_id","hideFilters","all","isChecked"],"mappings":"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","file":"js/Systems.2d7883f5b58bee64f0fb.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.customReportNotificationSystem) });\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, PDF_REPORT_PER_PAGE.systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { apply, handleSelect, doOptOut } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const kebabProps = useMemo(() => {\n        const selectedHostsData = systems?.data.filter(s => selectedHosts.includes(s.id));\n        return {\n            selectedExcluded: selectedHostsData.some(s => s.attributes.opt_out === true),\n            selectedIncluded: selectedHostsData.some(s => s.attributes.opt_out === false)\n        };\n    }, [selectedHosts, systems]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, true),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, false),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                kebabToggleProps: { isDisabled: !selectedHosts.length || systems.meta.total_items === 0 },\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    useSearchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { nowrap, TableVariant } from '@patternfly/react-table';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport * as APIHelper from '../../../Helpers/APIHelper';\n\nconst createColumns = (defaultColumns) => {\n    let [nameColumn, ...restColumns] = SYSTEMS_HEADER;\n    let lastSeenColumn = defaultColumns.find(({ key }) => key === 'updated');\n    let tagsColumn = defaultColumns.find(({ key }) => key === 'tags');\n\n    tagsColumn = { ...tagsColumn, props: { width: 10, isStatic: true } };\n    lastSeenColumn = { ...lastSeenColumn, cellTransforms: [nowrap], props: { width: 20 } };\n\n    let mergedColumns = [nameColumn, tagsColumn, ...restColumns, lastSeenColumn];\n\n    return mergedColumns;\n};\n\nconst SystemsPage = () => {\n    const intl = useIntl();\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n    const addNotification = useNotification({ variant: 'success' });\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params,\n        shallowEqual\n    );\n\n    const { hasError, errorCode } = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters, isFirstMount]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null, optOut) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {\n                inventory.current.onRefreshData(({ page: 1 }));\n\n                let count = systemId ? 1 : selectedHosts.length || 0;\n\n                if (optOut) {\n                    addNotification({ msg: intl.formatMessage(messages.systemsExcludedNotification, { count }) });\n                } else {\n                    addNotification({\n                        msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    });\n                }\n\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, []);\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                <Fragment>\n                    { hasError\n                        ? <ErrorHandler code={errorCode} />\n                        : (<InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: Number(parameters.page_size || 20),\n                                            ...(parameters.sort && { sortBy: {\n                                                key: parameters.sort.replace(/^-/, ''),\n                                                direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                            } })\n                                        }\n                                    ),\n                                    ...mergeWithDetail()\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: systems?.length > 0 && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                variant: TableVariant.compact\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventory}\n                            autoRefresh\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            hasCheckbox={systems?.length !== 0}\n                            columnCounter={columnCounter}\n                            columns={(defaultColumns) => createColumns(defaultColumns)}\n                            getEntities={async (\n                                _items,\n                                { vulnerabilityParams, orderBy, orderDirection, ...config }\n                            ) => {\n                                const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n                                apply({\n                                    page: vulnerabilityParams.page,\n                                    page_size: vulnerabilityParams.per_page,\n                                    sort\n                                });\n\n                                const items = await APIHelper.getSystems({\n                                    ...vulnerabilityParams,\n                                    page: config.page,\n                                    page_size: config.per_page,\n                                    sort\n                                });\n\n                                return Promise.resolve({\n                                    results: items.data.map(item => ({\n                                        ...item,\n                                        ...item.attributes,\n                                        insights_id: item.attributes.insights_id\n                                    })),\n                                    total: items.meta.total_items\n                                });\n                            }}\n                            hideFilters={{ all: true }}\n                        >\n                            <SystemsTableToolbar\n                                parameters = {parameters}\n                                systems = {{ data: systems, meta: { total_items: totalItems } }}\n                                selectedHosts = {selectedHosts || []}\n                                methods = {{\n                                    doOptOut,\n                                    apply,\n                                    handleSelect,\n                                    setSelectedHosts\n                                }}\n                                actions\n                            />\n                        </InventoryTable>\n                        )}\n                </Fragment>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default SystemsPage;\n"],"sourceRoot":""}