{"version":3,"file":"js/9597.1679063859814.9f8b1372e8ca05491e5e.js","mappings":"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","sources":["webpack:///./src/Utilities/Routes.js","webpack:///./src/Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner.js","webpack:///./src/App.js","webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/PresentationalComponents/StaticPages/NoAccessPage.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense, Fragment } from 'react';\nimport some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { getSystems } from '../Helpers/APIHelper';\nimport { PATHS } from '../Helpers/constants';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\n\nconst SystemsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ '../Components/SmartComponents/SystemsPage/SystemsPage'\n    )\n);\n\nconst LandingPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"LandingPage\" */ '../Components/SmartComponents/LandingPage/LandingPage'\n    )\n);\n\nconst Upgrade = lazy(() =>\n    import(\n        /* webpackChunkName: \"Upgrade\" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'\n    )\n);\n\nconst CVEDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"CVEDetailsPage\" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'\n    )\n);\n\nconst SystemDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"SystemDetailsPage\" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'\n    )\n);\nconst Reports = lazy(() =>\n    import(/* webpackChunkName: \"Reports\" */ '../Components/SmartComponents/Reports/ReportsPage')\n);\n\nconst InsightsRoute = ({ component: Component, title, ...rest }) => {\n    const [hasSystems, setHasSystems] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await getSystems();\n            setHasSystems(result?.meta?.total_items > 0);\n        };\n\n        fetchData();\n    }, []);\n\n    if (title) {\n        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];\n        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n    }\n\n    return (\n        <Route\n            {...rest}\n            render={routeProps => (\n                !hasSystems ? <Upgrade /> : <Component {...routeProps} />\n            )}\n        />\n    );\n};\n\nInsightsRoute.propTypes = {\n    component: PropTypes.func,\n    title: PropTypes.string\n};\n\nexport const Routes = () => {\n    let location = useLocation();\n    let path = location.pathname;\n    return (\n        // TODO: Discuss with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={PATHS.cvepagePath.to}\n                    to={PATHS.systemDetailsPage.to}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cveDetailsPage.to}\n                    component={CVEDetailsPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemDetailsPage.to}\n                    component={SystemDetailsPage}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.home.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cvesPage.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemsPage.to}\n                    component={SystemsPage}\n                    title={intl.formatMessage(messages.systemsHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.upgrade.to}\n                    component={Upgrade}\n                    title={intl.formatMessage(messages.upgradePageTitle)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.reports.to}\n                    component={Reports}\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                />\n                <Route\n                    render={() => (\n                        some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />\n                    )}\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Text } from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ReadOnlyBanner = () => {\n    return (\n        <Banner>\n            <Bullseye>\n                <Text>\n                    {intl.formatMessage(messages.readOnlyBannerText, { b: (...chunks) => <b>{chunks}</b> })}\n                </Text>\n                <a\n                    href=\"https://status.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ color: 'var(--pf-global--link--Color--light)' }}\n                    className=\"pf-u-ml-sm\"\n                >\n                    {intl.formatMessage(messages.learnMore)}\n                </a>\n            </Bullseye>\n        </Banner>\n    );\n};\n\nexport default ReadOnlyBanner;\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    Fragment\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport { setGlobalFilter } from './Store/Actions/Actions';\nimport { Routes } from './Utilities/Routes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';\nimport './App.scss';\nimport ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';\nimport { useRbac } from './Helpers/Hooks';\nimport { PERMISSIONS } from './Helpers/constants';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nReducerRegistry.register({ notifications });\n\nconst App = () => {\n    const { push } = useHistory();\n    const { pathname } = useLocation();\n    const chrome = useChrome();\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);\n    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const appNavClick = useMemo(() => ({\n        cves(redirect) { chrome.appNavClick({ id: 'cves', redirect }); },\n        systems(redirect) { chrome.appNavClick({ id: 'systems', redirect }); },\n        reports(redirect) { chrome.appNavClick({ id: 'reports', redirect }); }\n    }), []);\n\n    useEffect(() => {\n        const unregister = chrome.on('APP_NAVIGATION', event => {\n            chrome.hideGlobalFilter(false);\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves(true);\n            }\n        });\n\n        return () => unregister();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        const baseComponentUrl = pathname.split('/')[1];\n        chrome &&\n            baseComponentUrl &&\n            appNavClick[baseComponentUrl] !== undefined &&\n            appNavClick[baseComponentUrl](false);\n\n        const unregister = chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SIDs, tags] = chrome.mapGlobalFilter(data, true, true) ?? [null, null, null];\n            dispatch(setGlobalFilter({ workloads, SIDs, tags }));\n        });\n\n        return () => unregister();\n    }, [appNavClick, pathname, dispatch]);\n\n    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);\n\n    return (\n        isLoading ? <Spinner centered /> : isUserAuthorized ?\n            <Fragment>\n                <NotificationPortal />\n                {isReadOnlyBannerVisible && <ReadOnlyBanner />}\n                <Routes />\n            </Fragment>\n            : <NoAccessPage />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport { PATHS } from '../../../Helpers/constants';\n\nconst Breadcrumb = ({ breadcrumbs }) => {\n    return (\n        <PfBreadcrumb key=\"PfBreadcrumb\" className=\"pf-u-mb-md\">\n            <BreadcrumbItem key={PATHS.home.title} isActive={false}>\n                <Link to={PATHS.home.to}>{PATHS.home.title}</Link>\n            </BreadcrumbItem>\n\n            {breadcrumbs?.map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {\n                        item.loaded\n                            ? (\n                                item.isActive ? item.title : <Link to={item.to}>{item.title}</Link>\n                            )\n                            : (\n                                <Skeleton className=\"breadcrumb-skeleton\"/>\n                            )\n                    }\n                </BreadcrumbItem>\n            ))}\n        </PfBreadcrumb>\n    );\n};\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.array\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst NoAccessPage = ({ intl, title = intl.formatMessage(messages.vulnerabilitiesHeader), emptyStateTitle }) => {\n    return (\n        <React.Fragment>\n            <Header\n                title={title}\n                showBreadcrumb={false}\n            />\n            <Main>\n                <NotAuthorized\n                    title={emptyStateTitle}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nNoAccessPage.propTypes = {\n    intl: propTypes.any,\n    title: propTypes.string,\n    emptyStateTitle: propTypes.string\n};\n\nexport default injectIntl(NoAccessPage);\n"],"names":["SystemsPage","lazy","LandingPage","Upgrade","CVEDetailsPage","SystemDetailsPage","Reports","InsightsRoute","Component","component","title","rest","useState","hasSystems","setHasSystems","useEffect","fetchData","getSystems","result","meta","total_items","subPath","location","pathname","split","document","intl","messages","render","routeProps","propTypes","PropTypes","Routes","path","useLocation","Suspense","fallback","Fragment","from","PATHS","to","exact","some","p","Banner","Bullseye","Text","b","chunks","href","target","rel","style","color","className","ReducerRegistry","notifications","push","useHistory","chrome","useChrome","useRbac","PERMISSIONS","isUserAuthorized","isLoading","isReadOnlyBannerVisible","setReadOnlyBannerVisible","dispatch","useDispatch","appNavClick","useMemo","cves","redirect","id","systems","reports","unregister","on","event","hideGlobalFilter","domEvent","navId","undefined","baseComponentUrl","data","mapGlobalFilter","workloads","SIDs","tags","setGlobalFilter","window","setVisible","Spinner","centered","NotificationPortal","NoAccessPage","Breadcrumb","breadcrumbs","key","BreadcrumbItem","isActive","map","item","loaded","Skeleton","BaseDropdown","dropdownItems","disabled","props","isOpen","setIsOpen","useIntl","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","formatMessage","Header","actions","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","concat","index","isFilled","length","position","ouiaId","defaultProps","emptyStateTitle","injectIntl"],"sourceRoot":""}