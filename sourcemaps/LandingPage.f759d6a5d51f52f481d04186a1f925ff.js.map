{"version":3,"file":"js/LandingPage.10921d03fff1cd90f513.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title: <EmptyStateNoCVEs secondParagraph={\n                        context.params.affecting === 'true'\n                            ? messages.emptyStateYourSystemsShouldHaveCVEs\n                            : messages.emptyStateThereShouldBeCVEs\n                    } />\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    canSelectAll={false}\n                    aria-label={'Vulnerability CVE table'}\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId={'cves-table'}\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { context } = props;\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { context, canEditStatusOrBusinessRisk, canExport } = props;\n    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: props.intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    business_risk_id: attributes.business_risk_id,\n                    justification: attributes.business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: props.intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    exposed_systems_count: attributes.systems_affected,\n                    justification: attributes.status_text,\n                    status_id: attributes.status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: props.intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: props.intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig = {canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { CVES_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const [[canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const selectedRowsRawData = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedRowsRawData\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useDeepCompareEffect(() => {\n        dispatch(fetchCveListByAccount(parameters));\n\n        urlParamsAllowed\n            ? setUrlParam({ ...parameters })\n            : setUrlParamsAllowed(true);\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                updateRef={() => {\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered/> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            selectedRowsRawData,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal/>\n                        <CveStatusModal/>\n                        <ColumnManagementModal\n                            appliedColumns={columns}\n                            applyColumns={newColumns => dispatch(changeColumnsCveList(newColumns))}\n                            isModalOpen={isColumnModalOpen}\n                            setModalOpen={setColumnModalOpen}\n                        />\n\n                        <Stack>\n                            <StackItem>\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized/>\n        );\n    } else {\n        return <ErrorHandler code={parseInt(cves.errors.status)}/>;\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position={'right'}\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color={'var(--pf-global--secondary-color--100)'}\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","params","affecting","messages","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","meta","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","filterByAffecting","values","join","page","label","intl","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","canExport","isAllExpanded","selectedRowsRawData","filter","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","attributes","business_risk_id","justification","business_risk_text","isDisabled","showStatusModal","exposed_systems_count","systems_affected","status_text","status_id","setColumnModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isColumnModalOpen","useRbac","PERMISSIONS","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","columns","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","useDeepCompareEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","parseInt","status","Spinner","centered","Provider","format","DownloadReport","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","expandCve","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveList","isModalOpen","setModalOpen","Stack","StackItem","column","isShown","isShownByDefault","Popover","enableFlip","position","headerContent","bodyContent","footerContent","href","target","rel","color","className","style","verticalAlign","Header","showBreadcrumb","Main"],"sourceRoot":""}