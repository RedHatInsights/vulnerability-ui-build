{"version":3,"file":"js/LandingPage.1643055586597.c4f48276df403117dae5.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"sourcesContent":["import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title: <EmptyStateNoCVEs showHighVisibilityCveAlert secondParagraph={\n                        context.params.affecting === 'true'\n                            ? messages.emptyStateYourSystemsShouldHaveCVEs\n                            : messages.emptyStateThereShouldBeCVEs\n                    } />\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { context } = props;\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { context, canEditStatusOrBusinessRisk, canExport } = props;\n    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: props.intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    business_risk_id: attributes.business_risk_id,\n                    justification: attributes.business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: props.intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                    id,\n                    exposed_systems_count: attributes.systems_affected,\n                    justification: attributes.status_text,\n                    status_id: attributes.status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: props.intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: props.intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll={{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { CVES_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const [[canEditStatusOrBusinessRisk, canEditPairStatus, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const selectedRowsRawData = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedRowsRawData\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered/> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            selectedRowsRawData,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal/>\n                        <CveStatusModal/>\n                        <ColumnManagementModal\n                            appliedColumns={columns}\n                            applyColumns={newColumns => dispatch(changeColumnsCveList(newColumns))}\n                            isModalOpen={isColumnModalOpen}\n                            setModalOpen={setColumnModalOpen}\n                        />\n\n                        <Stack>\n                            <StackItem>\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized/>\n        );\n    } else {\n        return <ErrorHandler code={parseInt(cves.errors.status)}/>;\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool\n};\n\nexport default injectIntl(CveStatusModal);\n"],"names":["kebabItemDownloadPDF","loading","downloadReport","props","key","component","onClick","messages","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","CVEsTableWithContext","context","header","canEditStatusOrBusinessRisk","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","canSelectAll","cells","heightAuto","colSpan","title","showHighVisibilityCveAlert","secondParagraph","params","affecting","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","meta","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","filterByAffecting","values","join","page","label","intl","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","canExport","isAllExpanded","selectedRowsRawData","filter","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","attributes","business_risk_id","justification","business_risk_text","isDisabled","exposed_systems_count","systems_affected","status_text","status_id","setColumnModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","isFirstLoad","setFirstLoad","isColumnModalOpen","useRbac","PERMISSIONS","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","columns","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","parseInt","status","Spinner","centered","Provider","format","DownloadReport","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","expandCve","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveList","isModalOpen","setModalOpen","Stack","StackItem","column","isShown","isShownByDefault","Popover","enableFlip","position","headerContent","bodyContent","footerContent","href","target","rel","color","className","style","verticalAlign","Header","showBreadcrumb","Main","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","toString","handleOnRadioChange","currentTarget","onSuccessNotification","onFailureNotification","autoDismiss","description","onSave","setBusinessRisk","item","then","error","hasGutter","fieldId","BUSINESS_RISK_OPTIONS","isChecked","name","resizeOrientation","minHeight","useStatusSelect","every","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","Promise","all","setCveStatus","setSystemCveStatus","cveId","b","chunks","fontSize","content"],"sourceRoot":""}