{"version":3,"file":"js/7277.1686143159806.536faddc7d2570b70a21.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./node_modules/lodash/_baseMap.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter, isInline = false, 'aria-label': ariaLabel, 'aria-labelledBy': ariaLabelledBy } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: (0, react_styles_1.css)(spinner_1.default.spinner, isInline ? spinner_1.default.modifiers.inline : spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), (ariaLabel && { 'aria-label': ariaLabel }), (ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy }), (!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0]?.cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? cveList[0]?.justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst Remediation = ({ cves, systems, manyRules, isDisabled }) => {\n    const dispatch = useDispatch();\n\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    /*eslint-disable camelcase*/\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, rule, rule_id }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                } else if (rule_id) {\n                    issue.id = `${issue.id}:${rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n    /*eslint-enable camelcase*/\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatch(addNotification(result.getNotification()))}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </AsyncComponent>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default Remediation;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity, canSelect }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditPairStatus } = context;\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { systemCVEs, methods } = context;\n        const cve = systemCVEs.payload.data[rowId / 2];\n        methods.selectCves(isSelected, cve);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    const sortingHeader = [{ key: 'collapse' }, ...canSelect ? [{ key: 'checkbox' }] : [], ...header];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canCollapseAll={false}\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditPairStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy(sortingHeader, cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                sortingHeader,\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint=\"grid-lg\"\n                    ouiaId=\"cves-table\"\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string,\n    canSelect: propTypes.bool\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION, ONLY_NON_VULNERABLE_SYSTEMS, RULE_PRESENCE_OPTIONS } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({\n    entity,\n    intl,\n    context,\n    canExport,\n    customAction,\n    canSelect,\n    canManageColumns,\n    filters\n}) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, systemCVEs, parameters, methods, selectedCves, isAllExpanded, canEditPairStatus } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = selectedCves?.length ?? 0;\n    const remediableCves = selectedCves.filter(cves => cves.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        rawItems: systemCVEs,\n        fetchResource: ops => methods.bulkFetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, systemCVEs, parameters, methods]);\n\n    const actions = ['',\n        ...canEditPairStatus ?\n            [{\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves, true),\n                props: { isDisabled: !selectedCvesCount }\n            }] : [],\n        ...canManageColumns ?\n            [{\n                label: intl.formatMessage(messages.columnManagementModalTitle),\n                onClick: () => methods.setColumnManagementModalOpen(true)\n            }] : []\n    ];\n\n    const allFilters = [\n        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n        securityRuleFilter(methods.apply, parameters, [],\n            {\n                isDynamic: false,\n                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)\n            }),\n        knownExploitFilter(methods.apply, parameters),\n        impactFilter(methods.apply, parameters),\n        useCvssBaseScoreFilter(methods.apply, parameters),\n        businessRiskFilter(methods.apply, parameters),\n        publishDateFilter(methods.apply, parameters),\n        statusFilter(methods.apply, parameters),\n        useSearchFilter('advisory', messages.advisoryName, messages.searchFilterByAdvisoryName, advisory, methods.apply),\n        remediationFilter(methods.apply, parameters)\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                isDisabled: cves.meta.total_items === 0,\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={customAction ? (typeof customAction === 'function' ? customAction(cves) : customAction) : (entity &&\n                <Remediation\n                    isDisabled={selectedCves.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={canSelect && {\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: filters ? allFilters.filter(filter => filters.includes(filter.key)) : allFilters\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={canExport && {\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick,\n                isDisabled: cves.meta.total_items === 0\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    filters: propTypes.arrayOf(propTypes.string)\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, Title } from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nvar NotConnected = function (_a) {\n    var _b = _a.titleText, titleText = _b === void 0 ? 'This system isn’t connected to Insights yet' : _b, _c = _a.bodyText, bodyText = _c === void 0 ? 'To get started, activate the Insights client for this system.' : _c, _d = _a.buttonText, buttonText = _d === void 0 ? 'Learn how to activate the Insights client' : _d;\n    return (_jsxs(EmptyState, { children: [_jsx(EmptyStateIcon, { icon: DisconnectedIcon }), _jsx(Title, __assign({ headingLevel: \"h5\", size: \"lg\" }, { children: titleText })), _jsx(EmptyStateBody, { children: bodyText }), _jsx(Button, __assign({ variant: \"primary\", component: \"a\", href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\", target: \"_blank\", rel: \"noopener noreferrer\", className: \"pf-u-mt-lg\" }, { children: buttonText }))] }));\n};\nexport default NotConnected;\n//# sourceMappingURL=NotConnected.js.map","import React, {\n    useMemo,\n    useEffect,\n    Fragment,\n    createContext,\n    useState\n} from 'react';\nimport {\n    fetchCveListBySystem,\n    fetchCveIdsBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS, SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';\nimport {\n    constructFilterParameters,\n    useUrlParams,\n    updateRef\n} from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport { useColumnManagement } from '../../../Helpers/Hooks';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({\n    entity,\n    intl,\n    showHeaderLabel,\n    setPageTitle,\n    canExport,\n    customAction,\n    canSelect,\n    canEditPairStatus,\n    canManageColumns,\n    defaultColumns,\n    filters,\n    linkToCustomerPortal\n}) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsSystemDetail(newColumns)));\n\n    const cves = useMemo(() => createCveListBySystem(\n        entity.id, systemCVEs, columns, linkToCustomerPortal\n    ), [systemCVEs, systemCVEs.isLoading, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (!entity.insights_id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        } else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n\n        if (defaultColumns) {\n            const defaultColumnsWithAttributes = defaultColumns.map(\n                defaultColumn => SYSTEM_DETAILS_HEADER.find(column => column.key === defaultColumn)\n            );\n            dispatch(changeColumnsSystemDetail(defaultColumnsWithAttributes));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            if (setPageTitle) {\n                document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n            }\n\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map(\n            ({\n                id,\n                // eslint-disable-next-line camelcase\n                cve_status_id,\n                // eslint-disable-next-line camelcase\n                status_id,\n                status_text: justification,\n                // eslint-disable-next-line camelcase\n                cve_status_text: cve_justification,\n                ...rest\n                // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest })\n        );\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type=\"systemDetail\"\n            />\n        ));\n    };\n\n    // this will be called on bulk select checkbox click as well, with array as cve parameter\n    const handleCveSelect = (isSelected, payload) => {\n        if (Array.isArray(payload)) {\n            payload = payload.map(cve => ({ ...cve, ...cve.attributes, attributes: undefined }));\n        }\n        else {\n            payload = { ...payload, ...payload.attributes };\n            delete payload.attributes;\n        }\n\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    systemCVEs,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canEditPairStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnManagementModalOpen,\n                        bulkFetchResource: params => fetchCveIdsBySystem({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal/>\n\n                { ColumnManagementModal }\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar\n                            entity={entity.id}\n                            canExport={canExport}\n                            customAction={customAction}\n                            canSelect={canSelect}\n                            canManageColumns={canManageColumns}\n                            filters={filters}\n                        />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                    canSelect={canSelect}\n                />\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(systemCVEs.payload.errors);\n    }\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false,\n    canSelect: true,\n    canManageColumns: true,\n    canEditPairStatus: true,\n    linkToCustomerPortal: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    defaultColumns: propTypes.arrayOf(propTypes.string),\n    filters: propTypes.arrayOf(propTypes.string),\n    linkToCustomerPortal: propTypes.bool\n};\n\nexport const ConnectedSystemCves = injectIntl(SystemCVEs);\n\nconst TranslateSystemCves = ({ customItnlProvider, customIntlProvider, ...props }) => {\n    const Wrapper = (customItnlProvider || customIntlProvider) ? IntlProvider : Fragment;\n\n    return <Wrapper {...(customItnlProvider || customIntlProvider) && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customIntlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customIntlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentFilter","currentValue","remediation","filterByRemediation","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","REMEDIATION_OPTIONS","item","split","CvePairStatusModal","cveList","updateRef","inventoryList","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","count","systemName","onFailureNotification","autoDismiss","description","modalTitle","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","fieldId","name","isChecked","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","cves","systems","manyRules","dispatch","useDispatch","baseIssueTemplate","system","appName","module","fallback","size","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","rule","issue","rule_id","mergeObjectPropertyBy","acc","cveID","remediationProvider","onRemediationCreated","result","addNotification","getNotification","SystemCvesTableWithContext","context","header","entity","canSelect","methods","selectedCves","expandedRows","canEditPairStatus","isEmpty","data","rows","find","selectedCve","selected","index","current","opened","isOpen","undefined","sortingHeader","isLoading","SkeletonTable","colSize","rowSize","TableVariant","Fragment","Table","isStickyHeader","canCollapseAll","canSelectAll","cells","heightAuto","props","colSpan","secondParagraph","onSelect","isSelected","rowId","systemCVEs","payload","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","meta","sort","onCollapse","rowKey","isAllExpanded","cveName","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","CVETableContext","Consumer","SystemCveToolbarWithContext","canExport","customAction","canManageColumns","filters","parameters","advisory","selectedCvesCount","remediableCves","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","rawItems","fetchResource","ops","bulkFetchResource","multiRow","actions","onClick","showStatusModal","setColumnManagementModalOpen","allFilters","useSearchFilter","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","ONLY_NON_VULNERABLE_SYSTEMS","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","actionsConfig","dropdownProps","bulkSelect","Boolean","handleOnCheckboxChange","filterConfig","includes","activeFiltersConfig","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","__assign","Object","assign","t","s","i","n","arguments","p","prototype","hasOwnProperty","call","this","_a","_b","titleText","_c","bodyText","_d","buttonText","EmptyState","children","EmptyStateIcon","icon","DisconnectedIcon","Title","headingLevel","EmptyStateBody","Button","component","href","target","rel","createContext","SystemCVEs","status","statusCode","showHeaderLabel","setPageTitle","defaultColumns","linkToCustomerPortal","StatusModal","setStatusModal","isFirstLoad","setFirstLoad","useSelector","SystemCvesStore","columns","useColumnManagement","newColumns","changeColumnsSystemDetail","ColumnManagementModal","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","defaultColumnsWithAttributes","defaultColumn","SYSTEM_DETAILS_HEADER","column","document","fetchCveListBySystem","clearSystemCvesStore","errors","insights_id","ErrorHandler","code","Provider","format","DownloadReport","notification","clearNotifications","Array","isArray","attributes","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_text","fetchCveIdsBySystem","Stack","StackItem","TextContent","Text","TextVariants","SystemCveTableToolbar","SystemCveTable","isShown","isShownByDefault","allowedCveActions","ConnectedSystemCves","TranslateSystemCves","customItnlProvider","customIntlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter","baseEach","isArrayLike","collection","iteratee"],"sourceRoot":""}