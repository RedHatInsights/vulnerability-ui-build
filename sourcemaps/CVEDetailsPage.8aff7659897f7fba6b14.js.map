{"version":3,"file":"js/CVEDetailsPage.a5b459ecd22f2972bf55.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js"],"sourcesContent":["import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n\n    return (\n        <Stack hasGutter>\n            <StackItem className=\"pf-u-mt-sm\">\n                <div>\n                    {intl.formatMessage(messages.publishDate)}: {publishDate}\n                </div>\n            </StackItem>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.p}>{description}</Text>\n                </TextContent>\n            </StackItem>\n            <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                {link}\n            </StackItem>\n        </Stack>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport ContentLoader, { BulletList, List } from 'react-content-loader';\n\nconst WithLoader = props => {\n    if (props === undefined || props.loading !== false) {\n        switch (props.variant) {\n            case 'spinner':\n                return <Spinner centered />;\n            case 'cvePageOverviewItem':\n                return <CVEPageOverviewItemLoader />;\n            case 'list':\n                return <List />;\n            case 'bulletList':\n                return <BulletList />;\n            case 'trendBox':\n                return <TrendBoxLoader />;\n            case 'currentVulnerabilitiesItem':\n                return <CurrentVulnerabilitiesItemLoader />;\n            default:\n                return <Skeleton size={SkeletonSize.lg} />;\n        }\n    }\n\n    return props.children;\n};\n\n// Loaders\nconst CVEPageOverviewItemLoader = () => {\n    return (\n        <ContentLoader height={61} width={120}>\n            <rect x=\"35\" y=\"0\" rx=\"0\" ry=\"0\" width=\"50\" height=\"35\" />\n            <rect x=\"0\" y=\"45\" rx=\"0\" ry=\"0\" width=\"120\" height=\"16\" />\n        </ContentLoader>\n    );\n};\n\nconst TrendBoxLoader = () => {\n    return (\n        <ContentLoader height={100} width={300}>\n            <rect x=\"388.58\" y=\"109.13\" rx=\"0\" ry=\"0\" width=\"0\" height=\"0\" />\n            <rect x=\"11.58\" y=\"16.13\" rx=\"0\" ry=\"0\" width=\"37\" height=\"62\" />\n            <rect x=\"52.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"76.58\" y=\"52.13\" rx=\"0\" ry=\"0\" width=\"17\" height=\"26\" />\n            <rect x=\"4.58\" y=\"82.13\" rx=\"0\" ry=\"0\" width=\"154\" height=\"22\" />\n        </ContentLoader>\n    );\n};\n\nconst CurrentVulnerabilitiesItemLoader = () => {\n    return (\n        <ContentLoader height={50} width={200} speed={2} primaryColor=\"#f3f3f3\" secondaryColor=\"#ecebeb\">\n            <rect x=\"82.58\" y=\"15.13\" rx=\"0\" ry=\"0\" width=\"110.88\" height=\"21.42\" />\n            <circle cx=\"25\" cy=\"25\" r=\"25\" />\n        </ContentLoader>\n    );\n};\n\nWithLoader.propTypes = {\n    loading: propTypes.bool,\n    variant: propTypes.string\n};\n\nexport default WithLoader;\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    // eslint-disable-next-line no-unused-vars\n    const { cvssVersion, ...values } = parsedVector;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <WithLoader loading={context.isLoading}>\n                        <Popover\n                            id=\"popover-cvss\"\n                            position=\"bottom\"\n                            maxWidth={'100%'}\n                            enableFlip\n                            headerContent={ `${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}` }\n                            bodyContent={\n                                cvssVector ?\n                                    (\n                                        <Table\n                                            aria-label={'Metric breakdown'}\n                                            variant={TableVariant.compact}\n                                            gridBreakPoint=\"\"\n                                            cells={\n                                                [intl.formatMessage(messages.cvssVectorMetric),\n                                                    intl.formatMessage(messages.cvssVectorValue)]\n                                            }\n                                            rows={Object.entries(values)}\n                                        >\n                                            <TableHeader />\n                                            <TableBody />\n                                        </Table>\n                                    ) : (notAvailable)\n                            }\n                        >\n                            <React.Fragment>\n                                <Label isLarge className=\"pf-u-mb-xs pointer\">\n                                    {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                                    <OutlinedQuestionCircleIcon\n                                        color={'var(--pf-global--secondary-color--100)'}\n                                        className=\"pf-u-ml-xs\"\n                                    />\n                                </Label>\n                            </React.Fragment>\n                        </Popover>\n                    </WithLoader>\n\n                    <WithLoader loading={context.isLoading}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent={''} position=\"bottom\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack className=\"popover-content\">\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from '../CVEDetailsPageDescription/SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <Split hasGutter>\n                    <SplitItem>\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.businessRiskLabel)}\n                            value={businessRisk}\n                            content={brPopoverContent}\n                        />\n                    </SplitItem>\n                    <SplitItem className=\"pf-u-ml-lg\">\n                        <SnippetWithHeaderAndPopover\n                            title={intl.formatMessage(messages.statusLabel)}\n                            content={statusPopoverContent}\n                            value={\n                                <span>\n                                    {systemsStatusDivergent > 0 && (\n                                        <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />\n                                    )}{' '}\n                                    {status}\n                                </span>\n                            }\n                        />\n                    </SplitItem>\n                </Split>\n            </StackItem>\n\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\" isLarge>\n                    {intl.formatMessage(messages.impact)}\n                </Label>\n                <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                    <Shield impact={cveDetails.title} hasLabel/>\n                </span>\n            </StackItem>\n\n            <StackItem>\n                <CvssVector\n                    cvss2_metrics={cveAttributes.cvss2_metrics}\n                    cvss3_metrics={cveAttributes.cvss3_metrics}\n                    score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                />\n            </StackItem>\n        </Stack>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return <Fragment>\n        {sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\"/>\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={() => handleExposedSystemFilter(rule.rule_id)}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            { RISK_OF_CHANGE_LABEL[rule.change_risk] }\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                { !rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                { rule.reboot_required &&\n                                                                <Text>\n                                                                    <PowerOffIcon\n                                                                        className=\"pf-u-mr-xs powerOffIcon\"\n                                                                    />\n                                                                    {intl.formatMessage(messages.rebootRequired)}\n                                                                </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                        <StackItem>\n                                            <TextContent>\n                                                <Text\n                                                    className=\"pf-u-mt-xs\"\n                                                    component={TextVariants.p}\n                                                >\n                                                    <a\n                                                        className=\"kb-link\"\n                                                        href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                        target=\"_blank\"\n                                                        rel=\"noopener noreferrer\"\n                                                    >\n                                                        {\n                                                            intl.formatMessage(messages.knowledgebaseArticle)\n                                                        }\n                                                        <ExternalLinkAltIcon className=\"l-sm-spacer\"/>\n                                                    </a>\n                                                </Text>\n                                            </TextContent>\n                                        </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                .filter(cve => cve !== synopsis)\n                                                .map((cve, _i) =>\n                                                    <a\n                                                        className=\"associated-cve-link\"\n                                                        key={_i}\n                                                        href={`${CVES_PATH}/${cve}`}\n                                                    >\n                                                        {cve}\n                                                    </a>\n                                                )\n                                                .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))}\n    </Fragment>;\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport WithLoader from '../WithLoader/WithLoader';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Grid hasGutter>\n                    <GridItem md={8} sm={12}>\n                        <WithLoader loading={context.isLoading} variant=\"spinner\">\n                            <CVEDetailsPageDescription cveAttributes={data.data} />\n                        </WithLoader>\n                    </GridItem>\n\n                    <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                        <CVEDetailsPageSidebar cveAttributes={data.data} />\n                    </GridItem>\n                    {\n                        data.data.known_exploit && <KnownExploitSummary/>\n                    }\n\n                    <CSAwRuleBox\n                        changeExposedSystemsParameters = {changeExposedSystemsParameters}\n                        synopsis={data.data.synopsis}\n                        rules={data.data.rules}\n                    />\n                </Grid>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsTable } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport Remediation from '../Remediation/Remediation';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsIdsByCve,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    SYSTEMS_EXPOSED_SORTING_HEADER,\n    RULE_ABSENSE_OPTIONS\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nconst SystemsExposedTable = (props) => {\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n\n    const affectedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const isLoading = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.isLoading\n    );\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n\n    const metadata = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE.payload.meta\n    );\n    const items = useMemo(() => createExposedSystemsTable({ ...affectedSystems }, props.cve), [affectedSystems, props.cve]);\n\n    const { error } = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    const apply = (config) => dispatch(\n        changeExposedSystemsParameters(config)\n    );\n\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n\n        if (inventory.current && (metadata.page !== page || metadata.limit !== pageSize)) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        const selectedHosts = payload ? payload : [];\n        setSelectedHosts(selectedHosts);\n    };\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...(selectedHosts || [])]\n            : selectedHosts && selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n            dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }));\n        }\n    }, [parameters, isFirstMount]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        let params = [props.cve, { ...parameters }];\n        DownloadReport.exec(fetchAffectedSystemsByCVE, params, format, 'systems-exposed');\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        items.meta.page === 1\n                            ? dispatch(fetchAffectedSystemsByCVE(props.cve, { ...parameters }))\n                            : apply({ page: 1 });\n\n                        dispatch(fetchCveDetails(props.cve));\n                    }}\n                    inventoryList={inventories}\n                    type={'systemsExposed'}\n                />\n        );\n    };\n\n    const getSelectedSystemsData = () => {\n        let systemsList = items.data?.filter(item => selectedHosts.includes(item.inventory_id));\n        // eslint-disable-next-line camelcase\n        systemsList = systemsList.map(({ inventory_id, display_name, status_id, status_text: justification }) =>\n            ({ inventory_id, display_name, status_id, justification })); // omit properties we don't need\n\n        return systemsList;\n    };\n\n    const kebabOptions = ['',\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal(\n                [props.cveStatusDetails],\n                getSelectedSystemsData()\n            ),\n            props: { isDisabled: !selectedHosts || selectedHosts.length === 0 }\n        }\n    ];\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedHosts || [],\n        selectorHandler: handleSelect,\n        items: items.data && items || { data: [], meta: { total_items: 0 } },\n        fetchResource: ops => fetchAffectedSystemsIdsByCve(props.cve, { ...parameters, ...ops })\n    }), [items, selectedHosts, parameters, props.cve]);\n\n    const selectedHostsData = useMemo(() => (\n        items?.data?.filter(s => selectedHosts?.includes(s.id))\n    ), [selectedHosts, items]);\n\n    const sortingHeader = items?.meta?.patch_access\n        ? SYSTEMS_EXPOSED_SORTING_HEADER\n        : SYSTEMS_EXPOSED_SORTING_HEADER.filter(item => item.key !== 'advisory');\n\n    const sortBy = () =>\n        createSortBy(\n            sortingHeader,\n            metadata.sort\n        );\n\n    const onSort = (_event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            sortingHeader,\n            urlParameters.sort,\n            apply\n        );\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter, apply\n    );\n\n    const advisoryFilter = useSearchFilter('advisory', messages.advisory, messages.search, parameters.advisory, apply);\n\n    return (\n        <React.Fragment>\n            <Stack hasGutter>\n                <StackItem>\n                    <TextContent>\n                        <Text component={TextVariants.h2}>\n                            {props.intl.formatMessage(messages.affectsSystems)}\n                        </Text>\n                    </TextContent>\n                </StackItem>\n                <StackItem>\n                    {error?.hasError\n                        ? <ErrorHandler code={error?.errorCode} />\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER)),\n                                    ...mergeWithDetail()\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                onSort: (items.data.length > 0) && onSort,\n                                sortBy: (items.data.length > 0) && sortBy(),\n                                actionResolver: (rowData, rowIndex) => (\n                                    items.data.length > 0 &&\n                                    systemExposedTableRowActions(\n                                        showStatusModal,\n                                        props.cveStatusDetails,\n                                        rowIndex.rowIndex\n                                    )\n                                ),\n                                variant: TableVariant.compact\n                            }}\n                            showTags\n                            key={'inventory'}\n                            expandable\n                            ref={inventory}\n                            items={items.data}\n                            page={metadata && metadata.page || 1}\n                            perPage={metadata && metadata.page_size || 20}\n                            total={metadata && metadata.total_items || 0}\n                            isLoaded={!isLoading}\n                            onRefresh={inventoryRefresh}\n                            hasCheckbox={items && items.length !== 0}\n                            showActions={items && items.length !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                        >\n                            <PrimaryToolbar\n                                className=\"vuln-systems-primary-toolbar\"\n                                exportConfig={{\n                                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                    ouiaId: 'export',\n                                    ...exportConfig({ downloadReport })\n                                }}\n                                dedicatedAction={(!isLoading &&\n                                    <Remediation\n                                        manyRules\n                                        systems={selectedHostsData}\n                                        cves={{ id: props.cve, rules: props.filterRuleValues }}\n                                    />\n                                )}\n                                actionsConfig={{\n                                    actions: kebabOptions,\n                                    kebabToggleProps: { isDisabled: !selectedHosts || selectedHosts.length === 0 },\n                                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                                }}\n                                activeFiltersConfig={{\n                                    filters: buildActiveFilters({ ...parameters }, props.filterRuleValues),\n                                    onDelete: (_, chips) => removeFilters(chips, apply),\n                                    deleteTitle: props.intl.formatMessage(messages.resetFilters)\n                                }}\n                                bulkSelect={selectOptions && {\n                                    count: selectedHosts && selectedHosts.length,\n                                    items: selectOptions.items,\n                                    isDisabled: items.meta.total_items === 0 && (!selectedHosts || selectedHosts.length === 0),\n                                    checked: Boolean(selectedHosts && selectedHosts.length),\n                                    ouiaId: 'bulk-select',\n                                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                                }}\n                                filterConfig={{\n                                    items: [\n                                        searchFilter,\n                                        securityRuleFilter(\n                                            apply,\n                                            parameters,\n                                            props.filterRuleValues,\n                                            {\n                                                isDynamic: true,\n                                                dropdownItems: RULE_ABSENSE_OPTIONS\n                                            }\n                                        ),\n                                        statusFilter(apply, parameters),\n                                        advisoryFilter\n                                    ]\n                                }}\n                            />\n                            {StatusModal && <StatusModal />}\n                        </InventoryTable>}\n                </StackItem>\n            </Stack>\n        </React.Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cve: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    fetchAffectedSystemsByCVE,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { withRouter } from 'react-router-dom';\nimport { PATHS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = (props) => {\n    const dispatch = useDispatch();\n    const [cveName] = useState(props.match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n\n    const exposedSystems = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.affectedSystemsByCVE\n    );\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        dispatch(fetchCveDetails(cveName));\n                        dispatch(fetchAffectedSystemsByCVE(cveName));\n                    }}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: exposedSystems?.payload?.meta?.total_items || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    if (error?.hasError) {\n        return (\n            <React.Fragment>\n                <Header title={cveName}/>\n                <ErrorHandler code={error?.errorCode} />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <React.Fragment>\n                <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading }}>\n                    <Header\n                        title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                        actions={kebabItems}\n                        actionsOuiaId={'cve-actions'}\n                        breadcrumbs={[\n                            {\n                                title: PATHS.cvesPage.title,\n                                to: PATHS.cvesPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: cveName,\n                                isActive: true,\n                                loaded: true\n                            }\n                        ]}\n                        labels={[\n                            <GroupedCVELabels\n                                key=\"labels\"\n                                hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                hasRule={details.payload.data?.attributes.rules.length > 0}\n                            />\n                        ]}\n                    >\n                        <CVEDetailsPageSummary\n                            changeExposedSystemsParameters={changeExposedSystemsParameters}\n                            data={cveDetails}\n                        />\n                        <StatusModal />\n                        <BusinessModal />\n                    </Header>\n                    <Main>\n                        <SystemsExposedTable\n                            cve={cveName}\n                            filterRuleValues={filterRuleValues}\n                            cveStatusDetails={cveStatusDetails}\n                            methods={{ showStatusModal }}\n                        />\n                    </Main>\n                </CVEPageContext.Provider>\n            </React.Fragment>\n        );\n    }\n};\n\nCVEDetailsPage.propTypes = {\n    match: propTypes.object,\n    cveDetails: propTypes.object,\n    fetchCveDetails: propTypes.func,\n    handleCveDetailsError: propTypes.func\n};\nexport default withRouter(CVEDetailsPage);\n"],"names":["CVEDetailsPageDescription","cveAttributes","intl","publishDate","public_date","description","link","rh_link","Stack","hasGutter","StackItem","className","formatMessage","messages","TextContent","Text","component","TextVariants","propTypes","injectIntl","WithLoader","props","undefined","loading","variant","Spinner","centered","CVEPageOverviewItemLoader","TrendBoxLoader","CurrentVulnerabilitiesItemLoader","Skeleton","size","SkeletonSize","children","height","width","x","y","rx","ry","speed","primaryColor","secondaryColor","cx","cy","r","V3names","AV","name","values","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","split","forEach","curr","key","val","value","cvssVersion","CVEPageContext","Consumer","context","isLoading","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","Table","TableVariant","gridBreakPoint","cells","rows","Object","entries","Label","isLarge","color","score","substring","indexOf","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","keys","map","item","STATUS_OPTIONS","toString","label","brPopoverContent","statusPopoverContent","Split","SplitItem","style","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","concat","sort","a","b","systems_affected","Fragment","rule","index","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","onClick","ruleId","Link","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","text","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","defaultProps","PropTypes","KnownExploitSummary","useIntl","KnownExploitLabel","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTable","useState","StatusModal","setStatusModal","selectedHosts","setSelectedHosts","inventory","React","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","affectedSystems","useSelector","CVEDetailsPageStore","affectedSystemsByCVE","parameters","shallowEqual","metadata","payload","meta","items","useMemo","createExposedSystemsTable","error","apply","config","handleSelect","isChecked","middlewareListener","on","callback","newSelected","selected","onSelect","useEffect","useDeepCompareEffect","fetchAffectedSystemsByCVE","clearInventoryStore","showStatusModal","cves","inventories","CvePairStatusModal","cveList","updateRef","page","fetchCveDetails","inventoryList","type","kebabOptions","cveStatusDetails","includes","inventory_id","display_name","status_id","justification","status_text","isDisabled","length","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","total_items","fetchResource","ops","fetchAffectedSystemsIdsByCve","selectedHostsData","s","sortingHeader","patch_access","SYSTEMS_EXPOSED_SORTING_HEADER","searchFilter","useSearchFilter","advisoryFilter","advisory","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","_event","direction","handleSortColumn","sortBy","createSortBy","actionResolver","rowData","rowIndex","systemExposedTableRowActions","showTags","expandable","ref","perPage","page_size","total","isLoaded","onRefresh","pageSize","per_page","current","limit","onRefreshData","hasCheckbox","showActions","onExpandClick","_e","isOpen","expandRow","PrimaryToolbar","exportConfig","downloadReport","format","params","DownloadReport","dedicatedAction","Remediation","manyRules","systems","filterRuleValues","actionsConfig","actions","kebabToggleProps","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","checked","Boolean","handleOnCheckboxChange","filterConfig","securityRuleFilter","isDynamic","dropdownItems","RULE_ABSENSE_OPTIONS","statusFilter","withRouter","CVEDetailsPage","match","cveName","BusinessModal","setBusinessRisk","details","createCveDetailsPage","exposedSystems","CveStatusModal","clearCveStore","exposed_systems_count","kebabItems","kebabItemEditBusinessRisk","BusinessRiskModal","open","business_risk_id","kebabItemEditStatus","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","loaded","isActive","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","methods","handleCveDetailsError"],"sourceRoot":""}