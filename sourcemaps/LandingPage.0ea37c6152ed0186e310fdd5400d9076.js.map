{"version":3,"file":"js/LandingPage.6a211225ad1e633f7029.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Dashbar/Dashbar.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title:\n                        <EmptyStateNoCVEs\n                            secondParagraph={context.cves.meta.cves_without_errata === null\n                                ? messages.emptyStateThereShouldBeCVEsFeatureDisabled\n                                : context.cves.meta.cves_without_errata\n                                    ? messages.emptyStateThereShouldBeCVEsNoErrata\n                                    : messages.emptyStateThereShouldBeCVEs\n                            }\n                        />\n                }\n            ]\n        }]);\n    };\n\n    const { cves, methods, selectedCves, expandedRows, isAllExpanded, params } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    const onCollapseAll = () => {\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const onCollapse = (e, rowIndex) => {\n        const collapseAll = rowIndex === undefined;\n\n        collapseAll\n            ? onCollapseAll()\n            : methods.openCves(rowIndex);\n    };\n\n    const canSelect = canEditStatusOrBusinessRisk;\n    const sortingHeader = [...canSelect ? [{ key: 'checkbox' }] : [], ...header];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Table\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    canCollapseAll\n                    onCollapse={isEmpty ? undefined : onCollapse}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, ...sortingHeader], params.sort)\n                        : undefined\n                    }\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, ...sortingHeader],\n                                params.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                    isExpandable\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            ) : (\n                <SkeletonTable\n                    columns={header}\n                    rowSize={parseInt(params.page_size) || DEFAULT_PAGE_SIZE}\n                    variant={TableVariant.compact}\n                    sortBy={createSortBy(sortingHeader, params.sort)}\n                    isSelectable={canSelect}\n                />)\n            }\n            <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport {\n    CVES_DEFAULT_FILTERS,\n    CVES_FILTER_PARAMS,\n    DEFAULT_PAGE_SIZE,\n    ONLY_NON_VULNERABLE_SYSTEMS,\n    RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport { setCvesWithoutErrata } from '../../../Helpers/APIHelper';\n\nconst CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, canToggleCvesWithoutErrata, intl }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { cves, params, methods, selectedCves } = context;\n    const { isLoading } = cves;\n\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const [showCvesWithoutErrata, setShowCvesWithoutErrata] = useState(null);\n\n    useEffect(() => {\n        if (!isLoading) {\n            // if the API response feature flag value differs currently saved one\n            if (showCvesWithoutErrata !== cves?.meta?.cves_without_errata) {\n                if (cves?.meta?.cves_without_errata === true) {\n                    if (!params.advisory_available) {\n                        methods.apply({ advisory_available: 'true' });\n                    }\n                }\n                else {\n                    if (params.advisory_available) {\n                        methods.apply({ advisory_available: undefined });\n                    }\n                }\n            }\n\n            setShowCvesWithoutErrata(cves?.meta?.cves_without_errata);\n        }\n    }, [cves?.meta?.cves_without_errata, isLoading]);\n\n    const defaultFilters = { ...CVES_DEFAULT_FILTERS, ...cves?.meta?.cves_without_errata ? { advisory_available: 'true' } : {} };\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedCves.map(({\n                    id,\n                    business_risk_id,\n                    business_risk_text,\n                    attributes\n                }) => ({\n                    id,\n                    business_risk_id: attributes ? attributes.business_risk_id : business_risk_id,\n                    justification: attributes ? attributes.business_risk_text : business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves.map(({\n                    id,\n                    exposed_systems_count,\n                    status_justification,\n                    status_id,\n                    attributes\n                }) => ({\n                    id,\n                    exposed_systems_count: attributes ? attributes.systems_affected : exposed_systems_count,\n                    justification: attributes ? attributes.status_text : status_justification,\n                    status_id: attributes ? attributes.status_id : status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnManagementModalOpen(true)\n        },\n        ...canToggleCvesWithoutErrata && showCvesWithoutErrata !== null ? [(\n            showCvesWithoutErrata ?\n                {\n                    label: intl.formatMessage(messages.hideCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(false)\n                        .then(() => methods.apply({ page: 1, advisory_available: undefined }))\n                } :\n                {\n                    label: intl.formatMessage(messages.showCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(true)\n                        .then(() => methods.apply({ page: 1 }))\n                }\n        )] : []\n    ];\n\n    const canSelect = canEditStatusOrBusinessRisk;\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || DEFAULT_PAGE_SIZE,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={canSelect ? {\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                } : undefined}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params, [],\n                            {\n                                isDynamic: false,\n                                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)\n                            }\n                        ),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        ...showCvesWithoutErrata ? [advisoryAvailabilityFilter(methods.apply, params)] : []\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, defaultFilters),\n                    deleteTitle: intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, defaultFilters, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n            {exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool,\n    canToggleCvesWithoutErrata: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, Stack, StackItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { CVES_ALLOWED_PARAMS, PATCHMAN_ADVISORY_DOCS_PATH, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useColumnManagement, useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = ({ rbac }) => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [[\n        canEditStatusOrBusinessRisk,\n        canEditPairStatus,\n        canExport,\n        canReadVulnerabilityResults,\n        canToggleCvesWithoutErrata\n    ], isRbacLoading] = rbac;\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveList(newColumns)));\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns, parameters), [cveList, columns, parameters]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters, isFirstLoad]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered /> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnManagementModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal />\n                        <CveStatusModal />\n\n                        {ColumnManagementModal}\n\n                        <Stack>\n                            <StackItem>\n                                {cves.meta.cves_without_errata && cves.meta.advisory_available !== 'True' &&\n                                    <Alert\n                                        variant=\"info\"\n                                        isInline\n                                        title=\"CVEs with and without an established Advisory\"\n                                    >\n                                        Red Hat&apos;s policy requires displaying all high priority, critical,\n                                        and important CVEs regardless of Advisory status.\n                                        <a\n                                            href={PATCHMAN_ADVISORY_DOCS_PATH}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                            className=\"pf-u-ml-xs\"\n                                        >\n                                            Learn more about errata advisories\n                                            <ExternalLinkAltIcon className=\"pf-u-ml-xs\" />\n                                        </a>\n                                    </Alert>\n                                }\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                    canToggleCvesWithoutErrata={canToggleCvesWithoutErrata}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized serviceName={SERVICE_NAME} />\n        );\n    } else {\n        return <ErrorHandler code={cves.errors.status} />;\n    }\n};\n\nCVEs.propTypes = {\n    rbac: PropTypes.array.isRequired\n};\n\nconst CVEsWithRbac = () => {\n    const rbac = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults,\n        PERMISSIONS.toggleCvesWithoutErrata\n    ]);\n\n    return <CVEs rbac={rbac} />;\n};\n\nexport default CVEsWithRbac;\n","import React, { useEffect, useState } from 'react';\nimport {\n    Card,\n    Grid,\n    GridItem,\n    StackItem,\n    Stack,\n    Alert,\n    CardBody,\n    Text,\n    TextVariants,\n    TextContent,\n    Tooltip\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { impactList, CVES_DEFAULT_FILTERS } from '../../../Helpers/constants';\nimport { constructFilterParameters, sanitizeLinks } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCveListParameters } from '../../../Store/Actions/Actions';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport propTypes from 'prop-types';\nimport { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';\nimport WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { useIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\n\nconst DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {\n    return (\n        <Card isFullHeight className=\"card-box\">\n            <CardBody>\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <b>{title}</b>\n                    </Text>\n                    <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs\">\n                        <Tooltip content=\"This value only shows the CVEs that have advisories.\">\n                            <a onClick={onLinkClick}>\n                                {hasIcon && (<SecurityIcon\n                                    color={impactList[impact]?.iconColor}\n                                    size=\"sm\"\n                                    className=\"pf-u-mr-sm\" />\n                                )}\n                                {count}\n                            </a>\n                        </Tooltip>\n                    </Text>\n                </TextContent>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport { DashbarItem };\n\nDashbarItem.propTypes = {\n    title: propTypes.node,\n    count: propTypes.number.isRequired,\n    impact: propTypes.oneOf(Object.keys(impactList)),\n    onLinkClick: propTypes.func.isRequired,\n    hasIcon: propTypes.bool\n};\n\nconst Dashbar = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [isFirstLoad, setFirstLoad] = useState(true);\n    const [dashbar, setDashbar] = useState({});\n    const [announcement, setAnnouncement] = useState({});\n    const [isDashbarLoading, setDashbarLoading] = useState(true);\n\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    // reset filters and apply passed ones\n    const applyOnly = (filterParams = {}) => {\n        const chips = buildActiveFilters(parameters);\n        removeFilters(chips, apply, true, filterParams);\n    };\n\n    const fetchAnnouncements = async () => {\n        let data = {};\n\n        try {\n            data = await getAnnouncement();\n        }\n        catch (error) {\n            if (error.status !== '404') {\n                throw error;\n            }\n        }\n\n        setAnnouncement(data);\n    };\n\n    const fetchDashbar = async () => {\n        let data = await getDashbar(parameters);\n\n        setDashbar(data);\n        setDashbarLoading(false);\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        } else {\n            fetchAnnouncements();\n            fetchDashbar();\n        }\n    }, [parameters, isFirstLoad]);\n\n    const insertSanitizedHtml = text => ({ __html: sanitizeHtml(text) });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Stack hasGutter>\n                <StackItem>\n                    {!isDashbarLoading ? (\n                        <Grid hasGutter id=\"dashbar\">\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}\n                                    count={dashbar?.exploitable_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            known_exploit: 'true',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}\n                                    count={dashbar?.cves_with_rule}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            rule_presence: 'true',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}\n                                    count={dashbar?.critical_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            impact: '7',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                    impact=\"Critical\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}\n                                    count={dashbar?.important_cves}\n                                    onLinkClick={() => applyOnly(\n                                        {\n                                            ...CVES_DEFAULT_FILTERS,\n                                            impact: '5',\n                                            ...dashbar.meta.cves_without_errata ? { advisory_available: 'true' } : {}\n                                        }\n                                    )}\n                                    impact=\"Important\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                        </Grid>\n                    ) : (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                        </Grid>\n                    )}\n                </StackItem>\n                {announcement?.message && (\n                    <StackItem id=\"announcement\">\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}\n                        >\n                            <span dangerouslySetInnerHTML={\n                                insertSanitizedHtml(sanitizeLinks(announcement.message))\n                            } />\n                        </Alert>\n                    </StackItem>\n                )}\n            </Stack>\n        </Main>\n    );\n};\n\nexport default Dashbar;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\nimport Dashbar from '../Dashbar/Dashbar';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Dashbar />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","_ref","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isAllExpanded","params","isEmpty","data","length","rows","map","cve","find","selectedCve","id","_objectSpread","selected","index","current","includes","undefined","isOpen","canSelect","sortingHeader","concat","_toConsumableArray","key","React","Fragment","isLoading","SkeletonTable","columns","rowSize","parseInt","page_size","DEFAULT_PAGE_SIZE","variant","TableVariant","compact","sortBy","createSortBy","sort","isSelectable","Table","canSelectAll","cells","heightAuto","props","colSpan","title","EmptyStateNoCVEs","secondParagraph","meta","cves_without_errata","messages","emptyStateThereShouldBeCVEsFeatureDisabled","emptyStateThereShouldBeCVEsNoErrata","emptyStateThereShouldBeCVEs","onSelect","event","isSelected","rowId","cveName","selectCves","canCollapseAll","onCollapse","e","rowIndex","filter","openCves","onCollapseAll","actionResolver","rowData","cveTableRowActions","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","isExpandable","TableHeader","TableBody","PaginationWrapper","propTypes","CVETableContext","Consumer","_extends","currentValue","arguments","affecting","label","intl","formatMessage","filterSystemsExposed","type","conditionalFilterType","checkbox","urlParam","filterValues","onChange","value","values","join","page","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","_cves$meta4","_cves$meta5","canExport","canToggleCvesWithoutErrata","_useState","useState","_useState2","_slicedToArray","exportPDF","setExportPDF","selectedCvesCount","_useState3","_useState4","showCvesWithoutErrata","setShowCvesWithoutErrata","useEffect","_cves$meta","_cves$meta3","_cves$meta2","advisory_available","defaultFilters","CVES_DEFAULT_FILTERS","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","editBusinessRisk","onClick","showBusinessRiskModal","_ref2","business_risk_id","business_risk_text","attributes","justification","isDisabled","editStatus","showStatusModal","_ref3","exposed_systems_count","status_justification","status_id","systems_affected","status_text","columnManagementModalTitle","setColumnManagementModalOpen","hideCvesWithoutAdvisories","setCvesWithoutErrata","then","showCvesWithoutAdvisories","PrimaryToolbar","pagination","total_items","itemCount","perPage","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","searchFilterByCveID","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","item","ONLY_NON_VULNERABLE_SYSTEMS","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","advisoryAvailabilityFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","deleteTitle","resetFilters","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","CVEs","rbac","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","_useState5","_useState6","isFirstLoad","setFirstLoad","_rbac","_rbac$","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","_ref4","_ref5","_ref6","_ref7","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveList","_useColumnManagement2","ColumnManagementModal","useMemo","createCveListByAccount","_useUrlParams","useUrlParams","CVES_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","status","Spinner","centered","Provider","format","DownloadReport","exec","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","StatusModal","expandCve","Stack","StackItem","Alert","isInline","href","PATCHMAN_ADVISORY_DOCS_PATH","target","rel","className","ExternalLinkAltIcon","CVEsTableToolbar","CVEsTable","column","_column$isShown","isShown","isShownByDefault","NotAuthorized","serviceName","SERVICE_NAME","PropTypes","isRequired","useRbac","PERMISSIONS","setCveStatusAndBusinessRisk","setPairStatus","basicReporting","readVulnerabilityResults","toggleCvesWithoutErrata","DashbarItem","_impactList$impact","impact","onLinkClick","hasIcon","Card","isFullHeight","CardBody","TextContent","Text","component","TextVariants","h4","Tooltip","content","SecurityIcon","color","impactList","iconColor","size","Object","keys","text","useIntl","dashbar","setDashbar","announcement","setAnnouncement","_useState7","_useState8","isDashbarLoading","setDashbarLoading","applyOnly","fetchAnnouncements","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","getAnnouncement","sent","t0","stop","fetchDashbar","_callee2","_context2","getDashbar","Main","style","paddingBottom","hasGutter","Grid","GridItem","span","md","WithLoader","LoaderType","inlineSkeleton","height","FormattedMessage","dashbarKnownExploitsTitle","exploitable_cves","known_exploit","dashbarSecurityRulesTitle","cves_with_rule","rule_presence","dashbarCriticalVulnerabilitiesTitle","critical_cves","dashbarImportantVulnerabilitiesTitle","important_cves","message","dashbarAnnouncementTitle","dangerouslySetInnerHTML","sanitizeLinks","__html","sanitizeHtml","Popover","enableFlip","position","headerContent","ovalPopoverHeader","bodyContent","ovalPopoverBody","footerContent","learnMore","cvesHeader","OutlinedQuestionCircleIcon","verticalAlign","Header","showBreadcrumb","Dashbar"],"sourceRoot":""}