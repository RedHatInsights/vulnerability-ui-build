{"version":3,"file":"js/740.b826753971816360dbb3.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : [])\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        knownExploitFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        useCvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        useSearchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                    deleteTitle: intl.formatMessage(messages.resetFilters)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs, entity.id]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves',  notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        }\n        else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && setUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"names":["SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","messages","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","selectedCvesData","flatMap","PrimaryToolbar","pagination","itemCount","total_items","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","payload","errors","parseInt","NotConnected","titleText","bodyText","buttonText","ErrorHandler","code","Provider","value","format","DownloadReport","notification","addNotification","clearNotifications","iSelected","selectSystemCve","expandSystemCve","cvesList","Array","from","some","element","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"sourceRoot":""}