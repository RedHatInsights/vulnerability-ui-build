{"version":3,"file":"js/6150.1646946688791.3ffceb9c09fac5a90222.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/disconnected-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./node_modules/lodash/_baseMap.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity, canSelect }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditPairStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditPairStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint=\"grid-lg\"\n                    ouiaId=\"cves-table\"\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string,\n    canSelect: propTypes.bool\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({\n    entity,\n    intl,\n    context,\n    canExport,\n    customAction,\n    canSelect,\n    canManageColumns,\n    filters\n}) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, selectedRowsRawData, isAllExpanded, canEditPairStatus } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = selectedCves?.length ?? 0;\n    const remediableCves = selectedRowsRawData.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...canEditPairStatus ?\n            [{\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData, true),\n                props: { isDisabled: !selectedCvesCount }\n            }] : [],\n        ...canManageColumns ?\n            [{\n                label: intl.formatMessage(messages.columnManagementModalTitle),\n                onClick: () => methods.setColumnModalOpen(true)\n            }] : []\n    ];\n\n    const allFilters = [\n        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n        securityRuleFilter(methods.apply, parameters),\n        knownExploitFilter(methods.apply, parameters),\n        impactFilter(methods.apply, parameters),\n        useCvssBaseScoreFilter(methods.apply, parameters),\n        businessRiskFilter(methods.apply, parameters),\n        publishDateFilter(methods.apply, parameters),\n        statusFilter(methods.apply, parameters),\n        useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),\n        remediationFilter(methods.apply, parameters)\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                isDisabled: cves.meta.total_items === 0,\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={customAction ? (typeof customAction === 'function' ? customAction(cves) : customAction) : (entity &&\n                <Remediation\n                    isDisabled={selectedRowsRawData.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={canSelect && {\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: filters ? allFilters.filter(filter => filters.includes(filter.key)) : allFilters\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={canExport && {\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    filters: propTypes.arrayOf(propTypes.string)\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import { createIcon } from '../createIcon';\n\nexport const DisconnectedIconConfig = {\n  name: 'DisconnectedIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M107.625758,511.919812 C107.647579,453.639819 120.473237,396.076275 145.195758,343.299812 L66.0757577,263.919812 C64.9757577,266.019812 63.7857577,268.019812 62.6857577,270.119812 C-38.2858609,455.136708 -13.6478565,683.418046 124.475758,842.629812 C134.640866,854.227038 149.304208,860.890207 164.725758,860.920803 C177.621501,860.999229 190.089847,856.300444 199.725758,847.729812 C222.045758,828.339812 224.235758,794.349812 204.725758,771.959812 C142.116482,699.791587 107.639971,607.46129 107.625758,511.919812 Z M298.965758,512.769812 C298.965758,507.959812 299.165758,503.349812 299.465758,498.849812 L223.695758,422.919812 C195.943021,511.49644 210.859555,607.936744 264.075758,683.989812 C272.417691,695.880397 286.040845,702.947712 300.565758,702.92092 C309.717884,702.984827 318.661486,700.187766 326.145758,694.919812 C346.244069,680.682503 351.030068,652.865563 336.845758,632.729812 C312.094475,597.618928 298.858215,555.687799 298.965758,512.729812 L298.965758,512.769812 Z M903.425758,837.839812 C1064.25516,648.181373 1062.68818,369.557312 899.735758,181.719812 C890.46515,170.983736 877.290268,164.395355 863.139154,163.418898 C848.98804,162.442441 835.033106,167.158807 824.375758,176.519812 C802.005758,195.919812 799.815758,229.919812 819.185758,252.309812 C945.123654,397.620078 948.572544,612.370403 827.365758,761.649812 L754.005758,688.159812 C755.244385,686.815558 756.37773,685.377981 757.395758,683.859812 C792.844775,633.759435 811.790626,573.852791 811.595758,512.479812 C811.595758,450.189812 792.735758,390.599812 756.695758,340.199812 C749.880846,330.567 739.510358,324.044705 727.876268,322.074416 C716.242178,320.104127 704.302408,322.848071 694.695758,329.699812 C674.625758,343.899812 670.135758,371.699812 684.215758,391.799812 C733.317078,460.966176 735.688504,552.965658 690.215758,624.569812 L615.045758,549.479812 C619.447596,537.503845 621.679174,524.839047 621.635758,512.079812 C621.657896,451.518897 572.616613,402.388105 512.055758,402.299812 C499.315423,402.259246 486.670236,404.494336 474.715758,408.899812 L82.6457577,15.6398121 C64.3651324,-2.58558468 34.7711544,-2.54081316 16.5457577,15.7398121 C-1.67963909,34.0204373 -1.63486757,63.6144153 16.6457577,81.8398121 L120.475758,185.919812 L196.535758,261.919812 L333.185758,398.799812 L408.845758,474.589812 L549.005758,614.969812 L941.455758,1008.21981 C959.733621,1026.4673 989.34327,1026.44268 1007.59076,1008.16481 C1025.83825,989.886948 1025.81362,960.2773 1007.53576,942.029812 L903.425758,837.839812 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const DisconnectedIcon = createIcon(DisconnectedIconConfig);\n\nexport default DisconnectedIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyState } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\";\nimport { EmptyStateIcon } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js\";\nimport { EmptyStateBody } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js\";\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\nimport { Button } from \"@patternfly/react-core/dist/esm/components/Button/Button.js\";\nimport DisconnectedIcon from \"@patternfly/react-icons/dist/esm/icons/disconnected-icon\";\n\nvar NotConnected = function NotConnected(_ref) {\n  var titleText = _ref.titleText,\n      bodyText = _ref.bodyText,\n      buttonText = _ref.buttonText;\n  return /*#__PURE__*/React.createElement(EmptyState, null, /*#__PURE__*/React.createElement(EmptyStateIcon, {\n    icon: DisconnectedIcon\n  }), /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h5\",\n    size: \"lg\"\n  }, titleText), /*#__PURE__*/React.createElement(EmptyStateBody, null, bodyText), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    component: \"a\",\n    href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"pf-u-mt-lg\"\n  }, buttonText));\n};\n\nNotConnected.propTypes = {\n  titleText: propTypes.node,\n  bodyText: propTypes.node,\n  buttonText: propTypes.node\n};\nNotConnected.defaultProps = {\n  titleText: 'This system isn’t connected to Insights yet',\n  bodyText: 'To get started, activate the Insights client for this system.',\n  buttonText: 'Learn how to activate the Insights client'\n};\nexport default NotConnected;","import React, {\n    useMemo,\n    useEffect,\n    Fragment,\n    createContext,\n    useState\n} from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS, SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';\nimport {\n    constructFilterParameters,\n    useUrlParams,\n    updateRef\n} from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({\n    entity,\n    intl,\n    showHeaderLabel,\n    setPageTitle,\n    canExport,\n    customAction,\n    canSelect,\n    canEditPairStatus,\n    canManageColumns,\n    defaultColumns,\n    filters,\n    linkToCustomerPortal\n}) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const selectedRowsRawData = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedRowsRawData || []\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const cves = useMemo(() =>\n        createCveListBySystem(entity.id, systemCVEs, columns, linkToCustomerPortal), [systemCVEs, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (!entity.insights_id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        } else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n\n        if (defaultColumns) {\n            const defaultColumnsWithAttributes = defaultColumns.map(\n                defaultColumn => SYSTEM_DETAILS_HEADER.find(column => column.key === defaultColumn)\n            );\n            dispatch(changeColumnsSystemDetail(defaultColumnsWithAttributes));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            if (setPageTitle) {\n                document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n            }\n\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map(\n            ({\n                id,\n                attributes:\n                {\n                    // eslint-disable-next-line camelcase\n                    cve_status_id,\n                    // eslint-disable-next-line camelcase\n                    status_id,\n                    status_text: justification,\n                    // eslint-disable-next-line camelcase\n                    cve_status_text: cve_justification\n                },\n                ...rest\n                // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest })\n        );\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type=\"systemDetail\"\n            />\n        ));\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    selectedRowsRawData,\n                    expandedRows,\n                    isAllExpanded,\n                    canEditPairStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnModalOpen,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal/>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemDetail(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar\n                            entity={entity.id}\n                            canExport={canExport}\n                            customAction={customAction}\n                            canSelect={canSelect}\n                            canManageColumns={canManageColumns}\n                            filters={filters}\n                        />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                    canSelect={canSelect}\n                />\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(systemCVEs.payload.errors);\n    }\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false,\n    canSelect: true,\n    canManageColumns: true,\n    canEditPairStatus: true,\n    linkToCustomerPortal: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    defaultColumns: propTypes.arrayOf(propTypes.string),\n    filters: propTypes.arrayOf(propTypes.string),\n    linkToCustomerPortal: propTypes.bool\n};\n\nexport const ConnectedSystemCves = injectIntl(SystemCVEs);\n\nconst TranslateSystemCves = ({ customItnlProvider, customIntlProvider, ...props }) => {\n    const Wrapper = (customItnlProvider || customIntlProvider) ? IntlProvider : Fragment;\n\n    return <Wrapper {...(customItnlProvider || customIntlProvider) && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customIntlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customIntlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n"],"names":["SystemCvesTableWithContext","context","header","entity","canSelect","cves","methods","selectedCves","expandedRows","canEditPairStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","messages","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","canExport","customAction","canManageColumns","filters","parameters","selectedRowsRawData","advisory","selectedCvesCount","remediableCves","attributes","remediation","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","onClick","showStatusModal","isDisabled","setColumnModalOpen","allFilters","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","PrimaryToolbar","pagination","total_items","itemCount","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","name","height","width","svgPath","yOffset","xOffset","NotConnected","_ref","titleText","bodyText","buttonText","EmptyState","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Button","component","href","target","rel","className","createContext","SystemCVEs","status","statusCode","showHeaderLabel","setPageTitle","defaultColumns","linkToCustomerPortal","dispatch","useDispatch","useState","StatusModal","setStatusModal","isFirstLoad","setFirstLoad","isColumnModalOpen","systemCVEs","useSelector","SystemCvesStore","cveList","columns","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","defaultColumnsWithAttributes","defaultColumn","SYSTEM_DETAILS_HEADER","column","changeColumnsSystemDetail","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","payload","errors","parseInt","insights_id","ErrorHandler","code","Provider","value","format","DownloadReport","notification","addNotification","clearNotifications","iSelected","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_id","status_id","justification","status_text","cve_justification","cve_status_text","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","ColumnManagementModal","appliedColumns","applyColumns","newColumns","isModalOpen","setModalOpen","Stack","hasGutter","StackItem","TextContent","Text","TextVariants","SystemCveTableToolbar","SystemCveTable","isShown","isShownByDefault","allowedCveActions","ConnectedSystemCves","TranslateSystemCves","customItnlProvider","customIntlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter","baseEach","isArrayLike","module","exports","collection","iteratee","result","Array"],"sourceRoot":""}