{"version":3,"file":"js/Reports.9cd571e9cb9fa2edffa2.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/Common/buildOSGroups.js","webpack:///./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js","webpack:///./src/Components/SmartComponents/Reports/downloadCveReport.js"],"sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\n\nconst SelectCustomSorter = ({ sorterData, setSorterData, selectProps, options }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnSelectChange = (optionName) => {\n        const optionValue = options.find(item => item.label === optionName).value;\n        setSorterData(optionValue);\n        setOpen(false);\n    };\n\n    return (\n        <Select\n            variant=\"single\"\n            direction=\"up\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={options.find(item => item.value === sorterData).label}\n            key=\"custom-sorter\"\n            onSelect={(event, optionName) => { handleOnSelectChange(optionName); }}\n            width=\"auto\"\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption width=\"100%\" key={item.label} value={item.label}/>\n            )}\n        </Select>\n    );\n};\n\nSelectCustomSorter.propTypes = {\n    sorterData: propTypes.string,\n    setSorterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default SelectCustomSorter;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    CVE_REPORT_FILTERS,\n    PDF_REPORT_USER_NOTE_MAX_LENGTH,\n    CUSTOM_REPORT_SORT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\nimport { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\nimport SelectCustomSorter from '../../PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter';\nimport TagFilter from '../../PresentationalComponents/Filters/CustomFilters/TagFilter';\nimport { fetchOperatingSystems } from '../../../Store/Actions/Actions';\nimport buildOSGroups from '../Reports/Common/buildOSGroups';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    sorterData,\n    setFilterData,\n    setSorterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle,\n    inheritGlobalTags,\n    setInheritGlobalTags,\n    globalFilterTags\n}) => {\n    const dispatch = useDispatch();\n    const [includeAllColumns, setIncludeAllColumns] = useState(true);\n    const operatingSystems = useSelector(({ ReportsPageStore }) => ReportsPageStore?.operatingSystems?.data);\n    const osGroups = buildOSGroups(operatingSystems || []);\n\n    const activeFilters = [\n        'rule_presence',\n        'known_exploit',\n        'impact',\n        'cvss_filter',\n        'business_risk_id',\n        'status_id',\n        'publish_date',\n        'rhel_version'\n    ];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (includeAllColumns) {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [includeAllColumns, setColumnsToInclude]);\n\n    useEffect(() => {\n        dispatch(fetchOperatingSystems());\n    }, [dispatch]);\n\n    return (\n        <Modal\n            width=\"50rem\"\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId=\"custom-report-modal\"\n            isOpen={isModalOpen}\n            onClose={() => {\n                handleModalClose();\n                setInheritGlobalTags(true);\n            }}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                        handleModalClose();\n                        setInheritGlobalTags(true);\n                    }}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        ...CVE_REPORT_FILTERS[filterId],\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: {\n                                            className: 'pf-u-mr-sm pf-u-mb-sm',\n                                            ...CVE_REPORT_FILTERS[filterId].selectProps\n                                        },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title,\n                                        ...(filterId === 'rhel_version' ? {\n                                            // overriding parameters specific to the OS filter\n                                            options: Object.values(osGroups).flat(),\n                                            groups: osGroups\n                                        } : {})\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.tagFilterTitle)}\n                >\n                    <TagFilter\n                        onEdit={() => setInheritGlobalTags(false)}\n                        selectedTags={filterData.tags}\n                        setSelectedTags={tags => setFilterData({ ...filterData, tags })}\n                        globalTags={globalFilterTags}\n                        inheritGlobalTags={inheritGlobalTags}\n                    />\n                    {globalFilterTags?.length > 0 && inheritGlobalTags &&\n                        <div className=\"pf-u-font-size-sm pf-u-mt-sm\">\n                            {intl.formatMessage(messages.tagFilterGlobal)}\n                            <a className=\"pf-u-ml-md\" onClick={() => {\n                                setInheritGlobalTags(false);\n                                filterData.tags = [];\n                            }}>\n                                {intl.formatMessage(messages.tagFilterClear)}\n                            </a>\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={includeAllColumns}\n                            onChange={() => setIncludeAllColumns(true)} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={!includeAllColumns}\n                            onChange={() => setIncludeAllColumns(false)} />\n                    </ToggleGroup>\n\n                    {includeAllColumns ||\n                        <div style={styles.columns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS)\n                                    .filter(([, value]) => value.hasColumn !== false)\n                                    .map(([key, value]) =>\n                                        <Checkbox\n                                            id={key}\n                                            key={key}\n                                            label={value.title}\n                                            isChecked={columnsToInclude.includes(key)}\n                                            onChange={(newValue) =>\n                                                handleCheckboxChange(key, newValue)\n                                            }\n                                            className=\"pf-u-mb-md\"\n                                        />\n                                    )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportSortDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        <SelectCustomSorter sorterData={sorterData} setSorterData={setSorterData}\n                            selectProps={{ className: 'pf-u-mr-sm pf-u-mb-sm' }}\n                            options={CUSTOM_REPORT_SORT_OPTIONS} />\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation=\"vertical\"\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    sorterData: propTypes.string,\n    setFilterData: propTypes.func,\n    setSorterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func,\n    inheritGlobalTags: propTypes.bool,\n    setInheritGlobalTags: propTypes.func,\n    globalFilterTags: propTypes.array\n};\n\nexport default ReportConfigModal;\n","import { compareVersions } from '../../../../Helpers/MiscHelper';\n\nconst buildOSGroups = (osVersions = []) => {\n    let groups = osVersions.reduce((acc, version) => {\n        const { major, minor } = version;\n        const groupName = `RHEL ${major}`;\n\n        acc[groupName] = [\n            ...(acc[groupName] || []),\n            {\n                label: `RHEL ${major}.${minor}`,\n                value: `${major}.${minor}`\n            }\n        ];\n\n        return acc;\n    }, {});\n\n    // sort by group, desc\n    groups = Object.entries(groups);\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    // sort versions, desc\n    groups = groups.map(([groupName, versions]) => [\n        groupName,\n        Array.from(versions).sort((a, b) =>\n            compareVersions(a.value, b.value, false)\n        )\n    ]);\n\n    return Object.fromEntries(groups);\n};\n\nexport default buildOSGroups;\n","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={style} src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport {\n    constructReportParameters,\n    buildFilters,\n    useDownloadPDF\n} from '../../../Helpers/ReportsHelper';\nimport {\n    CVE_REPORT_FILTERS,\n    DEFAULT_FILTER_DATA,\n    CUSTOM_REPORT_DEFAULT_SORT,\n    PERMISSIONS,\n    PDF_REPORT_TEMPLATES,\n    getReportFilename\n} from '../../../Helpers/constants';\nimport styles from './Common/styles';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport useDownloadCveReport from './downloadCveReport';\n\nconst ReportsPage = () => {\n    const [[canDoAdvancedReporting, canReadVulnerabilities, canReadInventory], isLoading]\n        = useRbac([PERMISSIONS.advancedReporting, PERMISSIONS.readVulnerabilityResults, PERMISSIONS.readHosts], '');\n\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);\n    const [inheritGlobalTags, setInheritGlobalTags] = useState(true);\n\n    const globalFilterTags = useSelector(({ ReportsPageStore }) => ReportsPageStore.parameters.tags) ?? [];\n    const chrome = useChrome();\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);\n        setModalOpen(false);\n    };\n\n    const dissectTag = tag => {\n        const [namespace, keyValue] = tag.split('/');\n        const [key, value] = keyValue.split('=');\n        return { string: tag, namespace, key, value };\n    };\n\n    const downloadReport = useDownloadPDF(dispatch);\n    const downloadCveReport = useDownloadCveReport(\n        downloadReport\n    );\n\n    const handleCVEsDownload = async () => {\n        const user = await chrome.auth.getUser();\n        setModalOpen(false);\n\n        const params = constructReportParameters({ ...filterData, tags: inheritGlobalTags\n            ? globalFilterTags?.map(dissectTag) : filterData.tags }, sorterData);\n\n        const filters = buildFilters({ ...filterData, tags: inheritGlobalTags\n            ? globalFilterTags?.map(dissectTag) : filterData.tags });\n\n        downloadCveReport(\n            {\n                params,\n                filters,\n                reportData: {\n                    columnsToInclude,\n                    reportTitle,\n                    userNotes\n                },\n                user\n            }\n        );\n    };\n\n    const handleExecutiveDownload = () => {\n        downloadReport(\n            PDF_REPORT_TEMPLATES.executive,\n            getReportFilename('executive')\n        );\n    };\n\n    return (\n        isLoading ? <Spinner centered /> :\n            (canDoAdvancedReporting && canReadInventory) ? (\n                <React.Fragment>\n                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />\n                    <Main>\n                        <Grid hasGutter lg={3} md={4} sm={12}>\n                            <GridItem>\n                                <Card className=\"report-card\">\n                                    <CardTitle>\n                                        <ChartPieSolid style={styles.pieChartIcon} />\n                                        <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                            {intl.formatMessage(messages.executiveReportCardTitle)}\n                                        </span>\n                                    </CardTitle>\n                                    <CardBody>\n                                        {intl.formatMessage(messages.executiveReportCardDescription)}\n                                    </CardBody>\n                                    <CardFooter>\n                                        <a onClick={handleExecutiveDownload}>\n                                            {intl.formatMessage(messages.executiveReportCardButton)}\n                                        </a>\n                                    </CardFooter>\n                                </Card>\n                            </GridItem>\n                            {canReadVulnerabilities &&\n                                <GridItem>\n                                    <Card className=\"report-card\">\n                                        <CardTitle>\n                                            <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\" />\n                                            <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                                {intl.formatMessage(messages.customReportCardTitle)}\n                                            </span>\n                                        </CardTitle>\n                                        <CardBody>\n                                            {intl.formatMessage(messages.customReportCardDescription)}\n                                        </CardBody>\n                                        <CardFooter>\n                                            <a className=\"create-report\" onClick={() => setModalOpen(true)}>\n                                                {intl.formatMessage(messages.customReportCardButton)}\n                                            </a>\n                                        </CardFooter>\n                                    </Card>\n                                </GridItem>\n                            }\n                        </Grid>\n                    </Main>\n                    <ReportConfigModal\n                        isOpen={isModalOpen}\n                        columnsToInclude={columnsToInclude}\n                        setColumnsToInclude={setColumnsToInclude}\n                        filterData={filterData}\n                        sorterData={sorterData}\n                        userNotes={userNotes}\n                        reportTitle={reportTitle}\n                        setReportTitle={setReportTitle}\n                        setUserNotes={setUserNotes}\n                        setFilterData={setFilterData}\n                        setSorterData={setSorterData}\n                        handleModalClose={(handleModalClose)}\n                        handleDownloadButton={handleCVEsDownload}\n                        inheritGlobalTags={inheritGlobalTags}\n                        setInheritGlobalTags={setInheritGlobalTags}\n                        globalFilterTags={globalFilterTags}\n                    />\n                </React.Fragment>\n            ) : (\n                <NoAccessPage\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                    emptyStateTitle={intl.formatMessage(messages.emptyStateNoAccessReportsPage)}\n                />\n            )\n    );\n};\n\nexport default ReportsPage;\n","\nimport { useCallback } from 'react';\nimport { useIntl } from 'react-intl';\nimport { buildCveReportConfig } from '../../../Helpers/ReportsHelper';\nimport {\n    PDF_REPORT_TEMPLATES,\n    getReportFilename\n} from '../../../Helpers/constants';\n\nconst useDownloadCveReport = (downloadReport) => {\n    const intl = useIntl();\n\n    return useCallback(({ user, params, filters, reportData }) => {\n        const processedFilters = {\n            ...params,\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991),\n            sort: params.sort || '-cvss_score',\n            affecting: 'true',\n            advanced_report: 'true'\n        };\n\n        const reportConfig = buildCveReportConfig({\n            filters,\n            intl,\n            reportData,\n            user\n        });\n\n        downloadReport(\n            PDF_REPORT_TEMPLATES.vulnerabilities,\n            getReportFilename('reports'),\n            {\n                filters: processedFilters,\n                reportConfig\n            }\n        );\n    }, []);\n};\n\nexport default useDownloadCveReport;\n"],"names":["SelectCustomSorter","_ref","sorterData","setSorterData","selectProps","options","_useState","useState","_useState2","_slicedToArray","isOpen","setOpen","React","Select","_extends","variant","direction","onToggle","placeholderText","find","item","value","label","key","onSelect","event","optionName","optionValue","handleOnSelectChange","width","map","SelectOption","propTypes","ReportConfigModal","isModalOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","inheritGlobalTags","setInheritGlobalTags","globalFilterTags","dispatch","useDispatch","includeAllColumns","setIncludeAllColumns","osGroups","groups","arguments","length","undefined","reduce","acc","version","major","minor","groupName","concat","_toConsumableArray","Object","entries","sort","a","b","compareVersions","_ref2","versions","Array","from","fromEntries","buildOSGroups","useSelector","_ReportsPageStore$ope","ReportsPageStore","operatingSystems","data","activeFilters","useEffect","keys","CVE_REPORT_FILTERS","fetchOperatingSystems","Modal","title","intl","formatMessage","messages","configModalTitle","ouiaId","onClose","actions","Button","onClick","isDisabled","isCvssRangeValid","cvss_filter","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","configModalExportReport","cancel","Form","FormGroup","customReportTitleLabel","fieldId","TextInput","onChange","type","className","id","customReportFilterDataByLabel","filterId","_CVE_REPORT_FILTERS$f","component","_objectSpread","items","filterName","values","flat","tagFilterTitle","TagFilter","onEdit","selectedTags","tags","setSelectedTags","globalTags","tagFilterGlobal","tagFilterClear","customReportDataToIncludeLabel","ToggleGroup","ToggleGroupItem","text","customReportDataToggleAll","isSelected","customReportDataToggleCustom","style","styles","columns","Checkbox","isChecked","filter","_ref3","hasColumn","_ref5","_ref6","includes","newValue","parameter","handleCheckboxChange","customReportSortDataByLabel","CUSTOM_REPORT_SORT_OPTIONS","customReportUserNotesLabel","helperTextInvalid","customReportUserNoteTooLong","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","PropTypes","_useSelector","_useRbac","useRbac","PERMISSIONS","advancedReporting","readVulnerabilityResults","readHosts","_useRbac2","_useRbac2$","canDoAdvancedReporting","canReadVulnerabilities","canReadInventory","isLoading","setModalOpen","_useState3","customReportDefaultTitle","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","DEFAULT_FILTER_DATA","_useState10","_useState11","CUSTOM_REPORT_DEFAULT_SORT","_useState12","_useState13","_useState14","parameters","chrome","useChrome","clearNotifications","dissectTag","tag","_tag$split","split","_tag$split2","namespace","_keyValue$split","_keyValue$split2","string","downloadReport","useDownloadPDF","downloadCveReport","useIntl","useCallback","user","params","filters","reportData","processedFilters","page","page_size","Math","min","Number","MAX_SAFE_INTEGER","affecting","advanced_report","reportConfig","buildCveReportConfig","PDF_REPORT_TEMPLATES","vulnerabilities","getReportFilename","useDownloadCveReport","handleCVEsDownload","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","auth","getUser","sent","constructReportParameters","buildFilters","stop","apply","Spinner","centered","Header","reportsPageTitle","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","pieChartIcon","cardTitle","executiveReportCardTitle","CardBody","executiveReportCardDescription","CardFooter","executive","executiveReportCardButton","FileAltIcon","size","color","customReportCardTitle","customReportCardDescription","customReportCardButton","NoAccessPage","emptyStateTitle","emptyStateNoAccessReportsPage"],"sourceRoot":""}