{"version":3,"file":"js/9597.ab4e6cc087bf4b942960.js","mappings":"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","sources":["webpack:///./src/Utilities/Routes.js","webpack:///./src/Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner.js","webpack:///./src/App.js","webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/PresentationalComponents/StaticPages/NoAccessPage.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense, Fragment } from 'react';\nimport some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { getSystems } from '../Helpers/APIHelper';\nimport { PATHS } from '../Helpers/constants';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst SystemsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ '../Components/SmartComponents/SystemsPage/SystemsPage'\n    )\n);\n\nconst LandingPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"LandingPage\" */ '../Components/SmartComponents/LandingPage/LandingPage'\n    )\n);\n\nconst Upgrade = lazy(() =>\n    import(\n        /* webpackChunkName: \"Upgrade\" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'\n    )\n);\n\nconst CVEDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"CVEDetailsPage\" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'\n    )\n);\n\nconst SystemDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"SystemDetailsPage\" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'\n    )\n);\nconst Reports = lazy(() =>\n    import(/* webpackChunkName: \"Reports\" */ '../Components/SmartComponents/Reports/ReportsPage')\n);\n\nconst InsightsRoute = ({ component: Component, title, globalFilterEnabled, ...rest }) => {\n    const [hasSystems, setHasSystems] = useState(true);\n    const chrome = useChrome();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await getSystems();\n            setHasSystems(result?.meta?.total_items > 0);\n        };\n\n        fetchData();\n    }, []);\n\n    const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${subPath ? `${subPath} - ` : ''} ${title} -\n         ${intl.formatMessage(messages.pageTitleSuffix)}`);\n    }, [chrome, intl, subPath]);\n\n    useEffect(() => {\n        chrome.hideGlobalFilter(!globalFilterEnabled);\n    }, [rest.location.pathname]);\n\n    return (\n        <Route\n            {...rest}\n            render={routeProps => (\n                !hasSystems ?\n                    <AsyncComponent\n                        appId=\"vulnerability_zero_state\"\n                        appName=\"dashboard\"\n                        module=\"./AppZeroState\"\n                        scope=\"dashboard\"\n                        ErrorComponent={<ErrorState />}\n                        app=\"Vulnerability\"\n                    />\n                    :\n                    <Component {...routeProps} />\n            )}\n        />\n    );\n};\n\nInsightsRoute.propTypes = {\n    component: PropTypes.elementType,\n    title: PropTypes.string,\n    globalFilterEnabled: PropTypes.bool\n};\n\nexport const Routes = () => {\n    let location = useLocation();\n    let path = location.pathname;\n\n    return (\n        // TODO: Discuss with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={PATHS.cvepagePath.to}\n                    to={PATHS.systemDetailsPage.to}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cveDetailsPage.to}\n                    component={CVEDetailsPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                    globalFilterEnabled\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemDetailsPage.to}\n                    component={SystemDetailsPage}\n                    globalFilterEnabled\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.home.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                    globalFilterEnabled\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cvesPage.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                    globalFilterEnabled\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemsPage.to}\n                    component={SystemsPage}\n                    title={intl.formatMessage(messages.systemsHeader)}\n                    globalFilterEnabled\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.upgrade.to}\n                    component={Upgrade}\n                    title={intl.formatMessage(messages.upgradePageTitle)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.reports.to}\n                    component={Reports}\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                />\n                <Route\n                    render={() => (\n                        some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />\n                    )}\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Text } from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ReadOnlyBanner = () => {\n    return (\n        <Banner>\n            <Bullseye>\n                <Text>\n                    {intl.formatMessage(messages.readOnlyBannerText, { b: (...chunks) => <b>{chunks}</b> })}\n                </Text>\n                <a\n                    href=\"https://status.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ color: 'var(--pf-global--link--Color--light)' }}\n                    className=\"pf-u-ml-sm\"\n                >\n                    {intl.formatMessage(messages.learnMore)}\n                </a>\n            </Bullseye>\n        </Banner>\n    );\n};\n\nexport default ReadOnlyBanner;\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    Fragment\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport { setGlobalFilter } from './Store/Actions/Actions';\nimport { Routes } from './Utilities/Routes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';\nimport './App.scss';\nimport ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';\nimport { useRbac } from './Helpers/Hooks';\nimport { PERMISSIONS } from './Helpers/constants';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nReducerRegistry.register({ notifications });\n\nconst App = () => {\n    const { push } = useHistory();\n    const { pathname } = useLocation();\n    const chrome = useChrome();\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);\n    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const appNavClick = useMemo(() => ({\n        cves(redirect) { chrome.appNavClick({ id: 'cves', redirect }); },\n        systems(redirect) { chrome.appNavClick({ id: 'systems', redirect }); },\n        reports(redirect) { chrome.appNavClick({ id: 'reports', redirect }); }\n    }), []);\n\n    useEffect(() => {\n        const unregister = chrome.on('APP_NAVIGATION', event => {\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves(true);\n            }\n        });\n\n        return () => unregister();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        const baseComponentUrl = pathname.split('/')[1];\n        chrome &&\n            baseComponentUrl &&\n            appNavClick[baseComponentUrl] !== undefined &&\n            appNavClick[baseComponentUrl](false);\n\n        const unregister = chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SIDs, tags] = chrome.mapGlobalFilter(data, true, true) ?? [null, null, null];\n            dispatch(setGlobalFilter({ workloads, SIDs, tags }));\n        });\n\n        return () => unregister();\n    }, [appNavClick, pathname, dispatch]);\n\n    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);\n\n    return (\n        isLoading ? <Spinner centered /> : isUserAuthorized ?\n            <Fragment>\n                <NotificationPortal />\n                {isReadOnlyBannerVisible && <ReadOnlyBanner />}\n                <Routes />\n            </Fragment>\n            : <NoAccessPage />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst Breadcrumb = ({ breadcrumbs }) => (\n    <PfBreadcrumb key=\"PfBreadcrumb\" className=\"pf-u-mb-md\">\n        {breadcrumbs?.map(item => (\n            <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                {\n                    item.isLoaded\n                        ? item.isActive\n                            ? item.title\n                            : <Link to={item.to}>{item.title}</Link>\n                        : <Skeleton className=\"breadcrumb-skeleton\" />\n                }\n            </BreadcrumbItem>\n        ))}\n    </PfBreadcrumb>\n);\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.arrayOf(propTypes.shape({\n        title: propTypes.string,\n        to: propTypes.string,\n        isActive: propTypes.bool,\n        isLoaded: propTypes.bool\n    }))\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst NoAccessPage = ({ intl, title = intl.formatMessage(messages.vulnerabilitiesHeader), emptyStateTitle }) => {\n    return (\n        <React.Fragment>\n            <Header\n                title={title}\n                showBreadcrumb={false}\n            />\n            <Main>\n                <NotAuthorized\n                    title={emptyStateTitle}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nNoAccessPage.propTypes = {\n    intl: propTypes.any,\n    title: propTypes.string,\n    emptyStateTitle: propTypes.string\n};\n\nexport default injectIntl(NoAccessPage);\n"],"names":["SystemsPage","lazy","LandingPage","Upgrade","CVEDetailsPage","SystemDetailsPage","Reports","InsightsRoute","_ref","Component","component","title","globalFilterEnabled","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","hasSystems","setHasSystems","chrome","useChrome","useEffect","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_result$meta","result","_context","prev","next","getSystems","sent","meta","total_items","stop","apply","arguments","subPath","location","pathname","split","updateDocumentTitle","concat","intl","formatMessage","messages","pageTitleSuffix","hideGlobalFilter","React","Route","_extends","render","routeProps","AsyncComponent","appId","appName","module","scope","ErrorComponent","ErrorState","app","propTypes","PropTypes","Routes","path","useLocation","Suspense","fallback","Fragment","Switch","Redirect","from","PATHS","cvepagePath","to","systemDetailsPage","exact","cveDetailsPage","cvesHeader","home","cvesPage","systemsPage","systemsHeader","upgrade","upgradePageTitle","reports","reportsPageTitle","some","p","Banner","Bullseye","Text","readOnlyBannerText","b","_len","length","chunks","Array","_key","href","target","rel","style","color","className","learnMore","ReducerRegistry","register","notifications","push","useHistory","_useRbac","useRbac","PERMISSIONS","accessApplication","_useRbac2","isUserAuthorized","isLoading","isReadOnlyBannerVisible","setReadOnlyBannerVisible","dispatch","useDispatch","appNavClick","useMemo","cves","redirect","id","systems","unregister","on","event","domEvent","navId","undefined","baseComponentUrl","_chrome$mapGlobalFilt","data","mapGlobalFilter","_ref3","workloads","SIDs","tags","setGlobalFilter","window","setVisible","Spinner","centered","NotificationPortal","ReadOnlyBanner","NoAccessPage","Breadcrumb","breadcrumbs","PfBreadcrumb","key","map","item","BreadcrumbItem","isActive","isLoaded","Link","Skeleton","BaseDropdown","dropdownItems","disabled","props","isOpen","setIsOpen","useIntl","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","actions","Header","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","index","isFilled","position","ouiaId","defaultProps","_ref$title","vulnerabilitiesHeader","emptyStateTitle","Main","NotAuthorized","injectIntl"],"sourceRoot":""}