{"version":3,"file":"js/SystemDetailsPage.bf03129cf7db146192cb.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyStateExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves\n                        entity={{ id: entity.id, display_name: entity.display_name }}\n                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n                        showHeaderLabel\n                        setPageTitle\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyStateExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nimport { AppInfo, DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any,\n        errors: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n    }\n\n    notifications = systemName => ({\n        exclude: {\n            success: {\n                variant: 'success',\n                title: this.props.intl.formatMessage(messages.notificationExcludeSuccess, { count: 1, systemName })\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: this.props.intl.formatMessage(messages.notificationExcludeFailureTitle, { count: 1, systemName }),\n                description: this.props.intl.formatMessage(messages.notificationDetailExcludeFailureBody, { count: 1 })\n            }\n        },\n        include: {\n            success: {\n                variant: 'success',\n                title: this.props.intl.formatMessage(messages.notificationIncludeSuccessTitle, { count: 1, systemName }),\n                description: this.props.intl.formatMessage(messages.notificationIncludeSuccessBody, { count: 1 })\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: this.props.intl.formatMessage(messages.notificationIncludeFailureTitle, { count: 1, systemName }),\n                description: this.props.intl.formatMessage(messages.notificationDetailIncludeFailureBody, { count: 1 })\n            }\n        }\n    });\n\n    optOutSystem = toExclude => {\n        this.props.optOutSystem(this.state.inventoryId, toExclude).then(() => {\n            const systemName = this.props.systemDetails.entity.display_name;\n\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            this.props.addNotification(toExclude\n                ? this.notifications(systemName).exclude.success\n                : this.notifications(systemName).include.success);\n        }).catch(() => {\n            const systemName = this.props.systemDetails.entity.display_name;\n\n            this.props.addNotification(toExclude\n                ? this.notifications(systemName).exclude.failure\n                : this.notifications(systemName).include.failure);\n        });\n    };\n\n    render() {\n        const { systemDetails = {}, errors } = this.props;\n        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n        return (\n            <React.Fragment>\n                <DetailWrapper>\n                    <Header\n                        title=\"\"\n                        breadcrumbs={[\n                            {\n                                title: PATHS.systemsPage.title,\n                                to: PATHS.systemsPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),\n                                isActive: true,\n                                loaded\n                            }\n                        ]}\n                    >\n                        {!errors && (\n                            <InventoryDetailHead\n                                onLoad={({ mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(),\n                                        ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n                                    });\n                                }}\n                                hideBack\n                                actions={\n                                    entity && [\n                                        isOptOut\n                                            ? {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                                onClick: () => this.optOutSystem(false)\n                                            }\n                                            : {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                                onClick: () => this.optOutSystem(true)\n                                            }\n                                    ]\n                                }\n                            />\n                        )}\n                    </Header>\n\n                    {(\n                        <Main>\n                            <React.Fragment>\n                                <AppInfo optOutSystemHandler={this.optOutSystem} />\n                            </React.Fragment>\n                        </Main>\n                    )}\n                </DetailWrapper>\n            </React.Fragment>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"names":["SystemDetails","props","this","entity","isOptOut","optOutSystemHandler","loaded","buttonAction","id","display_name","allowedCveActions","showHeaderLabel","setPageTitle","React","propTypes","withRouter","connect","entityDetails","opt_out","initialState","InventoryDetail","notifications","systemName","exclude","success","variant","title","intl","formatMessage","messages","count","failure","autoDismiss","description","include","optOutSystem","toExclude","state","inventoryId","then","systemDetails","fetchSystemDetails","addNotification","match","params","errors","DetailWrapper","Header","breadcrumbs","PATHS","to","isActive","InventoryDetailHead","onLoad","mergeWithEntities","mergeWithDetail","INVENTORY_ACTION_TYPES","ReducerRegistry","action","type","FETCH_SYSTEM_DETAILS","payload","data","LOAD_ENTITY_FULFILLED","activeApps","name","component","LOAD_ENTITY_REJECTED","systemDetailsPageStore","hideBack","actions","onClick","Main","AppInfo","injectIntl","SystemCvesStore","cveList","dispatch","system","status","optOutSystemAction","notification"],"sourceRoot":""}