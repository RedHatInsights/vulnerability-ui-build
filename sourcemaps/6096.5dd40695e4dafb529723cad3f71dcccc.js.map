{"version":3,"file":"js/6096.1642768809294.79f004e75b75c7b10f1b.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/disconnected-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/NotConnected/NotConnected.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\"]);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: react_styles_1.css(spinner_1.default.spinner, spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: react_styles_1.css(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_justification === arr[0]?.cve_justification);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_justification || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? cveList[0]?.justification || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\n\nconst Remediation = ({ cves, systems, manyRules, addNotification: dispatchNotification, isDisabled }) => {\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, attributes: { rule } }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n\n    return (\n        <RemediationButton\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatchNotification(result.getNotification())}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </RemediationButton>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    addNotification: propTypes.func,\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\n\nconst SystemCvesTableWithContext = ({ context, header, entity, canSelect }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditPairStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        <EmptyStateNoCVEs secondParagraph={messages.emptyStateThisSystemShouldHaveCVEs} />\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods, isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n            return ({ ...cve, isOpen: current && current.isOpen });\n        }) : [];\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    isStickyHeader\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={(canSelect && !isEmpty) ? handleOnSelect : undefined}\n                    actionResolver={(!isEmpty && canEditPairStatus) &&\n                        ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                    sortBy={!isEmpty\n                        ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    gridBreakPoint=\"grid-lg\"\n                    ouiaId=\"cves-table\"\n                    variant={TableVariant.compact}\n                >\n                    <Fragment>\n                        <TableHeader />\n                        <TableBody />\n                    </Fragment>\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string,\n    canSelect: propTypes.bool\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\nimport { ANSIBLE_REMEDIATION } from '../../../Helpers/constants';\n\nconst SystemCveToolbarWithContext = ({\n    entity,\n    intl,\n    context,\n    canExport,\n    customAction,\n    canSelect,\n    canManageColumns,\n    filters\n}) => {\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, selectedRowsRawData, isAllExpanded, canEditPairStatus } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = selectedCves?.length ?? 0;\n    const remediableCves = selectedRowsRawData.filter(cves => cves.attributes.remediation === ANSIBLE_REMEDIATION);\n\n    const selectOptions = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...canEditPairStatus ?\n            [{\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedRowsRawData, true),\n                props: { isDisabled: !selectedCvesCount }\n            }] : [],\n        ...canManageColumns ?\n            [{\n                label: intl.formatMessage(messages.columnManagementModalTitle),\n                onClick: () => methods.setColumnModalOpen(true)\n            }] : []\n    ];\n\n    const allFilters = [\n        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n        securityRuleFilter(methods.apply, parameters),\n        knownExploitFilter(methods.apply, parameters),\n        impactFilter(methods.apply, parameters),\n        useCvssBaseScoreFilter(methods.apply, parameters),\n        businessRiskFilter(methods.apply, parameters),\n        publishDateFilter(methods.apply, parameters),\n        statusFilter(methods.apply, parameters),\n        useSearchFilter('advisory', messages.advisory, messages.searchFilterByAdvisory, advisory, methods.apply),\n        remediationFilter(methods.apply, parameters)\n    ];\n\n    return (\n        <PrimaryToolbar\n            pagination={{\n                isDisabled: cves.meta.total_items === 0,\n                itemCount: cves.meta.total_items || 0,\n                page: cves.meta.page || 1,\n                perPage: cves.meta.page_size || 1,\n                ouiaId: 'pagination-top',\n                onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n            }}\n            dedicatedAction={customAction ? (typeof customAction === 'function' ? customAction(cves) : customAction) : (entity &&\n                <Remediation\n                    isDisabled={remediableCves.length === 0}\n                    systems={entity}\n                    cves={remediableCves}\n                />)}\n            actionsConfig={{\n                actions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            bulkSelect={canSelect && {\n                count: selectedCvesCount,\n                items: selectOptions.items,\n                isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                checked: Boolean(selectedCvesCount),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            filterConfig={{\n                items: filters ? allFilters.filter(filter => filters.includes(filter.key)) : allFilters\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            exportConfig={canExport && {\n                isDisabled: cves.meta.total_items === 0,\n                ouiaId: 'export',\n                ...exportConfig(methods)\n            }}\n            expandAll={{\n                isAllExpanded,\n                onClick: onExpandAllClick\n            }}\n        />\n    );\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    filters: propTypes.arrayOf(propTypes.string)\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import { createIcon } from '../createIcon';\n\nexport const DisconnectedIconConfig = {\n  name: 'DisconnectedIcon',\n  height: 1024,\n  width: 1024,\n  svgPath: 'M107.625758,511.919812 C107.647579,453.639819 120.473237,396.076275 145.195758,343.299812 L66.0757577,263.919812 C64.9757577,266.019812 63.7857577,268.019812 62.6857577,270.119812 C-38.2858609,455.136708 -13.6478565,683.418046 124.475758,842.629812 C134.640866,854.227038 149.304208,860.890207 164.725758,860.920803 C177.621501,860.999229 190.089847,856.300444 199.725758,847.729812 C222.045758,828.339812 224.235758,794.349812 204.725758,771.959812 C142.116482,699.791587 107.639971,607.46129 107.625758,511.919812 Z M298.965758,512.769812 C298.965758,507.959812 299.165758,503.349812 299.465758,498.849812 L223.695758,422.919812 C195.943021,511.49644 210.859555,607.936744 264.075758,683.989812 C272.417691,695.880397 286.040845,702.947712 300.565758,702.92092 C309.717884,702.984827 318.661486,700.187766 326.145758,694.919812 C346.244069,680.682503 351.030068,652.865563 336.845758,632.729812 C312.094475,597.618928 298.858215,555.687799 298.965758,512.729812 L298.965758,512.769812 Z M903.425758,837.839812 C1064.25516,648.181373 1062.68818,369.557312 899.735758,181.719812 C890.46515,170.983736 877.290268,164.395355 863.139154,163.418898 C848.98804,162.442441 835.033106,167.158807 824.375758,176.519812 C802.005758,195.919812 799.815758,229.919812 819.185758,252.309812 C945.123654,397.620078 948.572544,612.370403 827.365758,761.649812 L754.005758,688.159812 C755.244385,686.815558 756.37773,685.377981 757.395758,683.859812 C792.844775,633.759435 811.790626,573.852791 811.595758,512.479812 C811.595758,450.189812 792.735758,390.599812 756.695758,340.199812 C749.880846,330.567 739.510358,324.044705 727.876268,322.074416 C716.242178,320.104127 704.302408,322.848071 694.695758,329.699812 C674.625758,343.899812 670.135758,371.699812 684.215758,391.799812 C733.317078,460.966176 735.688504,552.965658 690.215758,624.569812 L615.045758,549.479812 C619.447596,537.503845 621.679174,524.839047 621.635758,512.079812 C621.657896,451.518897 572.616613,402.388105 512.055758,402.299812 C499.315423,402.259246 486.670236,404.494336 474.715758,408.899812 L82.6457577,15.6398121 C64.3651324,-2.58558468 34.7711544,-2.54081316 16.5457577,15.7398121 C-1.67963909,34.0204373 -1.63486757,63.6144153 16.6457577,81.8398121 L120.475758,185.919812 L196.535758,261.919812 L333.185758,398.799812 L408.845758,474.589812 L549.005758,614.969812 L941.455758,1008.21981 C959.733621,1026.4673 989.34327,1026.44268 1007.59076,1008.16481 C1025.83825,989.886948 1025.81362,960.2773 1007.53576,942.029812 L903.425758,837.839812 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const DisconnectedIcon = createIcon(DisconnectedIconConfig);\n\nexport default DisconnectedIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { EmptyState } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js\";\nimport { EmptyStateIcon } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js\";\nimport { EmptyStateBody } from \"@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js\";\nimport { Title } from \"@patternfly/react-core/dist/esm/components/Title/Title.js\";\nimport { Button } from \"@patternfly/react-core/dist/esm/components/Button/Button.js\";\nimport DisconnectedIcon from \"@patternfly/react-icons/dist/esm/icons/disconnected-icon\";\n\nvar NotConnected = function NotConnected(_ref) {\n  var titleText = _ref.titleText,\n      bodyText = _ref.bodyText,\n      buttonText = _ref.buttonText;\n  return /*#__PURE__*/React.createElement(EmptyState, null, /*#__PURE__*/React.createElement(EmptyStateIcon, {\n    icon: DisconnectedIcon\n  }), /*#__PURE__*/React.createElement(Title, {\n    headingLevel: \"h5\",\n    size: \"lg\"\n  }, titleText), /*#__PURE__*/React.createElement(EmptyStateBody, null, bodyText), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    component: \"a\",\n    href: \"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"pf-u-mt-lg\"\n  }, buttonText));\n};\n\nNotConnected.propTypes = {\n  titleText: propTypes.node,\n  bodyText: propTypes.node,\n  buttonText: propTypes.node\n};\nNotConnected.defaultProps = {\n  titleText: 'This system isn’t connected to Insights yet',\n  bodyText: 'To get started, activate the Insights client for this system.',\n  buttonText: 'Learn how to activate the Insights client'\n};\nexport default NotConnected;","import React, {\n    useMemo,\n    useEffect,\n    Fragment,\n    createContext,\n    useState\n} from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds,\n    changeColumnsSystemDetail\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CVES_ALLOWED_PARAMS, SYSTEM_DETAILS_HEADER } from '../../../Helpers/constants';\nimport {\n    constructFilterParameters,\n    useUrlParams,\n    updateRef\n} from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({\n    entity,\n    intl,\n    showHeaderLabel,\n    setPageTitle,\n    canExport,\n    customAction,\n    canSelect,\n    canEditPairStatus,\n    canManageColumns,\n    defaultColumns,\n    filters,\n    linkToCustomerPortal\n}) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const columns = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n\n    const selectedRowsRawData = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedRowsRawData || []\n    );\n\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const cves = useMemo(() =>\n        createCveListBySystem(entity.id, systemCVEs, columns, linkToCustomerPortal), [systemCVEs, entity.id, columns]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(\n            fetchCveListBySystem,\n            params,\n            format,\n            'system-cves',\n            notification => dispatch(addNotification(notification)),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        } else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n\n        if (defaultColumns) {\n            const defaultColumnsWithAttributes = defaultColumns.map(\n                defaultColumn => SYSTEM_DETAILS_HEADER.find(column => column.key === defaultColumn)\n            );\n            dispatch(changeColumnsSystemDetail(defaultColumnsWithAttributes));\n        }\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            if (setPageTitle) {\n                document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n            }\n\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = (selectedCveList, goToFirstPage) => {\n        let cveList = selectedCveList.map(\n            ({\n                id,\n                attributes:\n                {\n                    // eslint-disable-next-line camelcase\n                    cve_status_id,\n                    // eslint-disable-next-line camelcase\n                    status_id,\n                    status_text: justification,\n                    // eslint-disable-next-line camelcase\n                    cve_status_text: cve_justification\n                },\n                ...rest\n                // eslint-disable-next-line camelcase\n            }) => ({ id, cve_status_id, status_id, justification, cve_justification, ...rest })\n        );\n\n        setStatusModal(() => () => (\n            <CvePairStatusModal\n                cveList={cveList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearSystemCvesStore());\n                    updateRef(goToFirstPage ? { ...cves.meta, page: 1 } : cves.meta, parameters, apply);\n                }}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type=\"systemDetail\"\n            />\n        ));\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    selectedRowsRawData,\n                    expandedRows,\n                    isAllExpanded,\n                    canEditPairStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        setColumnModalOpen,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal/>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemDetail(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar\n                            entity={entity.id}\n                            canExport={canExport}\n                            customAction={customAction}\n                            canSelect={canSelect}\n                            canManageColumns={canManageColumns}\n                            filters={filters}\n                        />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                    entity={entity.id}\n                    canSelect={canSelect}\n                />\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(systemCVEs.payload.errors);\n    }\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false,\n    canSelect: true,\n    canManageColumns: true,\n    canEditPairStatus: true,\n    linkToCustomerPortal: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    showHeaderLabel: propTypes.bool,\n    setPageTitle: propTypes.bool,\n    canExport: propTypes.bool,\n    customAction: propTypes.oneOf([propTypes.node, propTypes.func]),\n    canSelect: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canManageColumns: propTypes.bool,\n    defaultColumns: propTypes.arrayOf(propTypes.string),\n    filters: propTypes.arrayOf(propTypes.string),\n    linkToCustomerPortal: propTypes.bool\n};\n\nexport const ConnectedSystemCves = injectIntl(SystemCVEs);\n\nconst TranslateSystemCves = ({ customItnlProvider, customIntlProvider, ...props }) => {\n    const Wrapper = (customItnlProvider || customIntlProvider) ? IntlProvider : Fragment;\n\n    return <Wrapper {...(customItnlProvider || customIntlProvider) && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    }} >\n        <ConnectedSystemCves {...props} />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customIntlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customIntlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentFilter","currentValue","remediation","filterByRemediation","values","length","filter","value","join","page","label","intl","messages","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","REMEDIATION_OPTIONS","item","split","CvePairStatusModal","cveList","updateRef","inventoryList","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","useState","every","status_id","sameAsEachOther","_","arr","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","isOverallChecked","setOverallCheckbox","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","id","inventory_id","inventoryNames","display_name","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","formatMessage","count","systemName","onFailureNotification","autoDismiss","description","modalTitle","onSave","cveIds","setStatusParams","cve","parseInt","status_text","setSystemCveStatus","then","hasGutter","some","showDifferentStatusesWarning","isInline","cveCount","cveId","systemCount","b","chunks","fieldId","name","isChecked","checked","content","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","cves","systems","manyRules","dispatchNotification","addNotification","baseIssueTemplate","system","fallback","size","dataProvider","systemsProvider","concat","issues","reduce","prev","systemID","rule","issue","rule_id","mergeObjectPropertyBy","acc","cveID","attributes","remediationProvider","onRemediationCreated","result","getNotification","connect","dispatch","notification","routerParams","SystemCvesTableWithContext","context","header","entity","canSelect","methods","selectedCves","expandedRows","canEditPairStatus","meta","patch_access","isEmpty","data","rows","includes","selected","index","current","find","opened","isOpen","undefined","isLoading","SkeletonTable","colSize","rowSize","TableVariant","Fragment","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","secondParagraph","onSelect","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","CVETableContext","Consumer","SystemCveToolbarWithContext","canExport","customAction","canManageColumns","filters","parameters","selectedRowsRawData","advisory","selectedCvesCount","remediableCves","ANSIBLE_REMEDIATION","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","actions","onClick","showStatusModal","setColumnModalOpen","allFilters","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","remediationFilter","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","actionsConfig","dropdownProps","bulkSelect","Boolean","handleOnCheckboxChange","filterConfig","activeFiltersConfig","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","height","width","svgPath","yOffset","xOffset","NotConnected","_ref","titleText","bodyText","buttonText","EmptyState","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Button","component","href","target","rel","createContext","SystemCVEs","status","statusCode","showHeaderLabel","setPageTitle","defaultColumns","linkToCustomerPortal","useDispatch","StatusModal","setStatusModal","isFirstLoad","setFirstLoad","isColumnModalOpen","systemCVEs","useSelector","SystemCvesStore","columns","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","defaultColumnsWithAttributes","defaultColumn","SYSTEM_DETAILS_HEADER","column","changeColumnsSystemDetail","document","fetchCveListBySystem","clearSystemCvesStore","payload","errors","ErrorHandler","code","Provider","format","DownloadReport","clearNotifications","iSelected","selectSystemCve","expandSystemCve","selectedCveList","goToFirstPage","cve_status_text","fetchSystemDetailsIds","ColumnManagementModal","appliedColumns","applyColumns","newColumns","isModalOpen","setModalOpen","Stack","StackItem","TextContent","Text","TextVariants","SystemCveTableToolbar","SystemCveTable","isShown","isShownByDefault","allowedCveActions","ConnectedSystemCves","TranslateSystemCves","customItnlProvider","customIntlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"sourceRoot":""}