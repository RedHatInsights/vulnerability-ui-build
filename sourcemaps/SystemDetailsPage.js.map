{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","sort","show_all","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEDetailsPageStore","type","ActionTypes","setIn","CVEsStore","cveName","data","SystemsPageStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","resizeOrientation","BaseModal","items","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","Fragment","variant","Boolean","onClose","actions","onClick","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","shape","details","resulotion","isRequired","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","a","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","item","attributes","status_name","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","find","option","parseInt","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","multiValue","split","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","FilterNotFoundForCVE","height","EmptyStateVariant","large","headingLevel","size","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","emptyStateForMoreInfo","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","emptyStateSystemResumeAnalysis","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","errorReload","securityRuleFilter","currentFilter","dynamicFilters","currentValue","filterBySecurityRule","securityRules","radio","urlParam","unionWith","SECURITY_RULE_OPTIONS","isEqual","statusFilter","filterByStatus","checkbox","PaginationWrapper","pageNumber","nextProps","totalItems","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","filterByImpact","IMPACT_OPTIONS","hasIcon","color","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","CvePairStatusModal","inventories","hasDifferentStatus","inventoryList","getCveJustification","getDefaultLabel","setJustificationProps","inventory","getDefaultCheckboxState","checkboxState","setCheckboxState","getCveStatus","getDefaultStatus","setSelectProps","inventoryIds","inventoryNames","isDisabled","disabled","successNotification","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","cveIds","setStatusParams","inventory_id","setSystemCveStatus","hasGutter","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","systemName","b","chunks","cvePairStatusModalUseOverallCheckbox","isChecked","checked","trigger","cvePairStatusModalUseOverallTooltip","verticalAlign","bool","injectIntl","Remediation","remediationProvider","systems","concat","issues","dispatchNotification","dataProvider","onRemediationCreated","getNotification","globalBackgroundColor100","remediateLabel","oneOfType","routerParams","SystemCvesTableWithContext","context","header","isEmpty","rows","selected","current","opened","SkeletonTable","colSize","rowSize","Table","canSelectAll","cells","heightAuto","colSpan","prototype","hasOwnProperty","call","noCves","isSelected","selectCves","sortBy","createSortBy","onCollapse","rowKey","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","TableToolbar","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","selectedCvesCount","selectOptions","useMemo","ops","kebabCollapseCves","kebabExpandCves","PrimaryToolbar","pagination","actionsConfig","kebabToggleProps","bulkSelect","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","onDelete","e","i","totalNumber","createContext","SystemCVEs","useDispatch","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","constructFilterParameters","Provider","DownloadReport","iSelected","cvesList","Stack","StackItem","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","history","location","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","customRouter","RouterWrapper","Router","Wrapper","IntlProvider","locale","navigator","language","basename","window","pathname","SystemDetails","optOutSystemHandler","loaded","PATHS","home","to","systemsPage","invalidSystem","isActive","entityDetails","systemDetailsPageStore","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","setState","toggleLinkHover","linkHovered","optOutSystem","inventoryId","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","ReactRedux","react","reactRouterDom","pfReactTable","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","Main"],"mappings":"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","file":"js/SystemDetailsPage.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editBusinessRisk} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showBusinessRiskModal([\n                {\n                    id: rowData.id,\n                    business_risk_id: rowData.business_risk_id,\n                    justification: rowData.business_risk_justification\n                }\n            ])\n    },\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_justification\n                }\n            ])\n    }\n];\n\nexport const systemCveTableRowActions = (methods, entity) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    display_name: entity.display_name,\n                    status_id: rowData.status_id,\n                    cve_status_id: rowData.cve_status_id,\n                    justification: rowData.status_justification,\n                    cve_justification: rowData.cve_status_justification\n                }\n            ],\n            entity\n            )\n    }\n];\n\nexport const systemExposedTableRowActions = (showStatusModal, cve) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) => {\n            showStatusModal(\n                [{\n                    id: cve.id,\n                    status_id: cve.status_id,\n                    justification: cve.justification\n                }],\n                [{\n                    id: rowData.id,\n                    display_name: rowData.display_name,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_text\n                }]\n            );\n        }\n    }\n];\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: checkboxState });\n        setJustificationProps({ disabled: checkboxState });\n        setStatusId(getCveStatus());\n        setJustification(getCveJustification());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCveStatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCveStatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState) { // use overall (CVE) status\n                        return hasDifferentStatus ? '0' : cveList[0].cve_status_id || '0';\n                    }\n                    else { // use system pair status\n                        return hasDifferentStatus ? '0' : cveList[0].status_id || '0';\n                    }\n                }\n                else {\n                    return '0';\n                }\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n            }\n\n            case 'systemDetail': {\n                if (checkboxState) { // use overall (CVE) justification\n                    return (cveList && cveList.length === 1 && cveList[0].cve_justification) || '';\n                }\n                else { // use system pair justification\n                    return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n                }\n            }\n\n            default: {\n                return '';\n            }\n        }\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack hasGutter>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        trigger='mouseenter focus click'\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport  AnsibeTowerIcon  from '@patternfly/react-icons/dist/js/icons/ansibeTower-icon';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nclass Remediation extends Component {\n    static propTypes = {\n        cves: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        systems: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        addNotification: propTypes.func\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.cves !== this.props.cves) {\n            return true;\n        }\n\n        if (nextProps.systems !== this.props.systems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    remediationProvider = (cves = [], systems = []) => {\n        cves = [].concat(cves);\n        systems = [].concat(systems);\n        return cves.length && systems.length\n            ? {\n                issues: cves.map(cve => ({\n                    id: `vulnerabilities:${cve}`,\n                    description: cve\n                })),\n                systems\n            }\n            : false;\n    };\n\n    render() {\n        const { cves, systems, addNotification: dispatchNotification } = this.props;\n        return (\n            <div>\n                <RemediationButton\n                    dataProvider={() => this.remediationProvider(cves, systems)}\n                    isDisabled={this.remediationProvider(cves, systems) === false}\n                    onRemediationCreated={result => dispatchNotification(result.getNotification())}\n                >\n                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />\n                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}\n                </RemediationButton>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map(cve => {\n        const current = openedCves.find(opened => opened.id === cve.id);\n        return ({ ...cve, isOpen: current && current.isOpen || false });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows  ={isEmpty ? noCves() : rows}\n                        onSelect ={!isEmpty ? handleOnSelect : undefined}\n                        actions ={!isEmpty ? systemCveTableRowActions(methods, entity) : undefined}\n                        sortBy ={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={2} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ showRemediationButton, entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = parameters;\n    const selectedCvesCount = showRemediationButton === true ? (selectedCves && selectedCves.length) || 0 : undefined;\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops, show_all: !parameters.show_all }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = [\n        showRemediationButton && entity && <Remediation systems={entity} cves={selectedCves} /> || '',\n        {\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })), []\n            ),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { useCreateUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = (props) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListBySystem(props.entity.id, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: props.entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && props.entity.id) {\n            return EmptyVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: props.entity.id }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let hasDifferentStatus;\n        if (cvesList.length > 1) {\n            const selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cves={cvesList}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventories={[{ id: props.entity.id, display_name: props.entity.display_name }]}\n                hasDifferentStatus={hasDifferentStatus}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: props.entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    <StackItem>\n                        <TextContent>\n                            <Text component={TextVariants.h2}>\n                                {props.intl.formatMessage(messages.systemCvesTableHeader)}\n                            </Text>\n                        </TextContent>\n                    </StackItem>\n                    <StackItem>\n                        <SystemCveTableToolbar showRemediationButton entity={props.entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={props.entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.errors);\n    }\n\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    cveList: propTypes.any,\n    fetchData: propTypes.func,\n    history: propTypes.object,\n    location: propTypes.object,\n    intl: propTypes.any\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, customRouter, ...props }) => {\n    const RouterWrapper = customRouter ? Router : Fragment;\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <RouterWrapper\n            {...customRouter && { basename: `${window.location.pathname}` } }\n        >\n            <ConnectedSystemCves { ...props } />\n        </RouterWrapper>\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { PATHS } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: PATHS.home.title, to: PATHS.home.to },\n                { title: PATHS.systemsPage.title, to: PATHS.systemsPage.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={{ id: entity.id, display_name: entity.display_name }} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=''>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}