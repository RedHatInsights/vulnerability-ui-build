{"version":3,"file":"js/594.1ae521077609b3a32967.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/ErrorHandler/ErrorHandler.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst ErrorHandler = ({ code }) => {\n    switch (code) {\n        case 403:\n            return <NotAuthorized />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return <ErrorState />;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number\n};\n\nexport default ErrorHandler;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst useSearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default useSearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'security_rule') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false'].includes(parameter)\n                    ? object.name = FILTERS.security_rule.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'security_rule' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule ? currentFilters.rule.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisory),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        removeFilters(chips, apply);\n        apply({ ...defaultFilters, page: 1 });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'security_rule') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n"],"names":["ErrorHandler","code","propTypes","urlParam","label","placeholder","search","apply","React","searchValue","setSearchValue","debounce","newValue","undefined","handleSearch","type","conditionalFilterType","intl","filterValues","id","onChange","event","value","handleChangePage","_event","page","handleSetPageSize","perPage","page_size","exportConfig","methods","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRuleValues","nameFilter","filter","advisoryFilter","advisory","buildChip","key","parameter","FILTERS","items","reduce","object","item","name","filteredRule","find","includes","e","buildChips","paramValues","values","push","hasValue","filters","Object","keys","filterChips","array","multiValue","concat","rule_presence","split","rule","category","title","chips","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","filteredValues","length","messages","removeFilters","reset","defaultFilters","emptyFilter","obj","remainingValues","some","chip","join","cvss_filter","isFilterInDefaultState","currentParams","defaultParams","filterParams","acc","param","isEqual"],"sourceRoot":""}