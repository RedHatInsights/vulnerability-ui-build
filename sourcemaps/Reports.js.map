{"version":3,"sources":["webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/SmartComponents/Reports/CustomReportFilter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["filename","page","Date","toISOString","split","params","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","a","Array","isArray","data_format","payload","response","data","JSON","stringify","downloadFile","this","page_size","Number","MAX_SAFE_INTEGER","replace","tablePage","intl","header","type","columnBuilder","value","style","key","hitColumns","headerContent","push","formatMessage","messages","cveId","publishDate","cvssBaseScore","impact","systemsExposed","businessRisk","status","cveRows","map","attributes","cveCellStyle","rules","length","styles","cveCellAlign","bodyCell","cveCell","synopsis","link","src","CVES_PATH","public_date","processDate","item","systemRows","system","display_name","systemNameCell","opt_out","systemsTableExcluded","cve_count","systemCell","formatDate","last_upload","withHeader","rows","headerCell","customReportNoCves","propTypes","PropTypes","object","any","number","array","string","firstPagePDF","meta","filters","isReportDynamic","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","chips","timespan_label","name","join","filterStringSegments","msg","CVEsPDFreportFiltersSeverity","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersSecurityRule","i","hasOwnProperty","isLast","formatWithBold","customReportIntroductionText","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","min","toFixed","max","published","publish_date","customReportTimespanAnytime","toLowerCase","prefix","customReportAnd","systemsPDFreportFiltersSearchTerm","CVEsPDFreportSubHeader","total_items","toString","system_count","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","customReportUserNotesGenerated","first_name","last_name","defaultProps","undefined","bool","DownloadCVEsReport","buttonProps","label","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","otherPagesPDF","resultArray","index","chunkIndex","Math","floor","PDF_REPORT_PER_PAGE","otherPages","cvesFetch","getCveListByAccount","DownloadReport","sort","insights","chrome","auth","getUser","cvss_score","parseFloat","cvss3_score","cvss2_score","some","firstPage","splice","firstPageWithNote","firstPageWithoutNote","cvePage","systemsFetch","getSystems","systemPage","asyncFunction","component","reportName","reportTitle","cvePDFReportName","systemPDFReportName","fileName","allPagesHaveTitle","size","orientation","footer","footerIcon","footerText","customReportFooter","kebabExportAsPDF","oneOfType","BuildExecReport","safeCharLength","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","mapFields","fields","percentageInfo","arr","field","fieldData","count","percentage","executiveReportOfTotal","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","severity","x","y","CVSSData","calculateTopCves","panelGroups","secondPage","totalRows","forEach","ceil","description","panel","title","executiveReportPanelTitle","systems_affected","executiveReportHeader","executiveReportSubHeader","systems","executiveReportHeaderSystems","cves","executiveReportHeaderCVEs","executiveReportCvesBySeverity","CVSSHeader","chartType","subTitle","executiveReportRecentlyPublishedCves","recentCvesHeader","executiveReportTop3","withColumn","exact","DownloadExecutive","dataFetch","getExecutiveReport","report","buildExecReport","executiveReportCardButton","variant","isInline","vulnerabilitiesHeader","CustomReportFilter","filterName","handleRemove","filterData","setFilterData","handleCvssInputChange","inputName","validateCvssInput","valueThis","valueMin","valueMax","filterCheckboxes","options","Fragment","Checkbox","className","isChecked","onChange","v","e","newValue","event","id","currentTarget","indexOf","temp","slice","handleOnCheckboxChange","aria-label","filterRadios","Radio","handleOnRadioChange","filterCvssScore","Split","SplitItem","fontSize","customReportCvssMinLabel","TextInput","validated","width","customReportCvssMaxLabel","StackItem","hasGutter","TextContent","Text","TextVariants","h4","FILTERS","color","onClick","cursor","STATUS_OPTIONS","BUSINESS_RISK_OPTIONS","IMPACT_OPTIONS","filterContent","func","ReportConfigModal","isOpen","onClose","isFilterMenuOpen","setFilterMenuOpen","customReportDefaultTitle","setReportTitle","setUserNotes","activeFilters","setActiveFilters","Object","keys","columnsToInclude","setColumnsToInclude","filterDropdownOptions","entries","DropdownItem","isDisabled","newFilter","dropdownOverrideTitle","handleModalClose","Modal","configModalTitle","actions","constructFilterParameters","buildFilters","PDF_REPORT_USER_NOTE_MAX_LENGTH","marginRight","configModalExportReport","Button","cancel","Form","FormGroup","customReportTitleLabel","fieldId","customOnlyCvesWithRulesLabel","security_rule","customReportDataToIncludeLabel","columnCount","checkboxOverrideTitle","parameter","handleCheckboxChange","customReportFilterDataByLabel","configModalNoFilters","Stack","filterToDelete","removeFilter","Dropdown","isPlain","direction","onSelect","toggle","DropdownToggle","onToggle","toggleIndicator","AngleDownIcon","padding","configModalAddFilter","dropdownItems","customReportUserNotesLabel","helperTextInvalid","customReportUserNoteTooLong","TextArea","resizeOrientation","minHeight","ReportsPage","isModalOpen","setModalOpen","Page","VulnerabilityHeader","reportsPageTitle","showBreadcrumb","Main","Grid","GridItem","span","Card","CardTitle","pieChartIcon","cardTitle","executiveReportCardTitle","CardBody","executiveReportCardDescription","CardFooter","customReportCardTitle","customReportCardDescription","customReportCardButton"],"mappings":"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","file":"js/Reports.js","sourcesContent":["import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n    }\n}\n\nexport default new DownloadReport();\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type }) => {\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        if (header.includes('publish_date')) {\n            headerContent.push({ value: intl.formatMessage(messages.publishDate) });\n        }\n\n        if (header.includes('cvss_filter')) {\n            headerContent.push({ value: intl.formatMessage(messages.cvssBaseScore) });\n            hitColumns.push('cvss_score');\n        }\n\n        if (header.includes('impact')) {\n            headerContent.push({ value: intl.formatMessage(messages.impact) });\n            hitColumns.push('impact');\n        }\n\n        if (header.includes('show_all')) {\n            headerContent.push({ value: intl.formatMessage(messages.systemsExposed) });\n            hitColumns.push('systems_affected');\n        }\n\n        if (header.includes('business_risk_id')) {\n            headerContent.push({ value: intl.formatMessage(messages.businessRisk) });\n            hitColumns.push('business_risk');\n        }\n\n        if (header.includes('status_id')) {\n            headerContent.push({ value: intl.formatMessage(messages.status) });\n            hitColumns.push('status');\n        }\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) },\n            { value: intl.formatMessage(messages.publishDate) },\n            { value: intl.formatMessage(messages.cvssBaseScore) },\n            { value: intl.formatMessage(messages.impact) },\n            { value: intl.formatMessage(messages.systemsExposed) },\n            { value: intl.formatMessage(messages.businessRisk) },\n            { value: intl.formatMessage(messages.status) }\n        ];\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'last_upload'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            let cveCellStyle = (\n                cve.rules && cve.rules.length > 0\n                    ? [styles.cveCellAlign, styles.bodyCell, styles.cveCell]\n                    : [styles.bodyCell, styles.cveCell]\n            );\n\n            const synopsisCell = (\n                <View key={cve.synopsis}>\n                    { cve.rules && cve.rules.length > 0 && <CSAwIcon style={{ ...styles.bodyCell, ...styles.cveCell }}/> }\n                    <Text style={cveCellStyle}>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.last_upload, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {formatWithBold(messages.customReportSearchTermCvssAndPublishDate, {\n                hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                score: (filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values)\n                    || DEFAULT_FILTER_DATA.cvss_filter.min.toFixed(1) + ' - ' + DEFAULT_FILTER_DATA.cvss_filter.max.toFixed(1),\n                published: (filtersBuilder.publish_date && filtersBuilder.publish_date.values)\n                    || formatWithBold(messages.customReportTimespanAnytime)\n            })}\n            {filterStringSegments.map(filter =>\n                filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg, {\n                    values: filtersBuilder[filter.name].values.toLowerCase(),\n                    prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')  })\n            )}\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {filtersBuilder.filter ?\n                formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values }) : ''}\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\n\nconst DownloadCVEsReport = ({ filters, params, reportData = {}, buttonProps, isReportDynamic = false, type, label }) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n\n    const otherPagesPDF = data =>\n        data.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / PDF_REPORT_PER_PAGE.otherPages);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(data.some(cve => cve.attributes.rules.length > 0));\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((cvePage, index) =>\n            tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type }))];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((systemPage, index) =>\n            tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header }))];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text>*</Text>\n                            <CSAwIcon style={styles.footerIcon}/>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n","\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\n\nconst BuildExecReport = ({ data,  intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                value = intl.formatMessage(messages.executiveReportOfTotal, { count: value, percentage: fieldData.percentage });\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        }\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        true\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= 15 && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    return [(\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    calculateTopCves().firstPage\n\n                }\n            </Section>\n        </Fragment>\n    ),\n    calculateTopCves().secondPage\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    return (\n        <DownloadButton\n            label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n        />\n    );\n};\n\nexport default DownloadExecutive;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { StackItem, Split, SplitItem, Text, TextVariants, TextContent, Radio, Checkbox, TextInput } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport {\n    FILTERS,\n    BUSINESS_RISK_OPTIONS,\n    STATUS_OPTIONS,\n    PUBLIC_DATE_OPTIONS,\n    IMPACT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst CustomReportFilter = ({ filterName, handleRemove, filterData, setFilterData }) => {\n    const handleOnCheckboxChange = (newValue, event, filterName) => {\n        const { value: id } = event.currentTarget;\n        if (newValue) {\n            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], id] });\n        }\n        else {\n            let index = filterData[filterName].indexOf(id);\n            let temp = filterData[filterName].slice();\n            temp.splice(index, 1);\n            setFilterData({ ...filterData, [filterName]: temp });\n        }\n    };\n\n    const handleOnRadioChange = (event, filterName) => {\n        const { value: id } = event.currentTarget;\n        setFilterData({ ...filterData, [filterName]: id });\n    };\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({ ...filterData, cvss_filter: {\n            ...filterData.cvss_filter,\n            [inputName]: value\n        } });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const valueThis = +filterData.cvss_filter[inputName];\n        const valueMin = +filterData.cvss_filter.min;\n        const valueMax = +filterData.cvss_filter.max;\n\n        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const filterCheckboxes = (options, filterName) => (\n        <React.Fragment>\n            {options.map(item => (\n                <Checkbox\n                    className={'pf-u-ml-md pf-u-mt-xs'}\n                    value={item.value}\n                    isChecked={filterData[filterName].includes(item.value)}\n                    onChange={(v, e) => handleOnCheckboxChange(v, e, filterName)}\n                    label={item.label}\n                    key={filterName + item.label}\n                    id={filterName + item.label}\n                    name={filterName + item.label}\n                    aria-label={item.label}\n                />\n            ))}\n        </React.Fragment>\n    );\n\n    const filterRadios = (options, filterName) => (\n        <React.Fragment>\n            {options.map(item => (\n                <Radio\n                    className={'pf-u-ml-md pf-u-mt-xs'}\n                    value={item.value}\n                    isChecked={filterData[filterName] === item.value}\n                    onChange={(v, e) => handleOnRadioChange(e, filterName)}\n                    label={item.label}\n                    key={filterName + item.label}\n                    id={filterName + item.label}\n                    name={filterName + item.label}\n                    aria-label={item.label}\n                />\n            ))}\n        </React.Fragment>\n    );\n\n    const filterCvssScore = (\n        <Split className='pf-u-ml-md pf-u-mt-xs'>\n            <SplitItem>\n                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br/>\n                <TextInput\n                    type=\"number\"\n                    onChange={(v) => handleCvssInputChange(v, 'min')}\n                    validated={validateCvssInput('min')}\n                    id=\"cvss-min\"\n                    value={filterData.cvss_filter.min}\n                    style={{ width: '5em' }}\n                />\n            </SplitItem>\n            <SplitItem>\n                <br/><span className=\"pf-u-m-sm\">-</span>\n            </SplitItem>\n            <SplitItem>\n                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br/>\n                <TextInput\n                    type=\"number\"\n                    onChange={(v) => handleCvssInputChange(v, 'max')}\n                    validated={validateCvssInput('max')}\n                    id=\"cvss-max\"\n                    value={filterData.cvss_filter.max}\n                    style={{ width: '5em' }}\n                />\n            </SplitItem>\n        </Split>\n    );\n\n    const filterContent = name => {\n        switch (name) {\n            case 'status_id':\n                return filterCheckboxes(STATUS_OPTIONS, 'status_id');\n            case 'business_risk_id':\n                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');\n            case 'publish_date':\n                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');\n            case 'impact':\n                return filterCheckboxes(IMPACT_OPTIONS, 'impact');\n            case 'cvss_filter':\n                return filterCvssScore;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <StackItem>\n            <Split hasGutter>\n                <SplitItem>\n                    <TextContent>\n                        <Text component={TextVariants.h4}>{FILTERS[filterName].title}</Text>\n                    </TextContent>\n                </SplitItem>\n                <SplitItem>\n                    <CloseIcon\n                        color=\"var(--pf-global--Color--200)\"\n                        // if user deletes filter and then adds it again it will retain its value\n                        // if that is undesirable reset state here vvv\n                        onClick={() => handleRemove(filterName)}\n                        style={{ cursor: 'pointer', fontSize: 12 }}\n                    />\n                </SplitItem>\n            </Split>\n            {filterContent(filterName)}\n        </StackItem>\n    );\n};\n\nCustomReportFilter.propTypes = {\n    filterName: propTypes.string,\n    handleRemove: propTypes.func,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func\n};\n\nexport default CustomReportFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    Stack\n} from '@patternfly/react-core';\nimport { AngleDownIcon } from '@patternfly/react-icons';\nimport CustomReportFilter from '../Reports/CustomReportFilter';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { FILTERS, DEFAULT_FILTER_DATA, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\n\nconst ReportConfigModal = ({ isOpen, onClose }) => {\n    const [isFilterMenuOpen, setFilterMenuOpen] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [activeFilters, setActiveFilters] = useState([]);\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const toggleFilterDropdown = () => {\n        setFilterMenuOpen(!isFilterMenuOpen);\n    };\n\n    const closeFilterDropdown = () => {\n        setFilterMenuOpen(false);\n    };\n\n    const addFilter = (newFilter) => {\n        if (!activeFilters.includes(newFilter)) {\n            setActiveFilters([...activeFilters, newFilter]);\n        }\n    };\n\n    const removeFilter = (filterToDelete) => {\n        const index = activeFilters.indexOf(filterToDelete);\n\n        if (index > -1) {\n            // necessary to prevent state mutation with splice\n            let temp = activeFilters.slice();\n            temp.splice(index, 1);\n            setActiveFilters(temp);\n            setFilterData({ ...filterData, [filterToDelete]: DEFAULT_FILTER_DATA[filterToDelete] });\n        }\n    };\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    const filterDropdownOptions = Object.entries(FILTERS).map(([key, value]) =>\n        (key === 'show_all' || key === 'security_rule') ? <React.Fragment key={key}/> : (\n            <DropdownItem\n                key={key}\n                isDisabled={activeFilters.includes(key)}\n                onClick={() => addFilter(key)}\n            >\n                {value.dropdownOverrideTitle || value.title}\n            </DropdownItem>\n        )\n    );\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setActiveFilters([]);\n        setColumnsToInclude(Object.keys(FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n\n        onClose();\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            variant=\"small\"\n            isOpen={isOpen}\n            onClose={handleModalClose}\n            actions={[\n                <DownloadCVEsReport\n                    type='cves'\n                    key=\"download\"\n                    reportData={{\n                        header: columnsToInclude,\n                        reportTitle,\n                        userNotes\n                    }}\n                    params={constructFilterParameters(filterData)}\n                    filters={buildFilters(filterData)}\n                    isReportDynamic\n                    buttonProps={{\n                        isDisabled:\n                            +filterData.cvss_filter.min < 0 ||\n                            +filterData.cvss_filter.max > 10 ||\n                            +filterData.cvss_filter.min > +filterData.cvss_filter.max ||\n                            userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH,\n                        style: { marginRight: '0.5em' }\n                    }}\n                    label={messages.configModalExportReport}\n                />,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                    />\n                    <Checkbox\n                        id=\"hasRule\"\n                        key=\"hasRule\"\n                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}\n                        isChecked={filterData.security_rule === 'true'}\n                        onChange={(newValue) =>\n                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : undefined })\n                        }\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div style={{ columnCount: 2 }}>\n                        <Checkbox\n                            id=\"cve_id\"\n                            label=\"CVE ID\"\n                            isChecked\n                            isDisabled\n                            className=\"pf-u-mb-md\"\n                        />\n                        {\n                            Object.entries(FILTERS).map(([key, value]) =>\n                                key !== 'security_rule' &&\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.checkboxOverrideTitle || value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                            )\n                        }\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    {activeFilters.length === 0 ? (\n                        <span style={{ color: 'var(--pf-global--Color--200)' }}>\n                            {intl.formatMessage(messages.configModalNoFilters)}\n                            <br />\n                        </span>\n                    ) : (\n                        <Stack hasGutter>\n                            {activeFilters &&\n                                    activeFilters.map((item) => {\n                                        return (\n                                            <CustomReportFilter\n                                                key={item}\n                                                filterName={item}\n                                                handleRemove={(item) =>\n                                                    removeFilter(item)\n                                                }\n                                                filterData={filterData}\n                                                setFilterData={setFilterData}\n                                            />\n                                        );\n                                    })}\n                        </Stack>\n                    )}\n\n                    <Dropdown\n                        isPlain\n                        direction=\"up\"\n                        onSelect={closeFilterDropdown}\n                        toggle={\n                            <DropdownToggle\n                                id=\"filterToggle\"\n                                onToggle={toggleFilterDropdown}\n                                toggleIndicator={AngleDownIcon}\n                                style={{\n                                    padding: '0px',\n                                    color: 'var(--pf-global--link--Color)'\n                                }}\n                            >\n                                {intl.formatMessage(messages.configModalAddFilter)}\n                            </DropdownToggle>\n                        }\n                        isOpen={isFilterMenuOpen}\n                        dropdownItems={filterDropdownOptions}\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"horizontal-form-name\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    onClose: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Page, Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n\n    return (\n        <Page>\n            <VulnerabilityHeader title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter>\n                    <GridItem span={3}>\n                        <Card>\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem span={3}>\n                        <Card>\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}</a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal isOpen={isModalOpen} onClose={() => setModalOpen(false)}/>\n        </Page>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}