{"version":3,"sources":["webpack:///./src/Utilities/interceptors.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/SmartComponents/Reports/CustomReportFilter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["instance","axios","create","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","ReadOnlyNotification","err","isCancel","errObject","data","errors","api","GitApi","undefined","getCveDetails","synopsis","getSystemDetails","system","getAffectedSystemsByCVE","apiProps","parameterArray","constructParameters","getAffectedSystemsByCve","getSystems","getSystemsList","getCveListByAccount","getCveList","optOutSystem","setSystemOptOut","getCveListBySystem","Object","keys","forEach","key","params","map","item","setSystemCveStatus","setStatus","optOutSystems","systems","optOut","opt_out","inventory_id","Array","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","getAffectedSystemsIdsByCve","getSystemsIds","getCveIdsList","getCveIdsBySystem","filename","page","Date","toISOString","split","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","a","isArray","data_format","payload","JSON","stringify","downloadFile","this","page_size","Number","MAX_SAFE_INTEGER","replace","tablePage","intl","header","type","columnBuilder","value","style","hitColumns","headerContent","push","formatMessage","messages","cveId","publishDate","cvssBaseScore","impact","systemsExposed","businessRisk","cveRows","attributes","cveCellStyle","rules","length","styles","cveCellAlign","bodyCell","cveCell","link","src","CVES_PATH","public_date","processDate","systemRows","display_name","systemNameCell","systemsTableExcluded","cve_count","systemCell","formatDate","last_upload","withHeader","rows","headerCell","customReportNoCves","propTypes","PropTypes","object","any","number","array","string","firstPagePDF","meta","filters","isReportDynamic","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","chips","timespan_label","name","join","filterStringSegments","msg","CVEsPDFreportFiltersSeverity","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersSecurityRule","i","hasOwnProperty","isLast","customReportIntroductionText","formatWithBold","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","min","toFixed","max","published","publish_date","customReportTimespanAnytime","toLowerCase","prefix","customReportAnd","systemsPDFreportFiltersSearchTerm","CVEsPDFreportSubHeader","total_items","toString","system_count","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","first_name","last_name","defaultProps","bool","DownloadCVEsReport","buttonProps","label","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","otherPagesPDF","resultArray","index","chunkIndex","Math","floor","PDF_REPORT_PER_PAGE","otherPages","cvesFetch","DownloadReport","sort","insights","chrome","auth","getUser","cvss_score","parseFloat","cvss3_score","cvss2_score","some","firstPage","splice","firstPageWithNote","firstPageWithoutNote","cvePage","systemsFetch","systemPage","asyncFunction","component","reportName","reportTitle","cvePDFReportName","systemPDFReportName","fileName","allPagesHaveTitle","size","orientation","footer","footerIcon","footerText","customReportFooter","kebabExportAsPDF","oneOfType","BuildExecReport","safeCharLength","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","mapFields","fields","percentageInfo","arr","field","fieldData","count","percentage","executiveReportOfTotal","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","severity","x","y","CVSSData","calculateTopCves","panelGroups","secondPage","totalRows","ceil","description","panel","title","executiveReportPanelTitle","systems_affected","executiveReportHeader","executiveReportSubHeader","executiveReportHeaderSystems","cves","executiveReportHeaderCVEs","executiveReportCvesBySeverity","CVSSHeader","chartType","subTitle","executiveReportRecentlyPublishedCves","recentCvesHeader","executiveReportTop3","withColumn","exact","DownloadExecutive","dataFetch","report","buildExecReport","executiveReportCardButton","variant","isInline","vulnerabilitiesHeader","CustomReportFilter","filterName","handleRemove","filterData","setFilterData","handleCvssInputChange","inputName","validateCvssInput","valueThis","valueMin","valueMax","filterCheckboxes","options","Fragment","Checkbox","className","isChecked","onChange","v","e","newValue","event","id","currentTarget","indexOf","temp","slice","handleOnCheckboxChange","aria-label","filterRadios","Radio","handleOnRadioChange","filterCvssScore","Split","SplitItem","fontSize","customReportCvssMinLabel","TextInput","validated","width","customReportCvssMaxLabel","StackItem","hasGutter","TextContent","Text","TextVariants","h4","FILTERS","color","onClick","cursor","STATUS_OPTIONS","BUSINESS_RISK_OPTIONS","IMPACT_OPTIONS","filterContent","func","ReportConfigModal","isOpen","onClose","isFilterMenuOpen","setFilterMenuOpen","customReportDefaultTitle","setReportTitle","setUserNotes","activeFilters","setActiveFilters","columnsToInclude","setColumnsToInclude","filterDropdownOptions","entries","DropdownItem","isDisabled","newFilter","dropdownOverrideTitle","handleModalClose","Modal","configModalTitle","actions","constructFilterParameters","buildFilters","PDF_REPORT_USER_NOTE_MAX_LENGTH","marginRight","configModalExportReport","Button","cancel","Form","FormGroup","customReportTitleLabel","fieldId","customOnlyCvesWithRulesLabel","security_rule","customReportDataToIncludeLabel","columnCount","checkboxOverrideTitle","parameter","handleCheckboxChange","customReportFilterDataByLabel","configModalNoFilters","Stack","filterToDelete","removeFilter","Dropdown","isPlain","direction","onSelect","toggle","DropdownToggle","onToggle","toggleIndicator","AngleDownIcon","padding","configModalAddFilter","dropdownItems","customReportUserNotesLabel","helperTextInvalid","customReportUserNoteTooLong","TextArea","resizeOrientation","minHeight","ReportsPage","isModalOpen","setModalOpen","Page","VulnerabilityHeader","reportsPageTitle","showBreadcrumb","Main","Grid","GridItem","span","Card","CardTitle","verticalAlign","executiveReportCardTitle","CardBody","executiveReportCardDescription","CardFooter","customReportCardTitle","customReportCardDescription","customReportCardButton"],"mappings":"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","file":"js/Reports.js","sourcesContent":["import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n","let BASE_ROUTE = '/api/vulnerability/';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis, apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule',\n        'rule_name'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystems(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function optOutSystem(system, status) {\n    let result = api.setSystemOptOut(system, status);\n    return result;\n}\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve(synopsis, apiProps) {\n    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n    }\n}\n\nexport default new DownloadReport();\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type }) => {\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        if (header.includes('publish_date')) {\n            headerContent.push({ value: intl.formatMessage(messages.publishDate) });\n        }\n\n        if (header.includes('cvss_filter')) {\n            headerContent.push({ value: intl.formatMessage(messages.cvssBaseScore) });\n            hitColumns.push('cvss_score');\n        }\n\n        if (header.includes('impact')) {\n            headerContent.push({ value: intl.formatMessage(messages.impact) });\n            hitColumns.push('impact');\n        }\n\n        if (header.includes('show_all')) {\n            headerContent.push({ value: intl.formatMessage(messages.systemsExposed) });\n            hitColumns.push('systems_affected');\n        }\n\n        if (header.includes('business_risk_id')) {\n            headerContent.push({ value: intl.formatMessage(messages.businessRisk) });\n            hitColumns.push('business_risk');\n        }\n\n        if (header.includes('status_id')) {\n            headerContent.push({ value: intl.formatMessage(messages.status) });\n            hitColumns.push('status');\n        }\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) },\n            { value: intl.formatMessage(messages.publishDate) },\n            { value: intl.formatMessage(messages.cvssBaseScore) },\n            { value: intl.formatMessage(messages.impact) },\n            { value: intl.formatMessage(messages.systemsExposed) },\n            { value: intl.formatMessage(messages.businessRisk) },\n            { value: intl.formatMessage(messages.status) }\n        ];\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'last_upload'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            let cveCellStyle = (\n                cve.rules && cve.rules.length > 0\n                    ? [styles.cveCellAlign, styles.bodyCell, styles.cveCell]\n                    : [styles.bodyCell, styles.cveCell]\n            );\n\n            const synopsisCell = (\n                <View key={cve.synopsis}>\n                    { cve.rules && cve.rules.length > 0 && <CSAwIcon style={{ ...styles.bodyCell, ...styles.cveCell }}/> }\n                    <Text style={cveCellStyle}>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.last_upload, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {formatWithBold(messages.customReportSearchTermCvssAndPublishDate, {\n                hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                score: (filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values)\n                    || DEFAULT_FILTER_DATA.cvss_filter.min.toFixed(1) + ' - ' + DEFAULT_FILTER_DATA.cvss_filter.max.toFixed(1),\n                published: (filtersBuilder.publish_date && filtersBuilder.publish_date.values)\n                    || formatWithBold(messages.customReportTimespanAnytime)\n            })}\n            {filterStringSegments.map(filter =>\n                filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg, {\n                    values: filtersBuilder[filter.name].values.toLowerCase(),\n                    prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')  })\n            )}\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {filtersBuilder.filter ?\n                formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values }) : ''}\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intl.formatMessage(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    - {user.identity.user.first_name} {user.identity.user.last_name}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\n\nconst DownloadCVEsReport = ({ filters, params, reportData = {}, buttonProps, isReportDynamic = false, type, label }) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n\n    const otherPagesPDF = data =>\n        data.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / PDF_REPORT_PER_PAGE.otherPages);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(data.some(cve => cve.attributes.rules.length > 0));\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((cvePage, index) =>\n            tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type }))];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((systemPage, index) =>\n            tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header }))];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text>*</Text>\n                            <CSAwIcon style={styles.footerIcon}/>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n","\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\n\nconst BuildExecReport = ({ data,  intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                value = intl.formatMessage(messages.executiveReportOfTotal, { count: value, percentage: fieldData.percentage });\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        }\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        true\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= 15 && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    return [(\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    calculateTopCves().firstPage\n\n                }\n            </Section>\n        </Fragment>\n    ),\n    calculateTopCves().secondPage\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    return (\n        <DownloadButton\n            label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n        />\n    );\n};\n\nexport default DownloadExecutive;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { StackItem, Split, SplitItem, Text, TextVariants, TextContent, Radio, Checkbox, TextInput } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport {\n    FILTERS,\n    BUSINESS_RISK_OPTIONS,\n    STATUS_OPTIONS,\n    PUBLIC_DATE_OPTIONS,\n    IMPACT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst CustomReportFilter = ({ filterName, handleRemove, filterData, setFilterData }) => {\n    const handleOnCheckboxChange = (newValue, event, filterName) => {\n        const { value: id } = event.currentTarget;\n        if (newValue) {\n            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], id] });\n        }\n        else {\n            let index = filterData[filterName].indexOf(id);\n            let temp = filterData[filterName].slice();\n            temp.splice(index, 1);\n            setFilterData({ ...filterData, [filterName]: temp });\n        }\n    };\n\n    const handleOnRadioChange = (event, filterName) => {\n        const { value: id } = event.currentTarget;\n        setFilterData({ ...filterData, [filterName]: id });\n    };\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({ ...filterData, cvss_filter: {\n            ...filterData.cvss_filter,\n            [inputName]: value\n        } });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const valueThis = +filterData.cvss_filter[inputName];\n        const valueMin = +filterData.cvss_filter.min;\n        const valueMax = +filterData.cvss_filter.max;\n\n        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const filterCheckboxes = (options, filterName) => (\n        <React.Fragment>\n            {options.map(item => (\n                <Checkbox\n                    className={'pf-u-ml-md pf-u-mt-xs'}\n                    value={item.value}\n                    isChecked={filterData[filterName].includes(item.value)}\n                    onChange={(v, e) => handleOnCheckboxChange(v, e, filterName)}\n                    label={item.label}\n                    key={filterName + item.label}\n                    id={filterName + item.label}\n                    name={filterName + item.label}\n                    aria-label={item.label}\n                />\n            ))}\n        </React.Fragment>\n    );\n\n    const filterRadios = (options, filterName) => (\n        <React.Fragment>\n            {options.map(item => (\n                <Radio\n                    className={'pf-u-ml-md pf-u-mt-xs'}\n                    value={item.value}\n                    isChecked={filterData[filterName] === item.value}\n                    onChange={(v, e) => handleOnRadioChange(e, filterName)}\n                    label={item.label}\n                    key={filterName + item.label}\n                    id={filterName + item.label}\n                    name={filterName + item.label}\n                    aria-label={item.label}\n                />\n            ))}\n        </React.Fragment>\n    );\n\n    const filterCvssScore = (\n        <Split className='pf-u-ml-md pf-u-mt-xs'>\n            <SplitItem>\n                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br/>\n                <TextInput\n                    type=\"number\"\n                    onChange={(v) => handleCvssInputChange(v, 'min')}\n                    validated={validateCvssInput('min')}\n                    id=\"cvss-min\"\n                    value={filterData.cvss_filter.min}\n                    style={{ width: '5em' }}\n                />\n            </SplitItem>\n            <SplitItem>\n                <br/><span className=\"pf-u-m-sm\">-</span>\n            </SplitItem>\n            <SplitItem>\n                <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br/>\n                <TextInput\n                    type=\"number\"\n                    onChange={(v) => handleCvssInputChange(v, 'max')}\n                    validated={validateCvssInput('max')}\n                    id=\"cvss-max\"\n                    value={filterData.cvss_filter.max}\n                    style={{ width: '5em' }}\n                />\n            </SplitItem>\n        </Split>\n    );\n\n    const filterContent = name => {\n        switch (name) {\n            case 'status_id':\n                return filterCheckboxes(STATUS_OPTIONS, 'status_id');\n            case 'business_risk_id':\n                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');\n            case 'publish_date':\n                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');\n            case 'impact':\n                return filterCheckboxes(IMPACT_OPTIONS, 'impact');\n            case 'cvss_filter':\n                return filterCvssScore;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        <StackItem>\n            <Split hasGutter>\n                <SplitItem>\n                    <TextContent>\n                        <Text component={TextVariants.h4}>{FILTERS[filterName].title}</Text>\n                    </TextContent>\n                </SplitItem>\n                <SplitItem>\n                    <CloseIcon\n                        color=\"var(--pf-global--Color--200)\"\n                        // if user deletes filter and then adds it again it will retain its value\n                        // if that is undesirable reset state here vvv\n                        onClick={() => handleRemove(filterName)}\n                        style={{ cursor: 'pointer', fontSize: 12 }}\n                    />\n                </SplitItem>\n            </Split>\n            {filterContent(filterName)}\n        </StackItem>\n    );\n};\n\nCustomReportFilter.propTypes = {\n    filterName: propTypes.string,\n    handleRemove: propTypes.func,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func\n};\n\nexport default CustomReportFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    Stack\n} from '@patternfly/react-core';\nimport { AngleDownIcon } from '@patternfly/react-icons';\nimport CustomReportFilter from '../Reports/CustomReportFilter';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { FILTERS, DEFAULT_FILTER_DATA, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\n\nconst ReportConfigModal = ({ isOpen, onClose }) => {\n    const [isFilterMenuOpen, setFilterMenuOpen] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [activeFilters, setActiveFilters] = useState([]);\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const toggleFilterDropdown = () => {\n        setFilterMenuOpen(!isFilterMenuOpen);\n    };\n\n    const closeFilterDropdown = () => {\n        setFilterMenuOpen(false);\n    };\n\n    const addFilter = (newFilter) => {\n        if (!activeFilters.includes(newFilter)) {\n            setActiveFilters([...activeFilters, newFilter]);\n        }\n    };\n\n    const removeFilter = (filterToDelete) => {\n        const index = activeFilters.indexOf(filterToDelete);\n\n        if (index > -1) {\n            // necessary to prevent state mutation with splice\n            let temp = activeFilters.slice();\n            temp.splice(index, 1);\n            setActiveFilters(temp);\n            setFilterData({ ...filterData, [filterToDelete]: DEFAULT_FILTER_DATA[filterToDelete] });\n        }\n    };\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    const filterDropdownOptions = Object.entries(FILTERS).map(([key, value]) =>\n        (key === 'show_all' || key === 'security_rule') ? <React.Fragment key={key}/> : (\n            <DropdownItem\n                key={key}\n                isDisabled={activeFilters.includes(key)}\n                onClick={() => addFilter(key)}\n            >\n                {value.dropdownOverrideTitle || value.title}\n            </DropdownItem>\n        )\n    );\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setActiveFilters([]);\n        setColumnsToInclude(Object.keys(FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n\n        onClose();\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            variant=\"small\"\n            isOpen={isOpen}\n            onClose={handleModalClose}\n            actions={[\n                <DownloadCVEsReport\n                    type='cves'\n                    key=\"download\"\n                    reportData={{\n                        header: columnsToInclude,\n                        reportTitle,\n                        userNotes\n                    }}\n                    params={constructFilterParameters(filterData)}\n                    filters={buildFilters(filterData)}\n                    isReportDynamic\n                    buttonProps={{\n                        isDisabled:\n                            +filterData.cvss_filter.min < 0 ||\n                            +filterData.cvss_filter.max > 10 ||\n                            +filterData.cvss_filter.min > +filterData.cvss_filter.max ||\n                            userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH,\n                        style: { marginRight: '0.5em' }\n                    }}\n                    label={messages.configModalExportReport}\n                />,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                    />\n                    <Checkbox\n                        id=\"hasRule\"\n                        key=\"hasRule\"\n                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}\n                        isChecked={filterData.security_rule === 'true'}\n                        onChange={(newValue) =>\n                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : 'all' })\n                        }\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div style={{ columnCount: 2 }}>\n                        <Checkbox\n                            id=\"cve_id\"\n                            label=\"CVE ID\"\n                            isChecked\n                            isDisabled\n                            className=\"pf-u-mb-md\"\n                        />\n                        {\n                            Object.entries(FILTERS).map(([key, value]) =>\n                                key !== 'security_rule' &&\n                                    <Checkbox\n                                        id={key}\n                                        key={key}\n                                        label={value.checkboxOverrideTitle || value.title}\n                                        isChecked={columnsToInclude.includes(key)}\n                                        onChange={(newValue) =>\n                                            handleCheckboxChange(key, newValue)\n                                        }\n                                        className='pf-u-mb-md'\n                                    />\n                            )\n                        }\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    {activeFilters.length === 0 ? (\n                        <span style={{ color: 'var(--pf-global--Color--200)' }}>\n                            {intl.formatMessage(messages.configModalNoFilters)}\n                            <br />\n                        </span>\n                    ) : (\n                        <Stack hasGutter>\n                            {activeFilters &&\n                                    activeFilters.map((item) => {\n                                        return (\n                                            <CustomReportFilter\n                                                key={item}\n                                                filterName={item}\n                                                handleRemove={(item) =>\n                                                    removeFilter(item)\n                                                }\n                                                filterData={filterData}\n                                                setFilterData={setFilterData}\n                                            />\n                                        );\n                                    })}\n                        </Stack>\n                    )}\n\n                    <Dropdown\n                        isPlain\n                        direction=\"up\"\n                        onSelect={closeFilterDropdown}\n                        toggle={\n                            <DropdownToggle\n                                id=\"filterToggle\"\n                                onToggle={toggleFilterDropdown}\n                                toggleIndicator={AngleDownIcon}\n                                style={{\n                                    padding: '0px',\n                                    color: 'var(--pf-global--link--Color)'\n                                }}\n                            >\n                                {intl.formatMessage(messages.configModalAddFilter)}\n                            </DropdownToggle>\n                        }\n                        isOpen={isFilterMenuOpen}\n                        dropdownItems={filterDropdownOptions}\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"horizontal-form-name\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    onClose: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Page, Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { ChartPieIcon, FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n\n    return (\n        <Page>\n            <VulnerabilityHeader title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter>\n                    <GridItem span={3}>\n                        <Card>\n                            <CardTitle>\n                                <ChartPieIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={{ verticalAlign: '0.3rem' }}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem span={3}>\n                        <Card>\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={{ verticalAlign: '0.3rem' }}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}</a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal isOpen={isModalOpen} onClose={() => setModalOpen(false)}/>\n        </Page>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}