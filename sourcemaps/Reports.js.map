{"version":3,"sources":["webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/SmartComponents/Reports/CustomReportFilter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js"],"names":["filename","page","Date","toISOString","split","params","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","a","Array","isArray","data_format","payload","response","data","JSON","stringify","downloadFile","this","page_size","Number","MAX_SAFE_INTEGER","replace","tablePage","intl","header","type","POSSIBLE_HEADERS","name","value","formatMessage","messages","publishDate","cvssBaseScore","hit","impact","systemsExposed","businessRisk","status","columnBuilder","style","key","hitColumns","headerContent","push","cveId","forEach","item","concat","map","cveRows","attributes","cveCellStyle","rules","length","styles","cveCellAlign","bodyCell","cveCell","synopsis","link","src","CVES_PATH","public_date","processDate","systemRows","system","display_name","systemNameCell","opt_out","systemsTableExcluded","cve_count","systemCell","formatDate","updated","withHeader","rows","headerCell","customReportNoCves","propTypes","PropTypes","object","any","number","array","string","firstPagePDF","meta","filters","isReportDynamic","reportData","user","filtersBuilder","reduce","obj","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","chips","timespan_label","join","filterStringSegments","msg","CVEsPDFreportFiltersSeverity","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersSecurityRule","i","hasOwnProperty","isLast","formatWithBold","customReportIntroductionText","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","min","toFixed","max","published","publish_date","customReportTimespanAnytime","toLowerCase","prefix","customReportAnd","systemsPDFreportFiltersSearchTerm","CVEsPDFreportSubHeader","total_items","toString","system_count","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","customReportUserNotesGenerated","first_name","last_name","defaultProps","undefined","bool","DownloadCVEsReport","buttonProps","label","props","useIntl","useState","loading","setLoading","securityRulesPresent","setSecurityRulesPresent","dispatch","useDispatch","useEffect","clearNotifications","otherPagesPDF","resultArray","index","chunkIndex","Math","floor","PDF_REPORT_PER_PAGE","otherPages","cvesFetch","addNotification","dismissable","variant","title","customReportNotificationCve","getCveListByAccount","DownloadReport","sort","affecting","insights","chrome","auth","getUser","cvss_score","parseFloat","cvss3_score","cvss2_score","some","firstPage","splice","firstPageWithNote","firstPageWithoutNote","cvePage","systemsFetch","customReportNotificationSystem","getSystems","systemPage","asyncFunction","component","reportName","reportTitle","cvePDFReportName","systemPDFReportName","fileName","allPagesHaveTitle","size","orientation","footer","footerIcon","footerText","customReportFooter","kebabExportAsPDF","oneOfType","BuildExecReport","safeCharLength","cvesBySeverity","cves_by_severity","recentCves","recent_cves","topCves","top_cves","cvesTotal","cves_total","systemTotal","mapFields","fields","percentageInfo","arr","field","fieldData","count","percentage","executiveReportOfTotal","recentCvesData","recentCvesMapping","CVSSChart","CVSSMapping","severity","x","y","CVSSData","calculateTopCves","panelGroups","secondPage","totalRows","ceil","description","panel","executiveReportPanelTitle","systems_affected","executiveReportHeader","executiveReportSubHeader","systems","executiveReportHeaderSystems","cves","executiveReportHeaderCVEs","executiveReportCvesBySeverity","CVSSHeader","chartType","subTitle","executiveReportRecentlyPublishedCves","recentCvesHeader","executiveReportTop3","withColumn","exact","DownloadExecutive","isLoading","renderPDF","setRenderPDF","dataFetch","downloadExecutiveNotification","getExecutiveReport","report","buildExecReport","href","onClick","executiveReportCardButton","showButton","isInline","vulnerabilitiesHeader","onSuccess","CustomReportFilter","filterName","filterData","setFilterData","isOpen","setOpen","handleCvssInputChange","inputName","validateCvssInput","valueThis","valueMin","valueMax","filterCheckboxes","options","Select","aria-label","onToggle","placeholderText","CVE_REPORT_FILTERS","items","id","direction","width","className","onSelect","event","optionName","optionId","indexOf","temp","slice","handleOnCheckboxChange","selections","isCheckboxSelectionBadgeHidden","SelectOption","filterRadios","optionValue","handleOnRadioChange","Radio","isChecked","filterCvssContent","Split","SplitItem","fontSize","customReportCvssMinLabel","TextInput","onChange","v","validated","customReportCvssMaxLabel","filterCvssWrapper","customContent","optionsAll","Text","color","STATUS_OPTIONS","BUSINESS_RISK_OPTIONS","IMPACT_OPTIONS","filterContent","func","ReportConfigModal","isModalOpen","handleModalClose","handleDownloadButton","columnsToInclude","setColumnsToInclude","setUserNotes","setReportTitle","activeFilters","Modal","configModalTitle","onClose","actions","Button","configModalExportReport","cancel","Form","FormGroup","customReportTitleLabel","fieldId","Checkbox","customOnlyCvesWithRulesLabel","security_rule","newValue","customReportDataToIncludeLabel","columnCount","isDisabled","Object","entries","parameter","handleCheckboxChange","customReportFilterDataByLabel","customReportUserNotesLabel","helperTextInvalid","customReportUserNoteTooLong","PDF_REPORT_USER_NOTE_MAX_LENGTH","TextArea","resizeOrientation","minHeight","ReportsPage","setModalOpen","downloadCVEReport","setDownloadCVEReport","customReportDefaultTitle","keys","Page","Header","reportsPageTitle","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","pieChartIcon","cardTitle","executiveReportCardTitle","CardBody","executiveReportCardDescription","CardFooter","customReportCardTitle","customReportCardDescription","customReportCardButton","constructFilterParameters","buildFilters","marginRight"],"mappings":"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","file":"js/Reports.js","sourcesContent":["import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n    }\n}\n\nexport default new DownloadReport();\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/cjs/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\n\nconst tablePage = ({ data, page, intl, header, type }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: 'Name' },\n            { value: 'Applicable CVEs' },\n            { value: 'Last seen' }\n        ];\n    }\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            let cveCellStyle = (\n                cve.rules && cve.rules.length > 0\n                    ? [styles.cveCellAlign, styles.bodyCell, styles.cveCell]\n                    : [styles.bodyCell, styles.cveCell]\n            );\n\n            const synopsisCell = (\n                <View key={cve.synopsis}>\n                    { cve.rules && cve.rules.length > 0 && <CSAwIcon style={{ ...styles.bodyCell, ...styles.cveCell }}/> }\n                    <Text style={cveCellStyle}>\n                        <Link\n                            style={styles.link}\n                            src={`${CVES_PATH}/${cve.synopsis}`}\n                        >\n                            {cve.synopsis}\n                        </Link>\n                    </Text>\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                    <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                        { processDate(cve.public_date) }\n                    </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.opt_out\n                    ? intl.formatMessage(messages.systemsTableExcluded)\n                    : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.value === 'Name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        { data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoCves)}</Text> }\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { formatWithBold } from '../ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'security_rule', msg: messages.CVEsPDFreportFiltersSecurityRule }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {formatWithBold(messages.customReportSearchTermCvssAndPublishDate, {\n                hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                score: (filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values)\n                    || DEFAULT_FILTER_DATA.cvss_filter.min.toFixed(1) + ' - ' + DEFAULT_FILTER_DATA.cvss_filter.max.toFixed(1),\n                published: (filtersBuilder.publish_date && filtersBuilder.publish_date.values)\n                    || formatWithBold(messages.customReportTimespanAnytime)\n            })}\n            {filterStringSegments.map(filter =>\n                filtersBuilder.hasOwnProperty(filter.name) && formatWithBold(filter.msg, {\n                    values: filtersBuilder[filter.name].values.toLowerCase(),\n                    prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')  })\n            )}\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {filtersBuilder.filter ?\n                formatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values }) : ''}\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {formatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    {formatWithBold(messages.CVEsPDFreportSubHeader, {\n                        cve_count: meta.total_items.toString(),\n                        system_count: meta.system_count.toString()\n                    })}\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (<View style={styles.userNotes}>\n                        <Paragraph style={styles.userNotesTitle}><Text style={styles.bold}>\n                            {intl.formatMessage(messages.customReportUserNoteLabel)}\n                        </Text></Paragraph>\n                        <Paragraph><Text>{reportData.userNotes}</Text></Paragraph>\n                        <Paragraph>\n                            { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                            }\n                        </Paragraph>\n                    </View>\n                    ) : null\n            }\n\n            {tablePage({ data, intl, header: reportData && reportData.header, type })}\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton, CSAwIcon } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount, getSystems } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './Common/styles';\nimport { useDispatch } from 'react-redux';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    type,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [securityRulesPresent, setSecurityRulesPresent] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const otherPagesPDF = data =>\n        data.reduce((resultArray, item, index) => {\n            const chunkIndex = Math.floor(index / PDF_REPORT_PER_PAGE.otherPages);\n            !resultArray[chunkIndex] && (resultArray[chunkIndex] = []);\n            resultArray[chunkIndex].push(item);\n\n            return resultArray;\n        }, []);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationCve)\n        }));\n\n        let { data, meta } = await getCveListByAccount({\n            ...params,\n            ...DownloadReport.defaultParams,\n            sort: params.sort || '-cvss_score',\n            affecting: 'true,false'\n        });\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        data = data.map(cve => ({\n            ...cve,\n            attributes: {\n                ...cve.attributes,\n                cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n            }\n        }));\n\n        setSecurityRulesPresent(data.some(cve => cve.attributes.rules.length > 0));\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, reportData.userNotes\n                ? PDF_REPORT_PER_PAGE.firstPageWithNote\n                : PDF_REPORT_PER_PAGE.firstPageWithoutNote),\n            meta, filters, intl, isReportDynamic, reportData, user, type\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((cvePage, index) =>\n            tablePage({ data: cvePage, page: index, intl, header: reportData && reportData.header, type }))];\n    };\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.customReportNotificationSystem)\n        }));\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({ data: data.splice(0, PDF_REPORT_PER_PAGE.firstPageWithoutNote), meta, filters, intl });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [firstPage, ...otherPages.map((systemPage, index) =>\n            tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header }))];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={type === 'cves' ? cvesFetch : systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={isReportDynamic ? reportData.reportTitle : (type === 'cves')\n                    ? intl.formatMessage(messages.cvePDFReportName)\n                    : intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename(type === 'cves' ? (isReportDynamic ? 'reports' : '') : 'system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n                footer={\n                    securityRulesPresent && (\n                        <View style={styles.footer}>\n                            <Text>*</Text>\n                            <CSAwIcon style={styles.footerIcon}/>\n                            <Text style={styles.footerText}>\n                                {intl.formatMessage(messages.customReportFooter)}\n                            </Text>\n                        </View>)\n                }\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool,\n    type: propTypes.string\n};\n\nexport default DownloadCVEsReport;\n","\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, CVSSMapping, recentCvesHeader, recentCvesMapping } from '../../../Helpers/constants';\nimport {\n    Paragraph,\n    Section,\n    Column,\n    Table,\n    Panel,\n    PanelItem,\n    Chart\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport messages from '../../../Messages';\nimport styles from './Common/styles';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const safeCharLength = { colChars: 70, rows: 15 };\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: cvesTotal,\n        system_count: systemTotal\n    } = data;\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n            if (field === 'na' && value === 0) {\n                continue;  // if there's no CVE with N/A CVSS do not display N/A in graph/table\n            }\n\n            if (percentageInfo && fieldData.percentage) {\n                if (percentageInfo === 'number') { // only return number representing percentage\n                    value = fieldData.percentage;\n                }\n                else { // return formatted string including CVE count and percentage\n                    value = intl.formatMessage(messages.executiveReportOfTotal,\n                        { count: value, percentage: fieldData.percentage });\n                }\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(\n        recentCvesMapping,\n        {\n            ...recentCves\n        }\n    );\n    const CVSSDataMap = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'number'\n    );\n\n    const CVSSChart = CVSSDataMap.map((severity) => {\n        let [x, y] = severity;\n        return { x: `CVSS ${x}`, y: Number(y) };\n    });\n\n    const CVSSData = mapFields(\n        CVSSMapping,\n        {\n            ...cvesBySeverity\n        },\n        'string'\n    );\n\n    const calculateTopCves = () => {\n        let panelGroups = { firstPage: [], secondPage: [] };\n        let totalRows = 0;\n\n        topCves.forEach(cve => {\n            const rows = Math.ceil(cve.description.length / safeCharLength.colChars);\n            totalRows += rows;\n            const panel = (\n                <Panel key={cve.synopsis} title={cve.synopsis} description={cve.description}>\n                    <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                        {Number.parseFloat(cve.cvss3_score).toFixed(1)}\n                    </PanelItem>\n                    <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                        {cve.systems_affected.toString()}\n                    </PanelItem>\n                </Panel>\n            );\n            totalRows <= 15 && panelGroups.firstPage.push(panel) || panelGroups.secondPage.push(panel);\n\n        });\n        return panelGroups;\n    };\n\n    return [(\n        <Fragment key=\"first-section\">\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Paragraph>\n            <Paragraph>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: systemTotal })}\n                    </Text>,\n                    cves: <Text style={styles.bold}>\n                        {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: cvesTotal })}\n                    </Text>\n                })}\n            </Paragraph>\n            <Section title={intl.formatMessage(messages.executiveReportCvesBySeverity)}>\n\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[CVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                    />\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[recentCvesHeader, ...recentCvesData]}\n                    />\n                </Column>\n                <Column>\n                </Column>\n            </Section>\n            <Section title={intl.formatMessage(messages.executiveReportTop3)} withColumn={false}>\n                {\n                    calculateTopCves().firstPage\n\n                }\n            </Section>\n        </Fragment>\n    ),\n    calculateTopCves().secondPage\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const dispatch = useDispatch();\n\n    const dataFetch = async () => {\n        setLoading(true);\n\n        dispatch(addNotification({\n            dismissable: true,\n            variant: 'info',\n            title: intl.formatMessage(messages.downloadExecutiveNotification)\n        }));\n\n        const data = await getExecutiveReport();\n        const report = buildExecReport({ data, intl });\n\n        setLoading(false);\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const handleDownloadButton = () => {\n        setRenderPDF(true);\n    };\n\n    return (<Fragment>\n        <a href onClick={() => handleDownloadButton()}>\n            {intl.formatMessage(messages.executiveReportCardButton)}\n        </a>\n        { renderPDF && <DownloadButton\n            showButton={false}\n            label={isLoading ? intl.formatMessage(messages.loading) : intl.formatMessage(messages.executiveReportCardButton)}\n            asyncFunction={dataFetch}\n            buttonProps={{ variant: 'link', isInline: true }}\n            type={intl.formatMessage(messages.vulnerabilitiesHeader)}\n            fileName={`vulnerability_executive-report--${date}.pdf`}\n            allPagesHaveTitle={false}\n            onSuccess={() => {\n                dispatch(clearNotifications());\n                setRenderPDF(false);\n            }}\n        />\n        }\n    </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Split, SplitItem, Radio, Text, TextInput, Select, SelectOption } from '@patternfly/react-core';\nimport {\n    CVE_REPORT_FILTERS,\n    BUSINESS_RISK_OPTIONS,\n    STATUS_OPTIONS,\n    PUBLIC_DATE_OPTIONS,\n    IMPACT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nconst CustomReportFilter = ({ filterName, filterData, setFilterData }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnCheckboxChange = (filterName, optionName) => {\n        const optionId = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        if (!filterData[filterName].includes(optionId)) { // uncheck\n            setFilterData({ ...filterData, [filterName]: [...filterData[filterName], optionId] });\n        }\n        else { // check\n            let index = filterData[filterName].indexOf(optionId);\n            let temp = filterData[filterName].slice();\n            temp.splice(index, 1);\n            setFilterData({ ...filterData, [filterName]: temp });\n        }\n    };\n\n    const handleOnRadioChange = (filterName, optionName) => {\n        const optionValue = CVE_REPORT_FILTERS[filterName].items.find(item => item.label === optionName).value;\n        setFilterData({ ...filterData, [filterName]: optionValue });\n    };\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({\n            ...filterData, cvss_filter: {\n                ...filterData.cvss_filter,\n                [inputName]: value\n            }\n        });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const valueThis = +filterData.cvss_filter[inputName];\n        const valueMin = +filterData.cvss_filter.min;\n        const valueMax = +filterData.cvss_filter.max;\n\n        if (valueThis < 0 || valueThis > 10 || valueMin > valueMax) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const filterCheckboxes = (options, filterName) => (\n        <Select\n            variant=\"checkbox\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}: ${filterData[filterName].length === 0\n                || filterData[filterName].length === CVE_REPORT_FILTERS[filterName].items.length ? `All` :\n                filterData[filterName].map(id =>\n                    CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label).join(', ')}`}\n            direction=\"up\"\n            key={filterName}\n            width='auto'\n            className=\"pf-u-mr-sm pf-u-mb-sm custom-report-filter-select\"\n            onSelect={(event, optionName) => { handleOnCheckboxChange(filterName, optionName); }}\n            selections={filterData[filterName].map(\n                id => CVE_REPORT_FILTERS[filterName].items.find(item => item.value === id).label)}\n            isCheckboxSelectionBadgeHidden\n        >\n            {options.map(item =>\n                <SelectOption\n                    key={filterName + item.label}\n                    value={item.label}\n                />\n            )}\n        </Select>\n    );\n\n    const filterRadios = (options, filterName) => (\n        <Select\n            variant=\"single\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${CVE_REPORT_FILTERS[filterName].title}:\n                ${CVE_REPORT_FILTERS[filterName].items.find(item => item.value === filterData[filterName]).label}`}\n            direction=\"up\"\n            key={filterName}\n            onSelect={(event, optionName) => { handleOnRadioChange(filterName, optionName); }}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            width=\"auto\"\n        >\n            {options.map(item =>\n                <SelectOption\n                    width=\"100%\"\n                    key={filterName + item.label}\n                    value={item.label}\n                >\n                    <Radio\n                        aria-label=\"Select Input\"\n                        label={item.label}\n                        value={item.label}\n                        isChecked={filterData[filterName] === item.value}\n                    />\n                </SelectOption>\n            )}\n        </Select>\n    );\n\n    const filterCvssContent = (<Split className='pf-u-m-md'>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMinLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'min')}\n                validated={validateCvssInput('min')}\n                id=\"cvss-min\"\n                value={filterData.cvss_filter.min}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n        <SplitItem>\n            <br /><span className=\"pf-u-m-sm\">-</span>\n        </SplitItem>\n        <SplitItem>\n            <span style={{ fontSize: 14 }}>{intl.formatMessage(messages.customReportCvssMaxLabel)}</span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(v) => handleCvssInputChange(v, 'max')}\n                validated={validateCvssInput('max')}\n                id=\"cvss-max\"\n                value={filterData.cvss_filter.max}\n                style={{ width: '5em' }}\n            />\n        </SplitItem>\n    </Split>);\n\n    const filterCvssGetLabel = () => {\n        const min = +filterData.cvss_filter.min;\n        const max = +filterData.cvss_filter.max;\n\n        if (min === 0 && max === 10) {\n            return `${CVE_REPORT_FILTERS.cvss_filter.title}: ${intl.formatMessage(messages.optionsAll)}`;\n        }\n        else {\n            return (\n                <Text>\n                    {`${CVE_REPORT_FILTERS.cvss_filter.title}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}\n                    {(min < 0 || max > 10 || min > max) &&\n                        <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className=\"pf-u-ml-xs\" />}\n                </Text>\n            );\n        }\n    };\n\n    const filterCvssWrapper = (\n        <Select\n            variant=\"panel\"\n            aria-label=\"Select Input\"\n            customContent={filterCvssContent}\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={filterCvssGetLabel()}\n            className=\"pf-u-mr-sm pf-u-mb-sm\"\n            direction=\"up\"\n            width=\"auto\"\n        />\n    );\n\n    const filterContent = name => {\n        switch (name) {\n            case 'status_id':\n                return filterCheckboxes(STATUS_OPTIONS, 'status_id');\n            case 'business_risk_id':\n                return filterCheckboxes(BUSINESS_RISK_OPTIONS, 'business_risk_id');\n            case 'publish_date':\n                return filterRadios(PUBLIC_DATE_OPTIONS, 'publish_date');\n            case 'impact':\n                return filterCheckboxes(IMPACT_OPTIONS, 'impact');\n            case 'cvss_filter':\n                return filterCvssWrapper;\n            default:\n                return null;\n        }\n    };\n\n    return (filterContent(filterName));\n};\n\nCustomReportFilter.propTypes = {\n    filterName: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func\n};\n\nexport default CustomReportFilter;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea\n} from '@patternfly/react-core';\nimport CustomReportFilter from '../Reports/CustomReportFilter';\nimport { CVE_REPORT_FILTERS, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    setFilterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle\n\n}) => {\n\n    const activeFilters = ['publish_date', 'impact',  'cvss_filter', 'status_id', 'business_risk_id'];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.configModalTitle)}\n            id=\"custom-report-modal\"\n            isOpen={isModalOpen}\n            onClose={handleModalClose}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={handleModalClose}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                    />\n                    <Checkbox\n                        id=\"hasRule\"\n                        key=\"hasRule\"\n                        label={intl.formatMessage(messages.customOnlyCvesWithRulesLabel)}\n                        isChecked={filterData.security_rule === 'true'}\n                        onChange={(newValue) =>\n                            setFilterData({ ...filterData, security_rule: newValue ? 'true' : undefined })\n                        }\n                        className=\"pf-u-mt-md\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div style={{ columnCount: 2 }}>\n                        <Checkbox\n                            id=\"cve_id\"\n                            label=\"CVE ID\"\n                            isChecked\n                            isDisabled\n                            className=\"pf-u-mb-md\"\n                        />\n                        {\n                            Object.entries(CVE_REPORT_FILTERS).map(([key, value]) =>\n                                <Checkbox\n                                    id={key}\n                                    key={key}\n                                    label={value.title}\n                                    isChecked={columnsToInclude.includes(key)}\n                                    onChange={(newValue) =>\n                                        handleCheckboxChange(key, newValue)\n                                    }\n                                    className='pf-u-mb-md'\n                                />\n                            )\n                        }\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                    fieldId=\"horizontal-form-name\"\n                >\n                    <div className=\"custom-report-filter-wrapper\"> {/* Width of modal minus padding from both sides */}\n                        {activeFilters &&\n                            activeFilters.map((item) => {\n                                return (\n                                    <CustomReportFilter\n                                        key={item}\n                                        filterName={item}\n                                        filterData={filterData}\n                                        setFilterData={setFilterData}\n                                    />\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"horizontal-form-name\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"horizontal-form-name\"\n                        resizeOrientation='vertical'\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func\n};\n\nexport default ReportConfigModal;\n","import React,  { useState } from 'react';\nimport { Page, Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { constructFilterParameters, buildFilters } from '../Reports/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA, PDF_REPORT_USER_NOTE_MAX_LENGTH } from '../../../Helpers/constants';\nimport styles from './Common/styles';\n\nconst ReportsPage = () => {\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    return (\n        <Page>\n            <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false}/>\n            <Main>\n                <Grid hasGutter lg={3} md={4} sm={12}>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <ChartPieSolid style={styles.pieChartIcon}/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.executiveReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.executiveReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <DownloadExecutive/>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                    <GridItem>\n                        <Card className=\"report-card\">\n                            <CardTitle>\n                                <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\"/>\n                                <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                    {intl.formatMessage(messages.customReportCardTitle)}\n                                </span>\n                            </CardTitle>\n                            <CardBody>\n                                {intl.formatMessage(messages.customReportCardDescription)}\n                            </CardBody>\n                            <CardFooter>\n                                <a className=\"create-report\"\n                                    onClick={() => setModalOpen(true)}>{intl.formatMessage(messages.customReportCardButton)}\n                                </a>\n                            </CardFooter>\n                        </Card>\n                    </GridItem>\n                </Grid>\n            </Main>\n            <ReportConfigModal\n                isOpen={isModalOpen}\n                columnsToInclude={columnsToInclude}\n                setColumnsToInclude={setColumnsToInclude}\n                filterData={filterData}\n                userNotes={userNotes}\n                reportTitle={reportTitle}\n                setReportTitle={setReportTitle}\n                setUserNotes={setUserNotes}\n                setFilterData={setFilterData}\n                handleModalClose={(handleModalClose)}\n                handleDownloadButton={handleDownloadButton}\n            />\n\n            { downloadCVEReport && <DownloadCVEsReport\n                type='cves'\n                key=\"download\"\n                reportData={{\n                    header: columnsToInclude,\n                    reportTitle,\n                    userNotes\n                }}\n                showButton={false}\n                onSuccess={handleModalClose}\n                params={constructFilterParameters(filterData)}\n                filters={buildFilters(filterData)}\n                isReportDynamic\n                buttonProps={{\n                    isDisabled:\n                            +filterData.cvss_filter.min < 0 ||\n                            +filterData.cvss_filter.max > 10 ||\n                            +filterData.cvss_filter.min > +filterData.cvss_filter.max ||\n                            userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH,\n                    style: { marginRight: '0.5em' }\n                }}\n                label={messages.configModalExportReport}\n            />}\n        </Page>\n    );\n};\n\nexport default ReportsPage;\n"],"sourceRoot":""}