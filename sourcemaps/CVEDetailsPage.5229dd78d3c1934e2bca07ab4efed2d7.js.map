{"version":3,"file":"js/CVEDetailsPage.f2003570f6d2c1d26b90.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js"],"sourcesContent":["import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton size={SkeletonSize.lg} {...props} style={{ display: 'inline-block', ...props.style }}/>;\n            default:\n                return <Skeleton size={SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node\n};\n\nexport default WithLoader;\n","import { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    <StackItem className=\"pf-u-mt-sm\">\n                        <div>\n                            <span className=\"pf-u-mr-xs\">{intl.formatMessage(messages.publishDate)}:</span>\n                            <WithLoader\n                                isLoading={context.isLoading}\n                                variant={LoaderType.inlineSkeleton}\n                                style={{ width: '100px' }}\n                            >\n                                {publishDate}\n                            </WithLoader>\n                        </div>\n                    </StackItem>\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            <TextContent style={{ textAlign: 'justify' }}>\n                                <Text component={TextVariants.p}>{description}</Text>\n                            </TextContent>\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth={'100%'}\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label={'Metric breakdown'}\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color={'var(--pf-global--secondary-color--100)'}\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent={''} position=\"bottom\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack className=\"popover-content\">\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={brPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={statusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color={'var(--pf-global--primary-color--100)'} />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar cveAttributes={data.data} />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters = {changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","\nimport React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemsIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    filterRuleValues,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRowsRawData.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRowsRawData),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemsIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={remediableSystems.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_ABSENCE_OPTIONS\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nconst SystemsExposedTable = ({ intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport }) => {\n\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount);\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        onRefreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type={'systemsExposed'}\n                />\n        );\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {error?.hasError\n                    ? <ErrorHandler code={error?.errorCode} />\n                    : <InventoryTable\n                        disableDefaultColumns\n                        onLoad={({ mergeWithEntities }) => {\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                    {\n                                        page: Number(parameters.page || 1),\n                                        perPage: 20,\n                                        ...(parameters.sort && {\n                                            sortBy: {\n                                                key: parameters.sort.replace(/^-/, ''),\n                                                direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                            }\n                                        })\n                                    }\n                                )\n                            });\n                        }}\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            actionResolver: () => canEditPairStatus && totalItems &&\n                                systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                            variant: TableVariant.compact\n                        }}\n                        showTagModal\n                        isFullView\n                        ref={inventoryRef}\n                        autoRefresh\n                        key={'inventory'}\n                        customFilters={{\n                            vulnerabilityParams: {\n                                ...parameters\n                            }\n                        }}\n                        expandable={hasSecurityRule}\n                        columnsCounter={columnCounter}\n                        columns={defaultColumns => mergeColumns(defaultColumns)}\n                        getEntities={getEntities}\n                        hasCheckbox={totalItems !== 0}\n                        showActions={totalItems !== 0}\n                        onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                        hideFilters={{ all: true }}\n                        noSystemsTable={<EmptyStateNoSystems />}\n                    >\n                        <SystemsExposedTableToolbar\n                            rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                            parameters={parameters}\n                            cveName={cveName}\n                            selectedRows={selectedRows}\n                            selectedRowsCount={selectedRowsCount}\n                            selectedRowsRawData={selectedRowsRawData}\n                            cveStatusDetails={cveStatusDetails}\n                            filterRuleValues={filterRuleValues}\n                            methods={{\n                                downloadReport,\n                                apply,\n                                handleSelect,\n                                showStatusModal,\n                                setColumnModalOpen\n                            }}\n                            canEditPairStatus={canEditPairStatus}\n                            canExport={canExport}\n                        >\n                            {StatusModal && <StatusModal />}\n                            <ColumnManagementModal\n                                appliedColumns={columns}\n                                applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                isModalOpen={isColumnModalOpen}\n                                setModalOpen={setColumnModalOpen}\n                            />\n                        </SystemsExposedTableToolbar>\n                    </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nexport default injectIntl(\n    withRouter(\n        SystemsExposedTable\n    )\n);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport propTypes from 'prop-types';\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { withRouter } from 'react-router-dom';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = ({ match }) => {\n    const dispatch = useDispatch();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={() => {\n                        dispatch(fetchCveDetails(cveName));\n                        dispatch(clearInventoryStore());\n                    }}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    if (error?.hasError) {\n        return (\n            <React.Fragment>\n                <Header title={cveName} />\n                <ErrorHandler code={error?.errorCode} />\n            </React.Fragment>\n        );\n    } else {\n        return (\n            <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n                <Header\n                    title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                    actions={canEditStatusOrBusinessRisk && kebabItems}\n                    actionsOuiaId={'cve-actions'}\n                    breadcrumbs={[\n                        {\n                            title: PATHS.cvesPage.title,\n                            to: PATHS.cvesPage.to,\n                            loaded: true\n                        },\n                        {\n                            title: cveName,\n                            isActive: true,\n                            loaded: true\n                        }\n                    ]}\n                    labels={[\n                        <GroupedCVELabels\n                            key=\"labels\"\n                            hasExploit={!!details.payload.data?.attributes.known_exploit}\n                            hasRule={details.payload.data?.attributes.rules.length > 0}\n                        />\n                    ]}\n                >\n                    <CVEDetailsPageSummary\n                        changeExposedSystemsParameters={changeExposedSystemsParameters}\n                        data={cveDetails}\n                    />\n                    <StatusModal />\n                    <BusinessModal />\n                </Header>\n                <Main>\n                    {\n                        canReadVulnerabilityResults ? (\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            />\n                        ) :\n                            <NotAuthorized />\n                    }\n                </Main>\n            </CVEPageContext.Provider>\n        );\n    }\n};\n\nCVEDetailsPage.propTypes = {\n    match: propTypes.object\n};\n\nexport default withRouter(CVEDetailsPage);\n"],"names":["LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","variant","children","props","Spinner","centered","SkeletonTable","TableVariant","Skeleton","shape","size","SkeletonSize","style","display","propTypes","Object","keys","CVEDetailsPageDescription","cveAttributes","intl","publishDate","public_date","description","link","rh_link","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","className","formatMessage","messages","width","height","TextContent","textAlign","Text","component","TextVariants","injectIntl","V3names","AV","name","values","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","split","forEach","curr","key","val","value","cvssVersion","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","gridBreakPoint","cells","rows","entries","Label","isLarge","color","score","substring","indexOf","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","map","item","STATUS_OPTIONS","toString","label","brPopoverContent","statusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","concat","sort","a","b","systems_affected","rule","index","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","onClick","event","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","text","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","defaultProps","PropTypes","KnownExploitSummary","useIntl","KnownExploitLabel","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","selectedRowsRawData","filterRuleValues","parameters","methods","canEditPairStatus","canExport","apply","showStatusModal","handleSelect","downloadReport","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","isDisabled","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","rhel_version","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemsIdsByCve","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","length","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","items","securityRuleFilter","isDynamic","dropdownItems","RULE_ABSENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","hasSecurityRule","inventoryRef","React","useState","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","useSelector","entities","shallowEqual","total","error","loaded","CVEDetailsPageStore","columns","params","useEffect","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","current","onRefreshData","page","fetchCveDetails","inventoryList","type","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","isOpen","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","withRouter","CVEDetailsPage","useRbac","PERMISSIONS","canEditStatusOrBusinessRisk","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","clearCveStore","status_id","justification","exposed_systems_count","kebabItems","kebabItemEditBusinessRisk","BusinessRiskModal","open","business_risk_id","kebabItemEditStatus","CveStatusModal","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","isActive","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main"],"sourceRoot":""}