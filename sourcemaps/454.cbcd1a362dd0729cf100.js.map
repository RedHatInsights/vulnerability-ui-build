{"version":3,"file":"js/454.deba67dd8e0e2cb4364b.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/CustomFilters/CvssCustomFilter.js","webpack:///./src/Components/PresentationalComponents/Snippets/CSAwLabel.js","webpack:///./src/Components/PresentationalComponents/Snippets/Label.js","webpack:///./src/Components/SmartComponents/Reports/Common/styles.js","webpack:///./src/Components/SmartComponents/Reports/ReportsHelper.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/MiscHelper.js","webpack:///./src/Components/PresentationalComponents/StatusColumn/StatusColumn.js","webpack:///./src/Components/PresentationalComponents/TableColumns/SystemNameColumn.js","webpack:///./src/Components/PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/CustomFilters/RadioCustomFilter.js","webpack:///./src/Helpers/constants.js","webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/reducersHelper.js","webpack:///./src/Utilities/IntlProvider.js","webpack:///./src/Utilities/ReducerRegistry.js","webpack:///./src/Utilities/interceptors.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { FormattedMessage } from 'react-intl';\nimport { ADVISORY_PATH } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { createRHDBLink } from '../../../Helpers/CVEHelper';\n\nconst AdvisoryColumn = ({ cve, advisoriesList }) => {\n    return (<Fragment>\n        {\n            advisoriesList?.length > 0\n                ? (\n                    advisoriesList.map((advisory, _i) =>\n                        <a\n                            key={_i}\n                            href={`${ADVISORY_PATH}/${advisory}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            {advisory}\n                        </a>\n                    ).reduce((prev, curr) => [prev, ', ', curr])\n                ) : (\n                    <Fragment>\n                        <FormattedMessage {...messages.notAvailable} />\n                        <Tooltip exitDelay={2000} appendTo={document.querySelector('.vulnerability')} content={\n                            <FormattedMessage\n                                {...messages.advisoryTooltip}\n                                values={\n                                    {\n                                        link: createRHDBLink(\n                                            cve,\n                                            messages.rhCVEdb,\n                                            { className: 'toolip-link--embeded' }\n                                        )\n                                    }\n                                }\n                            />\n                        }>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                            />\n                        </Tooltip>\n                    </Fragment>\n                )\n        }\n    </Fragment>\n    );\n};\n\nAdvisoryColumn.propTypes = {\n    advisoriesList: PropType.array,\n    cve: PropType.string\n};\n\nexport default AdvisoryColumn;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { NotAuthorized as FECNotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { LockIcon } from '@patternfly/react-icons';\nimport { intl } from '../../../Utilities/IntlProvider';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} values={{ link: (\n                            <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                            </a>\n                        ) }} />\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} values={{ link: (\n                            <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                            </a>\n                        ) }}/>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} values={{ link: (\n                            <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                            </a>\n                        ) }}/>\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems} values={{ link: (\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                        </a>\n                    ) }} />\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const NotAuthorized = () => (\n    <FECNotAuthorized\n        icon={LockIcon}\n        title={intl.formatMessage(messages.notAuthorizedTitle)}\n        description={intl.formatMessage(messages.notAuthorizedDescription)}\n        prevPageButtonText={intl.formatMessage(messages.returnToPreviousPage)}\n        toLandingPageText={intl.formatMessage(messages.returnToLandingPage)}\n    />\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Split, SplitItem, Text, TextInput, Select } from '@patternfly/react-core';\nimport messages from '../../../../Messages';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\n\nexport const isCvssRangeValid = (min, max) => {\n    return min >= 0 && max <= 10 && min <= max && !isNaN(min) && !isNaN(max);\n};\n\nconst CvssCustomFilter = ({ filterData, setFilterData, selectProps, filterName }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleCvssInputChange = (value, inputName) => {\n        setFilterData({\n            ...filterData, cvss_filter: {\n                ...filterData.cvss_filter,\n                [inputName]: parseFloat(value)\n            }\n        });\n    };\n\n    const validateCvssInput = (inputName) => {\n        const currentValue = filterData.cvss_filter[inputName];\n        const minValue = filterData.cvss_filter.from;\n        const maxValue = filterData.cvss_filter.to;\n\n        if (currentValue < 0 || currentValue > 10 || minValue > maxValue || isNaN(currentValue)) {\n            return 'error';\n        }\n\n        return 'default';\n    };\n\n    const filterCvssContent = (<Split className=\"pf-u-m-md\">\n        <SplitItem>\n            <span style={{ fontSize: 'var(--pf-global--FontSize--sm)' }}>\n                {intl.formatMessage(messages.customReportCvssMinLabel)}\n            </span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(value) => handleCvssInputChange(value, 'from')}\n                validated={validateCvssInput('from')}\n                id=\"cvss-min\"\n                className=\"cvss-input\"\n                value={filterData.cvss_filter.from}\n            />\n        </SplitItem>\n        <SplitItem>\n            <br /><span className=\"pf-u-m-sm\">-</span>\n        </SplitItem>\n        <SplitItem>\n            <span style={{ fontSize: 'var(--pf-global--FontSize--sm)' }}>\n                {intl.formatMessage(messages.customReportCvssMaxLabel)}\n            </span><br />\n            <TextInput\n                type=\"number\"\n                onChange={(value) => handleCvssInputChange(value, 'to')}\n                validated={validateCvssInput('to')}\n                id=\"cvss-max\"\n                className=\"cvss-input\"\n                value={filterData.cvss_filter.to}\n            />\n        </SplitItem>\n    </Split>);\n\n    const filterCvssGetLabel = () => {\n        const min = filterData.cvss_filter.from;\n        const max = filterData.cvss_filter.to;\n\n        if (min === 0 && max === 10) {\n            return `${filterName}: ${intl.formatMessage(messages.optionsAll)}`;\n        }\n\n        return (\n            <Text>\n                {`${filterName}: ${parseFloat(min).toFixed(1)} - ${parseFloat(max).toFixed(1)}`}\n                { isCvssRangeValid(min, max) ||\n                    <ExclamationCircleIcon color={'var(--pf-global--danger-color--100)'} className=\"pf-u-ml-xs\" />}\n            </Text>\n        );\n    };\n\n    return (\n        <Select\n            variant=\"panel\"\n            aria-label=\"Select Input\"\n            customContent={filterCvssContent}\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={filterCvssGetLabel()}\n            key=\"cvss-filter\"\n            width=\"auto\"\n            {... selectProps}\n        />\n    );\n};\n\nCvssCustomFilter.propTypes = {\n    filterName: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    selectProps: propTypes.object\n};\n\nexport default CvssCustomFilter;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst CSAwLabel = ({ style, className }) => (\n    <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n        <Label color=\"blue\" style={{ ...style }} className={['cve-labels', className]}>\n            <FormattedMessage {...messages.securityRuleLabel} />\n        </Label>\n    </Tooltip>\n);\n\nCSAwLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string\n};\n\nexport default CSAwLabel;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport './Label.scss';\n\nconst Label = ({ children, className = '', style, isLarge = false, isInline = false }) => {\n    const styleProp = { ...(isLarge && { fontSize: 'medium' }),  ...(isInline || { display: 'block' }), ...style };\n\n    return (\n        <span className={`vuln-label ${className}`} style={styleProp}>\n            {children}\n        </span>);\n};\n\nLabel.propTypes = {\n    children: propTypes.any,\n    className: propTypes.string,\n    style: propTypes.object,\n    isLarge: propTypes.bool,\n    isInline: propTypes.bool\n};\n\nexport default Label;\n","/* eslint-disable camelcase */\nimport { StyleSheet } from '@react-pdf/renderer';\n\nexport default StyleSheet.create({\n    mb2: {\n        marginBottom: '2px'\n    },\n    mb8: {\n        marginBottom: '8px'\n    },\n    mb16: {\n        marginBottom: '16px'\n    },\n    mb24: {\n        marginBottom: '24px'\n    },\n    mt16: {\n        marginTop: '16px'\n    },\n    bold: {\n        fontWeight: 'var(--pf-global--FontWeight--bold)'\n    },\n    italic: {\n        fontStyle: 'italic'\n    },\n    sectionTitle: {\n        fontSize: 10\n    },\n    pieChartIcon: {\n        verticalAlign: '-0.25rem'\n    },\n    cardTitle: {\n        verticalAlign: '0.3rem'\n    },\n    collumns: {\n        columnCount: 2,\n        paddingTop: '16px',\n        marginLeft: '8px'\n    },\n    userNotes: {\n        backgroundColor: '#F0F0F0',\n        padding: '8px',\n        marginTop: '8px'\n    },\n    userNotesTitle: {\n        marginBottom: '4px'\n    },\n    generated: {\n        color: '#C9190B'\n    },\n    link: {\n        color: '#0066CC',\n        textDecoration: 'none'\n    },\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2\n    },\n    header: {\n        fontSize: 20,\n        color: '#C9190B'\n    },\n    headerCell: {\n        textAlign: 'left',\n        color: '#6A6E73',\n        fontWeight: 'var(--pf-global--FontWeight--bold)',\n        fontSize: 8\n    },\n    cveCell: {\n        width: '72px'\n    },\n    systemCell: {\n        width: '100px'\n    },\n    systemNameCell: {\n        width: '300px'\n    },\n    footer: {\n        fontSize: 8,\n        color: '#6A6E73'\n    },\n    counter: {\n        color: '#C9190B',\n        fontSize: 20\n    },\n    counterLabel: {\n        fontSize: 9\n    },\n    counterPanel: {\n        flex: 6\n    },\n    labelsWrapper: {\n        marginBottom: '2px',\n        marginTop: '0',\n        flexDirection: 'row'\n    },\n    label: {\n        marginRight: '8px'\n    },\n    smallText: {\n        top: 2,\n        fontSize: 8\n    }\n});\n","import React from 'react';\nimport { CVE_REPORT_FILTERS,\n    PUBLIC_DATE_OPTIONS,\n    RULE_PRESENCE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    PDF_REPORT_PER_PAGE,\n    KNOWN_EXPLOIT_FILTER_OPTIONS\n} from '../../../Helpers/constants';\nimport { formatDate } from '../../../Helpers/MiscHelper';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './Common/styles';\n\nexport const buildFilters = filterData => {\n    let newValues = {};\n    Object.entries(filterData).forEach(([key, value]) => {\n        // if the filters value is default don't include it\n        if (DEFAULT_FILTER_DATA[key] === value\n            || value.length === 0\n            || (Array.isArray(value) && value.length > 0 && value.length === CVE_REPORT_FILTERS[key].items?.length)\n            || (key === 'cvss_filter' && value.from === 0 && value.to === 10)) {\n            return;\n        }\n\n        newValues[key] = { filter: CVE_REPORT_FILTERS[key].title };\n\n        switch (key) {\n            case 'status_id':\n            case 'business_risk_id':\n            case 'impact': {\n                const wordArray = value && Array.from(value).map(subvalue =>\n                    CVE_REPORT_FILTERS[key].items.find(val => val.value === subvalue)\n                        ? CVE_REPORT_FILTERS[key].items.find(val => val.value === subvalue).label\n                        : '');\n                newValues[key].values = wordArray.join(', ');\n                break;\n            }\n\n            case 'publish_date':\n                newValues[key].values = PUBLIC_DATE_OPTIONS.find(val => val.value === value).timespan_label;\n                break;\n\n            case 'rule_presence':\n                newValues[key].values = value.map(\n                    checkedValue => RULE_PRESENCE_OPTIONS.find(({ value }) => value === checkedValue).label\n                ).join(', ');\n                break;\n            case 'known_exploit':\n                newValues[key].values = value.map(\n                    checkedValue => KNOWN_EXPLOIT_FILTER_OPTIONS.find(({ value }) => value === checkedValue).label\n                ).join(', ');\n                break;\n\n            case 'cvss_filter':\n                newValues[key].values = value.from.toFixed(1) + ' - ' + value.to.toFixed(1);\n                break;\n\n            default:\n                newValues[key].values = value;\n        }\n    });\n\n    return newValues;\n};\n\nexport function constructFilterParameters(filterParams) {\n    // construct publish date\n    let publicEntry = PUBLIC_DATE_OPTIONS.find(item => item.value === filterParams.publish_date);\n    let from = undefined;\n    let to = undefined;\n\n    if (typeof publicEntry !== 'undefined') {\n        from = publicEntry.from && formatDate(publicEntry.from);\n        to = publicEntry.to && formatDate(publicEntry.to);\n    }\n\n    // FIXME contruct should be dynamic\n    // construct rest of params\n    let newParams =  {\n        status_id: filterParams.status_id.toString(),\n        business_risk_id: filterParams.business_risk_id.toString(),\n        impact: filterParams.impact.toString(),\n        cvss_from: filterParams.cvss_filter.from,\n        cvss_to: filterParams.cvss_filter.to,\n        publish_date: filterParams.publish_date,\n        public_from: from,\n        public_to: to,\n        rule_presence: filterParams.rule_presence.toString(),\n        known_exploit: filterParams.known_exploit.toString()\n    };\n\n    return newParams;\n}\n\nexport const intlFormatWithBold = (msg, params) => {\n    return intl.formatMessage(msg, { ...params, b: (...chunks) => <Text style={styles.bold}>{chunks}</Text> });\n};\n\nexport const firstPagePDFLength = (data, params) => {\n    let { firstPageWithNote, firstPageWithoutNote } = PDF_REPORT_PER_PAGE;\n    return data.userNotes || params.rule_presence === 'true' ? firstPageWithNote : firstPageWithoutNote;\n};\n\nexport const otherPagesPDFLength = (data, params) => {\n    let { otherPages, otherPagesWithLabels } = PDF_REPORT_PER_PAGE;\n\n    return params.rule_presence === 'true' ? otherPagesWithLabels : otherPages;\n};\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsReportCard } from '@redhat-cloud-services/frontend-components-inventory-insights';\nimport CSAwLabel from '../../PresentationalComponents/Snippets/CSAwLabel';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport { RH_KB_URL } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent>\n                        <Text component={TextVariants.h3} className=\"pf-u-pb-lg\">\n                            <Label isInline>\n                                <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard\n                        report={rule}\n                        kbaLoading={false}\n                        kbaDetail={{ view_uri: `${RH_KB_URL}/${rule.rule.node_id}` }}\n                    />\n                </Fragment>\n            }\n        </Fragment>\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }),\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent>\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} expandedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, expandedRows }, cve) => {\n    if (isLoading) {\n        return { data: [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n\n    const cvesCount = data && data.length;\n    const tableRows = data?.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        cve,\n        patchAccess: meta.patch_access || false,\n        isOpen: expandedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount  },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n\n    if (!isLoading && cves?.payload?.data) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis, messages.RHDBLink),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules,\n            celebrity_name: data.attributes.celebrity_name,\n            known_exploit: data.attributes.known_exploit\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item, link = messages.RHDBLink, props) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\"  href={'https://access.redhat.com/security/cve/' + item} {...props}>\n            {<FormattedMessage {...link} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification,\n                            exposed_systems_count: rowData.exposed_systems_count\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (rowData, optOutFunc) => [\n    {\n        title: (\n            rowData.opt_out\n                ? <FormattedMessage {...messages.systemKebabIncludeAnalysis} values={{ count: 1 }}/>\n                : <FormattedMessage {...messages.systemKebabExcludeAnalysis} values={{ count: 1 }} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOutFunc([rowData.id], !rowData.opt_out);\n        }\n    }\n];\n","import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport findIndex from 'lodash/findIndex';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { impactList, PUBLIC_DATE_OPTIONS } from './constants';\nimport qs from 'query-string';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\n\nexport const dataShape = propTypes.shape({\n    data: propTypes.oneOfType([propTypes.object, propTypes.array]),\n    meta: propTypes.object,\n    isLoading: propTypes.bool\n});\n\n/**\n * Based on the  allowedParams it will construct the arguments for the API call\n * which is defined in the vulnerabilities-client. vulnerabilities-client is written is typescript\n * so we need to define and pass every single parameter. Order in allowedParams is important\n *\n * @param {Object} apiProps\n * @param {Array} allowedParams - order should align with the params in the vulnerabilities-client\n */\nexport function constructParameters(apiProps, allowedParams) {\n    if (apiProps) {\n        Object.keys(apiProps).forEach(\n            key => (\n                apiProps[key] === undefined\n                || apiProps[key] === ''\n            )\n            && delete apiProps[key]\n        );\n\n        const params = allowedParams.map(item => apiProps[item]);\n\n        return params;\n    }\n\n    return [];\n}\n\n// TODO DRY:similar to constructParameters\nexport function constructURLParameters(urlParams, allowedParams) {\n    if (urlParams) {\n        const params = { ...urlParams };\n        Object.keys(urlParams).forEach(\n            key => (\n                params[key] === undefined\n                || params[key] === ''\n                || !allowedParams.includes(key)\n                || params[key] === false\n            )\n            && delete params[key]\n\n        );\n        return params;\n    }\n}\n\nexport function formatDate(date = new Date(), includeTime = false) {\n    const prepend = (number) => `${`${number}`.length === 1 ? '0' : ''}${number}`;\n    const toFormat = new Date(date);\n\n    if (toFormat instanceof Date && !isNaN(toFormat)) {\n        const year = toFormat.getFullYear();\n        const month = toFormat.getMonth() + 1; // month is zero indexed\n        const day = toFormat.getDate();\n        const hour = toFormat.getUTCHours();\n        const minute = toFormat.getUTCMinutes();\n\n        return includeTime\n            ? `${year}-${prepend(month)}-${prepend(day)} ${prepend(hour)}:${prepend(minute)} UTC`\n            : `${year}-${prepend(month)}-${prepend(day)}`;\n    }\n\n    return toFormat;\n}\n\n/**\n * Contructs the filters which have more than one parameter that needs to be passed\n * and resets all the parameteres when it's needed\n *\n * @param {Object} filterParams\n * @return {Object}\n */\nexport function constructFilterParameters(filterParams) {\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'publish_date')) {\n        let publicEntry = PUBLIC_DATE_OPTIONS.find(item => item.value === filterParams.publish_date);\n\n        if (typeof publicEntry !== 'undefined') {\n            filterParams.public_from = publicEntry.from && formatDate(publicEntry.from);\n            filterParams.public_to = publicEntry.to && formatDate(publicEntry.to);\n        } else {\n            filterParams.public_from = undefined;\n            filterParams.public_to = undefined;\n            filterParams.publish_date = undefined;\n        }\n    }\n\n    return filterParams;\n}\n\nexport function getImpactDetails(impact) {\n    if (Object.keys(impactList).includes(impact)) {\n        return {\n            title: impactList[impact].title,\n            color: impactList[impact].color,\n            text: impactList[impact].text,\n            titleContent: (\n                <SecurityIcon size=\"lg\" />\n            )\n        };\n    } else {\n        return {\n            title: 'Unknown',\n            color: 'black',\n            text: '',\n            titleContent: (\n                <UnknownIcon size=\"lg\" />\n            )\n        };\n    }\n}\n\nexport const createSortBy = (header, value) => {\n    if (value) {\n        let direction = value.indexOf('-') === 0 ? SortByDirection.desc : SortByDirection.asc;\n        value = value.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === value);\n        let sort = {\n            index,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const handleSortColumn = (key, direction, header, currentSort, apply) => {\n    let columnName = header[key].key;\n    const useDefault = currentSort && currentSort.substr(1) !== columnName;\n    if (direction === SortByDirection.desc || useDefault) {\n        columnName = '-' + columnName;\n    }\n\n    apply({ sort: columnName });\n};\n\nexport const updateStateSet = (stateSet, names, value) => {\n    [].concat(names).forEach(name => {\n        value ? stateSet.add(name) : stateSet.delete(name);\n    });\n    return stateSet;\n};\n\nexport const useUrlParams = (allowedParams) => {\n    const url = new URL(window.location);\n    const urlParams = qs.parse(url.search);\n\n    const setUrlParams = (parameters) => {\n        const searchParams = qs.stringify(constructURLParameters(parameters, allowedParams));\n        window.history.replaceState(null, null, `${url.origin}${url.pathname}?${searchParams}`);\n    };\n\n    return [urlParams, setUrlParams];\n};\n\nexport const updateRef = (meta, apply) => {\n    const pages = parseInt(meta.pages);\n    const page = parseInt(meta.page);\n    const cvesCount = parseInt(meta.cvesCount);\n    const goTo = (pages === page && page > 1 && cvesCount === 1) ? (pages - 1) : page;\n\n    apply({ page: goTo });\n};\n\nexport const mountWithIntl = (Component) => {\n    const wrapper = mount(Component, {\n        wrappingComponent: IntlProvider\n    });\n    const provider = wrapper.getWrappingComponent();\n    provider.setProps({ locale: 'en' });\n\n    return wrapper;\n};\n\nexport const shallowWithIntl = (Component) => {\n    const wrapper = shallow(Component, {\n        wrappingComponent: IntlProvider\n    });\n    const provider = wrapper.getWrappingComponent();\n    provider.setProps({ locale: 'en' });\n\n    return wrapper;\n};\n\nexport const insertIf = (condition, ...elements) => {\n    return condition ? elements : [];\n};\n\nexport const chunkArray = (array, chunkSize, hasRule) => {\n    const chunks = [];\n    let labels = [];\n    while (array.length > 0) {\n        labels = hasRule && [...array].slice(0, chunkSize).reduce((total, cve) => total + (cve.attributes.rules.length > 0), 0);\n        const chunk = array.splice(0, chunkSize - labels);\n        chunks.push(chunk);\n    }\n\n    return chunks;\n};\n\nexport const mergeObjectPropertyBy = (obj, mergeProperty) => {\n    const grouped = obj.reduce((prev, issue) => {\n        let key = issue.id;\n        if (prev[key]) {\n            prev[key] = {\n                ...issue,\n                [mergeProperty]: [\n                    ...prev[key][mergeProperty],\n                    ...issue[mergeProperty]\n                ]\n            };\n        } else {\n            prev[key] = issue;\n        }\n\n        return prev;\n    }, {});\n\n    return Object.values(grouped);\n};\n","import React from 'react';\nimport PropType from 'prop-types';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\n\nconst StatusColumn = ({ cveStatusId, systemStatusId }) => {\n    const status = STATUS_OPTIONS.find(status => parseInt(status.value) === systemStatusId);\n    return (\n        <span>\n            {cveStatusId !== systemStatusId  &&\n                <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                    <ServerAltIcon className=\"pf-u-mr-xs\"/>\n                </Tooltip>\n            }\n            {\n                status && status.label\n            }\n        </span>\n    );\n};\n\nStatusColumn.defautProps = {\n    systemStatusId: null\n};\n\nStatusColumn.propTypes = {\n    cveStatusId: PropType.number,\n    systemStatusId: PropType.number\n};\n\nexport default StatusColumn;\n","import React from 'react';\nimport PropType from 'prop-types';\nimport messages from '../../../Messages';\nimport { Label as Pflabel } from '@patternfly/react-core/dist/esm/components/Label/index';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst SystemNameColumn = ({ item, optOut }) => {\n    return (\n        <span>\n            {typeof item.title === 'undefined' ? item : item.title}\n            { optOut && <Pflabel>{intl.formatMessage(messages.systemsTableExcluded)}</Pflabel>}\n        </span>\n    );\n};\n\nSystemNameColumn.propTypes = {\n    item: PropType.object,\n    optOut: PropType.bool\n};\n\nexport default SystemNameColumn;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst CheckboxCustomFilter = ({ filterData, setFilterData, selectProps, options, filterName, filterId }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnCheckboxChange = (filterId, optionName) => {\n        const optionId = options.find(item => item.label === optionName).value;\n\n        if (!filterData[filterId].includes(optionId)) { // checkbox got checked, add value\n            setFilterData({ ...filterData, [filterId]: [...filterData[filterId], optionId] });\n        }\n        else { // check got unchecked, remove value\n            let optionIndex = filterData[filterId].indexOf(optionId);\n            let options = filterData[filterId].slice();\n            options.splice(optionIndex, 1);\n            setFilterData({ ...filterData, [filterId]: options });\n        }\n    };\n\n    const getPlaceholderText = () => {\n        const itemsString = filterData[filterId].map(id => options.find(item => item.value === id).label).join(', ');\n\n        return `${filterName}: ${filterData[filterId].length === 0 || filterData[filterId].length === options.length\n            ? intl.formatMessage(messages.optionsAll) : itemsString}`;\n    };\n\n    return (\n        <Select\n            variant=\"checkbox\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={getPlaceholderText()}\n            key={filterId}\n            width=\"auto\"\n            onSelect={(event, optionName) => { handleOnCheckboxChange(filterId, optionName); }}\n            selections={filterData[filterId].map(\n                id => options.find(item => item.value === id).label)}\n            isCheckboxSelectionBadgeHidden\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption\n                    key={filterId + item.label}\n                    value={item.label}\n                />\n            )}\n        </Select>\n    );\n};\n\nCheckboxCustomFilter.propTypes = {\n    filterName: propTypes.string,\n    filterId: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default CheckboxCustomFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption, Radio } from '@patternfly/react-core';\n\nconst RadioCustomFilter = ({ filterData, setFilterData, selectProps, options, filterId, filterName }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnRadioChange = (filterId, optionName) => {\n        const optionValue = options.find(item => item.label === optionName).value;\n        setFilterData({ ...filterData, [filterId]: optionValue });\n    };\n\n    return (\n        <Select\n            variant=\"single\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={`${filterName}: ${options.find(item => item.value === filterData[filterId])?.label}`}\n            key={filterId}\n            onSelect={(event, optionName) => { handleOnRadioChange(filterId, optionName); }}\n            width=\"auto\"\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption\n                    width=\"100%\"\n                    key={filterId + item.label}\n                    value={item.label}\n                >\n                    <Radio\n                        aria-label=\"Select Input\"\n                        label={item.label}\n                        value={item.label}\n                        isChecked={filterData[filterId] === item.value}\n                        id={`custom-filter-${filterId}-${item.value}`}\n                    />\n                </SelectOption>\n            )}\n        </Select>\n    );\n};\n\nRadioCustomFilter.propTypes = {\n    filterName: propTypes.string,\n    filterId: propTypes.string,\n    filterData: propTypes.object,\n    setFilterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default RadioCustomFilter;\n","import React from 'react';\nimport { classNames, expandable, sortable, cellWidth, nowrap, wrappable } from '@patternfly/react-table';\nimport StatusColumn from '../Components/PresentationalComponents/StatusColumn/StatusColumn';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport SystemNameColumn from '../Components/PresentationalComponents/TableColumns/SystemNameColumn';\nimport CvssCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\nimport CheckboxCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\nimport RadioCustomFilter from '../Components/PresentationalComponents/Filters/CustomFilters/RadioCustomFilter';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\nimport { intlFormatWithBold } from '../Components/SmartComponents/Reports/ReportsHelper';\nimport { Label as Pflabel, Tooltip } from '@patternfly/react-core';\nimport './severityLabels.scss';\n\nexport const DEFAULT_PAGE_SIZE = 20;\nexport const RH_KB_URL = 'https://access.redhat.com/node';\nexport const CVES_PATH = `${document.baseURI}insights/vulnerability/cves`;\nexport const ADVISORY_PATH = `${document.baseURI}insights/patch/advisories`;\n\nexport const impactTextList = {\n    low: intl.formatMessage(messages.impactTextListLow),\n    moderate: intl.formatMessage(messages.impactTextListModerate),\n    important: intl.formatMessage(messages.impactTextListImportant),\n    critical: intl.formatMessage(messages.impactTextListCritical)\n};\n\nexport const PATHS = {\n    home: {\n        title: 'Vulnerability',\n        to: '/cves'\n    },\n    cvesPage: {\n        title: 'CVEs',\n        to: '/cves'\n    },\n    cveDetailsPage: {\n        title: 'CVE',\n        to: '/cves/:cve'\n    },\n    systemsPage: {\n        title: 'Systems',\n        to: '/systems'\n    },\n    systemDetailsPage: {\n        title: 'Inventory Detail',\n        to: '/systems/:inventoryId'\n    },\n    cvepagePath: {\n        title: 'CVE Page',\n        to: '/cves/:cve/:inventoryId'\n    },\n    upgrade: {\n        title: 'Upgrade',\n        to: '/upgrade'\n    },\n    reports: {\n        title: 'Reports',\n        to: '/reports'\n    }\n};\n\nexport const impactList = {\n    Critical: {\n        title: intl.formatMessage(messages.impactListCritical),\n        color: 'var(--pf-global--danger-color--100)',\n        text: impactTextList.critical\n    },\n    Important: {\n        title: intl.formatMessage(messages.impactListImportant),\n        color: 'var(--pf-global--palette--orange-400)',\n        text: impactTextList.important\n    },\n    Moderate: {\n        title: intl.formatMessage(messages.impactListModerate),\n        color: 'var(--pf-global--warning-color--200)',\n        text: impactTextList.moderate\n    },\n    Low: {\n        title: intl.formatMessage(messages.impactListLow),\n        color: 'var(--pf-global--default-color--300)',\n        text: impactTextList.low\n    }\n};\n\n// Read-only mode notification text\nexport const ReadOnlyNotification = {\n    title: intl.formatMessage(messages.readOnlyNotificationTitle),\n    detail: intl.formatMessage(messages.readOnlyNotificationBody)\n};\n\nexport const RULE_PRESENCE_OPTIONS = [\n    { value: 'true', label: intl.formatMessage(messages.withSecurityRule) },\n    { value: 'false', label: intl.formatMessage(messages.withoutSecurityRule) }\n];\n\n// NOTE value is passed as string cause there is a bug in ConditionalFilter\n// when you pass boolean (true, false) onChange returns 1 instead of false\nexport const KNOWN_EXPLOIT_FILTER_OPTIONS = [\n    {\n        value: 'true',\n        label: intl.formatMessage(messages.knownExploit)\n    },\n    {\n        value: 'false',\n        label: intl.formatMessage(messages.noKnownExploit)\n    }\n];\n\nexport const AFFECTING_FILTER_OPTIONS = [\n    {\n        value: 'true',\n        label: intl.formatMessage(messages.systemsAffected)\n    },\n    {\n        value: 'false',\n        label: intl.formatMessage(messages.systemsNotAffected)\n    }\n];\n\nexport const EXCLUDED_FILTER_OPTIONS = [\n    {\n        value: 'false',\n        label: intl.formatMessage(messages.systemsIncluded)\n    },\n    {\n        value: 'true',\n        label: intl.formatMessage(messages.systemsExcluded)\n    }\n];\n\nexport const subtractDays = (toSubtract, currDate = new Date()) => {\n    return currDate.setDate(currDate.getDate() - toSubtract);\n};\n\nexport const subtractYears = (toSubtract, currDate = new Date()) => {\n    return currDate.setFullYear(currDate.getFullYear() - toSubtract);\n};\n\n//Public date labels to value\nexport const PUBLIC_DATE_OPTIONS = [\n    {\n        value: 'all',\n        label: intl.formatMessage(messages.optionsAll),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanAnytime)\n    },\n    {\n        value: 'last7',\n        label: intl.formatMessage(messages.lastxdays, { days: 7 }),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanWithinLastXDays, { count: 7 }),\n        from: subtractDays(7)\n    },\n    {\n        value: 'last30',\n        label: intl.formatMessage(messages.lastxdays, { days: 30 }),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanWithinLastXDays, { count: 30 }),\n        from: subtractDays(30)\n    },\n    {\n        value: 'last90',\n        label: intl.formatMessage(messages.lastxdays, { days: 90 }),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanWithinLastXDays, { count: 90 }),\n        from: subtractDays(90)\n    },\n    {\n        value: 'lastYear',\n        label: intl.formatMessage(messages.lastYear),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanWithinLastYear),\n        from: subtractYears(1)\n    },\n    {\n        value: 'MoreThanYear',\n        label: intl.formatMessage(messages.moreThanYear),\n        timespan_label: intlFormatWithBold(messages.customReportTimespanMoreThanOneYear),\n        to: subtractYears(1)\n    }\n];\n\nexport const IMPACT_OPTIONS = [\n    {\n        label: intl.formatMessage(messages.impactListCritical),\n        value: '7',\n        hasIcon: true,\n        iconColor: 'var(--pf-global--danger-color--100)'\n    },\n    {\n        label: intl.formatMessage(messages.impactListImportant),\n        value: '5',\n        hasIcon: true,\n        iconColor: 'var(--pf-global--palette--orange-300)'\n    },\n    {\n        label: intl.formatMessage(messages.impactListModerate),\n        value: '4',\n        hasIcon: true,\n        iconColor: 'var(--pf-global--warning-color--100)'\n    },\n    {\n        label: intl.formatMessage(messages.impactListLow),\n        value: '2',\n        hasIcon: true,\n        iconColor: 'var(--pf-global--Color--200)'\n    },\n    {\n        label: intl.formatMessage(messages.impactListUnknown),\n        value: '1',\n        hasIcon: false\n    }\n];\n\nexport const STATUS_OPTIONS = [\n    { label: intl.formatMessage(messages.notReviewed), value: '0' },\n    { label: intl.formatMessage(messages.inReview), value: '1' },\n    { label: intl.formatMessage(messages.onHold), value: '2' },\n    { label: intl.formatMessage(messages.scheduledPatch), value: '3' },\n    { label: intl.formatMessage(messages.resolved), value: '4' },\n    { label: intl.formatMessage(messages.noAction), value: '5' },\n    { label: intl.formatMessage(messages.resolvedViaMitigation), value: '6' }\n];\n\nexport const BUSINESS_RISK_OPTIONS = [\n    {\n        value: '3',\n        label: intl.formatMessage(messages.high)\n    },\n    {\n        value: '2',\n        label: intl.formatMessage(messages.medium)\n    },\n    {\n        value: '1',\n        label: intl.formatMessage(messages.low)\n    },\n    {\n        value: '0',\n        label: intl.formatMessage(messages.notDefined)\n    }\n];\n\nexport const FILTERS = {\n    publish_date: {\n        title: intl.formatMessage(messages.publishDate),\n        items: PUBLIC_DATE_OPTIONS.map(item => ({ ...item }))\n    },\n    impact: {\n        title: intl.formatMessage(messages.impact),\n        items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value }))\n    },\n    cvss_filter: {\n        title: intl.formatMessage(messages.cvssBaseScore)\n    },\n    affecting: {\n        title: intl.formatMessage(messages.systemsExposedTableHeader),\n        items: AFFECTING_FILTER_OPTIONS.map(item => ({ ...item }))\n    },\n    business_risk_id: {\n        title: intl.formatMessage(messages.businessRisk),\n        items: BUSINESS_RISK_OPTIONS.map(item => ({ ...item }))\n    },\n    status_id: {\n        title: intl.formatMessage(messages.status),\n        items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value }))\n    },\n    security_rule: {\n        title: intl.formatMessage(messages.securityRules),\n        items: RULE_PRESENCE_OPTIONS.map(item => ({ ...item }))\n    },\n    excluded: {\n        title: intl.formatMessage(messages.systemsIncludedInAnalysis),\n        items: EXCLUDED_FILTER_OPTIONS.map(item => ({ ...item }))\n    },\n    known_exploit: {\n        title: intl.formatMessage(messages.filterKnownExploit),\n        items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(item => ({ ...item }))\n    }\n};\n\nexport const CVE_REPORT_FILTERS = {\n    rule_presence: {\n        title: intl.formatMessage(messages.customReportSecurityRuleCheckbox),\n        items: RULE_PRESENCE_OPTIONS.map(item => ({ ...item })),\n        component: CheckboxCustomFilter\n    },\n    known_exploit: {\n        title: intl.formatMessage(messages.filterKnownExploit),\n        items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(item => ({ ...item })),\n        component: CheckboxCustomFilter\n    },\n    impact: {\n        title: intl.formatMessage(messages.impact),\n        items: IMPACT_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n        component: CheckboxCustomFilter\n    },\n    cvss_filter: {\n        title: intl.formatMessage(messages.cvssBaseScore),\n        component: CvssCustomFilter\n    },\n    business_risk_id: {\n        title: intl.formatMessage(messages.businessRisk),\n        items: BUSINESS_RISK_OPTIONS.map(item => ({ ...item })),\n        component: CheckboxCustomFilter\n    },\n    affecting: {\n        title: intl.formatMessage(messages.customReportSystemsExposed),\n        items: AFFECTING_FILTER_OPTIONS.map(item => ({ ...item }))\n    },\n    publish_date: {\n        title: intl.formatMessage(messages.publishDate),\n        items: PUBLIC_DATE_OPTIONS.map(item => ({ ...item })),\n        component: RadioCustomFilter\n    },\n    status_id: {\n        title: intl.formatMessage(messages.status),\n        items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n        component: CheckboxCustomFilter\n    }\n};\n\nexport const rulesHeader = [\n    intl.formatMessage(messages.executiveReportSecurityPanelSeverity),\n    intl.formatMessage(messages.executiveReportSecurityNumRules),\n    intl.formatMessage(messages.executiveReportSecurityNumAffected)\n];\n\nexport const CVSSHeader = [\n    intl.formatMessage(messages.cvssScoreRange),\n    intl.formatMessage(messages.numberOfCves),\n    intl.formatMessage(messages.knownExploits)\n];\n\nexport const recentCvesHeader = [\n    intl.formatMessage(messages.timeFrame),\n    intl.formatMessage(messages.numberOfCves)\n];\n\nexport const CVSSMapping = {\n    '8to10': '8.0 - 10.0',\n    '4to7.9': '4.0 - 7.9',\n    '0to3.9': '0.0 - 3.9',\n    na: 'N/A'\n};\n\nexport const recentCvesMapping = {\n    last7days: intl.formatMessage(messages.lastxdays, { days: 7 }),\n    last30days: intl.formatMessage(messages.lastxdays, { days: 30 }),\n    last90days: intl.formatMessage(messages.lastxdays, { days: 90 })\n};\n\nexport const RISK_OF_CHANGE_TOOLTIP = {\n    1: intl.formatMessage(messages.riskOfChangeTooltipVeryLow),\n    2: intl.formatMessage(messages.riskOfChangeTooltipLow),\n    3: intl.formatMessage(messages.riskOfChangeTooltipModerate),\n    4: intl.formatMessage(messages.riskOfChangeTooltipHigh)\n};\n\nexport const RISK_OF_CHANGE_LABEL = {\n    1: (\n        <Pflabel className=\"impact-label-very-low\">\n            {intl.formatMessage(messages.impactListVeryLow)}\n        </Pflabel>\n    ),\n    2: (\n        <Pflabel className=\"impact-label-low\">\n            {intl.formatMessage(messages.impactListLow)}\n        </Pflabel>\n    ),\n    3: (\n        <Pflabel className=\"impact-label-moderate\">\n            {intl.formatMessage(messages.impactListModerate)}\n        </Pflabel>\n    ),\n    4: (\n        <Pflabel className=\"impact-label-high\">\n            {intl.formatMessage(messages.impactListHigh)}\n        </Pflabel>\n    )\n};\n\nexport const VULNERABILITIES_HEADER = [\n    {\n        title: intl.formatMessage(messages.cveId),\n        key: 'synopsis',\n        transforms: [sortable],\n        columnTransforms: [wrappable],\n        cellFormatters: [expandable]\n    },\n    {\n        title: intl.formatMessage(messages.publishDate),\n        key: 'public_date',\n        transforms: [sortable, wrappable],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: intl.formatMessage(messages.impact),\n        key: 'impact',\n        transforms: [sortable],\n        columnTransforms: [nowrap]\n    },\n    {\n        title: intl.formatMessage(messages.cvssBaseScore),\n        key: 'cvss_score',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.systemsExposed),\n        key: 'systems_affected',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.businessRisk),\n        key: 'business_risk',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.status),\n        key: 'status',\n        transforms: [sortable, wrappable]\n    }\n];\n\nexport const SYSTEMS_EXPOSED_HEADER = [\n    {\n        key: 'display_name',\n        title: intl.formatMessage(messages.systemsColumnHeaderName),\n        composed: ['facts.os_release', 'display_name'],\n        transforms: [sortable],\n        props: {\n            width: 40\n        }\n    },\n    {\n        key: 'os',\n        title: (\n            <Tooltip content={intl.formatMessage(messages.systemsColumnHeaderOSTooltip)}>\n                <span>\n                    {intl.formatMessage(messages.systemsColumnHeaderOS)}\n                </span>\n            </Tooltip>\n        ),\n        cellTransforms: [nowrap],\n        transforms: [sortable],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'status',\n        title: intl.formatMessage(messages.status),\n        transforms: [sortable],\n        props: {\n            width: 20\n        },\n        renderFunc: (\n            value,\n            _id,\n            { cve_status_id: cveStatusId, status_id: systemStatusId }\n        ) => <StatusColumn cveStatusId={cveStatusId} systemStatusId={systemStatusId} />\n    }\n];\nexport const SYSTEMS_ADVISORY_COLUMN =\n{\n    key: 'advisory',\n    title: intl.formatMessage(messages.advisory),\n    props: {\n        width: 20\n    },\n    renderFunc: (\n        value,\n        _id,\n        { cve, advisories_list: advisoriesList }\n    ) => <AdvisoryColumn cve={cve} advisoriesList={advisoriesList} />\n};\n\nexport const SYSTEMS_HEADER = [\n    {\n        key: 'display_name',\n        title: intl.formatMessage(messages.systemsColumnHeaderName),\n        composed: ['facts.os_release', 'display_name'],\n        cellTransforms: [nowrap],\n        renderFunc: (item, _id, { opt_out: optOut }) => <SystemNameColumn item={item} optOut={optOut} />\n    },\n    {\n        key: 'os',\n        title: (\n            <Tooltip content={intl.formatMessage(messages.systemsColumnHeaderOSTooltip)}>\n                <span>\n                    {intl.formatMessage(messages.systemsColumnHeaderOS)}\n                </span>\n            </Tooltip>\n        ),\n        cellTransforms: [nowrap],\n        props: {\n            width: 10\n        }\n    },\n    {\n        key: 'cve_count',\n        title: intl.formatMessage(messages.systemsColumnHeaderCveCount),\n        transforms: [cellWidth(25)],\n        renderFunc: (value) => (value !== null ? String(value) : intl.formatMessage(messages.systemsTableExcluded))\n    }\n];\n\nexport const SYSTEM_DETAILS_HEADER = [\n    {\n        title: intl.formatMessage(messages.cveId),\n        key: 'synopsis',\n        transforms: [sortable],\n        columnTransforms: [wrappable],\n        cellFormatters: [expandable]\n    },\n    {\n        title: intl.formatMessage(messages.publishDate),\n        key: 'public_date',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.impact),\n        key: 'impact',\n        transforms: [sortable, wrappable],\n        columnTransforms: [nowrap]\n    },\n    {\n        title: intl.formatMessage(messages.cvssBaseScore),\n        key: 'cvss_score',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.advisory),\n        key: 'advisory'\n    },\n    {\n        title: intl.formatMessage(messages.businessRisk),\n        key: 'business_risk',\n        transforms: [sortable, wrappable]\n    },\n    {\n        title: intl.formatMessage(messages.status),\n        key: 'status',\n        transforms: [sortable, wrappable]\n    }\n];\n\nexport const CVES_FILTER_PARAMS = [\n    'cvss_from',\n    'cvss_to',\n    'publish_date',\n    'filter',\n    'impact',\n    'business_risk_id',\n    'status_id',\n    'rule_presence',\n    'affecting',\n    'show_advisories',\n    'advisory',\n    'known_exploit'\n];\n\nexport const CVES_ALLOWED_PARAMS = [\n    ...CVES_FILTER_PARAMS,\n    'limit',\n    'offset',\n    'page',\n    'page_size',\n    'sort',\n    'tags',\n    'sap_sids',\n    'sap_system'\n];\n\nexport const SYSTEMS_EXPOSED_ALLOWED_PARAMS = [\n    'filter',\n    'page',\n    'page_size',\n    'status_id',\n    'sort',\n    'tags',\n    'uuid',\n    'rule_key',\n    'rule_presence',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'show_advisories',\n    'advisory'\n];\n\nexport const SYSTEMS_ALLOWED_PARAMS = [\n    'filter',\n    'page',\n    'page_size',\n    'opt_out',\n    'sort',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'excluded'\n];\n\nexport const CVES_DEFAULT_FILTERS = {\n    affecting: 'true'\n};\n\nexport const SYSTEMS_FILTER_PARAMS = [\n    'excluded',\n    'filter'\n];\n\nexport const SYSTEMS_DEFAULT_FILTERS = {\n    excluded: 'false'\n};\n\nexport const SYSTEMS_SORTING_HEADER = [\n    { key: 'empty' },\n    { key: 'display_name' },\n    { key: 'tags' },\n    { key: 'os' },\n    { key: 'cve_count' },\n    { key: 'updated' }\n];\n\nexport const SYSTEMS_EXPOSED_SORTING_HEADER = [\n    { key: 'empty' },\n    { key: 'empty' },\n    { key: 'display_name' },\n    { key: 'tags' },\n    { key: 'os' },\n    { key: 'advisory' },\n    { key: 'status' },\n    { key: 'updated' }\n];\n\nexport const TRUNCATE_TEXT_THRESHOLD = 230;\n\nexport const DEFAULT_FILTER_DATA = {\n    business_risk_id: [],\n    status_id: [],\n    impact: [],\n    publish_date: 'all',\n    rule_presence: [],\n    cvss_filter: {\n        from: 0.0,\n        to: 10.0\n    },\n    known_exploit: []\n};\n\nexport const PDF_REPORT_USER_NOTE_MAX_LENGTH = 1000;\n\nexport const PDF_REPORT_PER_PAGE = {\n    firstPageWithNote: 5,\n    firstPageWithoutNote: 10,\n    otherPages: 18,\n    otherPagesWithLabels: 10,\n    systemsReportRestPages: 24,\n    systemsReportFirstPage: 22\n};\n\nexport const EXEC_RULES_SEVERITY_MAP = {\n    1: impactList.Low.title,\n    2: impactList.Moderate.title,\n    3: impactList.Important.title,\n    4: impactList.Critical.title\n};\n","export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVES_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\nexport const SET_GLOBAL_FILTER = 'SET_GLOBAL_FILTER';\nexport const LOAD_ENTITIES = 'LOAD_ENTITIES';\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\nimport { applyGlobalFilter } from './reducersHelper';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        expandedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        status_id: undefined,\n        sort: '-updated',\n        show_advisories: true\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: {\n            hasError: false\n        }\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_DETAILS + '_REJECTED':\n            newState = state.setIn(['cveDetails', 'error'], { hasError: true, errorCode: action.payload.status });\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_REJECTED':\n            newState = state.setIn(['affectedSystemsByCVE', 'error'], { hasError: true, errorCode: action.payload.status });\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.SET_GLOBAL_FILTER:\n            newState = state.setIn(['parameters'], {\n                ...applyGlobalFilter(state.parameters, action.payload)\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import * as ActionTypes from '../ActionTypes';\nimport { error, applyGlobalFilter }  from './reducersHelper';\nimport { SYSTEMS_DEFAULT_FILTERS } from './../../Helpers/constants';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        page: 1,\n        page_size: 20,\n        sort: '-updated',\n        ...SYSTEMS_DEFAULT_FILTERS\n    },\n    timestamp: new Date(),\n    error\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        case ActionTypes.SET_GLOBAL_FILTER:\n            newState.params = {\n                ...applyGlobalFilter(newState.params, action.payload)\n            };\n            return newState;\n        case ActionTypes.LOAD_ENTITIES + '_REJECTED':\n            newState.error.hasError = true;\n            newState.error.errorCode = Number(action.payload.status);\n            return newState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\nimport { applyGlobalFilter, isTimestampValid } from './reducersHelper';\nimport { CVES_DEFAULT_FILTERS } from '../../Helpers/constants';\nimport unionBy from 'lodash/unionBy';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        sort: '-public_date',\n        ...CVES_DEFAULT_FILTERS\n    },\n    prevLoadedRows: [],\n    selectedCves: [],\n    selectedRowsRawData: [],\n    expandedRows: [],\n    isAllExpanded: false\n};\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.error = true;\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isTimestampValid(state.cveList.timestamp, action.meta)) {\n                newState = {\n                    ...state,\n                    cveList: {\n                        ...state.cveList,\n                        payload: action.payload,\n                        isLoading: false\n                    },\n                    prevLoadedRows: unionBy(state.prevLoadedRows, action.payload.data, 'id'),\n                    ...state.isAllExpanded && { expandedRows: action.payload.data.map(({ id }) => id) }\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            let prevLoadedRows = [].concat(state.prevLoadedRows);\n\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            let selectedRowsRawData = prevLoadedRows.filter(({ id }) => selectedCves.includes(id));\n\n            return {\n                ...newState,\n                selectedCves,\n                selectedRowsRawData\n            };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const expandedRows = action.payload;\n                const isAllExpanded = action.payload.length === 0 ? false : true;\n                return { ...newState,  expandedRows, isAllExpanded };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const expandedRows = newState.expandedRows.slice();\n            expandedRows.includes(cveName) && expandedRows.splice(expandedRows.indexOf(cveName), 1)\n            || expandedRows.push(cveName);\n\n            return { ...newState, expandedRows };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE:\n            return initialState;\n\n        case ActionTypes.SET_GLOBAL_FILTER:\n            newState.parameters = {\n                ...applyGlobalFilter(newState.parameters, action.payload)\n            };\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    meta: new Date(),\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () => ({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () => ({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n\nexport const setGlobalFilter = (filters) => ({\n    type: ActionTypes.SET_GLOBAL_FILTER,\n    payload: filters\n});\n\nexport const selectRows = (selected) => ({\n    type: ActionTypes.SELECT_ENTITY,\n    payload: selected\n});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20,\n        show_advisories: true\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    expandedRows: [],\n    selectedCves: [],\n    isAllExpanded: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            },\n            ...state.isAllExpanded && { expandedRows: action.payload.data.map(({ id }) => ({ id, isOpen: true })) }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, isAllExpanded } = action.payload;\n    let expandedRows = newState.expandedRows.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = expandedRows.findIndex(element => element.id === cve);\n            if (index > -1) { expandedRows[index] = ({ id: cve, isOpen });}\n            else {expandedRows.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        expandedRows = expandedRows.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, expandedRows, isAllExpanded };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.expandedRows = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20,\n        show_advisories: true\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n\n    },\n    initialState\n);\n","export const error = {\n    errorCode: null,\n    message: null,\n    hasError: false\n};\n\nconst hasResetFilters = (\n    workloads,\n    SIDs,\n    tags\n) => (workloads === undefined || workloads?.SAP === undefined) && SIDs.length === 0 && tags.length === 0;\n\nconst hasSetAnyFilter = (state) => ['sap_system', 'tags', 'sap_sids'].some(key => state.hasOwnProperty(key));\n\nexport const applyGlobalFilter = (state, { workloads, SIDs, tags }) => {\n    // DO nothing in first load\n    if (!hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {\n        return state;\n    }\n\n    if (hasSetAnyFilter(state) && hasResetFilters(workloads, SIDs, tags)) {\n        // reset the filters\n        state = {\n            ...state,\n            sap_system: undefined,\n            tags: undefined,\n            sap_sids: undefined,\n            page: 1\n        };\n    } else {\n        state = {\n            ...state,\n            ...workloads && { sap_system: workloads?.SAP?.isSelected === true ? true : undefined },\n            ...SIDs && { sap_sids: SIDs },\n            ...tags && { tags },\n            page: 1\n        };\n    }\n\n    return state;\n};\n\nexport const isTimestampValid = (stateTimestamp, actionTimestamp) => actionTimestamp >= stateTimestamp;\n\n/**\n * Adds or removes item from the given (targetObj) object based on the value\n *\n * @param {Object} targetObj\n * @param {Array} inputArr\n * @returns {Object}\n */\nexport const addOrRemoveItemFromObj = (targetObj, inputArr) => {\n    const inputObj = inputArr.reduce((obj, item) => {\n        if (item.value === false) {\n            delete targetObj[item.rowId];\n        } else {\n            obj[item.rowId] = item.value;\n        }\n\n        return  obj;\n\n    }, {});\n\n    return { ...targetObj, ...inputObj };\n};\n\nexport const getNewSelectedItems = (selectedItems, currentItems) => {\n    let payload = [].concat(selectedItems).map(({ id, selected }) => ({ rowId: id, value: selected }));\n\n    return addOrRemoveItemFromObj(currentItems, payload);\n};\n\nexport const selectRows = (state, action) => {\n    const selectedUpdated = getNewSelectedItems(action.payload, state.selectedRows);\n    state = { ...state, selectedRows: selectedUpdated };\n    return state;\n};\n\n","import { createIntl, createIntlCache } from 'react-intl';\n\nconst cache = createIntlCache();\nconst locale = navigator.language.slice(0, 2);\n\nexport const intl = createIntl({\n    // eslint-disable-next-line no-console\n    onError: console.log,\n    locale\n}, cache);\n\nexport const intlSettings = { locale };\n","import notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport MiddlewareListener from '@redhat-cloud-services/frontend-components-utilities/MiddlewareListener';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nexport const middlewareListener = new MiddlewareListener();\n\nconst registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n        errorTitleKey: 'title'\n    }),\n    middlewareListener.getMiddleware()\n]);\n\nexport default {\n    getStore: () => registry.getStore(),\n    register: newReducers => {\n        registry.register(newReducers);\n    }\n};\n","import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n"],"names":["AdvisoryColumn","cve","advisoriesList","Fragment","length","map","advisory","_i","key","href","ADVISORY_PATH","target","rel","reduce","prev","curr","messages","exitDelay","appendTo","document","querySelector","content","values","link","createRHDBLink","className","color","propTypes","PropType","FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","headingLevel","size","whiteSpace","component","TextVariants","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","onClick","EmptyCVEList","NotAuthorized","LockIcon","title","intl","description","prevPageButtonText","toLandingPageText","isCvssRangeValid","min","max","isNaN","CvssCustomFilter","filterData","setFilterData","selectProps","filterName","useState","isOpen","setOpen","handleCvssInputChange","value","inputName","cvss_filter","parseFloat","validateCvssInput","currentValue","minValue","from","maxValue","to","filterCvssContent","fontSize","type","onChange","validated","id","customContent","onToggle","placeholderText","toFixed","width","CSAwLabel","PropTypes","Label","children","isLarge","isInline","styleProp","display","StyleSheet","mb2","marginBottom","mb8","mb16","mb24","mt16","marginTop","bold","fontWeight","italic","fontStyle","sectionTitle","pieChartIcon","verticalAlign","cardTitle","collumns","columnCount","paddingTop","marginLeft","userNotes","backgroundColor","padding","userNotesTitle","generated","textDecoration","bodyCell","textAlign","paddingBottom","header","headerCell","cveCell","systemCell","systemNameCell","footer","counter","counterLabel","counterPanel","flex","labelsWrapper","flexDirection","label","marginRight","smallText","top","buildFilters","newValues","Object","entries","forEach","DEFAULT_FILTER_DATA","Array","isArray","CVE_REPORT_FILTERS","items","filter","wordArray","subvalue","find","val","join","PUBLIC_DATE_OPTIONS","timespan_label","checkedValue","RULE_PRESENCE_OPTIONS","KNOWN_EXPLOIT_FILTER_OPTIONS","constructFilterParameters","filterParams","publicEntry","item","publish_date","undefined","formatDate","status_id","toString","business_risk_id","impact","cvss_from","cvss_to","public_from","public_to","rule_presence","known_exploit","intlFormatWithBold","msg","params","b","chunks","styles","firstPagePDFLength","data","firstPageWithNote","PDF_REPORT_PER_PAGE","firstPageWithoutNote","otherPagesPDFLength","otherPages","otherPagesWithLabels","InsightsSystemRule","rule","TextContent","Text","rule_id","report","kbaLoading","kbaDetail","view_uri","RH_KB_URL","node_id","InsightsNoSystemRule","details","resulotion","createExposedSystemsTable","isLoading","payload","expandedRows","meta","cvesCount","attributes","patchAccess","patch_access","includes","status","status_name","createCveDetailsPage","cves","error","asMutable","public_date","processDate","synopsis","rh_link","mitre_link","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","option","business_risk_justification","business_risk_text","STATUS_OPTIONS","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","celebrity_name","props","cveTableRowActions","methods","rowIndex","event","rowId","rowData","showBusinessRiskModal","justification","showStatusModal","exposed_systems_count","systemCveTableRowActions","entity","display_name","cve_status_id","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOutFunc","opt_out","count","dataShape","constructParameters","apiProps","allowedParams","keys","date","Date","includeTime","prepend","number","toFormat","year","getFullYear","month","getMonth","day","getDate","hour","getUTCHours","minute","getUTCMinutes","prototype","hasOwnProperty","call","getImpactDetails","impactList","text","titleContent","createSortBy","direction","indexOf","SortByDirection","replace","index","findIndex","handleSortColumn","currentSort","apply","columnName","useDefault","substr","sort","useUrlParams","url","URL","window","location","qs","search","parameters","searchParams","urlParams","constructURLParameters","history","replaceState","origin","pathname","updateRef","pages","parseInt","page","chunkArray","array","chunkSize","hasRule","labels","slice","total","chunk","splice","push","mergeObjectPropertyBy","obj","mergeProperty","grouped","issue","StatusColumn","cveStatusId","systemStatusId","Tooltip","defautProps","SystemNameColumn","optOut","CheckboxCustomFilter","itemsString","options","filterId","Select","onSelect","optionName","optionId","optionIndex","handleOnCheckboxChange","selections","isCheckboxSelectionBadgeHidden","SelectOption","RadioCustomFilter","optionValue","handleOnRadioChange","Radio","isChecked","DEFAULT_PAGE_SIZE","CVES_PATH","baseURI","impactTextList","low","moderate","important","critical","PATHS","home","cvesPage","cveDetailsPage","systemsPage","systemDetailsPage","cvepagePath","upgrade","reports","Critical","Important","Moderate","Low","ReadOnlyNotification","detail","AFFECTING_FILTER_OPTIONS","EXCLUDED_FILTER_OPTIONS","subtractDays","toSubtract","currDate","setDate","subtractYears","setFullYear","days","IMPACT_OPTIONS","hasIcon","iconColor","FILTERS","affecting","security_rule","excluded","rulesHeader","CVSSHeader","CVSSMapping","na","recentCvesMapping","last7days","last30days","last90days","RISK_OF_CHANGE_TOOLTIP","RISK_OF_CHANGE_LABEL","VULNERABILITIES_HEADER","transforms","sortable","columnTransforms","wrappable","cellFormatters","expandable","classNames","nowrap","SYSTEMS_EXPOSED_HEADER","composed","cellTransforms","renderFunc","_id","SYSTEMS_ADVISORY_COLUMN","advisories_list","SYSTEMS_HEADER","cellWidth","String","SYSTEM_DETAILS_HEADER","CVES_FILTER_PARAMS","CVES_ALLOWED_PARAMS","SYSTEMS_EXPOSED_ALLOWED_PARAMS","SYSTEMS_ALLOWED_PARAMS","CVES_DEFAULT_FILTERS","SYSTEMS_FILTER_PARAMS","SYSTEMS_DEFAULT_FILTERS","SYSTEMS_EXPOSED_SORTING_HEADER","TRUNCATE_TEXT_THRESHOLD","PDF_REPORT_USER_NOTE_MAX_LENGTH","systemsReportRestPages","systemsReportFirstPage","EXEC_RULES_SEVERITY_MAP","FETCH_CVE_LIST","FETCH_CVE_DETAILS","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","SET_GLOBAL_FILTER","LOAD_ENTITIES","SELECT_ENTITY","initialState","Immutable","affectedSystemsByCVE","total_items","page_size","selectedHosts","show_advisories","cveDetails","hasError","metadata","limit","offet","timestamp","cveList","prevLoadedRows","selectedCves","selectedRowsRawData","isAllExpanded","ReducerRegistry","CVEDetailsPageStore","state","action","ActionTypes","setIn","errorCode","applyGlobalFilter","CVEsStore","newState","errors","isTimestampValid","unionBy","concat","cveName","SystemsPageStore","Number","SystemCvesStore","fetchAffectedSystemsByCVE","Promise","resolve","APIHelper","then","result","fetchSystems","fetchCveDetails","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","setGlobalFilter","filters","selectRows","selected","applyReducerHash","element","message","hasResetFilters","workloads","SIDs","tags","SAP","hasSetAnyFilter","some","sap_system","sap_sids","isSelected","stateTimestamp","actionTimestamp","selectedItems","currentItems","targetObj","inputObj","selectedUpdated","selectedRows","cache","createIntlCache","locale","navigator","language","createIntl","onError","console","log","middlewareListener","MiddlewareListener","registry","getRegistry","promiseMiddleware","notificationsMiddleware","errorTitleKey","getMiddleware","getStore","register","newReducers","instance","axios","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","err","errObject"],"sourceRoot":""}