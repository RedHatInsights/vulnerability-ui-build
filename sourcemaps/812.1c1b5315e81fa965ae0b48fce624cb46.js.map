{"version":3,"file":"js/812.df2de7acc28513f9930e.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => {\n\n    return (\n        <View style={styles.labelsWrapper}>\n            {hasExploit &&\n                <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                    <InsightsLabel\n                        icon={false}\n                        width={isSmall ? 62 : 75}\n                        variant={4}\n                        label={intl.formatMessage(messages.filterKnownExploit)}\n                        textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                        labelStyle={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: '#c9190b',\n                            height: isSmall ? 16 : 20\n                        }}\n                    />\n                </View>\n            }\n            { hasRule &&\n                <View style={styles.label}>\n                    <InsightsLabel\n                        icon={false}\n                        width={isSmall ? 59 : 63}\n                        label={intl.formatMessage(messages.securityRuleLabel)}\n                        textStyle={ isSmall ? styles.smallText : undefined }\n                        labelStyle={{\n                            border: 'solid',\n                            borderWidth: 1,\n                            borderColor: '#bee1f4',\n                            height: isSmall ? 16 : 20\n                        }}\n                    />\n                </View>\n            }\n        </View>\n    );\n};\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport { PUBLIC_DATE_OPTIONS, DEFAULT_FILTER_DATA } from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', ')\n        };\n        return obj;\n    }, {});\n\n    let filterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue }\n    ];\n\n    // iterate from right to find last existing filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                             DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter =>\n                    filtersBuilder.hasOwnProperty(filter.name) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filtersBuilder[filter.name].values.toLowerCase(),\n                            prefix: (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    )\n                )\n            }\n            <Text>.</Text>\n            {'\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () =>\n        <Paragraph>\n            {\n                filtersBuilder.filter\n                    ? intlFormatWithBold(messages.systemsPDFreportFiltersSearchTerm, { searchTerm: filtersBuilder.filter.values })\n                    : ''\n            }\n        </Paragraph>;\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            { type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph() }\n\n            { type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        { (isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                { user && user.identity &&\n                                <Text style={styles.italic}>\n                                    {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                        name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                    })}\n                                </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableExcluded)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n"],"names":["CVElabels","intl","hasRule","hasExploit","isSmall","style","styles","width","icon","variant","label","formatMessage","messages","textStyle","left","undefined","labelStyle","border","borderWidth","borderColor","height","propTypes","firstPagePDF","data","meta","filters","isReportDynamic","reportData","user","type","filtersBuilder","reduce","obj","item","key","filter","category","values","PUBLIC_DATE_OPTIONS","val","value","chips","timespan_label","map","name","join","filterStringSegments","msg","i","length","hasOwnProperty","isLast","Fragment","intlFormatWithBold","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","cve_count","total_items","toString","system_count","header","includes","knownExploitCount","userNotes","identity","first_name","last_name","tablePage","defaultProps","PropTypes","page","POSSIBLE_HEADERS","hit","columnBuilder","hitColumns","headerContent","push","forEach","concat","id","hasRules","cve","rules","cveRows","knownExploit","attributes","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","system","display_name","os","opt_out","formatDate","updated","withHeader","rows"],"sourceRoot":""}