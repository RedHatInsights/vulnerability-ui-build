{"version":3,"file":"js/481.8aa43971ac25b67f82c4.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/ErrorHandler/ErrorHandler.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Components/SmartComponents/Modals/ColumnManagementModal.js","webpack:///./src/Helpers/TableToolbarHelper.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components/InvalidObject';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst ErrorHandler = ({ code }) => {\n    switch (code) {\n        case 403:\n            return <NotAuthorized />;\n\n        case 404:\n            return <InvalidObject />;\n\n        case 500:\n        case 502:\n        case 503:\n            return <Unavailable />;\n\n        default:\n            return <ErrorState />;\n    }\n};\n\nErrorHandler.propTypes = {\n    code: propTypes.number\n};\n\nexport default ErrorHandler;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst useSearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default useSearchFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    TextContent,\n    Text,\n    TextVariants,\n    DataListItem,\n    DataList,\n    DataListItemRow,\n    DataListCheck,\n    DataListCell,\n    DataListItemCells,\n    Split,\n    SplitItem\n} from '@patternfly/react-core';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ColumnManagementModal = ({ appliedColumns, applyColumns, isModalOpen, setModalOpen }) => {\n    const [currentColumns, setCurrentColumns] = useState(\n        appliedColumns.map(column => ({ ...column, isShown: column.isShown ?? column.isShownByDefault }))\n    );\n\n    const handleChange = index => {\n        let newColumns = [...currentColumns];\n        let changedColumn = { ...newColumns[index] };\n\n        changedColumn.isShown = !changedColumn.isShown;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n    };\n\n    const selectAll = () => {\n        let newColumns = [...currentColumns];\n        newColumns = newColumns.map(column => ({ ...column, isShown: true }));\n\n        setCurrentColumns(newColumns);\n    };\n\n    const resetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isShown: column.isShownByDefault ?? false })));\n    };\n\n    const handleSave = () => {\n        setModalOpen(false);\n        applyColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(appliedColumns);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.columnManagementModalTitle)}\n            onClose={() => setModalOpen(false)}\n            isOpen={isModalOpen}\n            variant=\"small\"\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>{intl.formatMessage(messages.columnManagementModalDescription)}</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={selectAll} variant=\"link\">\n                                {intl.formatMessage(messages.columnManagementModalSelectAll)}\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={resetToDefault} variant=\"link\">\n                                {intl.formatMessage(messages.columnManagementModalResetToDefault)}\n                            </Button>\n                        </SplitItem>\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    {intl.formatMessage(messages.save)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Table column management\" id=\"table-column-management\" isCompact>\n                {currentColumns.map((column, index) =>\n                    <DataListItem key={column.key}>\n                        <DataListItemRow>\n                            <DataListCheck\n                                checked={column.isShown}\n                                id={'checkbox-' + index}\n                                onChange={() => handleChange(index)}\n                                isDisabled={column.isUnhidable}\n                            />\n                            <DataListItemCells\n                                dataListCells={[\n                                    <DataListCell key={'table-column-management-item' + index}>\n                                        <label htmlFor={'checkbox-' + index}>\n                                            {column.title}\n                                        </label>\n                                    </DataListCell>\n                                ]}\n                            />\n                        </DataListItemRow>\n                    </DataListItem>\n                )}\n            </DataList>\n        </Modal>\n    );\n};\n\nColumnManagementModal.propTypes = {\n    appliedColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    applyColumns: propTypes.func.isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired\n};\n\nexport default ColumnManagementModal;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'rule_presence') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false'].includes(parameter)\n                    ? object.name = FILTERS.rule_presence.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'rule_presence' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule ? currentFilters.rule.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisory),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        removeFilters(chips, apply);\n        apply({ ...defaultFilters, page: 1 });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'rule_presence') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n"],"names":["ErrorHandler","code","propTypes","urlParam","label","placeholder","search","apply","React","searchValue","setSearchValue","debounce","newValue","undefined","handleSearch","type","conditionalFilterType","intl","filterValues","id","onChange","event","value","ColumnManagementModal","appliedColumns","applyColumns","isModalOpen","setModalOpen","useState","map","column","isShown","isShownByDefault","currentColumns","setCurrentColumns","title","messages","onClose","isOpen","variant","description","component","TextVariants","hasGutter","isInline","onClick","newColumns","actions","key","isCompact","index","checked","changedColumn","handleChange","isDisabled","isUnhidable","dataListCells","htmlFor","isRequired","handleChangePage","_event","page","handleSetPageSize","perPage","page_size","exportConfig","methods","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRuleValues","nameFilter","filter","advisoryFilter","advisory","buildChip","parameter","FILTERS","items","reduce","object","item","name","filteredRule","find","includes","e","buildChips","paramValues","values","push","hasValue","filters","Object","keys","filterChips","array","multiValue","concat","rule_presence","split","rule","category","chips","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","filteredValues","length","removeFilters","reset","defaultFilters","emptyFilter","obj","remainingValues","some","chip","join","cvss_filter","isFilterInDefaultState","currentParams","defaultParams","filterParams","acc","param","isEqual"],"sourceRoot":""}