{"version":3,"file":"js/2110.1664572964736.033b09b29436adf9913b.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/PresentationalComponents/Snippets/SnippetWithPopover.js","webpack:///./src/Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell.js","webpack:///./src/Helpers/VulnerabilityHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/map.js"],"sourcesContent":["import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterBusinessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        key: 'business_risk',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport CvssCustomFilter from '../CustomFilters/CvssCustomFilter';\nimport React from 'react';\nimport debounce from 'lodash/debounce';\n\nconst useCvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(({ cvss_filter: cvss }) => {\n            if (cvss.from >= 0 && cvss.to <= 10 && cvss.from <= cvss.to) {\n                apply({ cvss_from: cvss.from, cvss_to: cvss.to, page: 1 });\n            }\n        }, 600)\n    );\n\n    React.useEffect(() => setSearchValue(\n        { from: currentFilter.cvss_from || 0.0, to: currentFilter.cvss_to || 10.0 }\n    ), [currentFilter]);\n\n    const filterByCvssRange = values => {\n        setSearchValue({ from: values.cvss_filter.from, to: values.cvss_filter.to });\n        handleSearch(values);\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.custom,\n        key: 'cvss_score',\n        urlParam: 'cvss_filter',\n        filterValues: {\n            children: (<CvssCustomFilter\n                key=\"cvss_filter\"\n                filterId=\"cvss_filter\"\n                filterData={{ cvss_filter: searchValue }}\n                setFilterData={filterByCvssRange}\n                className=\"pf-u-mb-0\"\n                selectProps={{ placeholderText: intl.formatMessage(messages.searchFilterCvssRange) }}\n            />)\n        }\n    };\n};\n\nexport default useCvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSeverity),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        key: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { KNOWN_EXPLOIT_FILTER_OPTIONS  } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst knownExploitFilter = (apply, currentFilter = {}) => {\n    let { known_exploit: currentValue } = currentFilter;\n\n    const filterByKnownExploit = values => {\n        apply({\n            known_exploit: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterKnownExploit),\n        type: conditionalFilterType.checkbox,\n        key: 'known_exploit',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByKnownExploit(value);\n            },\n            items: KNOWN_EXPLOIT_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default knownExploitFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterPublishDate),\n        type: conditionalFilterType.radio,\n        key: 'publish_date',\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst PaginationWrapper = ({ apply, meta, variant }) => {\n    const { page, total_items: totalItems, page_size: pageSize } = meta;\n\n    const handleChangePage = (_event, pageNumber) => apply({ page: pageNumber });\n    const handleSetPageSize = (_event, perPage) => apply({ page_size: perPage, page: 1 });\n\n    return (\n        <Pagination\n            page={page || 1}\n            itemCount={totalItems || 0}\n            perPage={pageSize || DEFAULT_PAGE_SIZE}\n            onSetPage={handleChangePage}\n            onPerPageSelect={handleSetPageSize}\n            variant={PaginationVariant[variant]}\n            ouiaId={'pagination-'.concat(PaginationVariant[variant])}\n            isDisabled={!totalItems}\n        />\n    );\n};\n\nPaginationWrapper.defaultProps = {\n    variant: 'bottom'\n};\n\nPaginationWrapper.propTypes = {\n    apply: propTypes.func.isRequired,\n    meta: propTypes.object.isRequired,\n    variant: propTypes.string\n};\n\nexport default PaginationWrapper;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { Popover, Stack, StackItem, TextContent, Tooltip, Button } from '@patternfly/react-core';\nimport { ServerAltIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport Label from './Label';\n\nconst SnippetWithPopover = ({ type, row }) => {\n    const {\n        business_risk_text: businessRiskJustification,\n        cve_status_id: cveStatusId,\n        status_text: statusJustification,\n        status_id: systemStatusId\n    } = row.attributes;\n    const hasDefaultStatus = systemStatusId === 0 && cveStatusId === 0 && statusJustification === null;\n\n    const BusinessRiskPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {businessRiskJustification || '--'}\n        </StackItem>\n    );\n\n    const systemStatusOption = STATUS_OPTIONS.find(option => option.value === systemStatusId.toString());\n\n    const StatusPopoverContent = (\n        <StackItem>\n            <Label>\n                <FormattedMessage {...messages.cveSystemPairStatus} />\n            </Label>\n\n            {systemStatusOption?.label || '--'}\n\n            <Label className=\"pf-u-mt-sm\">\n                <FormattedMessage {...messages.justificationNote} />\n            </Label>\n            {statusJustification || '--'}\n        </StackItem>\n    );\n\n    const statusOption = STATUS_OPTIONS.find(option => option.value === cveStatusId.toString());\n\n    const popoverContent = (\n        <Stack>\n            {type === 0 ? BusinessRiskPopoverContent : StatusPopoverContent}\n            <StackItem>\n                <TextContent>\n                    <hr className=\"splitter pf-u-mb-md pf-u-mt-md\" />\n                </TextContent>\n                <Label className=\"pf-u-mt-sm\">\n                    <FormattedMessage {...messages.cveStatus} />\n                </Label>\n            </StackItem>\n            <StackItem>\n                {statusOption?.label || '--'}\n            </StackItem>\n        </Stack>\n    );\n\n    const buttonStyle = {\n        wordBreak: 'normal',\n        color: hasDefaultStatus ? 'black' : '',\n        whiteSpace: 'unset',\n        maxWidth: '131px',\n        textAlign: 'left',\n        padding: '0px'\n    };\n\n    return (\n        <Popover bodyContent={popoverContent}\n            id=\"popover\"\n            aria-label=\"Business risk popover\"\n            position=\"left\"\n            appendTo={document.querySelector('.vulnerability')}\n        >\n\n            <Button\n                variant=\"link\"\n                isSmall\n                isDisabled={hasDefaultStatus}\n                style={buttonStyle}>\n                {cveStatusId !== systemStatusId ? (\n                    <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                        <ServerAltIcon className=\"pf-u-m-l\" />\n                    </Tooltip>\n                ) : ('')}\n                {' '}{systemStatusOption?.label || '--'}\n            </Button>\n        </Popover>\n    );\n};\n\nSnippetWithPopover.propTypes = {\n    type: propTypes.number,\n    row: propTypes.object\n};\n\nexport default SnippetWithPopover;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport Label from '../Snippets/Label';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from '../CSAwRuleBox/CSAwRuleSummary';\nimport messages from '../../../Messages';\nimport { handleCVELink } from '../../../Helpers/VulnerabilityHelper';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVETableExpandedCell = ({ description, rules, cve, linkToCustomerPortal }) => {\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <TextContent className=\"expanded-cell\">\n            {\n                hasDescription ? (\n                    <Fragment>\n                        <Label className=\"pf-u-mb-sm\"><FormattedMessage {...messages.description} /></Label>\n                        <Text component={TextVariants.p}>{description}</Text>\n                    </Fragment>\n                ) : <NoDescriptionAvailable/>\n            }\n            <Stack hasGutter>\n                {rules && rules.map((rule, i) => (\n                    rule && (\n                        <div key={i} className=\"rule\">\n                            <CSAwLabel className=\"pf-u-mr-sm\"/>\n                            <Label isInline>\n                                <span className=\"rule-name\">{rule.description || rule.rule_id}</span>\n                            </Label>\n                            <CSAwRuleSummary\n                                text={rule.summary}\n                                truncate={false}\n                                className=\"pf-u-mt-xs\"\n                            />\n                        </div>\n                    )\n                ))}\n                <StackItem className=\"rule-link\">\n                    {handleCVELink(cve, intl.formatMessage(messages.viewMoreAboutThisCve), null, linkToCustomerPortal, true)}\n                </StackItem>\n            </Stack>\n        </TextContent>\n    );\n\n};\n\nCVETableExpandedCell.propTypes = {\n    description: PropTypes.string,\n    rules: PropTypes.array,\n    cve: PropTypes.string,\n    linkToCustomerPortal: PropTypes.bool\n};\n\nexport default CVETableExpandedCell;\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS, CVES_PATH, CUSTOMER_PORTAL_CVE_PATH } from './constants';\nimport SnippetWithPopover from '../Components/PresentationalComponents/Snippets/SnippetWithPopover';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../Messages';\nimport CVETableExpandedCell from '../Components/PresentationalComponents/CVETableExpandedCell/CVETableExpandedCell';\nimport AdvisoryColumn from '../Components/PresentationalComponents/AdvisoryColumn/AdvisoryColumn';\nimport GroupedCVELabels from '../Components/PresentationalComponents/Snippets/GroupedCVELabels';\nimport RemediationColumn from '../Components/PresentationalComponents/TableColumns/RemediationColumn';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nexport function createCveListByAccount(cveList, columns) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        let payload = cveList.payload;\n        let { data, meta, errors } = payload;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    <Link\n                        to={'/cves/' + row.attributes.synopsis}\n                        className=\"pf-u-mr-sm cve-synopsis\"\n                    >\n                        {row.attributes.synopsis}\n                    </Link>\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={row.attributes?.rules?.length > 0}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            systems_affected: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, row.attributes.systems_affected.toString())}\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    {row.attributes.systems_status_divergent > 0 ? (\n                        <Tooltip content={<FormattedMessage {...messages.createCveListByAccountTooltip} />}>\n                            <ExclamationTriangleIcon color=\"var(--pf-global--warning-color--100)\" />\n                        </Tooltip>\n                    ) : (\n                        ''\n                    )}{' '}\n                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                </span>\n            )\n        });\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    rules: row.attributes.rules,\n                    exposed_systems_count: row.attributes.systems_affected,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={row.attributes.rules}\n                                    cve={row.attributes.synopsis}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta: { ...meta, cvesCount }, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList, columns, linkToCustomerPortal) {\n    let isLoading = cveList && cveList.isLoading;\n\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        const cvesCount = data && data.length;\n\n        const columnKeys = columns.reduce((acc, curr) => curr.isShown ?? curr.isShownByDefault ? acc.concat(curr.key) : acc, []);\n\n        const cellMapper = row => ({\n            synopsis: (\n                <span key={row.id}>\n                    {handleCVELink(row.attributes.synopsis, undefined,\n                        { className: 'pf-u-mr-sm', style: { display: 'block' } }, linkToCustomerPortal)\n                    }\n                    <GroupedCVELabels\n                        hasExploit={row.attributes.known_exploit}\n                        hasRule={!!row.attributes.rule}\n                        isCompact\n                    />\n                </span>\n            ),\n            public_date: (\n                <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n            ),\n            impact: (\n                <span key={row.id}>\n                    <Shield impact={row.attributes.impact} hasLabel />\n                </span>\n            ),\n            cvss_score: (\n                <span key={row.id}>\n                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                </span>\n            ),\n            advisory: (\n                <span key=\"advisory\">\n                    <AdvisoryColumn\n                        cve={row?.id}\n                        advisoriesList={row?.attributes?.advisories_list}\n                        linkToCustomerPortal={linkToCustomerPortal}\n                    />\n                </span>\n            ),\n            business_risk: (\n                <span key={row.id}>\n                    {\n                        BUSINESS_RISK_OPTIONS.find(\n                            option => option.value === row.attributes.business_risk_id.toString()\n                        ).label\n                    }\n                </span>\n            ),\n            status: (\n                <span key={row.id}>\n                    <SnippetWithPopover row={row} type={1} />\n                </span>\n            ),\n            remediation: (\n                <span key=\"remediation-column\">\n                    <RemediationColumn fixable={row.attributes.remediation} />\n                </span>\n            )\n        });\n\n        let rows =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    rules: row.attributes.rule,\n                    cve_status_id: row.attributes.cve_status_id,\n                    status_justification: row.attributes.status_text,\n                    cve_status_justification: row.attributes.cve_status_text,\n                    cells: columnKeys.map(columnKey => ({ title: cellMapper(row)[columnKey] })),\n                    isOpen: false,\n                    selected: false\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <CVETableExpandedCell\n                                    description={row.attributes.description}\n                                    rules={[row.attributes.rule]}\n                                    cve={row.attributes.synopsis}\n                                    linkToCustomerPortal={linkToCustomerPortal}\n                                />\n                            )\n                        }\n                    ],\n                    fullWidth: true,\n                    parent: index * 2\n                }\n            ]);\n\n        if (!meta?.patch_access) {\n            rows = rows?.map(row => {\n                return {\n                    ...row,\n                    cells: row.cells.filter(cell => cell?.title?.key !== 'advisory')\n                };\n            });\n        }\n\n        return {\n            data: rows,\n            meta: { ...meta, cvesCount },\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\n/**\n * Handle CVE link\n * inside vulnerability app use Link route\n * otherwise, create a link to access the cve page (ex, inventory tab)\n * @param {String} synopsis cve ID\n * @param {String} body link text\n * @return {HTMLElement} a href link\n */\nexport function handleCVELink(synopsis, body, linkProps, linkToCustomerPortal, showIcon) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return <Link to={'/cves/' + synopsis} {...linkProps}>{body || synopsis} {showIcon && <ExternalLinkAltIcon />}</Link>;\n    } else {\n        return <a\n            href={`${linkToCustomerPortal ? CUSTOMER_PORTAL_CVE_PATH : CVES_PATH}/${synopsis}`}\n            {...linkProps}\n        >\n            {body || synopsis} {showIcon && <ExternalLinkAltIcon />}\n        </a>;\n    }\n}\n","import unionBy from 'lodash/unionBy';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, rawItems, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        if (rawItems) {\n            const collectedItems = unionBy(rawItems.payload.data, selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        } else {\n            const collectedItems = unionBy(data.filter(item => item.id), selectedItemsArray, 'id');\n            selectorHandler(true, collectedItems);\n        }\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                selectorHandler(true, response);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n"],"names":["renderer","marked","link","this","arguments","replace","CSAwRuleSummary","text","truncate","intl","props","className","length","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","defaultProps","propTypes","PropTypes","injectIntl","apply","currentFilter","currentValue","business_risk_id","filterByBusinessRisk","values","filter","value","join","page","label","type","conditionalFilterType","urlParam","key","filterValues","onChange","event","items","BUSINESS_RISK_OPTIONS","item","split","React","searchValue","setSearchValue","debounce","cvss","cvss_filter","from","to","cvss_from","cvss_to","handleSearch","filterByCvssRange","children","filterId","filterData","setFilterData","selectProps","placeholderText","impact","filterByImpact","IMPACT_OPTIONS","hasIcon","color","iconColor","known_exploit","filterByKnownExploit","undefined","KNOWN_EXPLOIT_FILTER_OPTIONS","publish_date","filterByPublishDate","PUBLIC_DATE_OPTIONS","dynamicFilters","config","rule_presence","concat","rule","filterBySecurityRule","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","unionWith","isEqual","map","status_id","filterByStatus","STATUS_OPTIONS","PaginationWrapper","meta","variant","totalItems","total_items","pageSize","page_size","itemCount","perPage","DEFAULT_PAGE_SIZE","onSetPage","_event","pageNumber","onPerPageSelect","PaginationVariant","ouiaId","isDisabled","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","style","content","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","justification","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","title","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","dispatch","useDispatch","handleClose","isOpen","Boolean","onClose","actions","onClick","then","addNotification","error","status","ReadOnlyNotification","NotAuthorizedNotification","updateRef","SnippetWithPopover","row","attributes","businessRiskJustification","business_risk_text","cveStatusId","cve_status_id","statusJustification","status_text","systemStatusId","hasDefaultStatus","BusinessRiskPopoverContent","StackItem","Label","systemStatusOption","option","toString","StatusPopoverContent","statusOption","popoverContent","Stack","TextContent","buttonStyle","wordBreak","whiteSpace","maxWidth","textAlign","padding","Popover","bodyContent","id","position","appendTo","document","querySelector","Button","isSmall","Tooltip","CVETableExpandedCell","description","rules","cve","linkToCustomerPortal","hasDescription","Fragment","Text","component","TextVariants","hasGutter","i","CSAwLabel","isInline","rule_id","summary","handleCVELink","createCveListByAccount","cveList","columns","isLoading","payload","data","errors","cvesCount","columnKeys","reduce","acc","curr","isShown","isShownByDefault","cellMapper","synopsis","public_date","processDate","Shield","hasLabel","cvss_score","parseCvssScore","cvss2_score","cvss3_score","systems_affected","business_risk","systems_status_divergent","index","business_risk_justification","status_justification","exposed_systems_count","cells","columnKey","selected","fullWidth","parent","createCveListBySystem","systemId","display","advisory","AdvisoryColumn","advisoriesList","advisories_list","remediation","RemediationColumn","fixable","rows","cve_status_justification","cve_status_text","patch_access","cell","body","linkProps","showIcon","location","href","indexOf","CUSTOMER_PORTAL_CVE_PATH","CVES_PATH","selectedItems","selectorHandler","rawItems","fetchResource","multiRow","selectedItemsArray","Array","selectedItemsCount","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","response","handleOnCheckboxChange","count","collectedItems","unionBy","baseFlatten","module","exports","collection","iteratee","arrayMap","baseIteratee","baseMap"],"sourceRoot":""}