{"version":3,"file":"js/CVEDetailsPage.1644492184983.53b853f91e44b500c3a5.js","mappings":"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","sources":["webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactTable = require(\"@patternfly/react-table\");\n\nvar _Skeleton = require(\"../Skeleton\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar SkeletonTable = /*#__PURE__*/function (_React$Component) {\n  (0, _inherits2[\"default\"])(SkeletonTable, _React$Component);\n\n  var _super = _createSuper(SkeletonTable);\n\n  function SkeletonTable() {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, SkeletonTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createColumns\", function () {\n      var colSize = _this.props.colSize;\n      return (0, _toConsumableArray2[\"default\"])(Array(colSize)).map(function () {\n        return {\n          title: /*#__PURE__*/_react[\"default\"].createElement(_Skeleton.Skeleton, {\n            size: _Skeleton.SkeletonSize.sm\n          })\n        };\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"getColumns\", function () {\n      var _this$props = _this.props,\n          paddingColumnSize = _this$props.paddingColumnSize,\n          columns = _this$props.columns;\n      return _this.newArray(paddingColumnSize).map(function () {\n        return '';\n      }).concat(columns || _this.createColumns());\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"createRows\", function () {\n      var _this$props2 = _this.props,\n          colSize = _this$props2.colSize,\n          rowSize = _this$props2.rowSize,\n          columns = _this$props2.columns,\n          paddingColumnSize = _this$props2.paddingColumnSize;\n      var numberOfCols = columns ? columns.length : colSize;\n      return _this.newArray(rowSize).map(function () {\n        return {\n          disableSelection: true,\n          cells: _this.newArray(paddingColumnSize).map(function () {\n            return '';\n          }).concat(_this.newArray(numberOfCols).map(function () {\n            return {\n              title: /*#__PURE__*/_react[\"default\"].createElement(_Skeleton.Skeleton, {\n                size: _Skeleton.SkeletonSize.md\n              })\n            };\n          }))\n        };\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"selectVariant\", function () {\n      var hasRadio = _this.props.hasRadio;\n      return hasRadio ? (_reactTable.RowSelectVariant === null || _reactTable.RowSelectVariant === void 0 ? void 0 : _reactTable.RowSelectVariant.radio) || 'radio' : (_reactTable.RowSelectVariant === null || _reactTable.RowSelectVariant === void 0 ? void 0 : _reactTable.RowSelectVariant.checkbox) || 'checkbox';\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"newArray\", function (size) {\n      return (0, _toConsumableArray2[\"default\"])(Array(size));\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(SkeletonTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          canSelectAll = _this$props3.canSelectAll,\n          isSelectable = _this$props3.isSelectable,\n          sortBy = _this$props3.sortBy,\n          variant = _this$props3.variant;\n      return /*#__PURE__*/_react[\"default\"].createElement(_reactTable.Table, {\n        cells: this.getColumns(),\n        rows: this.createRows(),\n        sortBy: sortBy,\n        \"aria-label\": \"Loading\",\n        onSelect: isSelectable,\n        selectVariant: isSelectable ? this.selectVariant() : null,\n        canSelectAll: canSelectAll,\n        variant: variant\n      }, /*#__PURE__*/_react[\"default\"].createElement(_reactTable.TableHeader, null), /*#__PURE__*/_react[\"default\"].createElement(_reactTable.TableBody, null));\n    }\n  }]);\n  return SkeletonTable;\n}(_react[\"default\"].Component);\n\nSkeletonTable.propTypes = {\n  colSize: _propTypes[\"default\"].number,\n  rowSize: _propTypes[\"default\"].number,\n  columns: _propTypes[\"default\"].array,\n  paddingColumnSize: _propTypes[\"default\"].number,\n  sortBy: _propTypes[\"default\"].shape({\n    index: _propTypes[\"default\"].number,\n    direction: _propTypes[\"default\"].oneOf(['asc', 'desc'])\n  }),\n  isSelectable: _propTypes[\"default\"].bool,\n  canSelectAll: _propTypes[\"default\"].bool,\n  hasRadio: _propTypes[\"default\"].bool,\n  variant: _propTypes[\"default\"].string\n};\nSkeletonTable.defaultProps = {\n  rowSize: 0,\n  paddingColumnSize: 0,\n  canSelectAll: false,\n  isSelectable: false,\n  hasRadio: false,\n  variant: null\n};\nvar _default = SkeletonTable;\nexports[\"default\"] = _default;","import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nvar InventoryLoadError = function InventoryLoadError(_ref) {\n  var component = _ref.component,\n      props = _objectWithoutProperties(_ref, [\"component\"]);\n\n  useEffect(function () {\n    console.error(\"Unable to load iventory component. Failed to load \".concat(component, \".\"), props);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"Unable to load inventory component\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Failed to load \", component), /*#__PURE__*/React.createElement(\"code\", null, \"More info can be found in browser console output.\"));\n};\n\nInventoryLoadError.propTypes = {\n  component: PropTypes.string\n};\nexport default InventoryLoadError;","import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye } from \"@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js\";\nimport { Spinner } from \"@patternfly/react-core/dist/esm/components/Spinner/Spinner.js\";\nimport InventoryLoadError from './InventoryLoadError';\n\nvar BaseInvTable = function BaseInvTable(props) {\n  var history = useHistory();\n  var store = useStore();\n  return /*#__PURE__*/React.createElement(Suspense, {\n    fallback: props.fallback\n  }, /*#__PURE__*/React.createElement(ScalprumComponent, _extends({\n    history: history,\n    store: store,\n    appName: \"inventory\",\n    module: \"./InventoryTable\",\n    scope: \"inventory\",\n    ErrorComponent: /*#__PURE__*/React.createElement(InventoryLoadError, _extends({\n      component: \"InventoryDetailHead\",\n      history: history,\n      store: store\n    }, props)),\n    ref: props.innerRef\n  }, props)));\n};\n\nBaseInvTable.propTypes = {\n  fallback: PropTypes.node,\n  innerRef: PropTypes.object\n};\n/**\n * Inventory sub component.\n *\n * This component shows systems table connected to redux.\n */\n\nvar InvTable = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(BaseInvTable, _extends({\n    innerRef: ref\n  }, props));\n});\nInvTable.propTypes = {\n  /** React Suspense fallback component. <a href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\" target=\"_blank\">Learn more</a>. */\n  fallback: PropTypes.node\n};\nInvTable.defaultProps = {\n  fallback: /*#__PURE__*/React.createElement(Bullseye, {\n    className: \"pf-u-p-lg\"\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    size: \"xl\"\n  }))\n};\nexport default InvTable;","/* eslint-disable react/no-danger */\nimport React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant=\"checkbox\"\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label=\"os-version-filter\"\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <DropdownItem key=\"pdf\" component=\"button\" onClick={() => downloadReport(true)} {...props}>\n        {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, size, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton\n                    size={size ?? SkeletonSize.lg}\n                    {...props}\n                    style={{ display: 'inline-block', ...props.style }}\n                />;\n            default:\n                return <Skeleton size={size ?? SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node,\n    size: propTypes.string\n};\n\nexport default WithLoader;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description !== 'No description is available for this CVE.';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = props => {\n    const { cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, intl } = props;\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{props.score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = props => {\n    const { title, value, content } = props;\n\n    return (\n        <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n            appendTo={document.querySelector('.vulnerability')}>\n            <Stack className=\"popover-content\">\n                <StackItem>\n                    <Label isLarge>{title}</Label>\n                </StackItem>\n                <StackItem>\n                    <a>{value}</a>\n                </StackItem>\n            </Stack>\n        </Popover>\n    );\n};\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { injectIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, intl }) => {\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const brPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n        </Stack>\n    );\n\n    const statusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={brPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={statusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageSidebar);\n","import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({ data, changeExposedSystemsParameters }) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar cveAttributes={data.data} />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemsIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRowsRawData.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRowsRawData),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemsIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={remediableSystems.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_ABSENCE_OPTIONS\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded)\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                selectedRowsRawData={selectedRowsRawData}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n                                <ColumnManagementModal\n                                    appliedColumns={columns}\n                                    applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={setColumnModalOpen}\n                                />\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [\n            {\n                business_risk_id: cveDetails.data.business_risk_id,\n                id: cveName,\n                justification: cveDetails.data.business_risk_justification\n            }\n        ]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} />\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={[\n                                {\n                                    title: PATHS.cvesPage.title,\n                                    to: PATHS.cvesPage.to,\n                                    loaded: true\n                                },\n                                {\n                                    title: cveName,\n                                    isActive: true,\n                                    loaded: true\n                                }\n                            ]}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                data={cveDetails}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} showBreadcrumb={false} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool.isRequired\n};\n\nexport default injectIntl(CveStatusModal);\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] || false\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id'),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["arrayLikeToArray","module","exports","arr","Array","isArray","__esModule","self","ReferenceError","instance","Constructor","TypeError","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","prototype","create","constructor","iter","Symbol","iterator","from","_typeof","assertThisInitialized","call","_setPrototypeOf","p","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","_interopRequireDefault","_toConsumableArray2","_classCallCheck2","_createClass2","_assertThisInitialized2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_defineProperty2","_react","_reactTable","_Skeleton","_propTypes","SkeletonTable","_React$Component","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","Boolean","valueOf","e","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","_this","_len","length","args","_key","concat","colSize","props","map","title","createElement","Skeleton","size","SkeletonSize","sm","_this$props","paddingColumnSize","columns","newArray","createColumns","_this$props2","rowSize","numberOfCols","disableSelection","cells","md","hasRadio","RowSelectVariant","radio","checkbox","_this$props3","canSelectAll","isSelectable","sortBy","variant","Table","getColumns","rows","createRows","onSelect","selectVariant","TableHeader","TableBody","Component","propTypes","number","array","shape","index","direction","oneOf","bool","string","defaultProps","_default","InventoryLoadError","_ref","component","useEffect","console","error","BaseInvTable","history","store","Suspense","fallback","ScalprumComponent","appName","scope","ErrorComponent","ref","innerRef","InvTable","className","renderer","marked","link","replace","CSAwRuleSummary","text","truncate","intl","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","filterValue","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","filterValues","children","onToggle","_","changedLabel","newValue","changedValue","version","includes","splice","indexOf","rhel_version","join","page","selections","item","placeholderText","loadingVariant","onClick","style","maxHeight","overflow","slice","option","isDisabled","disabled","description","currentFilter","dynamicFilters","config","currentValue","rule_presence","rule","filterBySecurityRule","values","isDynamic","undefined","dropdownItems","items","RULE_PRESENCE_OPTIONS","unionWith","isEqual","onChange","event","status_id","filterByStatus","filter","STATUS_OPTIONS","kebabItemDownloadPDF","loading","downloadReport","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","content","color","LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","Spinner","centered","TableVariant","display","keys","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","grow","default","height","width","TextContent","textAlign","Text","TextVariants","V3names","AV","name","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","cvssVer","cvssVector","parsedVector","forEach","curr","val","cvssVersion","Popover","id","position","maxWidth","enableFlip","headerContent","bodyContent","gridBreakPoint","entries","Label","isLarge","score","substring","SnippetWithHeaderAndPopover","appendTo","document","querySelector","CVEDetailsPageSidebar","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","toString","brPopoverContent","statusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","svgPath","yOffset","xOffset","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","rule_impact","Tooltip","impactTextList","InsightsLabel","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","cve","_i","CVES_PATH","reduce","prev","KnownExploitSummary","useIntl","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","selectedRowsRawData","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemsIdsByCve","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","securityRuleFilter","RULE_ABSENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","useSelector","entities","shallowEqual","total","loaded","CVEDetailsPageStore","params","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createExposedSystemsRows","columnCounter","setColumnCount","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","match","tableProps","isStickyHeader","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","useRouteMatch","canEditStatusOrBusinessRisk","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","current","onRefreshData","clearCveStore","justification","exposed_systems_count","kebabItems","BusinessRiskModal","open","business_risk_id","CveStatusModal","overwriteSystemsStatus","Provider","celebrity_name","actionsOuiaId","breadcrumbs","PATHS","isActive","labels","attributes","Main","showBreadcrumb","useStatusSelect","initialValue","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","handleClose","onClose","then","ReadOnlyNotification","NotAuthorizedNotification","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","handleOnRadioChange","currentTarget","autoDismiss","parseInt","business_risk_text","BUSINESS_RISK_OPTIONS","isChecked","every","setSelectProps","checkboxState","setCheckboxState","cvesWithExposedSystems","Promise","setCveStatus","status_text","setSystemCveStatus","cveId","chunks","fontSize","checked","verticalAlign","initialState","tagsLoaded","allTagsLoaded","invConfig","prevLoadedRows","modifyInventory","state","action","some","patchAccess","selected","unionBy","results","newState","ActionTypes"],"sourceRoot":""}