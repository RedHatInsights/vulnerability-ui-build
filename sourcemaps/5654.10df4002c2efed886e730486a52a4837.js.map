{"version":3,"file":"js/5654.7af5d0fb35a90c67ac47.js","mappings":"qyBAQA,IAAMA,EAAY,SAAHC,GAAA,IAAMC,EAAID,EAAJC,KAAMC,EAAOF,EAAPE,QAASC,EAAUH,EAAVG,WAAUC,EAAAJ,EAAEK,QAAAA,OAAO,IAAAD,GAAQA,EAAA,OAC3DE,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAOC,EAAAA,EAAOC,eACfP,GACGG,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAKG,EAAAA,EAAA,GAAOF,EAAAA,EAAOG,OAAK,IAAEC,MAAOR,EAAU,GAAK,MAClDC,IAAAA,cAACQ,EAAAA,GAAa,CACVC,MAAM,EACNF,MAAOR,EAAU,GAAK,GACtBW,QAAS,EACTJ,MAAOX,EAAKgB,cAAcC,EAAAA,EAASC,cACnCC,UAAWf,EAAOM,EAAAA,EAAA,GAAQF,EAAAA,EAAOY,WAAS,IAAEC,MAAO,UAAOC,EAC1DC,WAAY,CACRC,OAAQ,QACRC,YAAa,EACbC,YAAa,UACbC,OAAQvB,EAAU,GAAK,OAKtCH,GACGI,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAOC,EAAAA,EAAOG,OAChBN,IAAAA,cAACQ,EAAAA,GAAa,CACVC,MAAM,EACNF,MAAOR,EAAU,GAAK,GACtBO,MAAOX,EAAKgB,cAAcC,EAAAA,EAASW,mBACnCT,UAAWf,EAAUI,EAAAA,EAAOY,eAAYE,EACxCC,WAAY,CACRC,OAAQ,QACRC,YAAa,EACbC,YAAa,UACbC,OAAQvB,EAAU,GAAK,OAKpC,EAGXN,EAAU+B,UAAY,CAClB5B,QAAS4B,IAAAA,KACT3B,WAAY2B,IAAAA,KACZ7B,KAAM6B,IAAAA,IACNzB,QAASyB,IAAAA,MAGb,S,wIC9CMC,EAAY,SAAH/B,GAAgC,IAA1BE,EAAOF,EAAPE,QAASC,EAAUH,EAAVG,WAE1B,OACIG,IAAAA,cAACC,EAAAA,GAAI,KACCJ,GACEG,IAAAA,cAAC0B,EAAAA,GAAI,CAACxB,MAAOC,EAAAA,EAAOwB,SACfC,EAAAA,EAAAA,IAAmBhB,EAAAA,EAASiB,wBAInCjC,GACEI,IAAAA,cAAC0B,EAAAA,GAAI,CAACxB,MAAOC,EAAAA,EAAOwB,SACfC,EAAAA,EAAAA,IAAmBhB,EAAAA,EAASkB,wBAMjD,EAEAL,EAAUD,UAAY,CAClB5B,QAAS4B,IAAAA,KACT3B,WAAY2B,IAAAA,MAGhB,S,62BCrBA,IAAMO,EAAY,SAAHrC,GAAoE,IAA9DsC,EAAItC,EAAJsC,KAAMC,EAAIvC,EAAJuC,KAAMtC,EAAID,EAAJC,KAAMuC,EAAMxC,EAANwC,OAAQC,EAAIzC,EAAJyC,KAAIC,EAAA1C,EAAE2C,gBAAAA,OAAe,IAAAD,GAAQA,EAClEE,EAAmB,CACrB,CACIC,KAAM,eACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAAS6B,eAEjD,CACIF,KAAM,cACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAAS8B,gBAC7CC,IAAK,cAET,CACIJ,KAAM,SACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASgC,SAC7CD,IAAK,UAET,CACIJ,KAAM,YACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASiC,iBAC7CF,IAAK,oBAET,CACIJ,KAAM,mBACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASkC,eAC7CH,IAAK,iBAET,CACIJ,KAAM,YACNL,OAAQ,CAAEM,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASmC,SAC7CJ,IAAK,WAIPK,EAAgB,SAAHC,GAAA,IAAMT,EAAKS,EAALT,MAAOtC,EAAK+C,EAAL/C,MAAK,OAAOF,IAAAA,cAAC0B,EAAAA,GAAI,CAACwB,IAAKV,EAAOtC,MAAOA,GAAQsC,EAAa,EACtFW,EAAa,CAAC,aAAc,SAAU,mBAAoB,gBAAiB,UAE3EC,EAAgB,GAGhBlB,GACAkB,EAAcC,KAAK,CAAEb,MAAO7C,EAAKgB,cAAcC,EAAAA,EAAS0C,SACxDH,EAAa,GAEbb,EAAiBiB,SAAQ,SAAAC,GACjBtB,EAAOuB,SAASD,EAAKjB,QACrBa,EAAcC,KAAKG,EAAKtB,QACxBsB,EAAKb,KAAOQ,EAAWE,KAAKG,EAAKb,KAEzC,KAEc,SAATR,EACLiB,EAAgB,CACZ,CAAEZ,MAAO7C,EAAKgB,cAAcC,EAAAA,EAAS0C,SACvCI,OAAOpB,EAAiBqB,KAAI,SAAAH,GAAI,OAAIA,EAAKtB,MAAM,MAGjDiB,EAAa,CAAC,eAAgB,KAAM,YAAa,WAEjDC,EAAgB,CACZ,CAAEZ,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASgD,yBAA0BC,GAAI,QACnE,CAAErB,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASkD,4BACrC,CAAEtB,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASmD,8BACrC,CAAEvB,MAAO7C,EAAKgB,cAAcC,EAAAA,EAASoD,+BAI7C,IAAMC,EAAW,SAACC,GACd,IAAMtE,EAAUsE,EAAIC,OAASD,EAAIC,MAAMC,OAAS,EAChD,OAAO/B,EAAkBzC,GAAWsC,EAAOuB,SAAS,iBAAmB7D,CAC3E,EAMMyE,GAAOC,EAAAA,EAAAA,GACNtC,EAAK2B,KAAI,SAAAY,GAAyB,IALzBC,EAAqB3D,EAKNqD,EAAGK,EAAfE,WAwBX,MAAO,CAtBHzE,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOwE,UAClC3E,IAAAA,cAACC,EAAAA,GAAI,KACDD,IAAAA,cAAC0B,EAAAA,GAAI,KACD1B,IAAAA,cAAC4E,EAAAA,GAAI,CACD1E,MAAOC,EAAAA,EAAO0E,KACdC,IAAG,GAAApB,OAAKqB,EAAAA,GAAS,KAAArB,OAAIQ,EAAIc,WAExBd,EAAIc,YAIjBhF,IAAAA,cAACP,EAAAA,EAAS,CAACI,YAlBX2E,EAkBkCN,EAlBbrD,EAAY2D,EAA3BS,cAClB5C,EAAkBxB,GAAgBqB,EAAOuB,SAAS,iBAAmB5C,GAiBjBjB,QAASqE,EAASC,GAAMvE,KAAMA,EAAMI,SAAO,OAKrFmC,GAAUA,EAAOuB,SAAS,kBAC5BzD,IAAAA,cAAC0B,EAAAA,GAAI,CAACwB,IAAKgB,EAAIgB,YAAahF,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOwE,WACvDQ,EAAAA,EAAAA,IAAYjB,EAAIgB,eAMNxB,QAAAY,EAAAA,EAAAA,GACZnB,EAAWQ,KAAI,SAAAH,GAAI,OAAIR,EAAc,CAAER,MAAO0B,EAAIV,GAAOtD,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOwE,UAAW,KAE/G,KAGES,GAAUd,EAAAA,EAAAA,GACTtC,EAAK2B,KAAI,SAAA0B,GAA4B,IAAbC,EAAMD,EAAlBZ,WACX,MAAO,CACHzB,EAAc,CAAER,MAAO8C,EAAOC,aAAcrF,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOqF,kBAC5ExC,EAAc,CAAER,MAAO8C,EAAOG,GAAIvF,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOuF,cAClE1C,EAAc,CACVR,MAAO8C,EAAOK,QACRhG,EAAKgB,cAAcC,EAAAA,EAASgF,sBAC5BN,EAAOO,UAAW3F,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOuF,cAE5D1C,EAAc,CAAER,OAAOsD,EAAAA,EAAAA,IAAWR,EAAOS,SAAS,GAAO7F,MAAO,CAACC,EAAAA,EAAOuE,SAAUvE,EAAAA,EAAOuF,cAEjG,KAGJ,OAAO1F,IAAAA,cAACgG,EAAAA,SAAQ,CAAC9C,IAAKjB,GAClBjC,IAAAA,cAACiG,EAAAA,GAAK,CACFC,YAAU,EACVC,KAAI,CACA/C,EAAcO,KAAI,SAAAH,GAAI,OAAIR,EAAa3C,EAAAA,EAAC,CAAC,EAClCmD,GAAI,IACPtD,MAAO,CAACC,EAAAA,EAAOiG,WAAqB,SAATjE,EACrBhC,EAAAA,EAAOwE,QACK,SAAZnB,EAAKK,GACD1D,EAAAA,EAAOqF,eACPrF,EAAAA,EAAOuF,cACnB,KAAChC,QAAAY,EAAAA,EAAAA,GACW,SAATnC,EAAmBkC,EAAUe,MAGzB,IAAhBpD,EAAKoC,QAAgBpE,IAAAA,cAAC0B,EAAAA,GAAI,KAAE/B,EAAKgB,cAAcC,EAAAA,EAASyF,sBAEjE,EAEAtE,EAAUP,UAAY,CAClBQ,KAAMsE,IAAAA,OACN3G,KAAM2G,IAAAA,IACNrE,KAAMqE,IAAAA,OACNpE,OAAQoE,IAAAA,MACRnE,KAAMmE,IAAAA,OACNjE,gBAAiBiE,IAAAA,MAGrB,U,eCjJMC,EAAe,SAAH7G,GAiCd,IAjC6F,IAAA8G,EAAzExE,EAAItC,EAAJsC,KAAMyE,EAAI/G,EAAJ+G,KAAMC,EAAOhH,EAAPgH,QAAS/G,EAAID,EAAJC,KAAM0C,EAAe3C,EAAf2C,gBAAiBsE,EAAUjH,EAAViH,WAAYC,EAAIlH,EAAJkH,KAAMzE,EAAIzC,EAAJyC,KAE5E0E,EAAkBxE,EAAmBqE,EAAUA,EAAQI,QAAO,SAACC,EAAKvD,GAAS,IAAAwD,EAAAC,EAAAC,EAW/E,OAVAH,EAAIvD,EAAKN,KAAO,CACZiE,OAAQ3D,EAAK4D,SACbC,OAAqB,iBAAb7D,EAAKN,IACPoE,EAAAA,GAAoBC,MAAK,SAAAC,GAAG,OAAIA,EAAIhF,QAAUgB,EAAKiE,MAAM,GAAGjF,KAAK,IAAEkF,eACnElE,EAAKiE,MAAM9D,KAAI,SAAAV,GAAO,OAAAA,EAAJV,IAAe,IAAEoF,KAAK,MAC9CC,aAAqF,QAAxEZ,GAAU,SAAT7E,EAAkB0F,EAAAA,GAAqBC,EAAAA,IAAuBtE,EAAKN,YAAI,IAAA8D,OAAA,EAAxEA,EAA0Ee,aAC/EC,EAAAA,EACDxE,EAAKiE,MAAMrD,UAA4B,QAAtB6C,EAAKgB,EAAAA,GAAQzE,EAAKN,YAAI,IAAA+D,GAAO,QAAPC,EAAjBD,EAAmBiB,aAAK,IAAAhB,OAAP,EAAjBA,EAA0B9C,SAAUZ,EAAK2E,UAChE,MAEHpB,CACX,GAAG,CAAC,GAEAqB,EAA0B,CAC1B,CAAE7F,KAAM,SAAU8F,IAAKzH,EAAAA,EAAS0H,6BAA8BC,WAAW,GACzE,CAAEhG,KAAM,mBAAoB8F,IAAKzH,EAAAA,EAAS4H,iCAAkCD,WAAW,GACvF,CAAEhG,KAAM,YAAa8F,IAAKzH,EAAAA,EAAS6H,2BAA4BF,WAAW,GAC1E,CAAEhG,KAAM,gBAAiB8F,IAAKzH,EAAAA,EAAS8H,iCAAkCH,WAAW,GACpF,CAAEhG,KAAM,gBAAiB8F,IAAKzH,EAAAA,EAAS8H,iCAAkCH,WAAW,GACpF,CAAEhG,KAAM,eAAgB8F,IAAKzH,EAAAA,EAAS+H,gCAGtCC,EAA8B,CAC9B,CAAErG,KAAM,SAAU8F,IAAKzH,EAAAA,EAASiI,kCAAmCN,WAAW,GAC9E,CAAEhG,KAAM,eAAgB8F,IAAKzH,EAAAA,EAASkI,mCAGtCC,EAAgC,SAAT5G,EAAkBiG,EAA0BQ,EAG9DI,EAAI,EAAGA,EAAID,EAAqB3E,OAAQ4E,IAC7C,GAAInC,EAAeoC,eAAeF,EAAqBC,GAAGzG,MAAO,CAC7DwG,EAAqBC,GAAGE,SAAU,EAClC,KACJ,CAIJ,IAAK,IAAIF,EAAID,EAAqB3E,OAAS,EAAG4E,GAAK,EAAGA,IAClD,GAAInC,EAAeoC,eAAeF,EAAqBC,GAAGzG,MAAO,CAC7DwG,EAAqBC,GAAGG,QAAS,EACjC,KACJ,CAGJ,IAyC8CC,EAAAC,EAAAC,EACpCC,EA1CwBC,EAwElC,OACIxJ,IAAAA,cAACgG,EAAAA,SAAQ,CAAC9C,IAAI,iBAENb,GACIrC,IAAAA,cAACyJ,EAAAA,GAAS,MACL7H,EAAAA,EAAAA,IAAmBhB,EAAAA,EAAS8I,+BAK/B,SAATvH,EAjFLnC,IAAAA,cAACyJ,EAAAA,GAAS,MAEF7H,EAAAA,EAAAA,IAAmBhB,EAAAA,EAAS+I,yCACxB,CACIC,cAAe/C,EAAeoC,eAAe,UAAY,MAAQ,KACjEY,WAAYhD,EAAeM,QAAUN,EAAeM,OAAOE,OAC3DyC,MACIjD,EAAekD,aAAelD,EAAekD,YAAY1C,QACxD2C,EAAAA,GAAoBD,YAAYE,KAAKC,QAAQ,GAAK,MACnDF,EAAAA,GAAoBD,YAAYI,GAAGD,QAAQ,GAC/CE,UACIvD,EAAewD,cAAgBxD,EAAewD,aAAahD,SAC1DzF,EAAAA,EAAAA,IAAmBhB,EAAAA,EAAS0J,+BAKzCvB,EAAqBpF,KAAI,SAAAwD,GAAM,IAAAoD,EAAA,OAC3B1D,EAAeoC,eAAe9B,EAAO5E,SAAqC,QAA5BgI,EAAC1D,EAAeM,EAAO5E,aAAK,IAAAgI,GAA3BA,EAA6B3C,eAC3EhG,EAAAA,EAAAA,IAAmBuF,EAAOkB,IAC3B,CACIhB,OAAQF,EAAOoB,UACX1B,EAAeM,EAAO5E,MAAM8E,OAAOmD,cACnC3D,EAAeM,EAAO5E,MAAM8E,OAChCoD,OAAQtD,EAAOgC,OAASxJ,EAAKgB,cAAcC,EAAAA,EAAS8J,iBAAmB,KAE9E,IAEJ7D,EAAe8D,KAAO,QAAU,GAE7B9D,EAAe8D,KAAOhL,EAAKgB,cAAcC,EAAAA,EAASgK,oBAAsB,IACxE/D,EAAe8D,KAAKtD,OAAO1D,KAAI,SAAAkH,GAAG,SAAAnH,OAAOmH,EAAIC,UAAS,KAAApH,OAAImH,EAAI3H,IAAG,KAAAQ,OAAImH,EAAIrI,MAAK,IAAIuI,MAAM,EAAG,IAAIpD,KAAK,MAAQ,IAGzF,QAAnB6B,EAAA3C,EAAe8D,YAAI,IAAAnB,OAAA,EAAnBA,EAAqBnC,OAAOjD,QAAS,IAAM,IACzCzE,EAAKgB,cAAcC,EAAAA,EAASoK,0BAA2B,CAAEC,MAAOpE,EAAe8D,KAAKtD,OAAOjD,OAAS,KAEzG,UAICmF,EAAkE,QAApDH,EAAG1C,EAAQa,MAAK,SAAAJ,GAAM,MAAmB,aAAfA,EAAOjE,GAAkB,WAAC,IAAAkG,OAAA,EAAjDA,EAAmD8B,YAErC,QAA7B7B,EAAA8B,OAAO9D,OAAOR,UAAe,IAAAwC,GAA+C,QAA/CC,EAA7BD,EAA+BlC,QAAO,SAAAA,GAAM,OAA2B,IAAvBA,EAAOS,WAAoB,WAAC,IAAA0B,OAA/C,EAA7BA,EAA8ElF,QAAS,EAC3FpE,IAAAA,cAACyJ,EAAAA,GAAS,KAEF9J,EAAKgB,cAAcC,EAAAA,EAASwK,2BAGD,KAA3B7B,aAAc,EAAdA,EAAgBnF,UAAuC,SAAtBmF,EAAe,GAC1C,IAAM5J,EAAKgB,cAAcC,EAAAA,EAASyK,iCAClC,IAAM1L,EAAKgB,cAAcC,EAAAA,EAAS0K,iCAGxCvC,EAAqBpF,KAAI,SAAAwD,GAAM,IAAAoE,EAAA,OAC3B1E,EAAeoC,eAAe9B,EAAO5E,SAAqC,QAA5BgJ,EAAC1E,EAAeM,EAAO5E,aAAK,IAAAgJ,GAA3BA,EAA6B3D,eAC3EhG,EAAAA,EAAAA,IAAmBuF,EAAOkB,IAC3B,CACIhB,OAAQF,EAAOoB,UACX1B,EAAeM,EAAO5E,MAAM8E,OAAOmD,cACnC3D,EAAeM,EAAO5E,MAAM8E,OAChCoD,OAAQtD,EAAO+B,QAAU,GAAM/B,EAAOgC,OAASxJ,EAAKgB,cAAcC,EAAAA,EAAS8J,iBAAmB,KAErG,IAEJ,SAEL,MAgBU,SAATvI,GACGnC,IAAAA,cAACyJ,EAAAA,GAAS,KACNzJ,IAAAA,cAAC0B,EAAAA,GAAI,MACAE,EAAAA,EAAAA,IAAmBhB,EAAAA,EAAS4K,uBAAwB,CACjD3F,UAAWY,EAAKgF,YAAYC,WAC5BC,aAAclF,EAAKkF,aAAaD,cAGlCrJ,IAAoC,QAArBmE,EAAIG,EAAWzE,cAAM,IAAAsE,OAAA,EAAjBA,EAAmB/C,SAAS,oBAAqBpB,KAClET,EAAAA,EAAAA,IAAmBhB,EAAAA,EAASgL,8BAA+B,CACvDC,kBAAmBpF,EAAKoF,kBAAkBH,eAQ1D/E,GAAcA,EAAWmF,UAEjB9L,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAOC,EAAAA,EAAO2L,WAChB9L,IAAAA,cAACyJ,EAAAA,GAAS,CAACvJ,MAAOC,EAAAA,EAAO4L,gBACrB/L,IAAAA,cAAC0B,EAAAA,GAAI,CAACxB,MAAOC,EAAAA,EAAO6L,MACfrM,EAAKgB,cAAcC,EAAAA,EAASqL,6BAGrCjM,IAAAA,cAACyJ,EAAAA,GAAS,KACNzJ,IAAAA,cAAC0B,EAAAA,GAAI,KAAEiF,EAAWmF,YAEtB9L,IAAAA,cAACyJ,EAAAA,GAAS,KACL7C,GAAQA,EAAKsF,UACVlM,IAAAA,cAAC0B,EAAAA,GAAI,CAACxB,MAAOC,EAAAA,EAAOgM,QACfxM,EAAKgB,cAAcC,EAAAA,EAASwL,+BAAgC,CACzD7J,KAAM,GAAFmB,OAAKkD,EAAKsF,SAAStF,KAAKyF,WAAU,KAAA3I,OAAIkD,EAAKsF,SAAStF,KAAK0F,gBAMjF,KAGZtM,IAAAA,cAACC,EAAAA,GAAI,CAACC,MAAOC,EAAAA,EAAOoM,MACfxK,EAAU,CAAEC,KAAAA,EAAMrC,KAAAA,EAAMuC,OAAQyE,GAAcA,EAAWzE,OAAQC,KAAAA,EAAME,gBAAAA,KAIxF,EAEAkE,EAAaiG,aAAe,CACxB5F,UAAM3F,GAGVsF,EAAa/E,UAAY,CACrB7B,KAAM2G,IAAAA,IACNI,QAASJ,IAAAA,MACTtE,KAAMsE,IAAAA,OACNG,KAAMH,IAAAA,OACNK,WAAYL,IAAAA,OACZjE,gBAAiBiE,IAAAA,KACjBM,KAAMN,IAAAA,OACNnE,KAAMmE,IAAAA,QAGV,U,isBC9LA,IAAMmG,EAAqB,SAAH/M,GAQlB,IAPFgH,EAAOhH,EAAPgH,QACAgG,EAAMhN,EAANgN,OAAMC,EAAAjN,EACNiH,WAAAA,OAAU,IAAAgG,EAAG,CAAC,EAACA,EACfC,EAAWlN,EAAXkN,YAAWxK,EAAA1C,EACX2C,gBAAAA,OAAe,IAAAD,GAAQA,EACvB9B,EAAKZ,EAALY,MACGuM,GAAKC,EAAAA,EAAAA,GAAApN,EAAAqN,GAEFpN,GAAOqN,EAAAA,EAAAA,KACPC,GAASC,EAAAA,EAAAA,KACfC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA2CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnD7N,EAAO8N,EAAA,GAAEC,EAAuBD,EAAA,GACvCE,GAAiCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAAzC/N,EAAUgO,EAAA,GAAEC,EAAUD,EAAA,GAC7BE,GAA8CC,EAAAA,EAAAA,MAAiBC,GAAAX,EAAAA,EAAAA,GAAAS,EAAA,GAAxDG,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,IAE1CG,EAAAA,EAAAA,YAAU,WACNZ,GAAW,GACXU,EAAgB,CAAE7F,IAAK1I,EAAKgB,cAAcC,EAAAA,EAASyN,kCACvD,GAAG,IAEH,IAAMC,EAAgB,SAAAtM,GAAI,OAAIuM,EAAAA,EAAAA,IAC1BvM,EACAwM,EAAAA,GAAoBC,YACpB,SAAAxL,GAAA,IAAGwB,EAAUxB,EAAVwB,WAAU,OAAQA,EAAWN,MAAMC,OAAS,GAAKK,EAAWQ,cACzDuJ,EAAAA,GAAoBE,uBACpB,CAAC,GACV,EACKC,EAAS,eAAAnK,GAAAoK,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAtI,EAAAuI,EAAApI,EAAAqI,EAAAjN,EAAAkN,EAAAT,EAAA,OAAAI,IAAAA,MAAA,SAAAM,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAKoBC,EAAAA,EAAAA,IAAmBjP,EAAAA,EAAAA,EAAC,CAAC,EAC5CqM,GACA6C,EAAAA,EAAeC,eAAa,IAC/BC,KAAM/C,EAAO+C,MAAQ,cACrBC,UAAW,QACRrN,EACG,CAAEsN,gBAAiB,QACnB,CAAEC,OAAQ,UAClB,OAAAZ,EAAAG,EAAAU,KAROd,EAAIC,EAAVhN,KAAYyE,EAAIuI,EAAJvI,KAAI0I,EAAAE,KAAA,gBAoBD,OApBCF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAWnBhB,IAEAD,EAAiC,QAAjBiB,EAAAW,GAAM/M,OAAmBgN,EAAAA,GAA4B,CACjErP,QAAS,SACTsP,aAAa,EACb3H,IAAK1I,EAAKgB,cAAcC,EAAAA,EAASqP,wCACjCC,YAAavQ,EAAKgB,cAAcC,EAAAA,EAASuP,yCAG7C3C,GAAW,GAAO2B,EAAAiB,OAAA,SAEX,IAAE,YAITzJ,IAAcA,EAAWmF,UAAS,CAAAqD,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GACrBpC,EAAOoD,KAAKC,UAAS,QAAlC1J,EAAIuI,EAAAU,KAAA,QAsDqG,OAnDvGZ,EAAc,SAACF,EAAMtI,GAGvB,OAFAA,EAAKoF,kBAAoBkD,EAAK5H,QAAO,SAAA5C,GAAa,OAAoC,IAApCA,EAAVE,WAA4BQ,aAAsB,IAAEb,OAErF2K,EAAKpL,KAAI,SAAAO,GAAO,IAAAqM,EAKnB,OAJK9J,EAAK7G,UACN6G,EAAK7G,QAAUsE,EAAIO,WAAWN,MAAMC,OAAS,GAGjD/D,EAAAA,EAAA,GACO6D,GAAG,IACNO,WAAUpE,EAAAA,EAAA,GACH6D,EAAIO,YAAU,IACjB1B,OAAQyN,EAAAA,GAAejJ,MAAK,SAAA/D,GAAI,OAC5BA,EAAKhB,QAAU0B,EAAIO,WAAWgM,UAAU/E,UAAU,IAAEpL,MACxDoQ,cAAeC,EAAAA,GAAsBpJ,MAAK,SAAA/D,GAAI,OAC1CA,EAAKhB,QAAU0B,EAAIO,WAAWmM,iBAAiBlF,UAAU,IAAEpL,MAC/DsC,QAAyC,QAAjC2N,EAAAM,EAAAA,GAAW3M,EAAIO,WAAW7B,eAAO,IAAA2N,OAAA,EAAjCA,EAAmCO,QAASnR,EAAKgB,cAAcC,EAAAA,EAASmQ,mBAChFC,WAAYC,WAAW/M,EAAIO,WAAWyM,aAAehN,EAAIO,WAAW0M,aAAajH,QAAQ,MAGrG,GACJ,EAEMlI,EAAOiN,EAAYF,EAAMtI,GAE/BkH,GAAwB,WAAM,IAAAnH,EAC1B,OAAOnE,EAAkBoE,EAAK7G,SAAW+G,IAA+B,QAArBH,EAAIG,EAAWzE,cAAM,IAAAsE,OAAA,EAAjBA,EAAmB/C,SAAS,kBAAmBgD,EAAK7G,OAC/G,IAEAkO,GAAW,WAAM,IAAAsD,EACb,OAAO/O,EACDoE,EAAKoF,kBAAoB,GAAKlF,IAA+B,QAArByK,EAAIzK,EAAWzE,cAAM,IAAAkP,OAAA,EAAjBA,EAAmB3N,SAAS,kBACxEgD,EAAKoF,kBAAoB,CACnC,IAEMqD,EAAY3I,EAAa,CAC3BvE,KAAMA,EAAKqP,OAAO,GAAGC,EAAAA,EAAAA,IAAmB3K,EAAY+F,IACpDjG,KAAAA,EACAC,QAAAA,EACA/G,KAAAA,EACA0C,gBAAAA,EACAsE,WAAAA,EACAC,KAAAA,EACAzE,KAAM,SAGJsM,EAAaH,EAActM,GAEjCwL,GAAW,GAEXW,IACAD,EAAgB,CAAExN,QAAS,UAAW2H,IAAK1I,EAAKgB,cAAcC,EAAAA,EAAS2Q,qCAAsCpC,EAAAiB,OAAA,UAGzGlB,GAASxL,QAAAY,EAAAA,EAAAA,GACNmK,EAAW9K,KAAI,SAAC6N,EAASC,GAAK,OAC7B1P,EAAU,CACNC,KAAMwP,EACNvP,KAAMwP,EACN9R,KAAAA,EACAuC,OAAQyE,GAAcA,EAAWzE,OACjCC,KAAM,OACNE,gBAAAA,GACF,OACL,yBAAA8M,EAAAuC,OAAA,GAAA5C,EAAA,kBAER,kBArGc,OAAAtK,EAAAmN,MAAA,KAAAC,UAAA,KAuGf,OACI5R,IAAAA,cAAA,WACIA,IAAAA,cAAC6R,EAAAA,IAAcC,EAAAA,EAAAA,GAAA,CACXC,SAAU,KACVC,YAAY,YACZC,KAAK,KACL9P,KAAK,GACL+P,SAAQ,GAAAxO,OAAK6L,EAAAA,EAAe4C,SAAS9P,EAAkB,UAAY,IAAG,QACtEuK,YAAWvM,EAAA,CAAI0H,UAAW,UAAa6E,GACvCwF,cAAezD,EACf0D,mBAAmB,EACnB1Q,OAAQ3B,IAAAA,cAACyB,EAAAA,EAAS,CAAC9B,KAAMA,EAAMC,QAASA,EAASC,WAAYA,IAC7DyS,WACIjQ,EACMsE,EAAW4L,YACX5S,EAAKgB,cAAcC,EAAAA,EAAS4R,kBAEtClS,MACIiN,EACM5N,EAAKgB,cAAcC,EAAAA,EAAS2M,SAC5B5N,EAAKgB,cAAcL,IAEzBuM,IAIpB,EAEAJ,EAAmBD,aAAe,CAC9BlM,MAAOM,EAAAA,EAAS6R,kBAGpBhG,EAAmBjL,UAAY,CAC3BkF,QAASlF,IAAAA,UAAoB,CACzBA,IAAAA,MACAA,IAAAA,SAEJkL,OAAQlL,IAAAA,OACRmF,WAAYnF,IAAAA,OACZoL,YAAapL,IAAAA,OACblB,MAAOkB,IAAAA,UAAoB,CACvBA,IAAAA,MACAA,IAAAA,SAEJa,gBAAiBb,IAAAA,MAGrB,S","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => (\n    <View style={styles.labelsWrapper}>\n        {hasExploit &&\n            <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 62 : 75}\n                    variant={4}\n                    label={intl.formatMessage(messages.knownExploit)}\n                    textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#c9190b',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n        {hasRule &&\n            <View style={styles.label}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 59 : 63}\n                    label={intl.formatMessage(messages.securityRuleLabel)}\n                    textStyle={isSmall ? styles.smallText : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#bee1f4',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n    </View>\n);\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableDisabled)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    FILTERS, CVE_REPORT_FILTERS,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cvefilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cvefilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            {filtersBuilder.tags ? '.\\n\\n' : ''}\n            {\n                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +\n                filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''\n            }\n            {\n                filtersBuilder.tags?.values.length > 10 && ' '\n                + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })\n            }\n            {'.\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersDisabled)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersEnabled))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength } from '../../../Helpers/ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    STATUS_OPTIONS,\n    BUSINESS_RISK_OPTIONS,\n    PDF_REPORT_PER_PAGE,\n    impactList,\n    NotAuthorizedNotification\n} from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const chrome = useChrome();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(\n        data,\n        PDF_REPORT_PER_PAGE.otherPages,\n        ({ attributes }) => (attributes.rules.length > 0 || attributes.known_exploit)\n            ? PDF_REPORT_PER_PAGE.labelsHeightMultiplier\n            : 1\n    );\n    const cvesFetch = async () => {\n        let cves;\n        let meta;\n\n        try {\n            ({ data: cves, meta } = await getCveListByAccount({\n                ...params,\n                ...DownloadReport.defaultParams,\n                sort: params.sort || '-cvss_score',\n                affecting: 'true',\n                ...isReportDynamic\n                    ? { advanced_report: 'true' }\n                    : { report: 'true' }\n            }));\n        }\n        catch (error) {\n            clearNotifications();\n\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                fallback={null}\n                orientation=\"landscape\"\n                size=\"A4\"\n                type=\"\"\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"names":["CVElabels","_ref","intl","hasRule","hasExploit","_ref$isSmall","isSmall","React","View","style","styles","labelsWrapper","_objectSpread","label","width","InsightsLabel","icon","variant","formatMessage","messages","knownExploit","textStyle","smallText","left","undefined","labelStyle","border","borderWidth","borderColor","height","securityRuleLabel","propTypes","FooterPDF","Text","footer","intlFormatWithBold","knownExploitPDFFooter","securityRulePDFFooter","tablePage","data","page","header","type","_ref$isReportDynamic","isReportDynamic","POSSIBLE_HEADERS","name","value","publishDate","cvssBaseScore","hit","impact","systemsExposed","businessRisk","status","columnBuilder","_ref2","key","hitColumns","headerContent","push","cveId","forEach","item","includes","concat","map","systemsColumnHeaderName","id","systemsColumnHeaderOSFull","systemsColumnHeaderCveCount","systemsColumnHeaderUpdated","hasRules","cve","rules","length","cveRows","_toConsumableArray","_ref4","_ref3","attributes","bodyCell","cveCell","Link","link","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","_ref5","system","display_name","systemNameCell","os","systemCell","opt_out","systemsTableDisabled","cve_count","formatDate","updated","Fragment","Table","withHeader","rows","headerCell","customReportNoItems","PropTypes","firstPagePDF","_reportData$header","meta","filters","reportData","user","filtersBuilder","reduce","obj","_item$key","_FILTERS$item$key","_FILTERS$item$key$ite","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","chips","timespan_label","join","isAllChosen","CVE_REPORT_FILTERS","SYSTEM_REPORT_FILTERS","component","CheckboxCustomFilter","FILTERS","items","allChosen","cvefilterStringSegments","msg","CVEsPDFreportFiltersSeverity","lowercase","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersDefinedValue","CVEsPDFreportFiltersOsVersion","systemsFilterStringSegments","systemsPDFreportFiltersSearchTerm","systemsPDFreportFiltersOsVersion","filterStringSegments","i","hasOwnProperty","isFirst","isLast","_filters$find","_Object$values","_Object$values$filter","includedValues","_filtersBuilder$tags","Paragraph","customReportIntroductionText","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","from","toFixed","to","published","publish_date","customReportTimespanAnytime","_filtersBuilder$filte","toLowerCase","prefix","customReportAnd","tags","tagFilterParagraph","tag","namespace","slice","tagFilterParagraphAndMore","count","multiValue","Object","systemsPDFreportSubHeader","systemsPDFreportFiltersDisabled","systemsPDFreportFiltersEnabled","_filtersBuilder$filte2","CVEsPDFreportSubHeader","total_items","toString","system_count","CVEsPDFreportSubHeaderExploit","knownExploitCount","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","customReportUserNotesGenerated","first_name","last_name","mt16","defaultProps","DownloadCVEsReport","params","_ref$reportData","buttonProps","props","_objectWithoutProperties","_excluded","useIntl","chrome","useChrome","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","setSecurityRulesPresent","_useState5","_useState6","setExploit","_useNotification","useNotification","_useNotification2","addNotification","clearNotifications","useEffect","notificationReportDownloadStart","otherPagesPDF","chunkArray","PDF_REPORT_PER_PAGE","otherPages","labelsHeightMultiplier","cvesFetch","_asyncToGenerator","_regeneratorRuntime","_callee","cves","_yield$getCveListByAc","processData","firstPage","_context","prev","next","getCveListByAccount","DownloadReport","defaultParams","sort","affecting","advanced_report","report","sent","t0","NotAuthorizedNotification","autoDismiss","notificationReportDownloadFailureTitle","description","notificationReportDownloadFailureBody","abrupt","auth","getUser","_impactList$cve$attri","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impactList","title","impactListUnknown","cvss_score","parseFloat","cvss3_score","cvss2_score","_reportData$header2","splice","firstPagePDFLength","notificationReportDownloadSuccess","cvePage","index","stop","apply","arguments","DownloadButton","_extends","fallback","orientation","size","fileName","filename","asyncFunction","allPagesHaveTitle","reportName","reportTitle","cvePDFReportName","kebabExportAsPDF"],"sourceRoot":""}