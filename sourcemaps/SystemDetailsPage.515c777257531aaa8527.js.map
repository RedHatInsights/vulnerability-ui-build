{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetails.js","webpack:///./src/Store/Reducers/SystemDetailsPageStore.js","webpack:///./src/Components/SmartComponents/SystemDetailsPage/SystemDetailsPage.js"],"names":["SystemDetails","props","this","entity","isOptOut","optOutSystemHandler","loaded","buttonAction","id","display_name","allowedCveActions","showHeaderLabel","setPageTitle","React","propTypes","withRouter","connect","entityDetails","opt_out","initialState","InventoryDetail","optOutSystem","value","state","inventoryId","then","fetchSystemDetails","addNotification","variant","title","intl","formatMessage","messages","description","match","params","systemDetails","errors","DetailWrapper","Header","breadcrumbs","PATHS","to","isActive","InventoryDetailHead","onLoad","mergeWithEntities","mergeWithDetail","INVENTORY_ACTION_TYPES","ReducerRegistry","action","type","FETCH_SYSTEM_DETAILS","payload","data","LOAD_ENTITY_FULFILLED","activeApps","name","component","LOAD_ENTITY_REJECTED","systemDetailsPageStore","hideBack","actions","onClick","Main","AppInfo","injectIntl","SystemCvesStore","cveList","dispatch","system","status","optOutSystemAction","notification"],"mappings":"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","file":"js/SystemDetailsPage.7c8714de40abbe89921e.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetails extends React.Component {\n    static propTypes = {\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves\n                        entity={{ id: entity.id, display_name: entity.display_name }}\n                        allowedCveActions={['EDIT_STATUS', 'REMEDIATE']}\n                        showHeaderLabel\n                        setPageTitle\n                    />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetails)\n);\n","import React from 'react';\nimport SystemDetails from '../../Components/SmartComponents/SystemDetailsPage/SystemDetails';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailsPageStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetails />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailsPageStore } from '../../../Store/Reducers/SystemDetailsPageStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { injectIntl } from 'react-intl';\nimport { PATHS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nimport { AppInfo, DetailWrapper, InventoryDetailHead } from '@redhat-cloud-services/frontend-components/Inventory';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any,\n        errors: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n    }\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { systemDetails = {}, errors } = this.props;\n        const { opt_out: isOptOut = false, entity, loaded } = systemDetails;\n        return (\n            <React.Fragment>\n                <DetailWrapper>\n                    <Header\n                        title=\"\"\n                        breadcrumbs={[\n                            {\n                                title: PATHS.systemsPage.title,\n                                to: PATHS.systemsPage.to,\n                                loaded: true\n                            },\n                            {\n                                title: entity?.display_name || this.props.intl.formatMessage(messages.invalidSystem),\n                                isActive: true,\n                                loaded\n                            }\n                        ]}\n                    >\n                        {!errors && (\n                            <InventoryDetailHead\n                                onLoad={({ mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(),\n                                        ...mergeWithDetail(systemDetailsPageStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n                                    });\n                                }}\n                                hideBack\n                                actions={\n                                    entity && [\n                                        isOptOut\n                                            ? {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                                onClick: () => this.optOutSystem(false)\n                                            }\n                                            : {\n                                                title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                                onClick: () => this.optOutSystem(true)\n                                            }\n                                    ]\n                                }\n                            />\n                        )}\n                    </Header>\n\n                    {(\n                        <Main>\n                            <React.Fragment>\n                                <AppInfo optOutSystemHandler={this.optOutSystem} />\n                            </React.Fragment>\n                        </Main>\n                    )}\n                </DetailWrapper>\n            </React.Fragment>\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        errors: state.SystemCvesStore.cveList.payload.errors,\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}