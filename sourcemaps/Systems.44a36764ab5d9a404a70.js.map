{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","addNotification","useNotification","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","systemsFetch","msg","formatMessage","messages","getSystems","DownloadReport","meta","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","defaultValues","forEach","item","filter","join","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","flatMap","toLowerCase","toString","SystemsTableToolbar","selectedHosts","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","middlewareListener","on","callback","payload","newSelected","selected","id","onSelect","kebabProps","useMemo","selectedHostsData","s","includes","selectedExcluded","some","attributes","opt_out","selectedIncluded","kebabOptions","count","length","onClick","isDisabled","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","bulkSelect","total_items","checked","Boolean","ouiaId","handleOnCheckboxChange","actionsConfig","actions","dropdownProps","filterConfig","searchFilter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","showButton","onSuccess","dataShape","withRouter","injectIntl","SystemsPage","undefined","setSelectedHosts","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","variant","inventory","React","dispatch","useDispatch","useSelector","SystemsPageStore","shallowEqual","metadata","error","hasError","errorCode","isLoading","cveCount","cve_count","rest","inventory_id","useEffect","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","useDeepCompareEffect","systemId","optOut","optOutSystemsAction","then","description","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","tableProps","isStickyHeader","canSelectAll","onSort","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sort","sortBy","createSortBy","actionResolver","rowData","systemTableRowActions","TableVariant","showTags","isFullView","ref","perPage","page_size","total","onRefresh","pageSize","per_page","limit","current","onRefreshData","isLoaded","hasCheckbox","isChecked"],"mappings":"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","file":"js/Systems.b54caed6d0ea10365c8d.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.customReportNotificationSystem) });\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, PDF_REPORT_PER_PAGE.systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ excluded: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { apply, handleSelect, doOptOut } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const kebabProps = useMemo(() => {\n        const selectedHostsData = systems?.data.filter(s => selectedHosts.includes(s.id));\n        return {\n            selectedExcluded: selectedHostsData.some(s => s.attributes.opt_out === true),\n            selectedIncluded: selectedHostsData.some(s => s.attributes.opt_out === false)\n        };\n    }, [selectedHosts, systems]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, true),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, false),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            id=\"vuln-systems-primary-toolbar\"\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst createRows = ({ data }) => {\n    const items = data?.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n    const addNotification = useNotification({ variant: 'success' });\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params,\n        shallowEqual\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const { hasError, errorCode } = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => createRows(systems), [systems]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n            dispatch(fetchSystems(parameters));\n        }\n    }, [parameters, isFirstMount]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null, optOut) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n\n                let count = systemId ? 1 : selectedHosts.length || 0;\n\n                if (optOut) {\n                    addNotification({ msg: intl.formatMessage(messages.systemsExcludedNotification, { count }) });\n                } else {\n                    addNotification({\n                        msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    });\n                }\n\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            metadata.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                <Fragment>\n                    { hasError\n                        ? <ErrorHandler code={errorCode} />\n                        : (<InventoryTable\n                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_HEADER)\n                                    ),\n                                    ...mergeWithDetail()\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                onSort: (items.length > 0) && onSort,\n                                sortBy: (items.length > 0) && sortBy(),\n                                actionResolver: (rowData) => systemTableRowActions(rowData,  doOptOut),\n                                variant: TableVariant.compact\n                            }}\n                            showTags\n                            isFullView\n                            ref={inventory}\n                            items={items}\n                            page={metadata && metadata.page || 1 }\n                            perPage={metadata && metadata.page_size || 20}\n                            total={metadata && metadata.total_items || 0}\n                            onRefresh={inventoryRefresh}\n                            isLoaded = {!isLoading}\n                            hasCheckbox={systems.length !== 0}\n                        >\n                            {systems.data && (<SystemsTableToolbar\n                                parameters = {parameters}\n                                systems = {systems}\n                                selectedHosts = {selectedHosts || []}\n                                methods = {{\n                                    doOptOut,\n                                    apply,\n                                    handleSelect,\n                                    setSelectedHosts\n                                }}\n                                actions\n                            />)}\n                        </InventoryTable>\n                        )}\n                </Fragment>\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n"],"sourceRoot":""}