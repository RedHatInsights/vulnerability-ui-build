{"version":3,"file":"js/3228.1640196011661.cdf80601ba4cdf859098.js","mappings":"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","sources":["webpack:///./node_modules/@formatjs/fast-memoize/lib/index.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/AppEntry.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./node_modules/lodash/isEqual.js"],"sourcesContent":["//\n// Main\n//\nexport default function memoize(fn, options) {\n    var cache = options && options.cache ? options.cache : cacheDefault;\n    var serializer = options && options.serializer ? options.serializer : serializerDefault;\n    var strategy = options && options.strategy ? options.strategy : strategyDefault;\n    return strategy(fn, {\n        cache: cache,\n        serializer: serializer,\n    });\n}\n//\n// Strategy\n//\nfunction isPrimitive(value) {\n    return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\nfunction monadic(fn, cache, serializer, arg) {\n    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === 'undefined') {\n        computedValue = fn.call(this, arg);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction variadic(fn, cache, serializer) {\n    var args = Array.prototype.slice.call(arguments, 3);\n    var cacheKey = serializer(args);\n    var computedValue = cache.get(cacheKey);\n    if (typeof computedValue === 'undefined') {\n        computedValue = fn.apply(this, args);\n        cache.set(cacheKey, computedValue);\n    }\n    return computedValue;\n}\nfunction assemble(fn, context, strategy, cache, serialize) {\n    return strategy.bind(context, fn, cache, serialize);\n}\nfunction strategyDefault(fn, options) {\n    var strategy = fn.length === 1 ? monadic : variadic;\n    return assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\nfunction strategyVariadic(fn, options) {\n    return assemble(fn, this, variadic, options.cache.create(), options.serializer);\n}\nfunction strategyMonadic(fn, options) {\n    return assemble(fn, this, monadic, options.cache.create(), options.serializer);\n}\n//\n// Serializer\n//\nvar serializerDefault = function () {\n    return JSON.stringify(arguments);\n};\n//\n// Cache\n//\nfunction ObjectWithoutPrototypeCache() {\n    this.cache = Object.create(null);\n}\nObjectWithoutPrototypeCache.prototype.get = function (key) {\n    return this.cache[key];\n};\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n    this.cache[key] = value;\n};\nvar cacheDefault = {\n    create: function create() {\n        // @ts-ignore\n        return new ObjectWithoutPrototypeCache();\n    },\n};\nexport var strategies = {\n    variadic: strategyVariadic,\n    monadic: strategyMonadic,\n};\n","import { ADD_NOTIFICATION, REMOVE_NOTIFICATION, CLEAR_NOTIFICATIONS } from './action-types';\nexport var addNotification = function addNotification(notification) {\n  return {\n    type: ADD_NOTIFICATION,\n    payload: notification\n  };\n};\nexport var removeNotification = function removeNotification(index) {\n  return {\n    type: REMOVE_NOTIFICATION,\n    payload: index\n  };\n};\nexport var clearNotifications = function clearNotifications() {\n  return {\n    type: CLEAR_NOTIFICATIONS\n  };\n};\nexport default {\n  addNotification: addNotification,\n  removeNotification: removeNotification,\n  clearNotifications: clearNotifications\n};","/* eslint-disable react/jsx-handler-names */\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\nimport messages from '../locales/en.json';\n\nconst Vulnerabilities = () => {\n    return (\n        <div className=\"vuln-root\">\n            <IntlProvider locale={navigator.language.slice(0, 2)} messages={messages}>\n                <Provider store={ReducerRegistry.getStore()}>\n                    <Router basename={getBaseName(window.location.pathname)}>\n                        <App />\n                    </Router>\n                </Provider>\n            </IntlProvider>\n        </div>\n    );\n};\n\nexport default Vulnerabilities;\n","let BASE_ROUTE = '/api/vulnerability/v1';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\nconst defaultParams = [\n    'filter',\n    'limit',\n    'offset',\n    'page',\n    'page_size',\n    'sort'\n];\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\n/**\n * /cves\n * /cves/ids\n */\nlet cveParams = [\n    'cvss_from',\n    'cvss_to',\n    'public_from',\n    'public_to',\n    'impact',\n    'data_format',\n    'business_risk_id',\n    'status_id',\n    'rule_presence',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'known_exploit',\n    'affecting',\n    'rhel_version'\n];\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...cveParams,\n        'report',\n        'advanced_report'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...cveParams\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\n/**\n * /cve/ID/affected_systems\n * /cve/ID/affected_systems/ids\n */\nlet systemsByCVEparams = [\n    'status_id',\n    'data_format',\n    'uuid',\n    'rule_key',\n    'rule_presence',\n    'rule',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'show_advisories',\n    'advisory',\n    'rhel_version',\n    'first_reported_from',\n    'first_reported_to',\n    'advisory_available',\n    'remediation'\n];\n\nexport function getAffectedSystemsByCVE({ id, ...apiProps }) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsByCVEparams,\n        'report'\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(id, ...parameterArray);\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve({ id, ...apiProps }) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsByCVEparams\n    ];\n\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(id, ...parameterArray);\n    return result;\n}\n\n/**\n * /system/ID/cves\n * /system/ID/cves/ids\n */\nlet cveBySystemParams = [\n    'cvss_from',\n    'cvss_to',\n    'public_from',\n    'public_to',\n    'impact',\n    'status_id',\n    'data_format',\n    'business_risk_id',\n    'rule_presence',\n    'show_advisories',\n    'advisory',\n    'rule_key',\n    'known_exploit',\n    'first_reported_from',\n    'first_reported_to',\n    'advisory_available',\n    'remediation'\n];\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        ...defaultParams,\n        ...cveBySystemParams,\n        'report'\n    ];\n    apiProps.show_advisories = true;\n\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        ...defaultParams,\n        ...cveBySystemParams\n    ];\n\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n\n/**\n * /systems/ids\n * /systems\n */\nlet systemsParams = [\n    'data_format',\n    'stale',\n    'uuid',\n    'tags',\n    'sap_sids',\n    'sap_system',\n    'excluded',\n    'rhel_version'\n];\n\nexport function getSystems(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsParams,\n        'report'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = [\n        ...defaultParams,\n        ...systemsParams\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n"],"names":["memoize","fn","options","cache","cacheDefault","serializer","serializerDefault","strategy","strategyDefault","monadic","arg","value","cacheKey","computedValue","get","call","this","set","variadic","args","Array","prototype","slice","arguments","apply","assemble","context","serialize","bind","length","create","JSON","stringify","ObjectWithoutPrototypeCache","Object","key","strategies","addNotification","notification","type","payload","removeNotification","index","clearNotifications","className","locale","navigator","language","messages","store","ReducerRegistry","basename","getBaseName","window","location","pathname","api","GitApi","undefined","instance","defaultParams","getCveDetails","synopsis","getSystemDetails","system","setSystemCveStatus","params","setStatus","optOutSystems","systems","optOut","data","opt_out","inventory_id","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","cveParams","getCveListByAccount","apiProps","parameterNames","parameterArray","constructParameters","getCveList","getCveIdsList","systemsByCVEparams","getAffectedSystemsByCVE","id","getAffectedSystemsByCve","getAffectedSystemsIdsByCve","cveBySystemParams","getCveListBySystem","show_advisories","keys","forEach","map","item","err","status","errors","getCveIdsBySystem","systemsParams","getSystems","getSystemsList","getSystemsIds","baseIsEqual","module","exports","other"],"sourceRoot":""}