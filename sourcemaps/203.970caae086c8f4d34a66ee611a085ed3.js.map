{"version":3,"file":"js/203.9cc39c10f33f8cdf1e32.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant={'checkbox'}\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label={'os-version-filter'}\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\nimport unionBy from 'lodash/unionBy';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    meta: {\n        page: 1,\n        page_size: 20\n    },\n    selectedRows: {},\n    prevLoadedRows: [],\n    selectedRowsRawData: [],\n    selectedRowsCount: 0,\n    perPage: 20\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = {};\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows[row.id] || false\n            })),\n            prevLoadedRows: unionBy(action.payload.results, state.prevLoadedRows, 'id'),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(state, action);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n"],"names":["filterValue","apply","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","intl","messages","filterValues","children","variant","onToggle","onSelect","_","changedLabel","newValue","changedValue","version","value","includes","splice","indexOf","rhel_version","join","page","selections","map","item","placeholderText","length","loadingVariant","text","onClick","style","maxHeight","overflow","slice","option","index","isDisabled","disabled","key","description","initialState","columns","rows","entities","meta","page_size","selectedRows","prevLoadedRows","selectedRowsRawData","selectedRowsCount","perPage","modifyInventory","state","action","advisory","find","sortBy","direction","loaded","some","patchAccess","isShown","row","selected","id","unionBy","payload","results","inventoryEntitiesReducer","ActionTypes","selectRows"],"sourceRoot":""}