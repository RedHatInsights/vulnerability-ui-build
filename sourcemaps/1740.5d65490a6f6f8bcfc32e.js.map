{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"names":["SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","isStickyHeader","canSelectAll","aria-label","cells","heightAuto","props","colSpan","title","Object","prototype","hasOwnProperty","call","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","TableToolbar","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","messages","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","selectedCvesData","flatMap","PrimaryToolbar","pagination","itemCount","total_items","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","knownExploitFilter","impactFilter","cvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","clearNotifications","payload","errors","parseInt","EmptyVulnerabilityData","ErrorHandler","code","Provider","value","format","DownloadReport","iSelected","selectSystemCve","expandSystemCve","cvesList","Array","from","some","element","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"mappings":"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","file":"js/1740.33afae349921014e3a80.js","sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components/TableToolbar';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : !cves.data || cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : [])\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount || cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        knownExploitFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        searchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return EmptyVulnerabilityData;\n        }\n        else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && setUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n            dispatch(clearNotifications());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"sourceRoot":""}