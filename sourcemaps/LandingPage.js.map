{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","sort","show_all","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEDetailsPageStore","type","ActionTypes","setIn","CVEsStore","cveName","data","SystemsPageStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","resizeOrientation","BaseModal","items","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","useEffect","clearNotifications","Fragment","variant","Boolean","onClose","actions","onClick","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","kbaLoading","kbaDetail","view_uri","RH_KB_URL","node_id","PropType","shape","details","resulotion","isRequired","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","a","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","item","attributes","status_name","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","find","option","parseInt","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","rowIndex","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","handleSearch","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","multiValue","split","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","FilterNotFoundForCVE","height","EmptyStateVariant","large","headingLevel","size","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","emptyStateForMoreInfo","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","emptyStateSystemResumeAnalysis","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","errorReload","securityRuleFilter","currentFilter","dynamicFilters","currentValue","filterBySecurityRule","securityRules","radio","urlParam","unionWith","SECURITY_RULE_OPTIONS","isEqual","statusFilter","filterByStatus","checkbox","BusinessRiskModal","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","handleOnRadioChange","_","currentTarget","successNotification","businessRiskUpdateSuccessful","setBusinessRisk","businessRiskModalTitle","hasGutter","businessRiskModalInfo","businessRiskLabel","isChecked","injectIntl","CveStatusModal","checkboxState","setCheckboxState","cveStatusModalUpdateSuccessful","cveStatusModalTitle","cveIds","setCveStatus","setSystemCveStatus","cveStatusModalSelected","cveId","b","chunks","fontSize","color","cveStatusModalInfo","trigger","cveStatusModalInfoTooltip","verticalAlign","cveStatusModalOverwriteCheckbox","checked","cveStatusModalOverwriteTooltip","PaginationWrapper","pageNumber","nextProps","totalItems","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","CVEsTableWithContext","context","header","isEmpty","rows","selected","SkeletonTable","colSize","rowSize","Table","canSelectAll","cells","heightAuto","colSpan","prototype","hasOwnProperty","call","noCves","isSelected","selectCves","onCollapse","rowKey","openCves","actionResolver","sortBy","createSortBy","onSort","direction","handleSortColumn","gridBreakPoint","TableToolbar","CVEsTable","CVETableContext","Consumer","CVEsTableToolbarWithContext","selectedCvesCount","selectOptions","ops","isDisabled","hideCvesNoEffecting","showCvesAffecting","kebabCollapseCves","kebabExpandCves","PrimaryToolbar","pagination","actionsConfig","kebabToggleProps","bulkSelect","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","onDelete","e","i","totalNumber","createContext","CVEs","useDispatch","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","useSelector","useMemo","createCveListByAccount","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","constructFilterParameters","Provider","DownloadReport","cveNames","cvesList","Stack","StackItem","showAllCheckbox","VULNERABILITIES_HEADER","LandingPage","VulnerabilityHeader","showBreadcrumb","showDownloadButton","Main"],"mappings":"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","file":"js/LandingPage.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    useEffect(() => {\n        return () => {\n            props.clearNotifications();\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    clearNotifications: propTypes.func\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport { RH_KB_URL } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard\n                        report={rule}\n                        kbaLoading={false}\n                        kbaDetail={{ view_uri: `${RH_KB_URL}/${rule.rule.node_id}` }}\n                    />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [cves]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef);\n    };\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.businessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation='vertical'\n                                aria-label={'justification'}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        return setCveStatus({\n            status_id: parseInt(statusId),\n            cve: cveIds,\n            status_text: justification\n        })\n        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))\n        .then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cveStatusModalUpdateSuccessful, { count: cveList.length || 0 })\n    };\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={title}>\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        trigger='mouseenter focus click'\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <React.Fragment>\n                            <OutlinedQuestionCircleIcon\n                                className=\"pf-u-ml-xs\"\n                                color=\"var(--pf-global--Color--200)\"\n                                style={{ verticalAlign: '-0.125em' }}\n                            />\n                        </React.Fragment>\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        <FormGroup fieldId={'overwrite'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        trigger='mouseenter focus click'\n                                        content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? openedCves.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const handleCveDescription = () => {\n        const { context } = props;\n        const { cves, methods, expandCveDescription } = context;\n\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(openedCves);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedCves.map(item => ({ id: item, business_risk_id: '0' }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedCves.map(item => ({ id: item, status_id: '0' }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: cves.meta.show_all\n                ? props.intl.formatMessage(messages.hideCvesNoEffecting)\n                : props.intl.formatMessage(messages.showCvesAffecting),\n            onClick: () => methods.apply({ show_all: !cves.meta.show_all, page: 1 })\n        },\n        {\n            label: expandCveDescription ? props.intl.formatMessage(messages.kebabCollapseCves)\n                : props.intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useCreateUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport SystemCveTable from './CVEsTable';\nimport SystemCveTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n        };\n    }, []);\n\n    const processError = () => {\n        return GenericError;\n    };\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    params: parameters,\n                    selectedCves,\n                    openedCves,\n                    expandCveDescription,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <SystemCveTableToolbar showAllCheckbox />\n                    </StackItem>\n                    <StackItem>\n                        <SystemCveTable header={VULNERABILITIES_HEADER} showAllCheckbox />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return processError(cves.errors);\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} showDownloadButton />\n            <Main>\n                <CVEs/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"sourceRoot":""}