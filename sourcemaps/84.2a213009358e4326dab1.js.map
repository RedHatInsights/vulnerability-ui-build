{"version":3,"file":"js/84.d6ab9c1434a865473b10.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength, otherPagesPDFLength } from '../../../Helpers/ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { STATUS_OPTIONS, BUSINESS_RISK_OPTIONS, impactList } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, otherPagesPDFLength(reportData, params), true);\n\n    const cvesFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n\n        let cves;\n        let meta;\n\n        try {\n            ({ data: cves, meta } = await getCveListByAccount({\n                ...params,\n                ...DownloadReport.defaultParams,\n                sort: params.sort || '-cvss_score',\n                affecting: 'true'\n            }));\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await insights.chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                orientation={'landscape'}\n                size={'A4'}\n                type={''}\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"names":["FooterPDF","hasRule","hasExploit","style","styles","intlFormatWithBold","messages","propTypes","DownloadCVEsReport","filters","params","reportData","buttonProps","isReportDynamic","label","props","intl","useIntl","useState","loading","setLoading","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","otherPagesPDF","data","chunkArray","otherPagesPDFLength","cvesFetch","msg","formatMessage","getCveListByAccount","DownloadReport","sort","affecting","cves","meta","variant","autoDismiss","description","userNotes","insights","chrome","auth","getUser","user","knownExploitCount","filter","attributes","known_exploit","length","map","cve","rules","status","STATUS_OPTIONS","item","value","status_id","toString","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","title","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","processData","header","includes","firstPage","firstPagePDF","splice","firstPagePDFLength","type","otherPages","cvePage","index","tablePage","page","orientation","size","fileName","component","asyncFunction","allPagesHaveTitle","footer","reportName","reportTitle","defaultProps"],"sourceRoot":""}