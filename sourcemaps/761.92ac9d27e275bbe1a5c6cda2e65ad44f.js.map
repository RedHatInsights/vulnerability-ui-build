{"version":3,"file":"js/761.58bf894056b6a02fce3b.js","mappings":"kgCAkBA,IAAMA,EAAwB,SAAC,GAAgE,IAA9DC,EAA8D,EAA9DA,eAAgBC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACxE,GAA4CC,EAAAA,EAAAA,UAASJ,GAArD,eAAOK,EAAP,KAAuBC,EAAvB,KA6BA,OACI,kBAAC,IAAD,CACIC,MAAOC,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,4BAC1BC,QAAS,kBAAMP,GAAa,IAC5BQ,OAAQT,EACRU,QAAQ,QACRC,YACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,UAAWC,EAAAA,EAAAA,GAAiBP,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mCACrD,kBAAC,KAAD,CAAQO,UAAQ,EAACC,QA1Bf,WACd,IAAIC,GAAa,OAAIb,GACrBa,EAAaA,EAAWC,KAAI,SAAAC,GAAM,cAAUA,GAAV,IAAkBC,SAAS,OAE7Df,EAAkBY,IAsB+BN,QAAQ,QACxCJ,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,kCAIhCa,QAAS,CACL,kBAAC,KAAD,CAAQC,IAAI,OAAOX,QAAQ,UAAUK,QAzB9B,WACfd,GAAa,GACbF,EAAaI,KAwBAG,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,OAExB,kBAAC,KAAD,CAAQc,IAAI,SAASX,QAAQ,YAAYK,QAvBhC,WACjBd,GAAa,GACbG,EAAkBN,KAsBLQ,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,WAI5B,kBAAC,KAAD,CAAU,aAAW,0BAA0Be,GAAG,0BAA0BC,WAAS,GAChFpB,EAAec,KAAI,SAACC,EAAQM,GAAT,OAChB,kBAAC,IAAD,CAAcH,IAAKH,EAAOG,KACtB,kBAAC,IAAD,KACI,kBAAC,IAAD,CACII,QAASP,EAAOC,QAChBG,GAAI,YAAcE,EAClBE,SAAU,kBAzDjB,SAAAF,GACjB,IAAIR,GAAa,OAAIb,GACjBwB,EAAgB,EAAH,GAAQX,EAAWQ,IAEpCG,EAAcR,SAAWQ,EAAcR,QACvCH,EAAWQ,GAASG,EAEpBvB,EAAkBY,GAkDsBY,CAAaJ,IAC7BK,WAAYX,EAAOY,cAEvB,kBAAC,IAAD,CACIC,cAAe,CACX,kBAAC,IAAD,CAAcV,IAAK,+BAAiCG,GAChD,2BAAOQ,QAAS,YAAcR,GACzBN,EAAOb,mBAapDR,EAAsBoC,UAAY,CAC9BnC,eAAgBmC,IAAAA,QAAkBA,IAAAA,QAClClC,aAAckC,IAAAA,KACdjC,YAAaiC,IAAAA,KACbhC,aAAcgC,IAAAA,MAGlB","sources":["webpack:///./src/Components/SmartComponents/Modals/ColumnManagementModal.js"],"sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    TextContent,\n    Text,\n    TextVariants,\n    DataListItem,\n    DataList,\n    DataListItemRow,\n    DataListCheck,\n    DataListCell,\n    DataListItemCells\n} from '@patternfly/react-core';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\n\nconst ColumnManagementModal = ({ appliedColumns, applyColumns, isModalOpen, setModalOpen }) => {\n    const [currentColumns, setCurrentColumns] = useState(appliedColumns);\n\n    const handleChange = index => {\n        let newColumns = [...currentColumns];\n        let changedColumn = { ...newColumns[index] };\n\n        changedColumn.isShown = !changedColumn.isShown;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n    };\n\n    const selectAll = () => {\n        let newColumns = [...currentColumns];\n        newColumns = newColumns.map(column => ({ ...column, isShown: true }));\n\n        setCurrentColumns(newColumns);\n    };\n\n    const handleSave = () => {\n        setModalOpen(false);\n        applyColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(appliedColumns);\n    };\n\n    return (\n        <Modal\n            title={intl.formatMessage(messages.columnManagementModalTitle)}\n            onClose={() => setModalOpen(false)}\n            isOpen={isModalOpen}\n            variant=\"small\"\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>{intl.formatMessage(messages.columnManagementModalDescription)}</Text>\n                    <Button isInline onClick={selectAll} variant=\"link\">\n                        {intl.formatMessage(messages.columnManagementModalSelectAll)}\n                    </Button>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    {intl.formatMessage(messages.save)}\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Table column management\" id=\"table-column-management\" isCompact>\n                {currentColumns.map((column, index) =>\n                    <DataListItem key={column.key}>\n                        <DataListItemRow>\n                            <DataListCheck\n                                checked={column.isShown}\n                                id={'checkbox-' + index}\n                                onChange={() => handleChange(index)}\n                                isDisabled={column.isUnhidable}\n                            />\n                            <DataListItemCells\n                                dataListCells={[\n                                    <DataListCell key={'table-column-management-item' + index}>\n                                        <label htmlFor={'checkbox-' + index}>\n                                            {column.title}\n                                        </label>\n                                    </DataListCell>\n                                ]}\n                            />\n                        </DataListItemRow>\n                    </DataListItem>\n                )}\n            </DataList>\n        </Modal>\n    );\n};\n\nColumnManagementModal.propTypes = {\n    appliedColumns: propTypes.arrayOf(propTypes.object),\n    applyColumns: propTypes.func,\n    isModalOpen: propTypes.bool,\n    setModalOpen: propTypes.func\n};\n\nexport default ColumnManagementModal;\n"],"names":["ColumnManagementModal","appliedColumns","applyColumns","isModalOpen","setModalOpen","useState","currentColumns","setCurrentColumns","title","intl","messages","onClose","isOpen","variant","description","component","TextVariants","isInline","onClick","newColumns","map","column","isShown","actions","key","id","isCompact","index","checked","onChange","changedColumn","handleChange","isDisabled","isUnhidable","dataListCells","htmlFor","propTypes"],"sourceRoot":""}