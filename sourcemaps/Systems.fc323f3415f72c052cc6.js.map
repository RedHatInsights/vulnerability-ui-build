{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","addNotification","useNotification","otherPagesPDF","data","chunkArray","PDF_REPORT_PER_PAGE","systemsFetch","msg","formatMessage","messages","getSystems","DownloadReport","meta","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","defaultValues","forEach","item","filter","join","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","flatMap","toLowerCase","toString","SystemsTableToolbar","selectedHosts","parameters","systems","methods","exportPDF","setExportPDF","handleSelect","doOptOut","middlewareListener","on","callback","payload","newSelected","selected","id","onSelect","kebabProps","useMemo","selectedHostsData","s","includes","selectedExcluded","some","attributes","opt_out","selectedIncluded","kebabOptions","count","length","onClick","isDisabled","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchSystemsIds","Fragment","PrimaryToolbar","className","bulkSelect","total_items","checked","Boolean","ouiaId","handleOnCheckboxChange","actionsConfig","actions","kebabToggleProps","dropdownProps","filterConfig","searchFilter","excludedFilter","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","showButton","onSuccess","dataShape","withRouter","injectIntl","undefined","setSelectedHosts","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","isFirstMount","setFirstMount","variant","inventory","React","dispatch","useDispatch","useSelector","entities","rows","shallowEqual","totalItems","total","SystemsPageStore","error","hasError","errorCode","hasPatchAccess","patchAccess","useEffect","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","useDeepCompareEffect","systemId","optOut","optOutSystemsAction","then","current","onRefreshData","description","columnCounter","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","mergeWithDetail","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_HEADER","Number","perPage","page_size","sort","sortBy","key","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","hasCheckbox","columns","defaultColumns","nameColumn","restColumns","lastSeenColumn","tagsColumn","mergedColumns","width","isStatic","cellTransforms","nowrap","SYSTEMS_ADVISORY_COLUMN","createColumns","getEntities","_items","_hasItems","defaultGetEntities","orderBy","orderDirection","per_page","APIHelper","hasItems","fields","results","findInsightsId","find","insights_id","Promise","resolve","hideFilters","all","isChecked"],"mappings":"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","file":"js/Systems.17490eba4bb1e40125cb.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const addNotification = useNotification();\n\n    const otherPagesPDF = data => chunkArray(data, PDF_REPORT_PER_PAGE.systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.customReportNotificationSystem) });\n\n        let { data, meta } = await getSystems({\n            ...params,\n            ...DownloadReport.defaultParams\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, PDF_REPORT_PER_PAGE.systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type={''}\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size={'A4'}\n                orientation={'landscape'}\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ excluded: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { apply, handleSelect, doOptOut } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const kebabProps = useMemo(() => {\n        const selectedHostsData = systems?.data.filter(s => selectedHosts.includes(s.id));\n        return {\n            selectedExcluded: selectedHostsData.some(s => s.attributes.opt_out === true),\n            selectedIncluded: selectedHostsData.some(s => s.attributes.opt_out === false)\n        };\n    }, [selectedHosts, systems]);\n\n    const kebabOptions = [\n        '',\n        {\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, true),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedHosts.length || 0 }),\n            onClick: () => doOptOut(null, false),\n            props: { isDisabled: !selectedHosts.length || !kebabProps.selectedExcluded }\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                ouiaId: 'bulk-select',\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                kebabToggleProps: { isDisabled: !selectedHosts.length || systems.meta.total_items === 0 },\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        'filter',\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    ),\n                    excludedFilter(apply, parameters)\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(parameters, SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n        />\n\n        { exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_ADVISORY_COLUMN } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { nowrap, TableVariant } from '@patternfly/react-table';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport * as APIHelper from '../../../Helpers/APIHelper';\n\nconst createColumns = (defaultColumns, hasPatchAccess) => {\n    let [nameColumn, restColumns] = SYSTEMS_HEADER;\n    let lastSeenColumn = defaultColumns.filter(({ key }) => key === 'updated');\n    let tagsColumn = defaultColumns.filter(({ key }) => key === 'tags');\n\n    tagsColumn = { ...tagsColumn[0], props: { width: 20, isStatic: true } };\n    lastSeenColumn = { ...lastSeenColumn[0], cellTransforms: [nowrap], props: { width: 20 } };\n\n    let mergedColumns = [nameColumn, tagsColumn, restColumns, lastSeenColumn];\n\n    if (hasPatchAccess) {\n        mergedColumns.splice(2, 0, SYSTEMS_ADVISORY_COLUMN);\n    }\n\n    return mergedColumns;\n};\n\nconst SystemsPage = () => {\n    const intl = useIntl();\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [isFirstMount, setFirstMount] = useState(true);\n    const addNotification = useNotification({ variant: 'success' });\n\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params,\n        shallowEqual\n    );\n\n    const { hasError, errorCode } = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    const hasPatchAccess = useSelector(({ entities }) => entities?.rows?.some(({ patchAccess }) => patchAccess));\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n        setFirstMount(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useDeepCompareEffect(() => {\n        if (!isFirstMount) {\n            setUrlParams({ ...parameters });\n        }\n    }, [parameters, isFirstMount]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null, optOut) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, optOut)).then(() => {\n                inventory.current.onRefreshData(({ page: 1 }));\n\n                let count = systemId ? 1 : selectedHosts.length || 0;\n\n                if (optOut) {\n                    addNotification({ msg: intl.formatMessage(messages.systemsExcludedNotification, { count }) });\n                } else {\n                    addNotification({\n                        msg: intl.formatMessage(messages.systemsResumedNotificationTitle, { count }),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    });\n                }\n\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    let columnCounter = useMemo(() => columnCounter ? columnCounter++ : 0, [hasPatchAccess]);\n\n    return (\n        <Fragment>\n            <Header title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                <Fragment>\n                    { hasError\n                        ? <ErrorHandler code={errorCode} />\n                        : (<InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities, mergeWithDetail }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: Number(parameters.page_size || 20),\n                                            ...(parameters.sort && { sortBy: {\n                                                key: parameters.sort.replace(/^-/, ''),\n                                                direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                            } })\n                                        }\n                                    ),\n                                    ...mergeWithDetail()\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: (rowData) => systemTableRowActions(rowData,  doOptOut),\n                                variant: TableVariant.compact\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventory}\n                            autoRefresh\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    excluded: parameters.excluded,\n                                    filter: parameters.filter\n                                }\n                            }}\n                            hasCheckbox={systems?.length !== 0}\n                            columnCounter={columnCounter}\n                            columns={(defaultColumns) => createColumns(defaultColumns, hasPatchAccess)}\n                            getEntities={async (\n                                _items,\n                                { vulnerabilityParams, orderBy, orderDirection, ...config },\n                                _hasItems,\n                                defaultGetEntities\n                            ) => {\n                                const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n                                apply({\n                                    page: config.page,\n                                    page_size: config.per_page,\n                                    sort\n                                });\n\n                                const items = await APIHelper.getSystems({\n                                    ...vulnerabilityParams,\n                                    page: config.page,\n                                    page_size: config.per_page,\n                                    sort\n                                });\n                                const results = await defaultGetEntities(\n                                    items.data.map(({ id }) => id),\n                                    { ...config, hasItems: true, fields: {} }\n                                );\n\n                                const findInsightsId = (id) => results.results.find((item) => item.id === id)?.insights_id;\n\n                                return Promise.resolve({\n                                    results: items.data.map(item => ({\n                                        ...item,\n                                        ...item.attributes,\n                                        insights_id: findInsightsId(item.id)\n                                    })),\n                                    total: items.meta.total_items\n                                });\n                            }}\n                            hideFilters={{ all: true }}\n                        >\n                            <SystemsTableToolbar\n                                parameters = {parameters}\n                                systems = {{ data: systems, meta: { total_items: totalItems } }}\n                                selectedHosts = {selectedHosts || []}\n                                methods = {{\n                                    doOptOut,\n                                    apply,\n                                    handleSelect,\n                                    setSelectedHosts\n                                }}\n                                actions\n                            />\n                        </InventoryTable>\n                        )}\n                </Fragment>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default SystemsPage;\n"],"sourceRoot":""}