{"version":3,"file":"js/806.eca227dc11a194c102f7.js","mappings":"4ZASaA,EAAoB,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KACjD,GAAkBC,EAAAA,EAAAA,UAASH,GAApBI,GAAP,eACA,GAA4CD,EAAAA,EAAAA,UAAS,KAArD,eAAOE,EAAP,KAAuBC,EAAvB,KACA,GAA0BH,EAAAA,EAAAA,YAA1B,eAAOI,EAAP,KAAcC,EAAd,KAEMC,GAAkBC,EAAAA,EAAAA,cAAY,WAChCF,EAAUJ,GAA8B,IAAnBA,EAAQO,QAAgBP,EAAQ,GAAGQ,eAAkB,MAC3E,CAACR,KAEJS,EAAAA,EAAAA,YAAU,WAEFP,EAAmBF,GAA8B,IAAnBA,EAAQO,QAAgBP,EAAQ,GAAGU,iBAAiBC,YAAe,KAIrGN,MACD,CAACT,EAAMS,EAAiBL,KAE3BS,EAAAA,EAAAA,WAAUJ,EAAiB,CAACA,IAE5B,IAAMO,EAAsB,SAACC,EAAGC,GAC5B,IAAQC,EAAUD,EAAME,cAAhBD,MACRb,EAAkBa,IAiBhBE,EAAwB,CAC1BC,QAAS,UACTC,MAAOrB,EAAKsB,cAAcC,EAAAA,EAAAA,yCAAmD,CAAEC,MAAOtB,EAAQO,QAAU,KAGtGgB,EAAwB,CAC1BL,QAAS,SACTM,aAAa,EACbL,MAAOrB,EAAKsB,cAAcC,EAAAA,EAAAA,4CAC1BI,YAAa3B,EAAKsB,cAAcC,EAAAA,EAAAA,4CAGpC,OACI,kBAAC,KAAD,CACIK,MAAO1B,EACP2B,OAzBW,WACf,OAAOC,EAAAA,EAAAA,IAAgB,CACnBlB,iBAAkBmB,SAAS5B,GAC3B6B,IAAK9B,EAAQ+B,KAAI,SAAAC,GAAI,OAAIA,EAAKC,MAC9BC,mBAAoB/B,IACrBgC,KAAKtC,GAJD,OAIkB,SAAAuC,GACrB,MAAMA,MAoBNnB,sBAAuBA,EACvBM,sBAAuBA,EACvBJ,MAAOrB,EAAKsB,cAAcC,EAAAA,EAAAA,wBAC1BgB,OAAQ,uBAER,kBAAC,IAAD,CAAOC,WAAS,GACZ,kBAAC,IAAD,KACKxC,EAAKsB,cAAcC,EAAAA,EAAAA,wBAExB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWlB,MAAOL,EAAKsB,cAAcC,EAAAA,EAAAA,mBAA6BkB,QAAS,kBACtEC,EAAAA,GAAAA,KAA0B,SAAAR,GAAI,OAC3B,kBAAC,IAAD,CACIS,UAAW,sBACX1B,MAAOiB,EAAKjB,MACZ2B,UAAWzC,IAAmB+B,EAAKjB,MACnC4B,SAAU/B,EACVT,MAAO6B,EAAK7B,MACZyC,IAAKZ,EAAKjB,MACVkB,GAAID,EAAKjB,MACT8B,KAAMb,EAAK7B,MACX,aAAY6B,EAAK7B,MACjBkC,OAAQ,4BAIpB,kBAAC,IAAD,CAAWlC,MAAOL,EAAKsB,cAAcC,EAAAA,EAAAA,oBAA8BkB,QAAS,SACxE,kBAAC,KAAD,CACIO,KAAK,OACLH,SA5DA,SAAA5B,GACxBX,EAASW,IA4DeA,MAAOZ,EACP4C,kBAAkB,WAClB,aAAY,gBACZC,MAAO,CAAEC,UAAW,mBAUpDtD,EAAkBuD,UAAY,CAC1BtD,KAAMsD,IAAAA,MACNrD,UAAWqD,IAAAA,KACXpD,KAAMoD,IAAAA,KAGV,SAAeC,EAAAA,EAAAA,IAAWxD,I,kPCzGbyD,EAAiB,SAAC,GAA8B,IAA5BxD,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAC9C,GAAkBC,EAAAA,EAAAA,UAASH,GAApBI,GAAP,eACA,GAA6DqD,EAAAA,EAAAA,IA8BjDrD,GAAWA,EAAQsD,OAAM,SAAAtB,GAAI,OAAIA,EAAKuB,YAAcvD,EAAQ,GAAGuD,cAChEvD,EAAQ,GAAGuD,UAAU5C,YAAe,KA/BvC6C,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,SAAoBC,EAA1C,EAAgCC,SAChC,GAA8CC,EAAAA,EAAAA,IAkClC5D,GAAWA,EAAQsD,OAAM,SAAAtB,GAAI,OAAIA,EAAKxB,gBAAkBR,EAAQ,GAAGQ,kBACpER,EAAQ,GAAGQ,eAAkB,IAnChCqD,EAAR,EAAQA,mBAAoBrD,EAA5B,EAA4BA,cAC5B,GAA0CT,EAAAA,EAAAA,WAAS,GAAnD,eAAO+D,EAAP,KAAsBC,EAAtB,KAEMC,EAAyBhE,EAAQiE,QAAO,SAAAjC,GAAI,OAAIA,EAAKkC,sBAAwB,KAAGnC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAEvGxB,EAAAA,EAAAA,YAAU,WACNiD,EAAe,CAAErB,OAAQ,oBAC1B,CAACqB,IA+BJ,IAAMzC,EAAwB,CAC1BC,QAAS,UACTC,MAAOrB,EAAKsB,cAAcC,EAAAA,EAAAA,mCAA6C,CAAEC,MAAOtB,EAAQO,QAAU,KAGhGgB,EAAwB,CAC1BL,QAAS,SACTM,aAAa,EACbL,MAAOrB,EAAKsB,cAAcC,EAAAA,EAAAA,sCAC1BI,YAAa3B,EAAKsB,cAAcC,EAAAA,EAAAA,sCAG9BF,EAAQrB,EAAKsB,cAAcC,EAAAA,EAAAA,oBAA8B,CAAEC,MAAOtB,EAAQO,QAAU,IAE1F,OACI,kBAAC,KAAD,CACImB,MAAO1B,EACP2B,OA9CW,WACf,OAAOwC,QAAQC,IAAR,EACHC,EAAAA,EAAAA,IAAa,CACTvC,IAAK9B,EAAQ+B,KAAI,SAAAC,GAAI,OAAIA,EAAKC,MAC9BsB,UAAW1B,SAAS4B,GACpBa,YAAa9D,KAJd,OAMA,EAAGsD,GAAiBE,EAAuBzD,OAAS,IACnDgE,EAAAA,EAAAA,IAAmB,CACfzC,IAAKkC,EACLT,UAAW1B,SAAS4B,GACpBa,YAAa9D,OAIpB2B,KAAKtC,GAdH,OAeI,SAAAuC,GAAW,MAAMA,MA+BxBnB,sBAAuBA,EACvBM,sBAAuBA,EACvBJ,MAAOA,EACPkB,OAAQ,gBAER,kBAAC,IAAD,CAAOC,WAAS,GACZ,kBAAC,IAAD,KACKxC,EAAKsB,cACFC,EAAAA,EAAAA,uBACA,CACIC,MAAOtB,EAAQO,QAAU,EACzBiE,MAAOxE,EAAQ,GAAGiC,GAClBwC,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,OAIlC,kBAAC,IAAD,KACI,kBAAC,KAAD,CACIjC,UAAU,aACVkC,SAAS,iCACTC,MAAM,wCAET9E,EAAKsB,cAAcC,EAAAA,EAAAA,mBAA6B,CAAEC,MAAOtB,EAAQO,QAAU,IAC5E,kBAAC,IAAD,CACIsE,QAAS/E,EAAKsB,cAAcC,EAAAA,EAAAA,4BAE5B,kBAAC,KAAD,CACIoB,UAAU,aACVmC,MAAM,mCAIlB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMhC,IAAI,OACLY,EACAK,EACAG,EAAuBzD,OAAS,GAC7B,kBAAC,IAAD,CAAWgC,QAAS,aAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIpC,MAAOL,EAAKsB,cAAcC,EAAAA,EAAAA,iCAC1BY,GAAG,sBACHY,KAAK,sBACLH,UAAWoB,EACXnB,SAAU,SAAAmC,GAAO,OAAIf,EAAiBe,OAG9C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACID,QAAS/E,EAAKsB,cAAcC,EAAAA,EAAAA,iCAE5B,kBAAC,KAAD,CACIoB,UAAU,aACVmC,MAAM,+BACN5B,MAAO,CAAE+B,cAAe,gBAcxE3B,EAAeF,UAAY,CACvBtD,KAAMsD,IAAAA,MACNrD,UAAWqD,IAAAA,KACXpD,KAAMoD,IAAAA,KAGV,SAAeC,EAAAA,EAAAA,IAAWC","sources":["webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js"],"sourcesContent":["import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId={'business-risk-modal'}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId={'businessRiskId'}>\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className={'business-risk-radio'}\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId={'business-risk-radio'}\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId={'label'}>\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label={'justification'}\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(updateRef)\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId={'status-modal'}\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 &&\n                            <FormGroup fieldId={'overwrite'}>\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CveStatusModal);\n"],"names":["BusinessRiskModal","cves","updateRef","intl","useState","cveList","businessRiskId","setBusinessRiskId","label","setLabel","getDefaultLabel","useCallback","length","justification","useEffect","business_risk_id","toString","handleOnRadioChange","_","event","value","currentTarget","onSuccessNotification","variant","title","formatMessage","messages","count","onFailureNotification","autoDismiss","description","items","onSave","setBusinessRisk","parseInt","cve","map","item","id","business_risk_text","then","error","ouiaId","hasGutter","fieldId","BUSINESS_RISK_OPTIONS","className","isChecked","onChange","key","name","type","resizeOrientation","style","minHeight","propTypes","injectIntl","CveStatusModal","useStatusSelect","every","status_id","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","JustificationInput","checkboxState","setCheckboxState","cvesWithExposedSystems","filter","exposed_systems_count","Promise","all","setCveStatus","status_text","setSystemCveStatus","cveId","b","chunks","fontSize","color","content","checked","verticalAlign"],"sourceRoot":""}