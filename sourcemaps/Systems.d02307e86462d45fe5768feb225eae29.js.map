{"version":3,"file":"js/Systems.036cb7b3551d457d8a09.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/DownloadSystemsReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getSystems } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport { PDF_REPORT_PER_PAGE } from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\n\nconst DownloadSystemsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const [loading, setLoading] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n    const { systemsReportRestPages, systemsReportFirstPage } = PDF_REPORT_PER_PAGE;\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(data, systemsReportRestPages);\n\n    const systemsFetch = async () => {\n        let data;\n        let meta;\n\n        try {\n            ({ data, meta } = await getSystems({\n                ...params,\n                ...DownloadReport.defaultParams\n            }));\n        }\n        catch {\n            clearNotifications();\n            addNotification({\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            return [];\n        }\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, systemsReportFirstPage),\n            meta,\n            filters,\n            intl\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((systemPage, index) =>\n                tablePage({ data: systemPage, page: index, intl, header: reportData && reportData.header })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                fallback={null}\n                label={loading ? intl.formatMessage(messages.loading) : intl.formatMessage(label)}\n                asyncFunction={systemsFetch}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                reportName={intl.formatMessage(messages.systemPDFReportName)}\n                type=\"\"\n                fileName={`${DownloadReport.filename('system-list')}.pdf`}\n                allPagesHaveTitle={false}\n                size=\"A4\"\n                orientation=\"landscape\"\n            />\n        </div>\n    );\n};\n\nDownloadSystemsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadSystemsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ])\n};\n\nexport default DownloadSystemsReport;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { EXCLUDED_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst excludedFilter = (apply, currentFilter = {}) => {\n    let { excluded: currentValue } = currentFilter;\n\n    const filterByExcluded = (values) => {\n        apply({\n            excluded: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsIncludedInAnalysis),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'excluded',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByExcluded(value);\n            },\n            items: EXCLUDED_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.length > 0 ? currentValue?.split(',') : undefined\n        }\n    };\n};\n\nexport default excludedFilter;\n","import React, { Fragment, useState, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters, isFilterInDefaultState } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport DownloadSystemsReport from '../Reports/DownloadSystemsReport';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport excludedFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ExcludedFilter';\nimport { SYSTEMS_DEFAULT_FILTERS, SYSTEMS_FILTER_PARAMS } from '../../../Helpers/constants';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\n\nconst SystemsTableToolbar = ({\n    selectedRows,\n    selectedRowsCount,\n    selectedRowsRawData,\n    intl,\n    canExport,\n    canSetExcludedIncluded,\n    canReadExcludedIncluded,\n    parameters,\n    rawData,\n    methods\n}) => {\n    const [exportPDF, setExportPDF] = useState(false);\n    const { apply, handleSelect, doOptOut, setColumnModalOpen } = methods;\n    const dispatch = useDispatch();\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(\n            fetchSystems,\n            params,\n            format,\n            'system-list',\n            notification => dispatch(\n                addNotification(notification)\n            ),\n            () => dispatch(clearNotifications())\n        );\n    };\n\n    const kebabProps = useMemo(() => {\n        return {\n            selectedExcluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === true),\n            selectedIncluded: selectedRowsRawData.some(({ opt_out: optOut }) => optOut === false)\n        };\n    }, [selectedRowsRawData]);\n\n    const kebabOptions = [\n        '',\n        ...canSetExcludedIncluded ? [{\n            label: intl.formatMessage(messages.systemKebabExcludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, true),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedIncluded }\n        },\n        {\n            label: intl.formatMessage(messages.systemKebabIncludeAnalysis, { count: selectedRowsCount }),\n            onClick: () => doOptOut(selectedRows, selectedRowsRawData?.[0].display_name, false, selectedRows),\n            props: { isDisabled: !selectedRowsCount || !kebabProps.selectedExcluded }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    let filterConfigItems = [\n        useSearchFilter(\n            'filter',\n            messages.systemsSearchName,\n            messages.searchFilterByName,\n            parameters.filter,\n            apply\n        ),\n        ...canReadExcludedIncluded ? [excludedFilter(apply, parameters)] : [],\n        useOsVersionFilter(\n            parameters.rhel_version,\n            apply\n        )\n    ];\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            bulkSelect={bulkSelectProps}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            filterConfig={{\n                items: filterConfigItems\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, SYSTEMS_DEFAULT_FILTERS),\n                deleteTitle: intl.formatMessage(messages.resetFilters),\n                showDeleteButton: !isFilterInDefaultState(\n                    parameters,\n                    canReadExcludedIncluded ? SYSTEMS_DEFAULT_FILTERS : {},\n                    SYSTEMS_FILTER_PARAMS)\n            }}\n            exportConfig={canExport ? {\n                isDisabled: rawData.meta.totalItems === 0,\n                extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            } : null}\n        />\n\n        {exportPDF &&\n            <DownloadSystemsReport\n                showButton={false}\n                params={parameters}\n                filters={buildActiveFilters(parameters)}\n                onSuccess={() => setExportPDF(false)}\n            />\n        }\n\n    </Fragment>;\n\n};\n\nSystemsTableToolbar.propTypes = {\n    rawData: dataShape,\n    canExport: propTypes.bool,\n    canSetExcludedIncluded: propTypes.bool,\n    canReadExcludedIncluded: propTypes.bool,\n    parameters: propTypes.object,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    selectedRowsRawData: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import React, { useEffect, useState, Fragment } from 'react';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { PERMISSIONS, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    clearSystemStore,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsSystemList\n} from '../../../Store/Actions/Actions';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { TableVariant } from '@patternfly/react-table';\nimport { useGetEntities, useOptOutSystems, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsPage = () => {\n    const [[canReadVulnerabilityResults,\n        canSetExcludedIncluded,\n        canExport,\n        canReadExcludedIncluded],\n    isLoading] = useRbac([\n        PERMISSIONS.readVulnerabilityResults,\n        PERMISSIONS.setExcludedIncluded,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readExcludedIncluded\n    ]);\n\n    const inventoryRef = React.createRef();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_ALLOWED_PARAMS);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || {});\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount);\n    const selectedRowsRawData = useSelector(({ entities }) => entities?.selectedRowsRawData || []);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    let parameters = useSelector(({ SystemsPageStore }) => SystemsPageStore.params, shallowEqual);\n    if (!canReadExcludedIncluded) {\n        parameters.excluded = '';\n    }\n\n    const { hasError, errorCode } = useSelector(({ SystemsPageStore }) => SystemsPageStore.error);\n    const columns = useSelector(({ SystemsPageStore }) => SystemsPageStore.columns);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const apply = (params) => dispatch(changeSystemsParams(params));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    const handleSelect = (payload) => dispatch(selectRows(payload));\n\n    const onRefreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const doOptOut = useOptOutSystems(onRefreshInventory);\n    const getEntities = useGetEntities(APIHelper.getSystems, {});\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    return (\n        isLoading ? <Spinner centered/> :\n            canReadVulnerabilityResults ? <Fragment>\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsSystemList(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n                <Header title={intl.formatMessage(messages.vulnerabilitySystemsHeader)} showBreadcrumb={false}/>\n                <Main>\n                    {hasError\n                        ? <ErrorHandler code={errorCode}/>\n                        : (\n                            <InventoryTable\n                                disableDefaultColumns\n                                onLoad={({ mergeWithEntities }) => {\n                                    ReducerRegistry.register({\n                                        ...mergeWithEntities(\n                                            inventoryEntitiesReducer(columns),\n                                            {\n                                                page: Number(parameters.page || 1),\n                                                perPage: Number(parameters.page_size || 20),\n                                                ...(parameters.sort && {\n                                                    sortBy: {\n                                                        key: parameters.sort.replace(/^-/, ''),\n                                                        direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                    }\n                                                })\n                                            }\n                                        )\n                                    });\n                                }}\n                                tableProps={{\n                                    isStickyHeader: true,\n                                    canSelectAll: false,\n                                    actionResolver: totalItems > 0 && canSetExcludedIncluded\n                                        && ((rowData) => systemTableRowActions(rowData, doOptOut)),\n                                    variant: TableVariant.compact\n                                }}\n                                paginationProps={{\n                                    isDisabled: !totalItems\n                                }}\n                                showTagModal\n                                isFullView\n                                ref={inventoryRef}\n                                autoRefresh\n                                customFilters={{\n                                    vulnerabilityParams: {\n                                        ...parameters\n                                    }\n                                }}\n                                columnsCounter={columnCounter}\n                                columns={defaultColumns => mergeColumns(defaultColumns)}\n                                getEntities={getEntities}\n                                hideFilters={{ all: true }}\n                                noSystemsTable={<EmptyStateNoSystems/>}\n                            >\n                                <SystemsTableToolbar\n                                    canExport={canExport}\n                                    canSetExcludedIncluded={canSetExcludedIncluded}\n                                    canReadExcludedIncluded={canReadExcludedIncluded}\n                                    parameters={parameters}\n                                    rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                    selectedRows={selectedRows}\n                                    selectedRowsCount={selectedRowsCount}\n                                    selectedRowsRawData={selectedRowsRawData}\n                                    methods={{\n                                        doOptOut,\n                                        apply,\n                                        handleSelect,\n                                        setColumnModalOpen\n                                    }}\n                                    actions\n                                />\n                            </InventoryTable>\n                        )}\n                </Main>\n            </Fragment> : <NoAccessPage/>\n    );\n};\n\nexport default SystemsPage;\n"],"names":["DownloadSystemsReport","filters","params","reportData","buttonProps","label","props","intl","useIntl","useState","loading","setLoading","useNotification","addNotification","clearNotifications","systemsReportRestPages","PDF_REPORT_PER_PAGE","systemsReportFirstPage","useEffect","msg","formatMessage","messages","otherPagesPDF","data","chunkArray","systemsFetch","getSystems","DownloadReport","meta","variant","autoDismiss","description","firstPage","firstPagePDF","splice","otherPages","map","systemPage","index","tablePage","page","header","fallback","asyncFunction","component","reportName","type","fileName","allPagesHaveTitle","size","orientation","defaultProps","propTypes","apply","currentFilter","currentValue","excluded","filterByExcluded","values","length","join","undefined","conditionalFilterType","urlParam","filterValues","onChange","event","value","items","EXCLUDED_FILTER_OPTIONS","split","SystemsTableToolbar","selectedRows","selectedRowsCount","selectedRowsRawData","canExport","canSetExcludedIncluded","canReadExcludedIncluded","parameters","rawData","methods","exportPDF","setExportPDF","handleSelect","doOptOut","setColumnModalOpen","dispatch","useDispatch","kebabProps","useMemo","selectedExcluded","some","opt_out","selectedIncluded","kebabOptions","count","onClick","display_name","isDisabled","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchSystemsIds","filterConfigItems","useSearchFilter","filter","excludedFilter","useOsVersionFilter","rhel_version","Fragment","PrimaryToolbar","className","bulkSelect","actionsConfig","actions","dropdownProps","ouiaId","filterConfig","activeFiltersConfig","buildActiveFilters","onDelete","_","chips","reset","removeFilters","SYSTEMS_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","SYSTEMS_FILTER_PARAMS","exportConfig","totalItems","extraItems","kebabItemDownloadPDF","downloadReport","format","fetchSystems","notification","showButton","onSuccess","dataShape","withRouter","injectIntl","useRbac","PERMISSIONS","canReadVulnerabilityResults","isLoading","inventoryRef","React","useUrlParams","SYSTEMS_ALLOWED_PARAMS","urlParameters","setUrlParams","useSelector","entities","rows","shallowEqual","total","isLoaded","loaded","SystemsPageStore","error","hasError","errorCode","columns","isColumnModalOpen","clearSystemStore","clearInventoryStore","changeSystemsParams","useOptOutSystems","current","onRefreshData","getEntities","useGetEntities","APIHelper","columnCounter","setColumnCount","Spinner","centered","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsSystemList","isModalOpen","setModalOpen","Header","title","showBreadcrumb","Main","ErrorHandler","code","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","Number","perPage","page_size","sort","sortBy","key","replace","direction","match","tableProps","isStickyHeader","canSelectAll","actionResolver","rowData","systemTableRowActions","TableVariant","paginationProps","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hideFilters","all","noSystemsTable","payload","selectRows","NoAccessPage"],"sourceRoot":""}