{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"names":["CVEsTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","canSelectAll","aria-label","cells","heightAuto","props","colSpan","title","filter","item","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","affecting","filterByAffecting","values","defaultValues","forEach","join","page","label","intl","messages","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","flatMap","toLowerCase","toString","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","params","isAllExpanded","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","business_risk_id","business_risk_text","business_risk_justification","isDisabled","showStatusModal","exposed_systems_count","justification","status_justification","status_id","PrimaryToolbar","pagination","itemCount","total_items","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","securityRuleFilter","knownExploitFilter","impactFilter","cvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","cveList","useSelector","CVEsStore","parameters","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","parseInt","status","Provider","format","DownloadReport","cveNames","selectCve","cvesList","BusinessRiskModal","updateRef","expandCve","Stack","StackItem","VULNERABILITIES_HEADER","Header","showBreadcrumb","Main"],"mappings":"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","file":"js/LandingPage.4dc3609c4c99a9536525.js","sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForCVE,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\n\nconst CVEsTableWithContext = ({ context, header, entity }) => {\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForCVE\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    && EmptyCVEList;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n        return ({ ...cve, isOpen: current });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        onCollapse={!isEmpty ?  (event, rowKey) => methods.openCves(rowKey) : undefined}\n                        actionResolver={!(cves.data.length === 0) ?\n                            (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                        sortBy={!isEmpty ?\n                            createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        ouiaId={'cves-table'}\n                        isStickyHeader\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={7} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.object\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        const defaultValues = [false, false];\n        values.forEach(item => { defaultValues[item] = true; });\n        const filter = defaultValues.join(',');\n        apply({ affecting: filter === 'false,false' ? '' : filter, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : [])\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { context } = props;\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, isAllExpanded } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(cves.data.filter(item => selectedCves.includes(item.id)).map(item => ({\n                id: item.id,\n                business_risk_id: item.business_risk_id,\n                business_risk_text: item.business_risk_justification\n            }))),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(cves.data.filter(item => selectedCves.includes(item.id)).map(item => ({\n                id: item.id,\n                exposed_systems_count: item.exposed_systems_count,\n                justification: item.status_justification,\n                status_id: item.status_id\n            }), [])),\n            props: { isDisabled: !selectedCvesCount }\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount || cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        cvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: props.intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { VULNERABILITIES_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore\n} from '../../../Store/Actions/Actions';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) =>  CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList), [cveList]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && setUrlParam({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves');\n    };\n\n    const showBusinessRiskModal = cvesList => {\n        const  { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            (<BusinessRiskModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const showStatusModal = cvesList => {\n        const  { meta } = cves;\n        setStatusModal(() => () =>\n            (<StatusModal cves={cvesList} updateRef={() => updateRef(meta, apply)} />)\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    params: parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={VULNERABILITIES_HEADER} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return <ErrorHandler code={parseInt(cves.errors.status)}/>;\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    return (\n        <Fragment>\n            <Header showBreadcrumb={false} />\n            <Main>\n                <CVEs/>\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"sourceRoot":""}