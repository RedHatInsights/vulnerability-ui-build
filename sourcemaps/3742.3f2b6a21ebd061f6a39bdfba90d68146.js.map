{"version":3,"file":"js/3742.1683126031212.09db617329cc5e4482b0.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => (\n    <View style={styles.labelsWrapper}>\n        {hasExploit &&\n            <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 62 : 75}\n                    variant={4}\n                    label={intl.formatMessage(messages.knownExploit)}\n                    textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#c9190b',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n        {hasRule &&\n            <View style={styles.label}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 59 : 63}\n                    label={intl.formatMessage(messages.securityRuleLabel)}\n                    textStyle={isSmall ? styles.smallText : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#bee1f4',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n    </View>\n);\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    FILTERS, CVE_REPORT_FILTERS,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cvefilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cvefilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            {filtersBuilder.tags ? '.\\n\\n' : ''}\n            {\n                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +\n                filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''\n            }\n            {\n                filtersBuilder.tags?.values.length > 10 && ' '\n                + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })\n            }\n            {'.\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersExcluded)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersIncluded))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableExcluded)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength } from '../../../Helpers/ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    STATUS_OPTIONS,\n    BUSINESS_RISK_OPTIONS,\n    PDF_REPORT_PER_PAGE,\n    impactList,\n    NotAuthorizedNotification\n} from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const chrome = useChrome();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(\n        data,\n        PDF_REPORT_PER_PAGE.otherPages,\n        ({ attributes }) => (attributes.rules.length > 0 || attributes.known_exploit)\n            ? PDF_REPORT_PER_PAGE.labelsHeightMultiplier\n            : 1\n    );\n    const cvesFetch = async () => {\n        let cves;\n        let meta;\n\n        try {\n            ({ data: cves, meta } = await getCveListByAccount({\n                ...params,\n                ...DownloadReport.defaultParams,\n                sort: params.sort || '-cvss_score',\n                affecting: 'true',\n                ...isReportDynamic\n                    ? { advanced_report: 'true' }\n                    : { report: 'true' }\n            }));\n        }\n        catch (error) {\n            clearNotifications();\n\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                fallback={null}\n                orientation=\"landscape\"\n                size=\"A4\"\n                type=\"\"\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"names":["CVElabels","intl","hasRule","hasExploit","isSmall","style","styles","width","icon","variant","label","formatMessage","messages","textStyle","left","undefined","labelStyle","border","borderWidth","borderColor","height","propTypes","FooterPDF","intlFormatWithBold","firstPagePDF","data","meta","filters","isReportDynamic","reportData","user","type","filtersBuilder","reduce","obj","item","key","filter","category","values","PUBLIC_DATE_OPTIONS","val","value","chips","timespan_label","map","name","join","isAllChosen","CVE_REPORT_FILTERS","SYSTEM_REPORT_FILTERS","component","CheckboxCustomFilter","length","FILTERS","items","allChosen","cvefilterStringSegments","msg","lowercase","systemsFilterStringSegments","filterStringSegments","i","hasOwnProperty","isFirst","isLast","includedValues","Fragment","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","published","publish_date","toLowerCase","prefix","tags","tag","namespace","slice","count","find","multiValue","Object","cve_count","total_items","toString","system_count","header","includes","knownExploitCount","userNotes","identity","first_name","last_name","tablePage","defaultProps","PropTypes","page","POSSIBLE_HEADERS","hit","columnBuilder","hitColumns","headerContent","push","forEach","concat","id","hasRules","cve","rules","cveRows","knownExploit","attributes","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","system","display_name","os","opt_out","formatDate","updated","withHeader","rows","DownloadCVEsReport","params","buttonProps","props","useIntl","chrome","useChrome","useState","loading","setLoading","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","useEffect","otherPagesPDF","chunkArray","PDF_REPORT_PER_PAGE","cvesFetch","getCveListByAccount","DownloadReport","sort","affecting","advanced_report","report","cves","status","NotAuthorizedNotification","autoDismiss","description","auth","getUser","processData","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impact","impactList","title","cvss_score","parseFloat","cvss3_score","cvss2_score","toFixed","firstPage","splice","firstPagePDFLength","otherPages","cvePage","index","fallback","orientation","size","fileName","asyncFunction","allPagesHaveTitle","footer","reportName","reportTitle"],"sourceRoot":""}