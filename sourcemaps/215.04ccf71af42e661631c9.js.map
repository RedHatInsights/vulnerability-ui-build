{"version":3,"sources":["webpack:///./src/Helpers/DownloadReport.js"],"names":["filename","page","Date","toISOString","split","params","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","Array","isArray","data_format","payload","response","data","JSON","stringify","downloadFile","this","page_size","Number","MAX_SAFE_INTEGER","replace"],"mappings":"g4BAkFA,YA/EI,aAAc,gCAedA,SAAW,SAACC,GACR,OAAQA,GACJ,IAAK,UACD,4CAAqC,IAAIC,MAAOC,cAAcC,MAAM,KAAK,IAC7E,IAAK,kBACD,8CAAwC,EAAKC,OAAOC,IAApD,aAA4D,EAAKC,cAAcC,MACnF,IAAK,cACD,uCAAiC,EAAKD,cAAcC,MACxD,QACI,oCAA8B,EAAKD,cAAcC,QAxB/C,KA6BdC,WAAa,SAACC,EAAWT,EAAMU,GAC3B,GAAyB,mBAAdD,EACP,0EAAmEA,IAGvE,IAAK,EAAKE,MAAMC,SAASZ,GACrB,oBAAcA,EAAd,mBAGJ,IAAK,EAAKa,QAAQD,SAASF,GACvB,sBAAgBA,EAAhB,sBAvCM,KAoDdI,KApDc,mCAoDP,WAAOL,EAAWL,EAAQM,EAAQV,GAAlC,kFACH,EAAKQ,WAAWC,EAAWT,EAAMU,GACjC,EAAKN,OAAOC,IAAMU,MAAMC,QAAQZ,GAAUA,EAAO,GAAK,GAFnD,UAKmBW,MAAMC,QAAQZ,GALjC,gCAMaK,EAAU,EAAKL,OAAOC,IAAb,SACVD,EAAO,IACP,EAAKE,eAFK,IAGbW,YAAaP,KATtB,2DAWWD,EAAU,EAAD,OACRL,GACA,EAAKE,eAFG,IAGXW,YAAaP,KAdtB,0CAKOQ,EALP,EAKOA,QALP,UAiBgCA,EAjBhC,iBAiBaC,EAjBb,EAiBOC,KACFA,EAAkB,SAAXV,EAAoBW,KAAKC,UAAUH,GAAYA,GAE1DI,QAAaH,EAAM,EAAKrB,SAASC,GAAOU,GApBzC,kIApDO,4DACVc,KAAKlB,cAAgB,CACjBN,KAAM,EACNyB,UAAWC,OAAOC,iBAClBpB,MAAM,IAAIN,MAAOC,cAAc0B,QAAQ,QAAS,KAAKzB,MAAM,KAAK,GAAK,QAGzEqB,KAAKpB,OAAS,CACVC,IAAK,IAGTmB,KAAKb,MAAQ,CAAC,kBAAmB,cAAe,OAAQ,eACxDa,KAAKX,QAAU,CAAC,MAAO","file":"js/215.9215fab2641480e7317b.js","sourcesContent":["import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n    }\n}\n\nexport default new DownloadReport();\n"],"sourceRoot":""}