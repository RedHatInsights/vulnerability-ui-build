{"version":3,"file":"js/CVEDetailsPage.1662486967219.14b23e2d837e93b081bf.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleSummary.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/PresentationalComponents/Kebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/Snippets/GroupedCVELabels.js","webpack:///./src/Components/PresentationalComponents/Snippets/KnownExploitLabel.js","webpack:///./src/Components/PresentationalComponents/WithLoader/WithLoader.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/Modals/BusinessRiskModal.js","webpack:///./src/Components/SmartComponents/Modals/CveStatusModal.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = __importDefault(require(\"react\"));\nvar react_table_1 = require(\"@patternfly/react-table\");\nvar Skeleton_1 = require(\"../Skeleton\");\nvar classnames_1 = __importDefault(require(\"classnames\"));\nrequire(\"./SkeletonTable.css\");\nvar SkeletonTable = function (_a) {\n    var _b = _a.canSelectAll, canSelectAll = _b === void 0 ? false : _b, _c = _a.isSelectable, isSelectable = _c === void 0 ? false : _c, sortBy = _a.sortBy, variant = _a.variant, _d = _a.isDark, isDark = _d === void 0 ? false : _d, _e = _a.colSize, colSize = _e === void 0 ? 0 : _e, columns = _a.columns, _f = _a.paddingColumnSize, paddingColumnSize = _f === void 0 ? 0 : _f, _g = _a.hasRadio, hasRadio = _g === void 0 ? false : _g, _h = _a.rowSize, rowSize = _h === void 0 ? 0 : _h;\n    var newArray = function (size) { return __spreadArray([], Array(size), true); };\n    var createColumns = function () {\n        return __spreadArray([], Array(colSize), true).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.sm }) }); });\n    };\n    var getColumns = function () {\n        return newArray(paddingColumnSize)\n            .map(function () { return ''; })\n            .concat(columns || createColumns());\n    };\n    var createRows = function () {\n        var numberOfCols = columns ? columns.length : colSize;\n        return newArray(rowSize).map(function () { return ({\n            disableSelection: true,\n            cells: newArray(paddingColumnSize)\n                .map(function () { return ''; })\n                .concat(newArray(numberOfCols).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.md }) }); })),\n        }); });\n    };\n    var selectVariant = function () {\n        return hasRadio ? (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.radio) || 'radio' : (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.checkbox) || 'checkbox';\n    };\n    return (react_1.default.createElement(react_table_1.Table, { className: (0, classnames_1.default)({\n            'ins-c-skeleton-table__dark': isDark,\n        }), cells: getColumns(), rows: createRows(), sortBy: sortBy, \"aria-label\": \"Loading\", onSelect: isSelectable ? function () { return undefined; } : undefined, selectVariant: isSelectable ? selectVariant() : undefined, canSelectAll: canSelectAll, variant: variant },\n        react_1.default.createElement(react_table_1.TableHeader, null),\n        react_1.default.createElement(react_table_1.TableBody, null)));\n};\nexports.default = SkeletonTable;\n//# sourceMappingURL=SkeletonTable.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"h1\", null, \"Unable to load inventory component\"),\n        React.createElement(\"h2\", null,\n            \"Failed to load \",\n            component),\n        React.createElement(\"code\", null, \"More info can be found in browser console output.\")));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (React.createElement(Cmp, { className: classNames(props.className, 'inventory') },\n        React.createElement(Suspense, { fallback: props.fallback },\n            React.createElement(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: React.createElement(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)))));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return React.createElement(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (React.createElement(Bullseye, { className: \"pf-u-p-lg\" },\n        React.createElement(Spinner, { size: \"xl\" }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import React from 'react';\nimport { marked } from 'marked';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\nimport { Truncate } from '@redhat-cloud-services/frontend-components/Truncate';\nimport { StackItem, TextContent } from '@patternfly/react-core';\nimport { TRUNCATE_TEXT_THRESHOLD } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\n\n/**\n * extend marked's renderer in order to open link in new tab\n */\nlet renderer = new marked.Renderer();\nrenderer.link = function() {\n    let link = marked.Renderer.prototype.link.apply(this, arguments);\n    return link.replace('<a ', '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n};\n\nmarked.setOptions({ renderer });\n\nconst CSAwRuleSummary = ({ text, truncate, intl, ...props }) => {\n    const dangerousHtml = (text) => ({ __html: sanitizeHtml(text) });\n\n    return (text &&\n        <StackItem {...props}>\n            <TextContent className=\"rule-description\">\n                {truncate && text.length > TRUNCATE_TEXT_THRESHOLD\n                    ? (\n                        <Truncate\n                            length={TRUNCATE_TEXT_THRESHOLD}\n                            expandText={intl.formatMessage(messages.readMore)}\n                            collapseText={intl.formatMessage(messages.readLess)}\n                            text={marked(text)}\n                            spaceBetween\n                        />\n                    ) : (\n                        <span dangerouslySetInnerHTML={dangerousHtml(marked(text))} />\n                    )\n                }\n            </TextContent>\n        </StackItem>\n    );\n\n};\n\nCSAwRuleSummary.defaultProps = {\n    truncate: true,\n    link: null\n};\n\nCSAwRuleSummary.propTypes = {\n    intl: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.object\n    ]),\n    truncate: PropTypes.bool,\n    text: PropTypes.string.isRequired\n};\n\nexport default injectIntl(CSAwRuleSummary);\n","import React from 'react';\nimport { RHEL_VERSIONS } from '../../../../Helpers/constants';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (filterValue, apply) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const [numOptions, setNumOptions] = React.useState(10);\n    const versionFromNewestToOldest = RHEL_VERSIONS.slice().reverse();\n\n    let selectedVersionsArray = filterValue ? filterValue.split(',') : [];\n\n    const onOptionSelect = (_, changedLabel) => {\n        const changedValue = RHEL_VERSIONS.find(version => version.label === changedLabel).value;\n        let newValue;\n\n        if (selectedVersionsArray.includes(changedValue)) {\n            newValue = selectedVersionsArray;\n            newValue.splice(newValue.indexOf(changedValue), 1);\n        }\n        else {\n            newValue = [...selectedVersionsArray, changedValue];\n        }\n\n        apply({ rhel_version: newValue.join(','), page: 1 });\n    };\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const onViewMoreClick = () => {\n        setNumOptions(versionFromNewestToOldest.length);\n    };\n\n    return {\n        type: conditionalFilterType.custom,\n        label: intl.formatMessage(messages.osFilterLabel),\n        filterValues: {\n            children: (\n                <Select\n                    variant=\"checkbox\"\n                    onToggle={onToggle}\n                    onSelect={onOptionSelect}\n                    selections={selectedVersionsArray.map(item => RHEL_VERSIONS.find(version => version.value === item).label)}\n                    isOpen={isOpen}\n                    aria-label=\"os-version-filter\"\n                    placeholderText={intl.formatMessage(messages.osFilterPlaceholder)}\n                    {...(numOptions < versionFromNewestToOldest.length\n                        && { loadingVariant: { text: intl.formatMessage(messages.viewMore), onClick: onViewMoreClick } })}\n                    style={{ maxHeight: '420px', overflow: 'auto' }}\n                >\n                    {versionFromNewestToOldest.slice(0, numOptions).map((option, index) => (\n                        <SelectOption\n                            isDisabled={option.disabled}\n                            key={index}\n                            value={option.label}\n                            description={option?.description}\n                        />\n                    ))}\n                </Select>\n            )\n        }\n    };\n};\n\nexport default useOsVersionFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { RULE_PRESENCE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = [], { ...config }) => {\n    let currentValue = [];\n\n    if (currentFilter.rule_presence) {\n        currentValue = currentValue.concat(currentFilter.rule_presence.split(','));\n    }\n\n    if (currentFilter.rule) {\n        currentValue = currentValue.concat(currentFilter.rule.split(','));\n    }\n\n    const filterBySecurityRule = values => {\n        apply({\n            ...config.isDynamic && { rule: values.join(',') || undefined },\n            ...!config.isDynamic && { rule_presence: values.join(',') || undefined },\n            page: 1\n        });\n    };\n\n    const dropdownItems\t= () => {\n        const items = config.dropdownItems ? config.dropdownItems : RULE_PRESENCE_OPTIONS;\n\n        return unionWith(items, dynamicFilters, isEqual).map(({ label, value }) => ({ label, value }));\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSecurityRules),\n        type: conditionalFilterType.checkbox,\n        key: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items: dropdownItems(),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterStatus),\n        type: conditionalFilterType.checkbox,\n        key: 'status',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\n// Workaround: Using button instead of DropdownItem as it causes error on Dropdown open\n// in the current version of Patternfly\nexport const kebabItemDownloadPDF = (loading, downloadReport, { ...props }) => (\n    <li key=\"pdf\">\n        <button id=\"kebab-item-download-pdf\" className=\"pf-c-dropdown__menu-item\" onClick={() => downloadReport(true)} {...props}>\n            {loading ? <FormattedMessage {...messages.loading} /> : <FormattedMessage {...messages.kebabExportAsPDF} />}\n        </button>\n    </li>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds, { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { LabelGroup } from '@patternfly/react-core';\nimport KnownExploitLabel from './KnownExploitLabel';\nimport CSAwLabel from './CSAwLabel';\n\nconst GroupedCVELabels = ({ hasExploit, hasRule, isCompact }) =>\n    (hasExploit || hasRule) && (\n        <LabelGroup className=\"cve-labels-grouped--nowrap\">\n            {hasExploit && <KnownExploitLabel isCompact={isCompact}/>}\n            {hasRule && <CSAwLabel isCompact={isCompact}/>}\n        </LabelGroup>\n    );\n\nGroupedCVELabels.propTypes = {\n    hasExploit: propTypes.bool.isRequired,\n    hasRule: propTypes.bool.isRequired,\n    isCompact: propTypes.bool\n};\n\nexport default GroupedCVELabels;\n","import React from 'react';\nimport { Label, Tooltip } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst KnownExploitLabel = ({ style, className, isCompact }) => (\n    <Tooltip content={<FormattedMessage {...messages.knownExploitDescription} />}>\n        <Label color=\"red\" style={{ ...style }} className={['cve-labels', className]} isCompact={isCompact}>\n            <FormattedMessage {...messages.knownExploit} />\n        </Label>\n    </Tooltip>\n);\n\nKnownExploitLabel.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    isCompact: PropTypes.bool\n};\n\nexport default KnownExploitLabel;\n","import { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { TableVariant } from '@patternfly/react-table';\n\nexport const LoaderType = {\n    spinner: 'spinner',\n    table: 'table',\n    compactTable: 'compactTable',\n    rectangle: 'rectangle',\n    inlineSkeleton: 'inlineSkeleton',\n    skeleton: 'skeleton'\n};\n\nconst WithLoader = ({ isLoading, variant, children, size, ...props }) => {\n    if (isLoading) {\n        switch (variant) {\n            case LoaderType.spinner:\n                return <Spinner centered {...props}/>;\n            case LoaderType.table:\n                return <SkeletonTable {...props}/>;\n            case LoaderType.compactTable:\n                return <SkeletonTable variant={TableVariant.compact} {...props}/>;\n            case LoaderType.rectangle:\n                return <Skeleton shape=\"square\" {...props}/>;\n            case LoaderType.inlineSkeleton:\n                return <Skeleton\n                    size={size ?? SkeletonSize.lg}\n                    {...props}\n                    style={{ display: 'inline-block', ...props.style }}\n                />;\n            default:\n                return <Skeleton size={size ?? SkeletonSize.lg} {...props}/>;\n        }\n    }\n\n    return children;\n};\n\nWithLoader.propTypes = {\n    isLoading: propTypes.bool,\n    variant: propTypes.oneOf(Object.keys(LoaderType)),\n    style: propTypes.object,\n    children: propTypes.node,\n    size: propTypes.string\n};\n\nexport default WithLoader;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nimport React from 'react';\nvar VALUE_TO_STATE = {\n    1: { icon: React.createElement(AngleDoubleDownIcon, null), text: 'Low', color: 'blue' },\n    2: { icon: React.createElement(EqualsIcon, null), text: 'Moderate', color: 'gold' },\n    3: { icon: React.createElement(AngleDoubleUpIcon, null), text: 'Important', color: 'orange' },\n    4: { icon: React.createElement(CriticalRiskIcon, null), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"rest\"]);\n    return (React.createElement(Label, __assign({}, rest, props, { color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }), text || VALUE_TO_STATE[value].text));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemsByCVE\n} from '../../../Store/Actions/Actions';\nimport {\n    RULE_ABSENCE_OPTIONS, ANSIBLE_REMEDIATION\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        // TODO: change it back to fetchAffectedSystemsIdsByCve when the endpoint return also a remediation field\n        fetchResource: ops => fetchAffectedSystemsByCVE({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRows.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_ABSENCE_OPTIONS\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded),\n                isDisabled: meta.totalItems === 0\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n                                <ColumnManagementModal\n                                    appliedColumns={columns}\n                                    applyColumns={newColumns => dispatch(changeColumnsCveDetail(newColumns))}\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={setColumnModalOpen}\n                                />\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport {\n    addNotification\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NotAuthorizedNotification, ReadOnlyNotification, STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId=\"statusId\">\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId=\"label\">\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation=\"vertical\"\n                aria-label=\"justification note\"\n                style={{ minHeight: '2.25rem' }}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, onFailureNotification, ouiaId, children }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const dispatch = useDispatch();\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave()\n            .then(() => dispatch(addNotification(onSuccessNotification)))\n            .catch((error) => dispatch(addNotification(\n                error.status === '503' ? ReadOnlyNotification :\n                    error.status === '403' ? NotAuthorizedNotification\n                        : onFailureNotification)));\n        handleClose();\n    };\n\n    return (\n        <Modal\n            variant=\"small\"\n            title={title}\n            isOpen={Boolean(targetItems)}\n            onClose={handleClose}\n            actions={[\n                <Button key=\"save\" variant=\"primary\" ouiaId=\"save\" onClick={handleSave}>\n                    <FormattedMessage {...messages.save} />\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" ouiaId=\"close\" onClick={handleClose}>\n                    <FormattedMessage {...messages.cancel} />\n                </Button>\n            ]}\n            ouiaId={ouiaId}\n        >\n            {children}\n        </Modal>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object,\n    onFailureNotification: propTypes.object,\n    ouiaId: propTypes.string\n};\n\nexport default BaseModal;\n","import { Form, FormGroup, Radio, Stack, StackItem, TextArea } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { setBusinessRisk } from '../../../Helpers/APIHelper';\nimport { BUSINESS_RISK_OPTIONS } from '../../../Helpers/constants';\nimport BaseModal from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const BusinessRiskModal = ({ cves, updateRef, intl }) => {\n    const [cveList] = useState(cves);\n    const [businessRiskId, setBusinessRiskId] = useState('0');\n    const [label, setLabel] = useState();\n\n    const getDefaultLabel = useCallback(() => {\n        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');\n    }, [cveList]);\n\n    useEffect(() => {\n        const getDefaultBusinessRisk = () => {\n            setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');\n        };\n\n        getDefaultBusinessRisk();\n        getDefaultLabel();\n    }, [cves, getDefaultLabel, cveList]);\n\n    useEffect(getDefaultLabel, [getDefaultLabel]);\n\n    const handleOnRadioChange = (_, event) => {\n        const { value } = event.currentTarget;\n        setBusinessRiskId(value);\n    };\n\n    const handleOnLabelChange = value => {\n        setLabel(value);\n    };\n\n    const handleSave = () => {\n        return setBusinessRisk({\n            business_risk_id: parseInt(businessRiskId),\n            cve: cveList.map(item => item.id),\n            business_risk_text: label\n        }).then(updateRef).catch(error => {\n            throw error; // propagate error to BaseModal\n        });\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationBusinessRiskUpdateFailureBody)\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={intl.formatMessage(messages.businessRiskModalTitle)}\n            ouiaId=\"business-risk-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(messages.businessRiskModalInfo)}\n                </StackItem>\n                <StackItem>\n                    <Form>\n                        <FormGroup label={intl.formatMessage(messages.businessRiskLabel)} fieldId=\"businessRiskId\">\n                            {BUSINESS_RISK_OPTIONS.map(item => (\n                                <Radio\n                                    className=\"business-risk-radio\"\n                                    value={item.value}\n                                    isChecked={businessRiskId === item.value}\n                                    onChange={handleOnRadioChange}\n                                    label={item.label}\n                                    key={item.value}\n                                    id={item.value}\n                                    name={item.label}\n                                    aria-label={item.label}\n                                    ouiaId=\"business-risk-radio\"\n                                />\n                            ))}\n                        </FormGroup>\n                        <FormGroup label={intl.formatMessage(messages.justificationLabel)} fieldId=\"label\">\n                            <TextArea\n                                type=\"text\"\n                                onChange={handleOnLabelChange}\n                                value={label}\n                                resizeOrientation=\"vertical\"\n                                aria-label=\"justification\"\n                                style={{ minHeight: '2.25rem' }}\n                            />\n                        </FormGroup>\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nBusinessRiskModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any\n};\n\nexport default injectIntl(BusinessRiskModal);\n","import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem, Tooltip } from '@patternfly/react-core';\nimport { InfoCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CveStatusModal = ({ cves, updateRef, intl, canEditPairStatus }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification } = useJustificationInput(getDefaultJustification());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const cvesWithExposedSystems = cveList.filter(item => item.exposed_systems_count > 0).map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ ouiaId: 'status-select' });\n    }, [setSelectProps]);\n\n    const handleSave = () => {\n        return Promise.all([\n            setCveStatus({\n                cve: cveList.map(item => item.id),\n                status_id: parseInt(statusId),\n                status_text: justification\n            }),\n            ...[(!checkboxState && cvesWithExposedSystems.length > 0 && canEditPairStatus) &&\n                setSystemCveStatus({\n                    cve: cvesWithExposedSystems,\n                    status_id: parseInt(statusId),\n                    status_text: justification\n                })\n            ]\n        ])\n            .then(() => updateRef(!checkboxState))\n            .catch(error => { throw error; }); // propagate error to BaseModal\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.every(item => item.status_id === cveList[0].status_id)\n            && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultJustification() {\n        return (cveList && cveList.every(item => item.justification === cveList[0].justification)\n            && cveList[0].justification) || '';\n    }\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const title = intl.formatMessage(messages.cveStatusModalTitle, { count: cveList.length || 0 });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={title}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cveStatusModalSelected,\n                        {\n                            count: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <InfoCircleIcon\n                        className=\"pf-u-mr-xs\"\n                        fontSize=\"var(--pf-global--FontSize--md)\"\n                        color=\"var(--pf-global--active-color--300)\"\n                    />\n                    {intl.formatMessage(messages.cveStatusModalInfo, { count: cveList.length || 0 })}\n                    <Tooltip\n                        content={intl.formatMessage(messages.cveStatusModalInfoTooltip)}\n                    >\n                        <OutlinedQuestionCircleIcon\n                            className=\"pf-u-ml-xs\"\n                            color=\"var(--pf-global--Color--200)\"\n                        />\n                    </Tooltip>\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        {StatusSelect}\n                        {JustificationInput}\n                        {cvesWithExposedSystems.length > 0 && canEditPairStatus &&\n                            <FormGroup fieldId=\"overwrite\">\n                                <Split>\n                                    <SplitItem>\n                                        <Checkbox\n                                            label={intl.formatMessage(messages.cveStatusModalOverwriteCheckbox)}\n                                            id=\"alt-form-checkbox-1\"\n                                            name=\"alt-form-checkbox-1\"\n                                            isChecked={checkboxState}\n                                            onChange={checked => setCheckboxState(checked)}\n                                        />\n                                    </SplitItem>\n                                    <SplitItem>\n                                        <Tooltip\n                                            content={intl.formatMessage(messages.cveStatusModalOverwriteTooltip)}\n                                        >\n                                            <OutlinedQuestionCircleIcon\n                                                className=\"pf-u-ml-xs\"\n                                                color=\"var(--pf-global--Color--200)\"\n                                                style={{ verticalAlign: '0' }}\n                                            />\n                                        </Tooltip>\n                                    </SplitItem>\n                                </Split>\n                            </FormGroup>\n                        }\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCveStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    intl: propTypes.any,\n    canEditPairStatus: propTypes.bool.isRequired\n};\n\nexport default injectIntl(CveStatusModal);\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","__spreadArray","this","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","react_table_1","Skeleton_1","classnames_1","_a","numberOfCols","_b","canSelectAll","_c","isSelectable","sortBy","variant","_d","isDark","_e","colSize","columns","_f","paddingColumnSize","_g","hasRadio","_h","rowSize","newArray","size","default","createElement","Table","className","cells","map","title","Skeleton","SkeletonSize","sm","rows","disableSelection","md","onSelect","undefined","selectVariant","RowSelectVariant","radio","checkbox","TableHeader","TableBody","component","props","s","e","t","p","hasOwnProperty","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","useEffect","console","error","__assign","assign","n","apply","BaseInvTable","history","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","ref","innerRef","propTypes","InvTable","defaultProps","Bullseye","Spinner","renderer","marked","link","replace","CSAwRuleSummary","text","truncate","intl","TRUNCATE_TEXT_THRESHOLD","expandText","formatMessage","messages","collapseText","spaceBetween","dangerouslySetInnerHTML","__html","sanitizeHtml","dangerousHtml","PropTypes","injectIntl","filterValue","React","isOpen","setOpen","numOptions","setNumOptions","versionFromNewestToOldest","RHEL_VERSIONS","reverse","selectedVersionsArray","split","type","conditionalFilterType","label","filterValues","children","onToggle","_","changedLabel","newValue","changedValue","version","includes","splice","rhel_version","join","page","selections","item","placeholderText","loadingVariant","onClick","style","maxHeight","overflow","option","index","isDisabled","disabled","key","description","currentFilter","dynamicFilters","config","currentValue","rule_presence","rule","filterBySecurityRule","values","isDynamic","dropdownItems","items","RULE_PRESENCE_OPTIONS","unionWith","isEqual","onChange","event","status_id","filterByStatus","filter","STATUS_OPTIONS","kebabItemDownloadPDF","loading","downloadReport","id","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabItemEditStatus","showStatusModal","inventoryIds","GroupedCVELabels","hasExploit","hasRule","isCompact","KnownExploitLabel","content","color","LoaderType","spinner","table","compactTable","rectangle","inlineSkeleton","skeleton","WithLoader","isLoading","centered","TableVariant","shape","display","keys","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","Flex","FlexItem","grow","TextContent","textAlign","Text","TextVariants","V3names","AV","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","val","cvssVersion","Popover","position","maxWidth","enableFlip","headerContent","bodyContent","gridBreakPoint","entries","Label","isLarge","substring","SnippetWithHeaderAndPopover","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","toString","BusinessRiskPopoverContent","Button","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","summary","Card","rule_id","ouiaId","ExpandableSection","toggleText","CSAwLabel","ruleId","stopPropagation","count","CardBody","Grid","GridItem","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","cve","_i","CVES_PATH","reduce","prev","KnownExploitSummary","CVEDetailsPageSummary","data","known_exploit","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","setColumnModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemsByCVE","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","securityRuleFilter","RULE_ABSENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","isColumnModalOpen","useSelector","entities","shallowEqual","total","loaded","CVEDetailsPageStore","params","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","direction","match","tableProps","isStickyHeader","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","notification","addNotification","clearNotifications","payload","selecting","selectRows","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveDetail","isModalOpen","setModalOpen","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","current","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","createBreadcrumbs","lastSegment","PATHS","isActive","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","attributes","Main","useStatusSelect","initialValue","statusId","setStatusId","setProps","StatusSelect","fieldId","selection","useJustificationInput","setJustification","JustificationInput","resizeOrientation","minHeight","BaseModal","onSave","onSuccessNotification","onFailureNotification","targetItems","setTargetItems","handleClose","Boolean","onClose","then","ReadOnlyNotification","NotAuthorizedNotification","businessRiskId","setBusinessRiskId","setLabel","getDefaultLabel","useCallback","handleOnRadioChange","currentTarget","autoDismiss","parseInt","business_risk_text","BUSINESS_RISK_OPTIONS","isChecked","every","setSelectProps","checkboxState","setCheckboxState","cvesWithExposedSystems","Promise","setCveStatus","status_text","setSystemCveStatus","cveId","chunks","fontSize","checked","verticalAlign","initialState","tagsLoaded","allTagsLoaded","invConfig","modifyInventory","state","action","some","patchAccess","selected","selectedRow","newState","ActionTypes"],"sourceRoot":""}