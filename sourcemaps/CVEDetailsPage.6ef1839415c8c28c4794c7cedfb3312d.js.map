{"version":3,"file":"js/CVEDetailsPage.1675098800900.3276af8ba7df906d1531.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/power-off-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryLoadError.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Inventory/InventoryTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageDescription/CVEDetailsPageDescription.js","webpack:///./src/Components/PresentationalComponents/CvssVector/vectorNames.js","webpack:///./src/Components/PresentationalComponents/CvssVector/CvssVector.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/SnippetWithHeaderAndPopover.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSidebar/CVEDetailsPageSidebar.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/InsightsLabel/InsightsLabel.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/CSAwRuleBox.js","webpack:///./src/Components/PresentationalComponents/KnownExploitSummary/KnownExploitSummary.js","webpack:///./src/Components/PresentationalComponents/CSAwRuleBox/NotVulnerableBox.js","webpack:///./src/Components/PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js","webpack:///./src/Components/SmartComponents/CVEDetailsPage/CVEDetailsPage.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport lineClamp from '@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSectionVariant;\n(function (ExpandableSectionVariant) {\n    ExpandableSectionVariant[\"default\"] = \"default\";\n    ExpandableSectionVariant[\"truncate\"] = \"truncate\";\n})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));\nconst setLineClamp = (lines, element) => {\n    if (!element || lines < 1) {\n        return;\n    }\n    element.style.setProperty(lineClamp.name, lines.toString());\n};\nexport class ExpandableSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.expandableContentRef = React.createRef();\n        this.state = {\n            isExpanded: props.isExpanded\n        };\n    }\n    calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n        if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n            return toggleTextExpanded;\n        }\n        if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n            return toggleTextCollapsed;\n        }\n        return toggleText;\n    }\n    componentDidMount() {\n        if (this.props.variant === ExpandableSectionVariant.truncate && this.props.truncateMaxLines) {\n            const expandableContent = this.expandableContentRef.current;\n            setLineClamp(this.props.truncateMaxLines, expandableContent);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.variant === ExpandableSectionVariant.truncate &&\n            prevProps.truncateMaxLines !== this.props.truncateMaxLines) {\n            const expandableContent = this.expandableContentRef.current;\n            setLineClamp(this.props.truncateMaxLines, expandableContent);\n        }\n    }\n    render() {\n        const _a = this.props, { onToggle: onToggleProp, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        isActive, className, toggleText, toggleTextExpanded, toggleTextCollapsed, toggleContent, children, isExpanded, isDetached, displaySize, isWidthLimited, isIndented, contentId, variant, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        truncateMaxLines } = _a, props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\", \"variant\", \"truncateMaxLines\"]);\n        let onToggle = onToggleProp;\n        let propOrStateIsExpanded = isExpanded;\n        // uncontrolled\n        if (isExpanded === undefined) {\n            propOrStateIsExpanded = this.state.isExpanded;\n            onToggle = isOpen => {\n                this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n            };\n        }\n        const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n        const expandableToggle = !isDetached && (React.createElement(\"button\", { className: css(styles.expandableSectionToggle), type: \"button\", \"aria-expanded\": propOrStateIsExpanded, onClick: () => onToggle(!propOrStateIsExpanded) },\n            variant !== ExpandableSectionVariant.truncate && (React.createElement(\"span\", { className: css(styles.expandableSectionToggleIcon) },\n                React.createElement(AngleRightIcon, { \"aria-hidden\": true }))),\n            React.createElement(\"span\", { className: css(styles.expandableSectionToggleText) }, toggleContent || computedToggleText)));\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, variant === ExpandableSectionVariant.truncate && styles.modifiers.truncate, className) }, props),\n            variant === ExpandableSectionVariant.default && expandableToggle,\n            React.createElement(\"div\", { ref: this.expandableContentRef, className: css(styles.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: contentId }, children),\n            variant === ExpandableSectionVariant.truncate && expandableToggle));\n    }\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded) => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: '',\n    variant: 'default'\n};\n//# sourceMappingURL=ExpandableSection.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport * as flexToken from '@patternfly/react-tokens/dist/esm/l_flex_item_Order';\nimport { formatBreakpointMods, setBreakpointCssVars } from '../../helpers/util';\nexport const Flex = (_a) => {\n    var { children = null, className = '', component = 'div', spacer, spaceItems, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order, style } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"spacer\", \"spaceItems\", \"grow\", \"shrink\", \"flex\", \"direction\", \"alignItems\", \"alignContent\", \"alignSelf\", \"align\", \"justifyContent\", \"display\", \"fullWidth\", \"flexWrap\", \"order\", \"style\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.flex, formatBreakpointMods(spacer, styles), formatBreakpointMods(spaceItems, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(direction, styles), formatBreakpointMods(alignItems, styles), formatBreakpointMods(alignContent, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(justifyContent, styles), formatBreakpointMods(display, styles), formatBreakpointMods(fullWidth, styles), formatBreakpointMods(flexWrap, styles), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, flexToken.l_flex_item_Order.name)) : undefined }, props), children));\n};\nFlex.displayName = 'Flex';\n//# sourceMappingURL=Flex.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/layouts/Flex/flex';\nimport * as flexToken from '@patternfly/react-tokens/dist/esm/l_flex_item_Order';\nimport { formatBreakpointMods, setBreakpointCssVars } from '../../helpers/util';\nexport const FlexItem = (_a) => {\n    var { children = null, className = '', component = 'div', spacer, grow, shrink, flex, alignSelf, align, fullWidth, order, style } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"spacer\", \"grow\", \"shrink\", \"flex\", \"alignSelf\", \"align\", \"fullWidth\", \"order\", \"style\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(formatBreakpointMods(spacer, styles), formatBreakpointMods(grow, styles), formatBreakpointMods(shrink, styles), formatBreakpointMods(flex, styles), formatBreakpointMods(alignSelf, styles), formatBreakpointMods(align, styles), formatBreakpointMods(fullWidth, styles), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, flexToken.l_flex_item_Order.name)) : undefined }), children));\n};\nFlexItem.displayName = 'FlexItem';\n//# sourceMappingURL=FlexItem.js.map","import { createIcon } from '../createIcon';\n\nexport const PowerOffIconConfig = {\n  name: 'PowerOffIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const PowerOffIcon = createIcon(PowerOffIconConfig);\n\nexport default PowerOffIcon;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nvar InventoryLoadError = function (_a) {\n    var component = _a.component, props = __rest(_a, [\"component\"]);\n    useEffect(function () {\n        console.error(\"Unable to load inventory component. Failed to load \".concat(component, \".\"), props);\n    }, []);\n    return (_jsxs(\"div\", { children: [_jsx(\"h1\", { children: \"Unable to load inventory component\" }), _jsxs(\"h2\", { children: [\"Failed to load \", component] }), _jsx(\"code\", { children: \"More info can be found in browser console output.\" })] }));\n};\nexport default InventoryLoadError;\n//# sourceMappingURL=InventoryLoadError.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'react-redux';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport InventoryLoadError from './InventoryLoadError';\nimport classNames from 'classnames';\nvar BaseInvTable = function (props) {\n    var history = useHistory();\n    var store = useStore();\n    var Cmp = props.component;\n    return (_jsx(Cmp, __assign({ className: classNames(props.className, 'inventory') }, { children: _jsx(Suspense, __assign({ fallback: props.fallback }, { children: _jsx(ScalprumComponent, __assign({ history: history, store: store, appName: \"inventory\", module: \"./InventoryTable\", scope: \"inventory\", ErrorComponent: _jsx(InventoryLoadError, __assign({ component: \"InventoryDetailHead\", history: history, store: store }, props)), ref: props.innerRef }, props)) })) })));\n};\nBaseInvTable.propTypes = {\n    fallback: PropTypes.node,\n    innerRef: PropTypes.object,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nvar InvTable = React.forwardRef(function (props, ref) { return _jsx(BaseInvTable, __assign({ innerRef: ref }, props)); });\nInvTable.propTypes = {\n    fallback: PropTypes.node,\n    component: PropTypes.string,\n    className: PropTypes.string,\n};\nInvTable.defaultProps = {\n    fallback: (_jsx(Bullseye, __assign({ className: \"pf-u-p-lg\" }, { children: _jsx(Spinner, { size: \"xl\" }) }))),\n    component: 'section',\n};\nexport default InvTable;\n//# sourceMappingURL=InventoryTable.js.map","import { useSelector } from 'react-redux';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst useOsVersionFilter = (appliedVersions, apply) => {\n    /* operatingSystems are obtained from the Inventory store */\n    const operatingSystems = useSelector(({ entities }) => entities?.operatingSystems) || [];\n    const [{ toGroupSelectionValue, buildOSFilterConfig } = {}] = useLoadModule({\n        appName: 'inventory',\n        scope: 'inventory',\n        module: './OsFilterHelpers'\n    });\n\n    return buildOSFilterConfig\n        ? [\n            buildOSFilterConfig(\n                {\n                    label: intl.formatMessage(messages.osFilterLabel),\n                    type: 'checkbox',\n                    id: 'rhel_version',\n                    value: toGroupSelectionValue(\n                        appliedVersions\n                            ? appliedVersions.split(',')\n                            : []\n                    ),\n                    onChange: (event, value) => {\n                    /* `versions` must be of type string, e.g., \"8.9,9.0\" */\n                        const versions = Object.values(value)\n                            .flatMap((versions) => Object.keys(versions))\n                            .toString();\n                        apply({ rhel_version: versions, page: 1 });\n                    },\n                    placeholder: intl.formatMessage(messages.osFilterPlaceholder)\n                },\n                operatingSystems\n            )\n        ]\n        : [];\n};\n\nexport default useOsVersionFilter;\n","import { Stack, StackItem, Text, TextContent, TextVariants, Flex, FlexItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { NoDescriptionAvailable } from '../EmptyStates/EmptyStates';\n\nconst CVEDetailsPageDescription = ({ cveAttributes, intl }) => {\n    const {\n        public_date: publishDate,\n        description,\n        rh_link: link\n    } = cveAttributes;\n    const hasDescription = description && description !== 'unknown';\n\n    return (\n        <CVEPageContext.Consumer>\n            {context =>\n                <Stack hasGutter>\n                    {\n                        hasDescription && (\n                            <StackItem className=\"pf-u-mt-sm\">\n                                <Flex>\n                                    <FlexItem>{intl.formatMessage(messages.publishDate)}:</FlexItem>\n                                    <FlexItem grow={{ default: 'grow' }}>\n                                        <WithLoader\n                                            isLoading={context.isLoading}\n                                            variant={LoaderType.inlineSkeleton}\n                                            size=\"sm\"\n                                        >\n                                            {publishDate}\n                                        </WithLoader>\n                                    </FlexItem>\n                                </Flex>\n                            </StackItem>\n                        )\n                    }\n                    <StackItem>\n                        <WithLoader\n                            isLoading={context.isLoading}\n                            variant={LoaderType.rectangle}\n                            style={{ height: '132px', width: '100%' }}\n                        >\n                            {\n                                hasDescription ? (\n                                    <TextContent style={{ textAlign: 'justify' }}>\n                                        <Text component={TextVariants.p}>{description}</Text>\n                                    </TextContent>\n                                ) : <NoDescriptionAvailable/>\n                            }\n                        </WithLoader>\n                    </StackItem>\n                    <StackItem className=\"pf-u-mt-sm pf-u-mb-md\">\n                        {link}\n                    </StackItem>\n                </Stack>\n            }\n        </CVEPageContext.Consumer>\n\n    );\n};\n\nCVEDetailsPageDescription.propTypes = {\n    cveAttributes: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CVEDetailsPageDescription);\n","import { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nexport const V3names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV3AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacent),\n            L: intl.formatMessage(messages.vectorValuesLocal),\n            P: intl.formatMessage(messages.vectorValuesPhysical)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV3AC),\n        values: {\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    PR: {\n        name: intl.formatMessage(messages.vectorNamesV3PR),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    UI: {\n        name: intl.formatMessage(messages.vectorNamesV3UI),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            R: intl.formatMessage(messages.vectorValuesRequired)\n        }\n    },\n    S: {\n        name: intl.formatMessage(messages.vectorNamesV3S),\n        values: {\n            U: intl.formatMessage(messages.vectorValuesUnchanged),\n            C: intl.formatMessage(messages.vectorValuesChanged)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV3C),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV3I),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV3A),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    CVSS: {\n        name: intl.formatMessage(messages.vectorNamesCvssVersion),\n        values: {\n            '3.0': 3.0\n        }\n    }\n};\n\nexport const V2names = {\n    AV: {\n        name: intl.formatMessage(messages.vectorNamesV2AV),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNetwork),\n            A: intl.formatMessage(messages.vectorValuesAdjacentNetwork),\n            L: intl.formatMessage(messages.vectorValuesLocal)\n        }\n    },\n    AC: {\n        name: intl.formatMessage(messages.vectorNamesV2AC),\n        values: {\n            N: intl.formatMessage(messages.vectorValuesNone),\n            L: intl.formatMessage(messages.vectorValuesLow),\n            H: intl.formatMessage(messages.vectorValuesHigh)\n        }\n    },\n    Au: {\n        name: intl.formatMessage(messages.vectorNamesV2AU),\n        values: {\n            M: intl.formatMessage(messages.vectorValuesMultiple),\n            S: intl.formatMessage(messages.vectorValuesSingle),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    C: {\n        name: intl.formatMessage(messages.vectorNamesV2C),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    I: {\n        name: intl.formatMessage(messages.vectorNamesV2I),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    },\n    A: {\n        name: intl.formatMessage(messages.vectorNamesV2A),\n        values: {\n            C: intl.formatMessage(messages.vectorValuesComplete),\n            P: intl.formatMessage(messages.vectorValuesPartial),\n            N: intl.formatMessage(messages.vectorValuesNone)\n        }\n    }\n};\n","import { Popover, TextContent } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader, { LoaderType } from '../WithLoader/WithLoader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { V3names, V2names } from './vectorNames';\nimport Label from '../Snippets/Label';\n\nexport const parseVector = (vector, namesMapping) => {\n    let res = {};\n    vector &&\n        vector.split('/').forEach(curr => {\n            let [key, val] = curr.split(':');\n            const name = namesMapping[key] && namesMapping[key].name;\n            const value = (namesMapping[key] && namesMapping[key].values[val]) || 'N/A';\n            if (name) {\n                res[name] = value;\n            }\n        });\n    return res;\n};\n\nconst CvssVector = ({ cvss2_metrics: CVSS2Vector, cvss3_metrics: CVSS3Vector, score, intl }) => {\n    const cvssVer = (CVSS3Vector && 'CVSS 3.0') || (CVSS2Vector && 'CVSS 2.0') || 'CVSS 3.0';\n    const cvssVector = CVSS3Vector || CVSS2Vector;\n    const namesMapping = (CVSS3Vector && V3names) || (CVSS2Vector && V2names);\n    const parsedVector = parseVector(cvssVector, namesMapping);\n    const notAvailable = 'N/A';\n    delete parsedVector.cvssVersion;\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <TextContent>\n                    <Popover\n                        id=\"popover-cvss\"\n                        position=\"bottom\"\n                        maxWidth=\"100%\"\n                        enableFlip\n                        headerContent={`${cvssVer} ${intl.formatMessage(messages.cvssVectorPopoverTitle)}`}\n                        bodyContent={\n                            <WithLoader isLoading={context.isLoading} colSize={2} rowSize={8} variant={LoaderType.compactTable}>\n                                {cvssVector ?\n                                    (<Table\n                                        aria-label=\"Metric breakdown\"\n                                        variant={TableVariant.compact}\n                                        gridBreakPoint=\"\"\n                                        cells={\n                                            [intl.formatMessage(messages.cvssVectorMetric),\n                                                intl.formatMessage(messages.cvssVectorValue)]\n                                        }\n                                        rows={Object.entries(parsedVector)}\n                                    >\n                                        <TableHeader />\n                                        <TableBody />\n                                    </Table>\n                                    ) : (notAvailable)}\n                            </WithLoader>\n                        }\n                    >\n                        <Label isLarge className=\"pf-u-mb-xs pointer\">\n                            {cvssVer} {intl.formatMessage(messages.cvssVectorVectorString)}\n                            <OutlinedQuestionCircleIcon\n                                color=\"var(--pf-global--secondary-color--100)\"\n                                className=\"pf-u-ml-xs\"\n                            />\n                        </Label>\n                    </Popover>\n\n                    <WithLoader isLoading={context.isLoading} style={{ width: '320px' }}>\n                        <span className=\"pf-u-mr-md\">{score}</span>\n                        <span id=\"cvss-vector-content\">\n                            {intl.formatMessage(messages.vector) + ': '}\n                            {cvssVector?.substring(cvssVector.indexOf('/') + 1) || notAvailable}\n                        </span>\n                    </WithLoader>\n                </TextContent>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCvssVector.propTypes = {\n    cvss2_metrics: propTypes.string,\n    cvss3_metrics: propTypes.string,\n    score: propTypes.any,\n    intl: propTypes.any\n};\n\nexport default injectIntl(CvssVector);\n","import { Popover, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport Label from '../Snippets/Label';\n\nconst SnippetWithHeaderAndPopover = ({ title, value, content }) => (\n    <Popover id=\"popover\" bodyContent={content} headerContent=\"\" position=\"bottom\"\n        appendTo={document.querySelector('.vulnerability')}>\n        <Stack className=\"popover-content\">\n            <StackItem>\n                <Label isLarge>{title}</Label>\n            </StackItem>\n            <StackItem>\n                <a>{value}</a>\n            </StackItem>\n        </Stack>\n    </Popover>\n);\n\nSnippetWithHeaderAndPopover.propTypes = {\n    title: propTypes.any,\n    value: propTypes.any,\n    content: propTypes.any\n};\n\nexport default SnippetWithHeaderAndPopover;\n","import { Stack, StackItem, Split, SplitItem, TextContent, Button } from '@patternfly/react-core';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { getImpactDetails } from '../../../Helpers/MiscHelper';\nimport CvssVector from '../CvssVector/CvssVector';\nimport messages from '../../../Messages';\nimport SnippetWithHeaderAndPopover from './SnippetWithHeaderAndPopover';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport { useIntl } from 'react-intl';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport Label from '../Snippets/Label';\nimport { CVEPageContext } from '../../SmartComponents/CVEDetailsPage/CVEDetailsPage';\nimport WithLoader from '../WithLoader/WithLoader';\n\nconst CVEDetailsPageSidebar = ({ cveAttributes, canEditStatusOrBusinessRisk, showStatusModal, showBusinessRiskModal }) => {\n    const intl = useIntl();\n    const cveDetails = getImpactDetails(cveAttributes.impact || 'Unknown');\n\n    const {\n        business_risk: businessRisk,\n        business_risk_justification: businessRiskJustification,\n        status,\n        status_justification: statusJustification,\n        systems_status_detail: systemsStatusDetail,\n        systems_status_divergent: systemsStatusDivergent\n    } = cveAttributes;\n\n    const detailRows =\n        systemsStatusDetail &&\n        Object.keys(systemsStatusDetail).map(item => [\n            STATUS_OPTIONS.find(status => status.value === item.toString()).label,\n            systemsStatusDetail[item].toString()\n        ]);\n\n    const BusinessRiskPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n            </StackItem>\n            <StackItem>{businessRiskJustification || '--'}</StackItem>\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={showBusinessRiskModal}\n                >\n                    {intl.formatMessage(messages.editBusinessRisk)}\n                </Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    const StatusPopoverContent = (\n        <Stack className=\"pf-u-p-xs\">\n            <StackItem>\n                <Label className=\"pf-u-mb-xs\">\n                    {intl.formatMessage(messages.cveStatus)}\n                </Label>\n                {status || '--'}\n                <Label className=\"pf-u-mb-xs pf-u-mt-sm\">\n                    {intl.formatMessage(messages.justificationNote)}\n                </Label>\n                {statusJustification || '--'}\n            </StackItem>\n            {systemsStatusDivergent > 0 && (\n                <StackItem>\n                    <TextContent>\n                        <hr className=\"pf-u-mt-sm pf-u-mb-sm\" />\n                    </TextContent>\n                    <Label isLarge>\n                        {intl.formatMessage(messages.cveDetailsPageSystemsWTCves)}\n                    </Label>\n                    <Table\n                        aria-label=\"Status details\"\n                        gridBreakPoint=\"\"\n                        cells={[intl.formatMessage(messages.statusLabel), intl.formatMessage(messages.count)]}\n                        rows={detailRows}\n                        className=\"status-breakdown-table\"\n                        variant=\"compact\"\n                    >\n                        <TableHeader />\n                        <TableBody />\n                    </Table>\n                </StackItem>\n            )}\n            {canEditStatusOrBusinessRisk && <StackItem className=\"pf-u-mt-sm\">\n                <Button variant=\"secondary\" onClick={showStatusModal}>{intl.formatMessage(messages.editStatus)}</Button>\n            </StackItem>}\n        </Stack>\n    );\n\n    return (\n        <CVEPageContext.Consumer>\n            {context => (\n                <Stack hasGutter>\n                    <StackItem>\n                        <Split hasGutter>\n                            <SplitItem>\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.businessRiskLabel)}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            {businessRisk}\n                                        </WithLoader>}\n                                    content={BusinessRiskPopoverContent}\n                                />\n                            </SplitItem>\n                            <SplitItem className=\"pf-u-ml-lg\">\n                                <SnippetWithHeaderAndPopover\n                                    title={intl.formatMessage(messages.statusLabel)}\n                                    content={StatusPopoverContent}\n                                    value={\n                                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                                            <span>\n                                                {systemsStatusDivergent > 0 && (\n                                                    <ExclamationTriangleIcon color=\"var(--pf-global--primary-color--100)\" />\n                                                )}{' '}\n                                                {status}\n                                            </span>\n                                        </WithLoader>\n                                    }\n                                />\n                            </SplitItem>\n                        </Split>\n                    </StackItem>\n\n                    <StackItem>\n                        <Label className=\"pf-u-mb-xs\" isLarge>\n                            {intl.formatMessage(messages.impact)}\n                        </Label>\n                        <WithLoader isLoading={context.isLoading} style={{ width: '100px' }}>\n                            <span id=\"severity-shield\" style={{ color: cveDetails.color }}>\n                                <Shield impact={cveDetails.title} hasLabel />\n                            </span>\n                        </WithLoader>\n                    </StackItem>\n\n                    <StackItem>\n                        <CvssVector\n                            cvss2_metrics={cveAttributes.cvss2_metrics}\n                            cvss3_metrics={cveAttributes.cvss3_metrics}\n                            score={parseCvssScore(cveAttributes.cvss2_score, cveAttributes.cvss3_score)}\n                        />\n                    </StackItem>\n                </Stack>\n            )}\n        </CVEPageContext.Consumer>\n    );\n};\n\nCVEDetailsPageSidebar.propTypes = {\n    cveAttributes: propTypes.any,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSidebar;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { AngleDoubleDownIcon } from '@patternfly/react-icons';\nimport { AngleDoubleUpIcon } from '@patternfly/react-icons';\nimport { CriticalRiskIcon } from '@patternfly/react-icons';\nimport { EqualsIcon } from '@patternfly/react-icons';\nimport { Label } from '@patternfly/react-core';\nvar VALUE_TO_STATE = {\n    1: { icon: _jsx(AngleDoubleDownIcon, {}), text: 'Low', color: 'blue' },\n    2: { icon: _jsx(EqualsIcon, {}), text: 'Moderate', color: 'gold' },\n    3: { icon: _jsx(AngleDoubleUpIcon, {}), text: 'Important', color: 'orange' },\n    4: { icon: _jsx(CriticalRiskIcon, {}), text: 'Critical', color: 'red' },\n};\nvar InsightsLabel = function (_a) {\n    var _b = _a.value, value = _b === void 0 ? 1 : _b, text = _a.text, hideIcon = _a.hideIcon, rest = _a.rest, props = __rest(_a, [\"value\", \"text\", \"hideIcon\", \"rest\"]);\n    return (_jsx(Label, __assign({}, rest, props, { color: VALUE_TO_STATE[value].color, icon: !hideIcon && VALUE_TO_STATE[value].icon }, { children: text || VALUE_TO_STATE[value].text })));\n};\nexport default InsightsLabel;\n//# sourceMappingURL=InsightsLabel.js.map","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Stack,\n    StackItem,\n    Text,\n    TextContent,\n    TextVariants,\n    Tooltip,\n    SplitItem,\n    Split,\n    Grid,\n    GridItem,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components/InsightsLabel';\nimport {\n    CheckCircleIcon,\n    OutlinedQuestionCircleIcon,\n    ExternalLinkAltIcon,\n    PowerOffIcon\n} from '@patternfly/react-icons';\nimport { injectIntl } from 'react-intl';\nimport Label from '../Snippets/Label';\nimport messages from '../../../Messages';\nimport {\n    RISK_OF_CHANGE_TOOLTIP,\n    RISK_OF_CHANGE_LABEL,\n    RH_KB_URL,\n    CVES_PATH,\n    impactTextList\n} from '../../../Helpers/constants';\nimport CSAwLabel from '../Snippets/CSAwLabel';\nimport CSAwRuleSummary from './CSAwRuleSummary';\nimport './CSAwRuleBox.scss';\n\nconst CSAwRuleBox = ({ rules, synopsis, changeExposedSystemsParameters, intl }) => {\n    const dispatch = useDispatch();\n\n    const sortedRules = [].concat(rules).sort((a, b) => (b.systems_affected - a.systems_affected));\n\n    const handleExposedSystemFilter = (ruleId) => {\n        dispatch(changeExposedSystemsParameters({ rule: ruleId }));\n    };\n\n    return (\n        sortedRules && sortedRules.map((rule, index) => (\n            rule.summary && (\n                <Card className=\"card-box\" key={rule.rule_id} ouiaId={'security-rule-card-' + index}>\n                    <ExpandableSection toggleText={\n                        <Split>\n                            <SplitItem className=\"pf-u-mr-xl\">\n                                <TextContent>\n                                    <Text component={TextVariants.h4}>\n                                        <CSAwLabel className=\"pf-u-mr-sm\" />\n                                        {rule.description}\n                                    </Text>\n                                </TextContent>\n                            </SplitItem>\n                            <SplitItem id=\"filter-affected-systems-split\">\n                                {rule.rule_id &&\n                                    <TextContent>\n                                        <Text\n                                            id=\"filter-affected-systems\"\n                                            onClick={event => {\n                                                handleExposedSystemFilter(rule.rule_id);\n                                                event.stopPropagation();\n                                            }}\n                                            component={TextVariants.small}\n                                        >\n                                            <Link\n                                                key={rule.rule_id}\n                                                to={`/cves/${synopsis}/?rule=${rule.rule_id}`}\n                                            >\n                                                {\n                                                    intl.formatMessage(\n                                                        messages.filterByAffectedSystems,\n                                                        {\n                                                            count: rule.systems_affected ?? -1\n                                                        }\n                                                    )\n                                                }\n                                            </Link>\n                                        </Text>\n                                    </TextContent>}\n                            </SplitItem>\n                        </Split>\n                    }>\n                        <CardBody className=\"rule-card-body\">\n                            <Grid hasGutter>\n                                <GridItem md={9} sm={12}>\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <CSAwRuleSummary text={rule.summary} />\n                                        </StackItem>\n                                        <StackItem>\n                                            <TextContent>\n                                                <Split>\n                                                    {rule.rule_impact && (\n                                                        <SplitItem>\n                                                            <Label className=\"label pf-u-mb-xs\">\n                                                                {intl.formatMessage(messages.impact)}\n                                                            </Label>\n                                                            <Tooltip\n                                                                content={Object.values(impactTextList)[rule.rule_impact - 1]}\n                                                            >\n                                                                <InsightsLabel\n                                                                    value={rule.rule_impact}\n                                                                    className=\"severity-label\"\n                                                                />\n                                                            </Tooltip>\n                                                        </SplitItem>\n                                                    )}\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.riskOfChange)}\n                                                        </Label>\n                                                        <Tooltip\n                                                            content={RISK_OF_CHANGE_TOOLTIP[rule.change_risk]}\n                                                        >\n                                                            {RISK_OF_CHANGE_LABEL[rule.change_risk]}\n                                                        </Tooltip>\n                                                    </SplitItem>\n                                                    <SplitItem>\n                                                        <Label className=\"label pf-u-mb-xs\">\n                                                            {intl.formatMessage(messages.remediationLabel)}\n                                                        </Label>\n                                                        <Split>\n                                                            <SplitItem>\n                                                                {!rule.playbook_count\n                                                                    ? intl.formatMessage(messages.no)\n                                                                    : (\n                                                                        <Fragment>\n                                                                            <CheckCircleIcon\n                                                                                className=\"checkCircleIcon pf-u-mr-xs\"\n                                                                            />\n                                                                            {intl.formatMessage(messages.yes)}\n                                                                            <Tooltip\n                                                                                content={intl.formatMessage(\n                                                                                    messages.ansibleRemediationTooltip\n                                                                                )}\n                                                                            >\n                                                                                <OutlinedQuestionCircleIcon\n                                                                                    className=\"l-sm-spacer\n                                                                                        outlinedQuestionCircleIcon\"\n                                                                                />\n                                                                            </Tooltip>\n                                                                        </Fragment>\n                                                                    )\n                                                                }\n                                                            </SplitItem>\n                                                            <SplitItem className=\"pf-u-ml-md\">\n                                                                {rule.reboot_required &&\n                                                                    <Text>\n                                                                        <PowerOffIcon\n                                                                            className=\"pf-u-mr-xs powerOffIcon\"\n                                                                        />\n                                                                        {intl.formatMessage(messages.rebootRequired)}\n                                                                    </Text>\n                                                                }\n                                                            </SplitItem>\n                                                        </Split>\n                                                    </SplitItem>\n\n                                                </Split>\n                                            </TextContent>\n                                        </StackItem>\n\n                                        {\n                                            rule.kbase_node_id &&\n                                            <StackItem>\n                                                <TextContent>\n                                                    <Text\n                                                        className=\"pf-u-mt-xs\"\n                                                        component={TextVariants.p}\n                                                    >\n                                                        <a\n                                                            className=\"kb-link\"\n                                                            href={`${RH_KB_URL}/${rule.kbase_node_id}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            {\n                                                                intl.formatMessage(messages.knowledgebaseArticle)\n                                                            }\n                                                            <ExternalLinkAltIcon className=\"l-sm-spacer\" />\n                                                        </a>\n                                                    </Text>\n                                                </TextContent>\n                                            </StackItem>\n                                        }\n\n                                    </Stack>\n                                </GridItem>\n                                <GridItem md={3} sm={12}>\n                                    <TextContent>\n                                        <Label>\n                                            {intl.formatMessage(messages.associatedCves)}\n                                        </Label>\n                                        <Text component={TextVariants.p} className=\"pf-u-mt-xs associated-cves\">\n                                            {synopsis} ({intl.formatMessage(messages.current)})\n                                            {\n                                                rule.associated_cves\n                                                    .filter(cve => cve !== synopsis)\n                                                    .map((cve, _i) =>\n                                                        <a\n                                                            className=\"associated-cve-link\"\n                                                            key={_i}\n                                                            href={`${CVES_PATH}/${cve}`}\n                                                        >\n                                                            {cve}\n                                                        </a>\n                                                    )\n                                                    .reduce((prev, curr) => [prev, ', ', curr], [''])\n                                            }\n                                        </Text>\n                                    </TextContent>\n                                </GridItem>\n                            </Grid>\n                        </CardBody>\n                    </ExpandableSection>\n                </Card>\n            )\n        ))\n    );\n};\n\nCSAwRuleBox.defaultProps = {\n    rules: []\n};\n\nCSAwRuleBox.propTypes = {\n    intl: PropTypes.any,\n    rules: PropTypes.array,\n    synopsis: PropTypes.string,\n    changeExposedSystemsParameters: PropTypes.func\n};\n\nexport default injectIntl(CSAwRuleBox);\n","import React from 'react';\nimport { Card, CardBody, Text, TextVariants, TextContent, ExpandableSection } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport KnownExploitLabel from '../Snippets/KnownExploitLabel';\n\nexport const KnownExploitSummary = () => {\n    const intl = useIntl();\n    return (\n        <Card className=\"card-box\" ouiaId=\"known-exploit-card\">\n            <ExpandableSection toggleText={\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <KnownExploitLabel className=\"pf-u-mr-sm\"/>\n                        {intl.formatMessage(messages.knownExploitHeader)}\n                    </Text>\n                </TextContent>\n            }>\n                <CardBody>\n                    {intl.formatMessage(messages.knownExploitDescription)}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nexport default KnownExploitSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Text,\n    TextContent,\n    TextVariants,\n    SplitItem,\n    Split,\n    Card,\n    CardBody,\n    ExpandableSection\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './CSAwRuleBox.scss';\nimport NotVulnerableLabel from '../Snippets/NotVulnerableLabel';\nimport { changeExposedSystemsParameters } from '../../../Store/Actions/Actions';\nimport { ONLY_NON_VULNERABLE_SYSTEMS } from '../../../Helpers/constants';\n\nconst NotVulnerableBox = ({ synopsis, notVulnerableSystemCount }) => {\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    const handleExposedSystemFilter = () => {\n        dispatch(changeExposedSystemsParameters({ rule: ONLY_NON_VULNERABLE_SYSTEMS }));\n    };\n\n    return (\n        notVulnerableSystemCount > 0 &&\n        <Card className=\"card-box\" ouiaId=\"not-vulnerable-box\">\n            <ExpandableSection toggleText={\n                <Split>\n                    <SplitItem className=\"pf-u-mr-xl\">\n                        <TextContent>\n                            <Text component={TextVariants.h4}>\n                                <NotVulnerableLabel className=\"pf-u-mr-sm\" />\n                                {intl.formatMessage(messages.notVulnerableBoxTitle)}\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                    <SplitItem id=\"filter-affected-systems-split\">\n                        <TextContent>\n                            <Text\n                                id=\"filter-affected-systems\"\n                                onClick={event => {\n                                    handleExposedSystemFilter();\n                                    event.stopPropagation();\n                                }}\n                                component={TextVariants.small}\n                            >\n                                <Link\n                                    to={`/cves/${synopsis}`}\n                                >\n                                    {\n                                        intl.formatMessage(\n                                            messages.filterByAffectedSystems,\n                                            {\n                                                count: notVulnerableSystemCount\n                                            }\n                                        )\n                                    }\n                                </Link>\n                            </Text>\n                        </TextContent>\n                    </SplitItem>\n                </Split>\n            }>\n                <CardBody className=\"rule-card-body\">\n                    {intl.formatMessage(messages.notVulnerableDescription, { multiple: true })}\n                </CardBody>\n            </ExpandableSection>\n        </Card>\n    );\n};\n\nNotVulnerableBox.propTypes = {\n    synopsis: PropTypes.string,\n    notVulnerableSystemCount: PropTypes.number\n};\n\nexport default NotVulnerableBox;\n","import { Grid, GridItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport CVEDetailsPageDescription from '../CVEDetailsPageDescription/CVEDetailsPageDescription';\nimport CVEDetailsPageSidebar from '../CVEDetailsPageSidebar/CVEDetailsPageSidebar';\nimport CSAwRuleBox from '../CSAwRuleBox/CSAwRuleBox';\nimport { KnownExploitSummary } from '../KnownExploitSummary/KnownExploitSummary';\nimport NotVulnerableBox from '../CSAwRuleBox/NotVulnerableBox';\n\nconst CVEDetailsPageSummary = ({\n    data,\n    changeExposedSystemsParameters,\n    canEditStatusOrBusinessRisk,\n    showStatusModal,\n    showBusinessRiskModal\n}) => {\n    return (\n        <Grid hasGutter>\n            <GridItem md={8} sm={12}>\n                <CVEDetailsPageDescription cveAttributes={data.data} />\n            </GridItem>\n\n            <GridItem md={4} sm={12} className=\"pf-u-mt-sm pf-u-ml-sm\">\n                <CVEDetailsPageSidebar\n                    cveAttributes={data.data}\n                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                    showStatusModal={showStatusModal}\n                    showBusinessRiskModal={showBusinessRiskModal}\n                />\n            </GridItem>\n            {\n                data.data.known_exploit && <KnownExploitSummary/>\n            }\n\n            <CSAwRuleBox\n                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                synopsis={data.data.synopsis}\n                rules={data.data.rules}\n            />\n            <NotVulnerableBox\n                synopsis={data.data.synopsis}\n                notVulnerableSystemCount={data.data.affected_but_not_vulnerable}\n            />\n        </Grid>\n    );\n};\n\nCVEDetailsPageSummary.propTypes = {\n    data: propTypes.object,\n    changeExposedSystemsParameters: propTypes.func,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    showStatusModal: propTypes.func,\n    showBusinessRiskModal: propTypes.func\n};\n\nexport default CVEDetailsPageSummary;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport Remediation from '../Remediation/Remediation';\nimport messages from '../../../Messages';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { useBulkSelect } from '../../../Helpers/Hooks';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport {\n    fetchAffectedSystemIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    ANSIBLE_REMEDIATION, RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\n\nexport const SystemsExposedTableToolbar = ({\n    rawData,\n    cveName,\n    cveStatusDetails,\n    selectedRows,\n    selectedRowsCount,\n    filterRuleValues,\n    expandAll,\n    hasSecurityRule,\n    isAllExpanded,\n    parameters,\n    methods,\n    canEditPairStatus,\n    canExport,\n    children\n}) => {\n    const intl = useIntl();\n    const { apply, showStatusModal, handleSelect, downloadReport, setColumnManagementModalOpen } = methods;\n    const { isLoaded, meta } = rawData;\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = ['',\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnManagementModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryFilter = useSearchFilter(\n        'advisory',\n        messages.advisory,\n        messages.searchFilterByAdvisory,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    return <Fragment>\n        <PrimaryToolbar\n            className=\"vuln-systems-primary-toolbar\"\n            exportConfig={canExport && {\n                isDisabled: meta.totalItems === 0,\n                ouiaId: 'export',\n                ...exportConfig({ downloadReport })\n            }}\n            dedicatedAction={(isLoaded &&\n                <Remediation\n                    manyRules\n                    isDisabled={selectedRows.length === 0}\n                    systems={remediableSystems}\n                    cves={{ id: cveName, rules: filterRuleValues }}\n                />\n            )}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { ouiaId: 'toolbar-actions' }\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                onDelete: (_, chips) => removeFilters(chips, apply),\n                deleteTitle: intl.formatMessage(messages.resetFilters)\n            }}\n            bulkSelect={bulkSelectProps}\n            filterConfig={{\n                items: [\n                    searchFilter,\n                    securityRuleFilter(\n                        apply,\n                        parameters,\n                        filterRuleValues,\n                        {\n                            isDynamic: true,\n                            dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')\n                        }\n                    ),\n                    statusFilter(apply, parameters),\n                    advisoryFilter,\n                    ...osVersionFilter,\n                    remediationFilter(apply, parameters)\n                ]\n            }}\n            expandAll={hasSecurityRule ? {\n                isAllExpanded,\n                onClick: () => expandAll(rawData, isAllExpanded),\n                isDisabled: meta.totalItems === 0\n            } : undefined}\n        />\n        {children}\n    </Fragment>;\n};\n\nSystemsExposedTableToolbar.propTypes = {\n    rawData: dataShape,\n    parameters: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.object,\n    expandAll: propTypes.func,\n    hasSecurityRule: propTypes.bool,\n    isAllExpanded: propTypes.bool,\n    selectedRows: propTypes.array,\n    selectedRowsCount: propTypes.number,\n    children: propTypes.node,\n    methods: propTypes.shape({\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        showStatusModal: propTypes.func,\n        downloadReport: propTypes.func,\n        setColumnManagementModalOpen: propTypes.func\n    }),\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool\n};\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Text, TextContent, TextVariants, Stack, StackItem } from '@patternfly/react-core';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail\n} from '../../../Store/Actions/Actions';\nimport { SYSTEMS_EXPOSED_HEADER, SYSTEMS_EXPOSED_ALLOWED_PARAMS, PERMISSIONS } from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { SystemsExposedTableToolbar } from './SystemsExposedTableToolbar';\nimport { useColumnManagement, useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[\n        canReadHostsInventory],\n    isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveDetail(newColumns)));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters, ...meta }), [setUrlParams, parameters, meta]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return columns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    // TODO: let InventoryTable render its own toolbar instead of using custom one\n    return (\n        <Stack hasGutter>\n            <StackItem>\n                <TextContent>\n                    <Text component={TextVariants.h2}>\n                        {intl.formatMessage(messages.affectsSystems)}\n                    </Text>\n                </TextContent>\n            </StackItem>\n            <StackItem>\n                {isLoadingInventory ? <Spinner centered/> :\n                    error?.hasError && !canReadHostsInventory\n                        ? <ErrorHandler code={error?.errorCode}/>\n                        : <InventoryTable\n                            disableDefaultColumns\n                            onLoad={({ mergeWithEntities }) => {\n                                ReducerRegistry.register({\n                                    ...mergeWithEntities(\n                                        inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                        {\n                                            page: Number(parameters.page || 1),\n                                            perPage: 20,\n                                            ...(parameters.sort && {\n                                                sortBy: {\n                                                    key: parameters.sort.replace(/^-/, ''),\n                                                    direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                                }\n                                            })\n                                        }\n                                    )\n                                });\n                            }}\n                            tableProps={{\n                                isStickyHeader: true,\n                                canSelectAll: false,\n                                actionResolver: () => canEditPairStatus && totalItems &&\n                                    systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                                variant: TableVariant.compact\n                            }}\n                            paginationProps={{\n                                isDisabled: !totalItems\n                            }}\n                            showTagModal\n                            isFullView\n                            ref={inventoryRef}\n                            autoRefresh\n                            key=\"inventory\"\n                            customFilters={{\n                                vulnerabilityParams: {\n                                    ...parameters\n                                }\n                            }}\n                            expandable={hasSecurityRule}\n                            columnsCounter={columnCounter}\n                            columns={defaultColumns => mergeColumns(defaultColumns)}\n                            getEntities={getEntities}\n                            hasCheckbox={totalItems !== 0}\n                            showActions={totalItems !== 0}\n                            onExpandClick={(_e, _i, isOpen, { id }) => dispatch(expandRow(id, isOpen))}\n                            hideFilters={{ all: true }}\n                            noSystemsTable={<EmptyStateNoSystems/>}\n                        >\n                            <SystemsExposedTableToolbar\n                                rawData={{ data: items, meta: { totalItems }, isLoaded }}\n                                parameters={parameters}\n                                cveName={cveName}\n                                expandAll={expandAll}\n                                hasSecurityRule={hasSecurityRule}\n                                isAllExpanded={isAllExpanded}\n                                selectedRows={selectedRows}\n                                selectedRowsCount={selectedRowsCount}\n                                cveStatusDetails={cveStatusDetails}\n                                filterRuleValues={filterRuleValues}\n                                methods={{\n                                    downloadReport,\n                                    apply,\n                                    handleSelect,\n                                    showStatusModal,\n                                    setColumnManagementModalOpen\n                                }}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                            >\n                                {StatusModal && <StatusModal/>}\n\n                                { ColumnManagementModal }\n                            </SystemsExposedTableToolbar>\n                        </InventoryTable>}\n            </StackItem>\n        </Stack>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n","import { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport React, { useMemo, useState, useEffect, Fragment } from 'react';\nimport { createCveDetailsPage } from '../../../Helpers/CVEHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    fetchCveDetails,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    clearCveStore\n} from '../../../Store/Actions/Actions';\nimport { PATHS, PERMISSIONS } from '../../../Helpers/constants';\nimport CVEDetailsPageSummary from '../../PresentationalComponents/CVEDetailsPageSummary/CVEDetailsPageSummary';\nimport { kebabItemEditBusinessRisk, kebabItemEditStatus } from '../../PresentationalComponents/Kebab/KebabItems';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CveStatusModal from '../Modals/CveStatusModal';\nimport SystemsExposedTable from '../SystemsExposedTable/SystemsExposedTable';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport GroupedCVELabels from '../../PresentationalComponents/Snippets/GroupedCVELabels';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRouteMatch } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CVEPageContext = React.createContext({ isLoading: true });\n\nconst CVEDetailsPage = () => {\n    const dispatch = useDispatch();\n    const inventoryRef = React.createRef();\n    const match = useRouteMatch();\n    const intl = useIntl();\n\n    const [[canEditPairStatus, canEditStatusOrBusinessRisk, canExport, canReadVulnerabilityResults], isRbacLoading] = useRbac([\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    const [cveName] = useState(match.params.cve);\n    const [BusinessModal, setBusinessRisk] = useState(() => () => null);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n\n    const details = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.cveDetails\n    );\n    const cveDetails = useMemo(() => createCveDetailsPage(details), [details]);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n\n    useEffect(() => {\n        dispatch(fetchCveDetails(cveName));\n    }, [dispatch, cveName]);\n\n    const refreshInventory = () => (\n        dispatch(clearInventoryStore()),\n        inventoryRef.current.onRefreshData(({ page: 1 }))\n    );\n\n    const showBusinessRiskModal = cves => {\n        setBusinessRisk(\n            () => () =>\n                <BusinessRiskModal open cves={cves} updateRef={() => dispatch(fetchCveDetails(cveName))} />\n        );\n    };\n\n    const showStatusModal = cves => {\n        setStatusModal(\n            () => () =>\n                <CveStatusModal\n                    cves={cves}\n                    updateRef={overwriteSystemsStatus => {\n                        dispatch(fetchCveDetails(cveName));\n                        overwriteSystemsStatus && refreshInventory();\n                    }}\n                    canEditPairStatus={canEditPairStatus}\n                />\n        );\n    };\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCveStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const { error, data } = cveDetails;\n\n    const cveStatusDetails = {\n        id: cveName,\n        status_id: cveDetails.data.status_id,\n        justification: cveDetails.data.status_justification,\n        exposed_systems_count: totalItems || 0\n    };\n\n    const cveBusinessRiskDetails = {\n        business_risk_id: cveDetails.data.business_risk_id,\n        id: cveName,\n        justification: cveDetails.data.business_risk_justification\n    };\n\n    const kebabItems = [\n        kebabItemEditBusinessRisk(showBusinessRiskModal, [cveBusinessRiskDetails]),\n        kebabItemEditStatus(showStatusModal, [cveStatusDetails])\n    ];\n    const { rules } = data;\n    const filterRuleValues = rules && rules.map(\n        ({ rule_id: ruleId, description }) => ({ value: ruleId, label: description })\n    );\n\n    const createBreadcrumbs = lastSegment =>\n        [\n            {\n                title: PATHS.cvesPage.title,\n                to: PATHS.cvesPage.to,\n                loaded: true\n            },\n            {\n                title: lastSegment,\n                isActive: true,\n                loaded: true\n            }\n        ];\n\n    return (\n        <CVEPageContext.Provider value={cveDetails && { isLoading: cveDetails.isLoading || isRbacLoading }}>\n            {canReadVulnerabilityResults ? (\n                error?.hasError ? (\n                    <React.Fragment>\n                        <Header title={cveName} breadcrumbs={createBreadcrumbs(intl.formatMessage(messages.unknownCveId))}/>\n                        <ErrorHandler code={error?.errorCode} />\n                    </React.Fragment>\n                ) : (\n                    <Fragment>\n                        <Header\n                            title={data.celebrity_name ? cveName + ' - ' + data.celebrity_name : cveName}\n                            actions={canEditStatusOrBusinessRisk && kebabItems}\n                            actionsOuiaId=\"cve-actions\"\n                            breadcrumbs={createBreadcrumbs(cveName)}\n                            labels={[\n                                <GroupedCVELabels\n                                    key=\"labels\"\n                                    hasExploit={!!details.payload.data?.attributes.known_exploit}\n                                    hasRule={details.payload.data?.attributes.rules.length > 0}\n                                />\n                            ]}\n                        >\n                            <CVEDetailsPageSummary\n                                changeExposedSystemsParameters={changeExposedSystemsParameters}\n                                canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                data={cveDetails}\n                                showStatusModal={() => showStatusModal([cveStatusDetails])}\n                                showBusinessRiskModal={() => showBusinessRiskModal([cveBusinessRiskDetails])}\n                            />\n                            <StatusModal />\n                            <BusinessModal />\n                        </Header>\n                        <Main>\n                            <SystemsExposedTable\n                                cveName={cveName}\n                                filterRuleValues={filterRuleValues}\n                                cveStatusDetails={cveStatusDetails}\n                                hasSecurityRule={rules?.length > 0}\n                                canEditPairStatus={canEditPairStatus}\n                                canExport={canExport}\n                                inventoryRef={inventoryRef}\n                                refreshInventory={refreshInventory}\n                            />\n                        </Main>\n                    </Fragment>\n                )) : (\n                <React.Fragment>\n                    <Header title={cveName} breadcrumbs={createBreadcrumbs(cveName)} />\n                    <NotAuthorized />\n                </React.Fragment>\n            )}\n        </CVEPageContext.Provider>\n    );\n};\n\nexport default CVEDetailsPage;\n","import { selectRows } from './reducersHelper';\nimport * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    loaded: false,\n    tagsLoaded: false,\n    allTagsLoaded: false,\n    invConfig: {},\n    sortBy: {\n        key: 'updated',\n        direction: 'desc'\n    },\n    page: 1,\n    perPage: 20,\n    selectedRows: [],\n    selectedRowsCount: 0\n};\n\nfunction modifyInventory(columns, state, action) {\n    let advisory = columns.find(({ key }) => key === 'advisory');\n\n    if (!state.selectedRows) {\n        state.selectedRows = [];\n    }\n\n    if (!state.sortBy) {\n        state.sortBy = {\n            key: 'updated',\n            direction: 'desc'\n        };\n    }\n\n    if (state.loaded) {\n        let hasPatchAccess = state.rows.some(({ patchAccess }) => patchAccess);\n\n        if (!hasPatchAccess && advisory) {\n            advisory.isShown = false;\n        }\n\n        return {\n            ...state,\n            columns,\n            rows: state.rows.map(row => ({\n                ...row,\n                selected: state.selectedRows.some(selectedRow => selectedRow.id === row.id) || false\n            })),\n            meta: action.payload.meta\n        };\n    }\n\n    return state;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.LOAD_ENTITIES + '_FULFILLED':\n            return modifyInventory(columns, newState, action);\n        case ActionTypes.SELECT_ENTITY:\n            return selectRows(newState, action, action.selecting);\n        case ActionTypes.EXPAND_ROW:\n            return {\n                ...newState,\n                rows: newState.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case ActionTypes.CLEAR_INVENTORY_STORE:\n            return initialState;\n        default:\n            return newState;\n    }\n};\n"],"names":["ExpandableSectionVariant","setLineClamp","lines","element","style","setProperty","toString","ExpandableSection","constructor","props","super","this","expandableContentRef","state","isExpanded","calculateToggleText","toggleText","toggleTextExpanded","toggleTextCollapsed","propOrStateIsExpanded","componentDidMount","variant","truncate","truncateMaxLines","expandableContent","current","componentDidUpdate","prevProps","render","_a","onToggle","onToggleProp","isActive","className","toggleContent","children","isDetached","displaySize","isWidthLimited","isIndented","contentId","__rest","undefined","isOpen","setState","computedToggleText","expandableToggle","css","type","onClick","Object","assign","default","ref","hidden","id","displayName","defaultProps","Flex","component","spacer","spaceItems","grow","shrink","flex","direction","alignItems","alignContent","alignSelf","align","justifyContent","display","fullWidth","flexWrap","order","Component","FlexItem","PowerOffIconConfig","name","height","width","svgPath","yOffset","xOffset","PowerOffIcon","s","e","t","p","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","useEffect","console","error","concat","__assign","n","arguments","apply","BaseInvTable","history","store","Cmp","Suspense","fallback","ScalprumComponent","appName","module","scope","ErrorComponent","innerRef","propTypes","InvTable","Bullseye","Spinner","size","appliedVersions","operatingSystems","useSelector","entities","useLoadModule","toGroupSelectionValue","buildOSFilterConfig","label","intl","messages","value","split","onChange","event","versions","values","flatMap","keys","rhel_version","page","placeholder","CVEDetailsPageDescription","cveAttributes","publishDate","public_date","description","link","rh_link","hasDescription","CVEPageContext","Consumer","context","Stack","hasGutter","StackItem","formatMessage","WithLoader","isLoading","LoaderType","TextContent","textAlign","Text","TextVariants","injectIntl","V3names","AV","N","A","L","P","AC","H","PR","UI","R","S","U","C","I","CVSS","V2names","Au","M","CvssVector","vector","namesMapping","res","CVSS2Vector","cvss2_metrics","CVSS3Vector","cvss3_metrics","score","cvssVer","cvssVector","parsedVector","forEach","curr","key","val","cvssVersion","Popover","position","maxWidth","enableFlip","headerContent","bodyContent","colSize","rowSize","Table","TableVariant","gridBreakPoint","cells","rows","entries","Label","isLarge","color","substring","SnippetWithHeaderAndPopover","title","content","appendTo","document","querySelector","CVEDetailsPageSidebar","canEditStatusOrBusinessRisk","showStatusModal","showBusinessRiskModal","useIntl","cveDetails","getImpactDetails","impact","businessRisk","business_risk","businessRiskJustification","business_risk_justification","status","statusJustification","status_justification","systemsStatusDetail","systems_status_detail","systemsStatusDivergent","systems_status_divergent","detailRows","map","item","STATUS_OPTIONS","BusinessRiskPopoverContent","Button","StatusPopoverContent","Split","SplitItem","Shield","hasLabel","parseCvssScore","cvss2_score","cvss3_score","VALUE_TO_STATE","icon","AngleDoubleDownIcon","text","EqualsIcon","AngleDoubleUpIcon","CriticalRiskIcon","_b","hideIcon","rest","CSAwRuleBox","rules","synopsis","changeExposedSystemsParameters","dispatch","useDispatch","sortedRules","sort","a","b","systems_affected","rule","index","summary","Card","rule_id","ouiaId","CSAwLabel","ruleId","stopPropagation","to","count","CardBody","Grid","GridItem","md","sm","CSAwRuleSummary","rule_impact","Tooltip","impactTextList","RISK_OF_CHANGE_TOOLTIP","change_risk","RISK_OF_CHANGE_LABEL","playbook_count","Fragment","reboot_required","kbase_node_id","href","RH_KB_URL","target","rel","associated_cves","filter","cve","_i","CVES_PATH","reduce","prev","PropTypes","KnownExploitSummary","KnownExploitLabel","NotVulnerableBox","notVulnerableSystemCount","NotVulnerableLabel","ONLY_NON_VULNERABLE_SYSTEMS","multiple","CVEDetailsPageSummary","data","known_exploit","affected_but_not_vulnerable","SystemsExposedTableToolbar","rawData","cveName","cveStatusDetails","selectedRows","selectedRowsCount","filterRuleValues","expandAll","hasSecurityRule","isAllExpanded","parameters","methods","canEditPairStatus","canExport","handleSelect","downloadReport","setColumnManagementModalOpen","isLoaded","meta","remediableSystems","system","remediation","ANSIBLE_REMEDIATION","kebabOptions","isDisabled","searchFilter","useSearchFilter","advisoryFilter","advisory","osVersionFilter","useOsVersionFilter","bulkSelectProps","useBulkSelect","fetchResource","ops","fetchAffectedSystemIdsByCve","row","PrimaryToolbar","exportConfig","totalItems","dedicatedAction","Remediation","manyRules","systems","cves","actionsConfig","actions","dropdownProps","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","bulkSelect","filterConfig","items","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","statusFilter","remediationFilter","dataShape","SystemsExposedTable","inventoryRef","refreshInventory","useRbac","PERMISSIONS","canReadHostsInventory","isLoadingInventory","useState","setIsAllExpanded","StatusModal","setStatusModal","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","urlParameters","setUrlParams","shallowEqual","total","loaded","CVEDetailsPageStore","columns","params","useColumnManagement","newColumns","changeColumnsCveDetail","ColumnManagementModal","clearInventoryStore","inventories","CvePairStatusModal","cveList","updateRef","fetchCveDetails","inventoryList","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","columnCounter","setColumnCount","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","mergeWithEntities","ReducerRegistry","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","sortBy","replace","match","tableProps","isStickyHeader","canSelectAll","actionResolver","systemExposedTableRowActions","paginationProps","showTagModal","isFullView","autoRefresh","customFilters","vulnerabilityParams","expandable","columnsCounter","defaultColumns","inventoryColumns","column","isShown","isShownByDefault","find","hasCheckbox","showActions","onExpandClick","_e","expandRow","hideFilters","all","noSystemsTable","format","DownloadReport","fetchAffectedSystemsByCVE","notification","addNotification","clearNotifications","payload","selecting","selectRows","React","useRouteMatch","canReadVulnerabilityResults","isRbacLoading","BusinessModal","setBusinessRisk","details","useMemo","createCveDetailsPage","onRefreshData","BusinessRiskModal","open","CveStatusModal","overwriteSystemsStatus","clearCveStore","status_id","justification","exposed_systems_count","cveBusinessRiskDetails","business_risk_id","kebabItems","kebabItemEditBusinessRisk","kebabItemEditStatus","createBreadcrumbs","lastSegment","PATHS","Provider","breadcrumbs","celebrity_name","actionsOuiaId","labels","GroupedCVELabels","hasExploit","attributes","hasRule","Main","initialState","tagsLoaded","allTagsLoaded","invConfig","modifyInventory","action","some","patchAccess","selected","selectedRow","newState","ActionTypes"],"sourceRoot":""}