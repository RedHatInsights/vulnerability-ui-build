{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js"],"names":["urlParam","label","placeholder","search","apply","React","searchValue","setSearchValue","debounce","newValue","undefined","handleSearch","type","conditionalFilterType","intl","filterValues","id","onChange","event","value","handleChangePage","_event","page","handleSetPageSize","perPage","page_size","exportConfig","methods","onSelect","fileType","downloadReport","MULTI_FILTERS","buildActiveFilters","currentFilters","filterRuleValues","nameFilter","filter","advisoryFilter","advisory","buildChip","key","parameter","FILTERS","items","reduce","object","item","name","filteredRule","find","includes","e","buildChips","paramValues","values","push","getMultiValue","concat","split","flatMap","index","toLowerCase","toString","hasValue","filters","Object","keys","filterChips","array","multiValue","rule_presence","rule_key","category","title","chips","cvssFrom","cvss_from","parseFloat","toFixed","cvssTo","cvss_to","filteredValues","length","messages","removeFilters","reset","defaultFilters","emptyFilter","obj","remainingValues","some","chip","join","defaultValues","forEach","cvss_filter","isFilterInDefaultState","currentParams","defaultParams","filterParams","acc","param","isEqual","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","meta","data","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","payload","total_items","then","map","handleOnCheckboxChange","onClick","count","collectedItems","union"],"mappings":"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","file":"js/1318.3b5fbbfd0a83b4a162c9.js","sourcesContent":["import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (urlParam, label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(newValue =>  {\n            if (newValue !== undefined) {\n                apply({ [urlParam]: newValue, page: 1 });\n            }},\n        400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\nimport isEqual from 'lodash/isEqual';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) => methods.downloadReport(fileType) }\n);\n\nconst MULTI_FILTERS = ['affecting', 'excluded'];\n\nexport const buildActiveFilters = (currentFilters, filterRuleValues = []) => {\n    const { filter: nameFilter, advisory: advisoryFilter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value;\n            }\n            else if (key === 'security_rule') {\n                const filteredRule = filterRuleValues.find(({ value }) => value === parameter);\n\n                ['true', 'false'].includes(parameter)\n                    ? object.name = FILTERS.security_rule.items.find(e => e.value === parameter).label\n                    : object.name = filteredRule && filteredRule.label || parameter;\n\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const getMultiValue = (filter) => (\n        [].concat(filter?.split(',').flatMap((value, index) => value?.toLowerCase() === 'true' ? index.toString() : []))\n    );\n\n    const hasValue = (filters, key) => Object.keys(filters).includes(key) && !['', undefined].includes(filters[key]);\n\n    // FIXME please!!!\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key === 'security_rule' && (hasValue(currentFilters, 'rule_presence') || hasValue(currentFilters, 'rule_key'))) {\n            const multiValue = [].concat(\n                currentFilters.rule_presence ? currentFilters.rule_presence.split(',') : [],\n                currentFilters.rule_key ? currentFilters.rule_key.split(',') : []);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (MULTI_FILTERS.includes(key) && hasValue(currentFilters, key)) {\n            const multiValue = getMultiValue(currentFilters[key]);\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: buildChips(multiValue, key) });\n        }\n        else if (key === 'cvss_filter' && (hasValue(currentFilters, 'cvss_from') || hasValue(currentFilters, 'cvss_to'))) {\n            const cvssFrom = (currentFilters.cvss_from && parseFloat(currentFilters.cvss_from).toFixed(1)) || '0.0';\n            const cvssTo = (currentFilters.cvss_to && parseFloat(currentFilters.cvss_to).toFixed(1)) || '10.0';\n\n            if (cvssFrom !== '0.0' || cvssTo !== '10.0') {\n                array.push({ key, category: FILTERS[key].title, chips: [{ name: `${cvssFrom} - ${cvssTo}` }] });\n            }\n        }\n        else if (hasValue(currentFilters, key)) {\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                && buildChips(multiValue, key)\n                || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    nameFilter && filterChips.push(\n        {\n            key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: nameFilter }]\n        }\n    );\n\n    advisoryFilter && filterChips.push(\n        {\n            key: 'advisory',\n            category: intl.formatMessage(messages.advisory),\n            chips: [{ name: advisoryFilter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply, reset = false, defaultFilters = {}) => {\n    if (reset) {\n        removeFilters(chips, apply);\n        apply({ ...defaultFilters, page: 1 });\n        return;\n    }\n\n    const emptyFilter = chips.reduce((obj, item) => {\n        if (item.key === 'security_rule') {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            obj.rule_presence = remainingValues.filter(value => ['true', 'false'].includes(value)).join(',') || '';\n            obj.rule_key = remainingValues.filter(value => !['true', 'false'].includes(value)).join(',') || '';\n        }\n        else if (MULTI_FILTERS.includes(item.key)) {\n            const remainingValues = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value));\n            const defaultValues = [false, false];\n            remainingValues.forEach(item => { defaultValues[item] = true; });\n            const value = defaultValues.join(',');\n            obj[item.key] = value === 'false,false' ? '' : defaultValues.join(',');\n        }\n        else if (item.key === 'filter' || item.key === 'advisory' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else if (item.key === 'cvss_filter') {\n            obj.cvss_filter = undefined;\n            obj.cvss_from = undefined;\n            obj.cvss_to = undefined;\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply({ ...emptyFilter, page: 1 });\n};\n\nexport const isFilterInDefaultState = (currentParams, defaultParams, filterParams) => {\n    // filter out params which have nothing to do with filter chips, like page, sort, etc.\n    currentParams = filterParams.reduce((acc, param) => (\n        {\n            ...acc,\n            ...currentParams[param] && { [param]: currentParams[param] }\n        }\n    ), {});\n\n    return isEqual(currentParams, defaultParams);\n};\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n"],"sourceRoot":""}