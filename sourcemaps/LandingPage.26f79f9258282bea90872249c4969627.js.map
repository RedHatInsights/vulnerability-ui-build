{"version":3,"file":"js/LandingPage.7af5d0fb35a90c67ac47.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Dashbar/Dashbar.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title: <EmptyStateNoCVEs secondParagraph={messages.emptyStateThereShouldBeCVEs} />\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    canCollapseAll={false}\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","/* eslint-disable camelcase */\nimport React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport {\n    CVES_DEFAULT_FILTERS,\n    CVES_FILTER_PARAMS,\n    ONLY_NON_VULNERABLE_SYSTEMS,\n    RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\n\nconst CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, intl }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { cves, params, methods, selectedCves, isAllExpanded } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedCves.map(({\n                    id,\n                    business_risk_id,\n                    business_risk_text,\n                    attributes\n                }) => ({\n                    id,\n                    business_risk_id: attributes ? attributes.business_risk_id : business_risk_id,\n                    justification: attributes ? attributes.business_risk_text : business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves.map(({\n                    id,\n                    exposed_systems_count,\n                    status_justification,\n                    status_id,\n                    attributes\n                }) => ({\n                    id,\n                    exposed_systems_count: attributes ? attributes.systems_affected : exposed_systems_count,\n                    justification: attributes ? attributes.status_text : status_justification,\n                    status_id: attributes ? attributes.status_id : status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnManagementModalOpen(true)\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params, [],\n                            {\n                                isDynamic: false,\n                                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)\n                            }\n                        ),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll={{\n                    isAllExpanded,\n                    onClick: onExpandAllClick,\n                    isDisabled: cves.meta.total_items === 0\n                }}\n            />\n            {exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { CVES_ALLOWED_PARAMS, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useColumnManagement, useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = ({ rbac }) => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [[canEditStatusOrBusinessRisk, canEditPairStatus, canExport, canReadVulnerabilityResults], isRbacLoading] = rbac;\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveList(newColumns)));\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters, isFirstLoad]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered/> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnManagementModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal/>\n                        <CveStatusModal/>\n\n                        { ColumnManagementModal }\n\n                        <Stack>\n                            <StackItem>\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized serviceName={SERVICE_NAME} />\n        );\n    } else {\n        return <ErrorHandler code={cves.errors.status}/>;\n    }\n};\n\nCVEs.propTypes = {\n    rbac: PropTypes.array.isRequired\n};\n\nconst CVEsWithRbac = () => {\n    const rbac = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults\n    ]);\n\n    return <CVEs rbac={rbac} />;\n};\n\nexport default CVEsWithRbac;\n","import React, { useEffect, useState } from 'react';\nimport { Card, Grid, GridItem, StackItem, Stack, Alert, CardBody, Text, TextVariants, TextContent } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { impactList, CVES_DEFAULT_FILTERS } from '../../../Helpers/constants';\nimport { constructFilterParameters, sanitizeLinks } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCveListParameters } from '../../../Store/Actions/Actions';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport propTypes from 'prop-types';\nimport { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';\nimport WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { useIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\n\nconst DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {\n    return (\n        <Card isFullHeight className=\"card-box\">\n            <CardBody>\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <b>{title}</b>\n                    </Text>\n                    <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs\">\n                        <a onClick={onLinkClick}>\n                            {hasIcon && (<SecurityIcon\n                                color={impactList[impact]?.iconColor}\n                                size=\"sm\"\n                                className=\"pf-u-mr-sm\" />\n                            )}\n                            {count}\n                        </a>\n                    </Text>\n                </TextContent>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport { DashbarItem };\n\nDashbarItem.propTypes = {\n    title: propTypes.node,\n    count: propTypes.number.isRequired,\n    impact: propTypes.oneOf(Object.keys(impactList)),\n    onLinkClick: propTypes.func.isRequired,\n    hasIcon: propTypes.bool\n};\n\nconst Dashbar = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [isFirstLoad, setFirstLoad] = useState(true);\n    const [dashbar, setDashbar] = useState({});\n    const [announcement, setAnnouncement] = useState({});\n    const [isDashbarLoading, setDashbarLoading] = useState(true);\n\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    // reset filters and apply passed ones\n    const applyOnly = (filterParams = {}) => {\n        const chips = buildActiveFilters(parameters);\n        removeFilters(chips, apply, true, filterParams);\n    };\n\n    const fetchAnnouncements = async () => {\n        let data = {};\n\n        try {\n            data = await getAnnouncement();\n        }\n        catch (error) {\n            if (error.status !== '404') {\n                throw error;\n            }\n        }\n\n        setAnnouncement(data);\n    };\n\n    const fetchDashbar = async () => {\n        let data = await getDashbar(parameters);\n\n        setDashbar(data);\n        setDashbarLoading(false);\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        } else {\n            fetchAnnouncements();\n            fetchDashbar();\n        }\n    }, [parameters, isFirstLoad]);\n\n    const insertSanitizedHtml = text => ({ __html: sanitizeHtml(text) });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Stack hasGutter>\n                <StackItem>\n                    {!isDashbarLoading ? (\n                        <Grid hasGutter id=\"dashbar\">\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}\n                                    count={dashbar?.exploitable_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, known_exploit: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}\n                                    count={dashbar?.cves_with_rule}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, rule_presence: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}\n                                    count={dashbar?.critical_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '7' })}\n                                    impact=\"Critical\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}\n                                    count={dashbar?.important_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '5' })}\n                                    impact=\"Important\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                        </Grid>\n                    ) : (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                        </Grid>\n                    )}\n                </StackItem>\n                {announcement?.message && (\n                    <StackItem id=\"announcement\">\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}\n                        >\n                            <span dangerouslySetInnerHTML={\n                                insertSanitizedHtml(sanitizeLinks(announcement.message))\n                            } />\n                        </Alert>\n                    </StackItem>\n                )}\n            </Stack>\n        </Main>\n    );\n};\n\nexport default Dashbar;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\nimport Dashbar from '../Dashbar/Dashbar';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Dashbar />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","_ref","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","find","selectedCve","id","_objectSpread","selected","index","current","includes","undefined","isOpen","isLoading","React","SkeletonTable","colSize","rowSize","variant","TableVariant","compact","Fragment","Table","canCollapseAll","canSelectAll","cells","heightAuto","props","colSpan","title","EmptyStateNoCVEs","secondParagraph","messages","emptyStateThereShouldBeCVEs","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","concat","_toConsumableArray","meta","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","TableHeader","TableBody","PaginationWrapper","propTypes","CVETableContext","Consumer","_extends","currentValue","arguments","affecting","label","intl","formatMessage","filterSystemsExposed","type","conditionalFilterType","checkbox","urlParam","filterValues","onChange","value","values","join","page","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","canExport","_useState","useState","_useState2","_slicedToArray","exportPDF","setExportPDF","params","isAllExpanded","filter","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","editBusinessRisk","onClick","showBusinessRiskModal","_ref2","business_risk_id","business_risk_text","attributes","justification","isDisabled","editStatus","showStatusModal","_ref3","exposed_systems_count","status_justification","status_id","systems_affected","status_text","columnManagementModalTitle","setColumnManagementModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","searchFilterByCveID","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","item","ONLY_NON_VULNERABLE_SYSTEMS","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","resetFilters","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","CVEs","rbac","dispatch","useDispatch","CveStatusModal","setStatusModal","_useState3","_useState4","CveBusinessRiskModal","setBusinessRiskModal","_useState5","_useState6","isFirstLoad","setFirstLoad","_rbac","_rbac$","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","columns","_ref4","_ref5","_ref6","_ref7","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveList","_useColumnManagement2","ColumnManagementModal","useMemo","createCveListByAccount","_useUrlParams","useUrlParams","CVES_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","status","Spinner","centered","Provider","format","DownloadReport","exec","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","StatusModal","expandCve","Stack","StackItem","CVEsTableToolbar","CVEsTable","column","_column$isShown","isShown","isShownByDefault","NotAuthorized","serviceName","SERVICE_NAME","PropTypes","isRequired","useRbac","PERMISSIONS","setCveStatusAndBusinessRisk","setPairStatus","basicReporting","readVulnerabilityResults","DashbarItem","_impactList$impact","impact","onLinkClick","hasIcon","Card","isFullHeight","className","CardBody","TextContent","Text","component","TextVariants","h4","SecurityIcon","color","impactList","iconColor","size","Object","keys","text","useIntl","dashbar","setDashbar","announcement","setAnnouncement","_useState7","_useState8","isDashbarLoading","setDashbarLoading","applyOnly","fetchAnnouncements","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","getAnnouncement","sent","t0","stop","fetchDashbar","_callee2","_context2","getDashbar","Main","style","paddingBottom","hasGutter","Grid","GridItem","span","md","WithLoader","LoaderType","inlineSkeleton","height","FormattedMessage","dashbarKnownExploitsTitle","exploitable_cves","known_exploit","dashbarSecurityRulesTitle","cves_with_rule","rule_presence","dashbarCriticalVulnerabilitiesTitle","critical_cves","dashbarImportantVulnerabilitiesTitle","important_cves","message","Alert","isInline","dashbarAnnouncementTitle","dangerouslySetInnerHTML","sanitizeLinks","__html","sanitizeHtml","Popover","enableFlip","position","headerContent","ovalPopoverHeader","bodyContent","ovalPopoverBody","footerContent","href","target","rel","learnMore","ExternalLinkAltIcon","cvesHeader","OutlinedQuestionCircleIcon","verticalAlign","Header","showBreadcrumb","Dashbar"],"sourceRoot":""}