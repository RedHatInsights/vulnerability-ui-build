{"version":3,"sources":["webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js","webpack:///./src/Store/ActionTypes.js","webpack:///./src/Helpers/MiscHelper.js","webpack:///./src/Utilities/interceptors.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js"],"names":["filename","page","params","cve","defaultParams","date","checkTypes","fetchData","format","pages","includes","formats","exec","a","Array","isArray","data_format","payload","response","data","JSON","stringify","downloadFile","this","page_size","Number","MAX_SAFE_INTEGER","Date","toISOString","replace","split","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","messages","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","propTypes","PropType","shape","object","details","resulotion","isRequired","string","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","isLoading","openedRows","meta","cvesCount","length","map","item","attributes","id","isOpen","status","status_name","children","createSystemsListTable","affectedSystems","asMutable","cve_status_id","status_id","onlyThisSystemCvePair","undefined","STATUS_OPTIONS","find","option","parseInt","value","label","createCveDetailsPage","cves","error","impact","public_date","processDate","synopsis","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","rowIndex","title","editBusinessRisk","onClick","event","rowId","rowData","showBusinessRiskModal","justification","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","total_items","then","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","filter","selectAll","SearchFilter","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","handleSearch","useEffect","type","conditionalFilterType","text","filterValues","onChange","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","key","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","push","filterChips","Object","keys","array","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","initialState","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","transforms","sortable","selected","system","selectEntities","myRows","slice","inventoryEntitiesReducer","action","row","SystemsTableToolbar","selectedHosts","parameters","systems","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","kebabOptions","opt_out","kebabExcludeVulnerabilityAnalysis","props","isDisabled","kebabHideExcludedSystems","kebabShowExcludedSystems","selectOptions","ops","fetchSystemsIds","PrimaryToolbar","bulkSelect","checked","Boolean","actionsConfig","actions","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","onDelete","e","i","DownloadReport","fetchSystems","dataShape","func","any","withRouter","injectIntl","SystemsPage","InventoryTable","setInventoryTable","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","urlParamsAllowed","setUrlParamsAllowed","inventory","createRef","dispatch","useDispatch","useSelector","SystemsPageStore","metadata","useMemo","cveCount","cve_count","rest","inventory_id","loadInventory","insights","ReactRedux","react","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","SYSTEMS_HEADER","getStore","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","current","systemId","optOutSystemsAction","addNotification","variant","systemsExcludedNotification","systemsResumedNotificationTitle","systemsResumedNotificationBody","VulnerabilityHeader","systemsHeader","showBreadcrumb","Main","tableProps","canSelectAll","onSort","index","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sort","sortBy","createSortBy","ref","total","onRefresh","pageSize","per_page","limit","onRefreshData","isLoaded","hasCheckbox","isChecked","FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","oneOfType","bool","constructParameters","apiProps","allowedParams","forEach","constructURLParameters","urlParams","formatDate","prepend","number","toFormat","isNaN","year","getFullYear","month","getMonth","day","getDate","constructFilterParameters","filterParams","prototype","hasOwnProperty","call","cvssEntry","CVSS_OPTIONS","cvss_filter","parseFloat","to","cvss_from","cvss_to","publicEntry","PUBLIC_DATE_OPTIONS","publish_date","public_from","public_to","getImpactDetails","impactList","color","titleContent","size","impactColorList","unknown","header","indexOf","desc","asc","findIndex","currentSort","columnName","useDefault","substr","window","history","pushState","location","pathname","qs","parse","updateRef","instance","axios","create","interceptors","request","use","authInterceptor","responseDataInterceptor","interceptor401","ReadOnlyNotification","err","isCancel","errObject","errors","api","GitApi","getCveDetails","getSystemDetails","getAffectedSystemsByCVE","parameterArray","getAffectedSystemsByCve","getSystems","getSystemsList","getCveListByAccount","getCveList","optOutSystem","setSystemOptOut","getCveListBySystem","setSystemCveStatus","setStatus","optOutSystems","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","getAffectedSystemsIdsByCve","getSystemsIds","getCveIdsList","getCveIdsBySystem","Immutable","breadcrumbs","affectedSystemsByCVE","security_rule","cveDetails","cveList","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","timestamp","newState","splice","element","offet","show_all","isValid","stateTimestamp","actionTimestamp","CVEDetailsPageStore","ActionTypes","setIn","CVEsStore","cveName","BreadcrumbStore","set","setHeader","Promise","resolve","HeaderHelper","result","fetchAffectedSystemsByCVE","APIHelper","options","fetchCveDetails","handleCveDetailsError","fetchSystemDetails","noError","fetchCveListByAccount","optOutSystemAction","fetchCveListBySystem","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchCvesIds","fetchSystemDetailsIds","clearCVEsStore"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { sortable } from '@patternfly/react-table';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current) {\n            apply(urlParameters);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        tableProps={{\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy()\n                        }}\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.opt_out)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n","export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport findIndex from 'lodash/findIndex';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { impactColorList, impactList, CVSS_OPTIONS, PUBLIC_DATE_OPTIONS } from './constants';\nimport qs from 'query-string';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\n\nexport const dataShape = propTypes.shape({\n    data: propTypes.oneOfType([propTypes.object, propTypes.array]),\n    meta: propTypes.object,\n    isLoading: propTypes.bool\n});\n\n/**\n * Based on the  allowedParams it will construct the arguments for the API call\n * which is defined in the vulnerabilities-client. vulnerabilities-client is written is typescript\n * so we need to define and pass every single parameter. Order in allowedParams is important\n *\n * @param {Object} apiProps\n * @param {Array} allowedParams - order should align with the params in the vulnerabilities-client\n */\nexport function constructParameters(apiProps, allowedParams) {\n    if (apiProps) {\n        Object.keys(apiProps).forEach(\n            key => (\n                apiProps[key] === undefined\n                || apiProps[key] === ''\n            )\n            && delete apiProps[key]\n        );\n\n        const params = allowedParams.map(item => apiProps[item]);\n\n        return params;\n    }\n\n    return [];\n}\n\n// TODO DRY:similar to constructParameters\nexport function constructURLParameters(urlParams, allowedParams) {\n    if (urlParams) {\n        const params = { ...urlParams };\n        Object.keys(urlParams).forEach(\n            key => (\n                params[key] === undefined\n                || params[key] === ''\n                || !allowedParams.includes(key)\n                || params[key] === false\n            )\n            && delete params[key]\n\n        );\n        return params;\n    }\n}\n\nexport function formatDate(date = new Date()) {\n    const prepend = (number) => `${`${number}`.length === 1 ? '0' : ''}${number}`;\n    const toFormat = new Date(date);\n    if (toFormat instanceof Date && !isNaN(toFormat)) {\n        const year = toFormat.getFullYear();\n        const month = toFormat.getMonth();\n        const day = toFormat.getDate();\n        return `${year}-${prepend(month)}-${prepend(day)}`;\n    }\n\n    return toFormat;\n}\n\n/**\n * Contructs the filters which have more than one parameter that needs to be passed\n * and resets all the parameteres when it's needed\n *\n * @param {Object} filterParams\n * @return {Object}\n */\nexport function constructFilterParameters(filterParams) {\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'cvss_filter')) {\n        let cvssEntry = CVSS_OPTIONS.find(({ value }) => value === filterParams.cvss_filter);\n\n        if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter !== 'undefined') {\n            let values = filterParams.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n            let [from, to] = values;\n            cvssEntry = { from, to };\n        } else if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter === 'undefined') {\n            cvssEntry = { from: undefined, to: undefined };\n        } else if ((cvssEntry && cvssEntry.label === 'N/A') && filterParams.cvss_filter === 'from-1to-1') {\n            cvssEntry = { from: -1, to: -1 };\n        }\n\n        filterParams.cvss_from = cvssEntry.from;\n        filterParams.cvss_to = cvssEntry.to;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'publish_date')) {\n        let publicEntry = PUBLIC_DATE_OPTIONS.find(item => item.value === filterParams.publish_date);\n\n        if (typeof publicEntry !== 'undefined') {\n            filterParams.public_from = publicEntry.from && formatDate(publicEntry.from);\n            filterParams.public_to = publicEntry.to && formatDate(publicEntry.to);\n        } else {\n            filterParams.public_from = undefined;\n            filterParams.public_to = undefined;\n            filterParams.publish_date = undefined;\n        }\n    }\n\n    return filterParams;\n}\n\nexport function getImpactDetails(impact) {\n    if (Object.keys(impactList).includes(impact)) {\n        return {\n            title: impactList[impact].title,\n            color: impactList[impact].color,\n            text: impactList[impact].text,\n            titleContent: (\n                <SecurityIcon size=\"lg\" />\n            )\n        };\n    } else {\n        return {\n            title: 'Unknown',\n            color: impactColorList.unknown,\n            text: '',\n            titleContent: (\n                <UnknownIcon size=\"lg\" />\n            )\n        };\n    }\n}\n\nexport const createSortBy = (header, value) => {\n    if (value) {\n        let direction = value.indexOf('-') === 0 ? SortByDirection.desc : SortByDirection.asc;\n        value = value.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === value);\n        let sort = {\n            index,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const handleSortColumn = (key, direction, header, currentSort, apply) => {\n    let columnName = header[key].key;\n    const useDefault = currentSort && currentSort.substr(1) !== columnName;\n    if (direction === SortByDirection.desc || useDefault) {\n        columnName = '-' + columnName;\n    }\n\n    apply({ sort: columnName });\n};\n\nexport const updateStateSet = (stateSet, names, value) => {\n    [].concat(names).forEach(name => {\n        value ? stateSet.add(name) : stateSet.delete(name);\n    });\n    return stateSet;\n};\n\nexport const useCreateUrlParams = (allowedParams) => {\n    const urlParams = qs.parse(window.location.search);\n\n    const createUrlParams = (parameters) => {\n        window.history.pushState(\n            {},\n            '',\n            `${\n                window.location.pathname\n            }?${\n                qs.stringify(constructURLParameters(parameters, allowedParams))\n            }`\n        );\n    };\n\n    return [createUrlParams, urlParams];\n};\n\nexport const updateRef = (meta, apply) => {\n    const pages = parseInt(meta.pages);\n    const page = parseInt(meta.page);\n    const cvesCount = parseInt(meta.cvesCount);\n    const goTo = (pages === page && page > 1 && cvesCount === 1) ? (pages - 1) : page;\n\n    apply({ page: goTo });\n};\n\nexport const mountWithIntl = (Component) => {\n    const wrapper = mount(Component, {\n        wrappingComponent: IntlProvider\n    });\n    const provider = wrapper.getWrappingComponent();\n    provider.setProps({ locale: 'en' });\n\n    return wrapper;\n};\n","import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n","let BASE_ROUTE = '/api/vulnerability/';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis, apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule',\n        'rule_name'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystems(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function optOutSystem(system, status) {\n    let result = api.setSystemOptOut(system, status);\n    return result;\n}\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve(synopsis, apiProps) {\n    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n"],"sourceRoot":""}