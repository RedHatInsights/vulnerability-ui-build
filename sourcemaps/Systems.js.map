{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Helpers/MiscHelper.js","webpack:///./src/Utilities/interceptors.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","dataShape","propTypes","shape","data","oneOfType","object","array","meta","isLoading","bool","constructParameters","apiProps","allowedParams","Object","keys","forEach","key","undefined","map","item","constructURLParameters","urlParams","params","includes","formatDate","date","Date","prepend","number","length","toFormat","isNaN","year","getFullYear","month","getMonth","day","getDate","constructFilterParameters","filterParams","prototype","hasOwnProperty","call","cvssEntry","CVSS_OPTIONS","find","value","cvss_filter","values","split","filter","parseFloat","from","to","label","cvss_from","cvss_to","publicEntry","PUBLIC_DATE_OPTIONS","publish_date","public_from","public_to","getImpactDetails","impact","impactList","title","color","text","titleContent","size","impactColorList","unknown","createSortBy","header","direction","indexOf","SortByDirection","desc","asc","replace","index","findIndex","handleSortColumn","currentSort","apply","columnName","useDefault","substr","sort","useCreateUrlParams","parameters","window","history","pushState","location","pathname","qs","stringify","parse","search","updateRef","pages","parseInt","page","cvesCount","instance","axios","create","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","ReadOnlyNotification","err","isCancel","errObject","errors","api","GitApi","getCveDetails","synopsis","getSystemDetails","system","getAffectedSystemsByCVE","parameterArray","getAffectedSystemsByCve","getSystems","getSystemsList","getCveListByAccount","getCveList","optOutSystem","setSystemOptOut","getCveListBySystem","setSystemCveStatus","setStatus","optOutSystems","systems","optOut","opt_out","inventory_id","Array","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","getAffectedSystemsIdsByCve","getSystemsIds","getCveIdsList","getCveIdsBySystem","initialState","Immutable","breadcrumbs","affectedSystemsByCVE","openedRows","payload","total_items","page_size","selectedHosts","security_rule","status_id","cveDetails","cveList","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","action","newState","slice","isArray","splice","push","isOpen","cves","cve","element","id","metadata","limit","offet","show_all","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEDetailsPageStore","type","ActionTypes","setIn","CVEsStore","cveName","SystemsPageStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","APIHelper","fetchSystems","options","fetchCveDetails","fetchSystemDetails","noError","fetchCveListByAccount","optOutSystemAction","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","filename","toISOString","defaultParams","checkTypes","fetchData","format","formats","exec","a","data_format","JSON","downloadFile","this","Number","MAX_SAFE_INTEGER","FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","ExclamationCircleIcon","somethingWrong","tryRefreshing","ifProblemPersists","statusPageLink","statusPage","back","returnPreviousPage","InsightsSystemRule","rule","TextContent","className","Text","h3","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","details","resulotion","isRequired","string","InsightsNoSystemRule","exposedSystemNoRules","exposedSystemNoRulesInfo","exposedSystemNoRulesInfoLink","createExposedSystemsTable","attributes","status_name","children","createCveDetailsPage","asMutable","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","option","business_risk_id","toString","business_risk_justification","business_risk_text","STATUS_OPTIONS","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","rowIndex","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","justification","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_status_id","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","SearchFilter","placeholder","React","useState","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","filterValues","onChange","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","columns","rows","entities","selectedRows","modifyInventory","loaded","lastSeenColumn","transforms","sortable","selected","selectEntities","myRows","inventoryEntitiesReducer","row","SystemsTableToolbar","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","kebabOptions","kebabExcludeVulnerabilityAnalysis","isDisabled","kebabHideExcludedSystems","kebabShowExcludedSystems","selectOptions","ops","PrimaryToolbar","bulkSelect","checked","Boolean","actionsConfig","actions","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","onDelete","e","i","DownloadReport","any","withRouter","injectIntl","SystemsPage","InventoryTable","setInventoryTable","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","urlParamsAllowed","setUrlParamsAllowed","isFirstMount","setIsFirstMount","inventory","createRef","dispatch","useDispatch","useSelector","useMemo","cveCount","cve_count","rest","loadInventory","insights","ReactRedux","react","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","pfReact","reactCore","inventoryConnector","mergeWithEntities","mergeWithDetail","SYSTEMS_HEADER","getStore","config","clearNotifications","current","systemId","addNotification","systemsExcludedNotification","systemsResumedNotificationTitle","systemsResumedNotificationBody","VulnerabilityHeader","systemsHeader","showBreadcrumb","Main","tableProps","canSelectAll","onSort","SYSTEMS_SORTING_HEADER","sortBy","ref","total","onRefresh","pageSize","per_page","onRefreshData","isLoaded","hasCheckbox","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport findIndex from 'lodash/findIndex';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { impactColorList, impactList, CVSS_OPTIONS, PUBLIC_DATE_OPTIONS } from './constants';\nimport qs from 'query-string';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\n\nexport const dataShape = propTypes.shape({\n    data: propTypes.oneOfType([propTypes.object, propTypes.array]),\n    meta: propTypes.object,\n    isLoading: propTypes.bool\n});\n\n/**\n * Based on the  allowedParams it will construct the arguments for the API call\n * which is defined in the vulnerabilities-client. vulnerabilities-client is written is typescript\n * so we need to define and pass every single parameter. Order in allowedParams is important\n *\n * @param {Object} apiProps\n * @param {Array} allowedParams - order should align with the params in the vulnerabilities-client\n */\nexport function constructParameters(apiProps, allowedParams) {\n    if (apiProps) {\n        Object.keys(apiProps).forEach(\n            key => (\n                apiProps[key] === undefined\n                || apiProps[key] === ''\n            )\n            && delete apiProps[key]\n        );\n\n        const params = allowedParams.map(item => apiProps[item]);\n\n        return params;\n    }\n\n    return [];\n}\n\n// TODO DRY:similar to constructParameters\nexport function constructURLParameters(urlParams, allowedParams) {\n    if (urlParams) {\n        const params = { ...urlParams };\n        Object.keys(urlParams).forEach(\n            key => (\n                params[key] === undefined\n                || params[key] === ''\n                || !allowedParams.includes(key)\n                || params[key] === false\n            )\n            && delete params[key]\n\n        );\n        return params;\n    }\n}\n\nexport function formatDate(date = new Date()) {\n    const prepend = (number) => `${`${number}`.length === 1 ? '0' : ''}${number}`;\n    const toFormat = new Date(date);\n    if (toFormat instanceof Date && !isNaN(toFormat)) {\n        const year = toFormat.getFullYear();\n        const month = toFormat.getMonth();\n        const day = toFormat.getDate();\n        return `${year}-${prepend(month)}-${prepend(day)}`;\n    }\n\n    return toFormat;\n}\n\n/**\n * Contructs the filters which have more than one parameter that needs to be passed\n * and resets all the parameteres when it's needed\n *\n * @param {Object} filterParams\n * @return {Object}\n */\nexport function constructFilterParameters(filterParams) {\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'cvss_filter')) {\n        let cvssEntry = CVSS_OPTIONS.find(({ value }) => value === filterParams.cvss_filter);\n\n        if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter !== 'undefined') {\n            let values = filterParams.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n            let [from, to] = values;\n            cvssEntry = { from, to };\n        } else if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter === 'undefined') {\n            cvssEntry = { from: undefined, to: undefined };\n        } else if ((cvssEntry && cvssEntry.label === 'N/A') && filterParams.cvss_filter === 'from-1to-1') {\n            cvssEntry = { from: -1, to: -1 };\n        }\n\n        filterParams.cvss_from = cvssEntry.from;\n        filterParams.cvss_to = cvssEntry.to;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'publish_date')) {\n        let publicEntry = PUBLIC_DATE_OPTIONS.find(item => item.value === filterParams.publish_date);\n\n        if (typeof publicEntry !== 'undefined') {\n            filterParams.public_from = publicEntry.from && formatDate(publicEntry.from);\n            filterParams.public_to = publicEntry.to && formatDate(publicEntry.to);\n        } else {\n            filterParams.public_from = undefined;\n            filterParams.public_to = undefined;\n            filterParams.publish_date = undefined;\n        }\n    }\n\n    return filterParams;\n}\n\nexport function getImpactDetails(impact) {\n    if (Object.keys(impactList).includes(impact)) {\n        return {\n            title: impactList[impact].title,\n            color: impactList[impact].color,\n            text: impactList[impact].text,\n            titleContent: (\n                <SecurityIcon size=\"lg\" />\n            )\n        };\n    } else {\n        return {\n            title: 'Unknown',\n            color: impactColorList.unknown,\n            text: '',\n            titleContent: (\n                <UnknownIcon size=\"lg\" />\n            )\n        };\n    }\n}\n\nexport const createSortBy = (header, value) => {\n    if (value) {\n        let direction = value.indexOf('-') === 0 ? SortByDirection.desc : SortByDirection.asc;\n        value = value.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === value);\n        let sort = {\n            index,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const handleSortColumn = (key, direction, header, currentSort, apply) => {\n    let columnName = header[key].key;\n    const useDefault = currentSort && currentSort.substr(1) !== columnName;\n    if (direction === SortByDirection.desc || useDefault) {\n        columnName = '-' + columnName;\n    }\n\n    apply({ sort: columnName });\n};\n\nexport const updateStateSet = (stateSet, names, value) => {\n    [].concat(names).forEach(name => {\n        value ? stateSet.add(name) : stateSet.delete(name);\n    });\n    return stateSet;\n};\n\nexport const useCreateUrlParams = (allowedParams) => {\n    const urlParams = qs.parse(window.location.search);\n\n    const createUrlParams = (parameters) => {\n        window.history.pushState(\n            {},\n            '',\n            `${\n                window.location.pathname\n            }?${\n                qs.stringify(constructURLParameters(parameters, allowedParams))\n            }`\n        );\n    };\n\n    return [createUrlParams, urlParams];\n};\n\nexport const updateRef = (meta, apply) => {\n    const pages = parseInt(meta.pages);\n    const page = parseInt(meta.page);\n    const cvesCount = parseInt(meta.cvesCount);\n    const goTo = (pages === page && page > 1 && cvesCount === 1) ? (pages - 1) : page;\n\n    apply({ page: goTo });\n};\n\nexport const mountWithIntl = (Component) => {\n    const wrapper = mount(Component, {\n        wrappingComponent: IntlProvider\n    });\n    const provider = wrapper.getWrappingComponent();\n    provider.setProps({ locale: 'en' });\n\n    return wrapper;\n};\n","import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n","let BASE_ROUTE = '/api/vulnerability/';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis, apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule',\n        'rule_name'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystems(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function optOutSystem(system, status) {\n    let result = api.setSystemOptOut(system, status);\n    return result;\n}\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve(synopsis, apiProps) {\n    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_DETAILS + '_REJECTED':\n            newState = state.setIn(['cveDetails', 'error'], true);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n        case ActionTypes.FETCH_SYSTEMS + '_REJECTED':\n            newState.error = true;\n            return newState;\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.error = true;\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'executive-report':\n                return `vulnerability_executive-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, ExclamationCircleIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={ExclamationCircleIcon} color={'var(--pf-global--danger-color--100)'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.somethingWrong} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.tryRefreshing} />\n                <br/><br/>\n                <FormattedMessage {...messages.ifProblemPersists}\n                    values = {{\n                        statusPageLink:\n                                <a href=\"https://status.redhat.com\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                    <FormattedMessage {...messages.statusPage} />\n                                </a>\n                    }}\n                />\n                <br/><br/>\n                <Button variant=\"primary\" onClick={ () => history.back() }>\n                    <FormattedMessage {...messages.returnPreviousPage} />\n                </Button>\n\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { sortable } from '@patternfly/react-table';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstMount, setIsFirstMount] = useState(true);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const error = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    useEffect(() => {\n        dispatch(clearNotifications());\n    }, [error, dispatch]);\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current && isFirstMount) {\n            apply(urlParameters);\n            setIsFirstMount(false);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { InventoryTable && !error && (\n                    <InventoryTable\n                        tableProps={{\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy()\n                        }}\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.opt_out)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                ) || processError() }\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n"],"sourceRoot":""}