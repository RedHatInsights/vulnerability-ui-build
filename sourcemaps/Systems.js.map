{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Systems/Systems.js","webpack:///./src/Components/SmartComponents/Systems/Systems.scss?4fb1","webpack:///./src/Components/SmartComponents/Systems/Systems.scss","webpack:///./src/Store/Selectors/CVESelectors.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js"],"names":["Systems","props","downloadReport","format","state","opt_out","filter","payload","fetchSystems","data_format","page","page_size","Number","MAX_SAFE_INTEGER","then","response","data","JSON","stringify","downloadFile","Date","toISOString","apply","config","setState","sendRequest","fetchData","createUrlParams","allParams","params","allowedParams","Object","keys","forEach","key","undefined","includes","queryString","qs","history","push","addFilter","param","value","type","newFilter","doOptOut","selected","size","optOutSystems","addNotification","variant","title","intl","formatMessage","messages","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","Set","onSelect","Array","isArray","add","id","selectMultiple","getSelected","handleFilterChange","debounce","systems","meta","handleRefresh","perPage","per_page","total_items","inventory","current","onRefreshData","handleOptOut","handleKebabToggle","isKebabOpen","handleKebabSelect","React","createRef","InventoryCmp","removeListener","columns","systemsColumnHeaderName","composed","systemsColumnHeaderCveCount","selectListener","middlewareListener","addNew","on","callback","selectAllListener","queryObject","parse","this","location","search","show_irrelevant","show_all","fetchInventory","nextProps","isLoading","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","inventoryEntitiesReducer","getStore","InventoryTable","items","map","item","attributes","cve_count","rest","inventory_id","kebabOptions","kebabItemExcludeSystemAnalysis","isDisabled","kebabItemToggleExcludeSystemDisplay","kebabItemDownloadJSON","kebabItemDownloadCSV","showBreadcrumb","ref","hasCheckbox","length","total","onRefresh","className","selectedItems","selectorHandler","selectRows","fetchResource","ops","placeholder","searchFilterByName","dropdownItems","disabled","filterValues","filterCategories","filterSystemName","Component","propTypes","func","dataShape","object","any","injectIntl","withRouter","connect","sAllSystems","dispatch","setHeader","header","options","status","optOutSystemsAction","notification","ids","selectEntities","content","module","i","transform","locals","exports","sCveDetailsPage","createSelector","CVEStore","cveDetails","createCveDetailsPage","sExposedSystemsTable","cve","affectedSystemsByCVE","createExposedSystemsTable","SystemsStore","createSystemsListTable","init","rows","entities","modifyInventory","getSelectedFunc","loaded","lastSeenColumn","insights_id","has","myRows","slice","action"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import * as reactCore from '@patternfly/react-core';\nimport { Page, ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport * as pfReactTable from '@patternfly/react-table';\nimport { Main, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport debounce from 'lodash/debounce';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, optOutSystemsAction, setHeader, selectEntities } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { sAllSystems } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemToggleExcludeSystemDisplay,\n    kebabItemExcludeSystemAnalysis\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport './Systems.scss';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { filterSystemName } from '../../../Helpers/constants';\nimport FilterChips  from '../../PresentationalComponents/Filters/FilterChips';\nimport SearchFilter  from '../../PresentationalComponents/Filters/SearchFilter';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n/*eslint camelcase: 0*/\n\nclass Systems extends React.Component {\n    static propTypes = {\n        fetchData: propTypes.func,\n        systems: dataShape,\n        optOutSystems: propTypes.func,\n        addNotification: propTypes.func,\n        selectRows: propTypes.func,\n        selectMultiple: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.inventory = React.createRef();\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            filter: undefined,\n            removeListener: () => { },\n            columns: [\n                {\n                    key: 'display_name',\n                    title: this.props.intl.formatMessage(messages.systemsColumnHeaderName),\n                    composed: ['facts.os_release', 'display_name']\n                },\n                {\n                    key: 'cve_count',\n                    title: this.props.intl.formatMessage(messages.systemsColumnHeaderCveCount)\n                }\n            ],\n            opt_out: false,\n            isKebabOpen: false,\n            selectListener: middlewareListener.addNew({\n                on: 'SELECT_ENTITY',\n                callback: payload => this.onSelect(payload)\n            }),\n            selectAllListener: middlewareListener.addNew({\n                on: 'SELECT_ENTITIES',\n                callback: payload => this.onSelect(payload)\n            }),\n            selected: new Set()\n        };\n    }\n\n    componentDidMount() {\n\n        const queryObject = qs.parse(this.props.location.search);\n        queryObject.show_irrelevant = queryObject.show_irrelevant === 'true';\n        if (queryObject.show_irrelevant) {\n            queryObject.show_all = undefined;\n        }\n\n        this.fetchInventory();\n        this.apply({ ...queryObject });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !nextProps.systems.isLoading;\n    }\n\n    downloadReport = format => {\n        const { opt_out, filter } = this.state;\n        const { payload } = fetchSystems({\n            opt_out,\n            filter,\n            data_format: format,\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER\n        });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `systems-${new Date().toISOString()}`, format);\n            });\n    };\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n        ReducerRegistry.register({\n            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns, this.getSelected)),\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector(ReducerRegistry.getStore()).InventoryTable\n        });\n        this.state.removeListener();\n    }\n\n    apply = (config = {}) => {\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    sendRequest = () => {\n        const { fetchData } = this.props;\n        fetchData({ ...this.state });\n        this.createUrlParams(this.state);\n    }\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = ['filter', 'page', 'page_size'];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    addFilter = (param, value, type) => {\n        let newFilter;\n        if (type === 'radio' || param === 'show_all') {\n            newFilter = { [param]: value };\n        } else {\n            newFilter = this.state[param] ? { [param]: `${this.state[param]},${value}` } : { [param]: value };\n        }\n\n        this.apply({ ...newFilter, page: 1 });\n    };\n\n    doOptOut = () => {\n        if (this.state.selected.size > 0) {\n            this.props.optOutSystems(this.state.selected, !this.state.opt_out).then(() => {\n                this.props.fetchData({ ...this.params(), page: 1 });\n                this.state.opt_out === false\n                    ? this.props.addNotification({\n                        variant: 'success',\n                        title: this.state.selected.size + this.props.intl.formatMessage(messages.systemsExcludedNotification)\n                    })\n                    : this.props.addNotification({\n                        variant: 'success',\n                        title: this.state.selected.size + this.props.intl.formatMessage(messages.systemsResumedNotificationTitle),\n                        description: this.props.intl.formatMessage(messages.systemsResumedNotificationBody)\n                    });\n                this.setState({ selected: new Set() });\n            });\n        }\n    };\n\n    onSelect = (payload) => {\n        let selected;\n        if (!payload.data || Array.isArray(payload.data)) {\n            selected = new Set(payload.data);\n        } else {\n            selected = this.state.selected;\n            payload.data.selected ? selected.add(payload.data.id) : selected.delete(payload.data.id);\n        }\n\n        this.setState({ selected }, this.props.selectMultiple);\n    };\n\n    getSelected = () => {\n        return this.state.selected;\n    };\n\n    params = () => {\n        const { filter, opt_out, page, page_size } = this.state;\n        return { filter, opt_out, page, page_size };\n    };\n\n    handleFilterChange = debounce(value => {\n        const { meta } = this.props.systems;\n        const { page_size } = meta;\n        this.apply({ filter: value, page_size, page: 1 });\n    }, 400);\n\n    handleRefresh = ({ page, per_page: perPage }) => {\n        const { meta } = this.props.systems;\n        const { fetchData } = this.props;\n        if (meta.page !== page || meta.page_size !== perPage) {\n            const config = {\n                page,\n                page_size: perPage || meta.page_size,\n                filter: this.state.filter,\n                opt_out: this.state.opt_out\n            };\n            fetchData(config);\n            this.createUrlParams(config);\n        }\n\n        if (meta.total_items <= perPage && this.inventory.current) {\n            this.inventory.current.onRefreshData({ page, per_page: perPage, perPage });\n        }\n    };\n\n    handleOptOut = () => {\n        this.setState({\n            opt_out: !this.state.opt_out,\n            selected: new Set(),\n            page: 1\n        }, this.sendRequest);\n    };\n\n    handleKebabToggle = isKebabOpen => {\n        this.setState({\n            isKebabOpen\n        });\n    };\n\n    handleKebabSelect = () => {\n        this.setState({\n            isKebabOpen: !this.state.isKebabOpen\n        });\n    };\n\n    render() {\n        const { InventoryCmp, filter } = this.state;\n        const { data, meta } = this.props.systems;\n        const items = data.map(item => {\n            const { cve_count, ...rest } = item.attributes;\n            return {\n                cve_count: (meta.opt_out && 'Excluded') || cve_count,\n                id: item.attributes.inventory_id,\n                ...rest\n            };\n        });\n\n        const kebabOptions = [\n            kebabItemExcludeSystemAnalysis(this.doOptOut, this.state.opt_out, {\n                isDisabled: !this.getSelected().size\n            }),\n            kebabItemToggleExcludeSystemDisplay(this.handleOptOut, this.state.opt_out),\n            kebabItemDownloadJSON(this.downloadReport),\n            kebabItemDownloadCSV(this.downloadReport)\n        ];\n        return (\n            <Page>\n                <VulnerabilityHeader showBreadcrumb={false} />\n                <Main>\n                    <InventoryCmp\n                        ref={this.inventory}\n                        hasCheckbox={data.length !== 0}\n                        page={meta.page}\n                        total={meta.total_items}\n                        perPage={meta.page_size}\n                        onRefresh={this.handleRefresh}\n                        items={items}\n                    >\n\n                        <ToolbarGroup className=\"systems-toolbar\">\n                            <ToolbarItem>\n                                <SelectAllCheckbox\n                                    selectedItems={this.state.selected}\n                                    selectorHandler={this.props.selectRows}\n                                    items={this.props.systems}\n                                    fetchResource={ops => fetchSystems({ ...this.params(), ...ops })}\n                                />\n                            </ToolbarItem>\n\n                            <ToolbarItem>\n                                <SearchFilter\n                                    placeholder={this.props.intl.formatMessage(messages.searchFilterByName)}\n                                    value={filter}\n                                    apply={this.apply}\n                                />\n                            </ToolbarItem>\n\n                            <ToolbarItem>\n                                <BaseKebab dropdownItems={kebabOptions} disabled={data.length === 0} />\n                            </ToolbarItem>\n                        </ToolbarGroup>\n                        <TableToolbar className=\"pf-u-pl-0 system-filter-chips\">\n                            <ToolbarGroup>\n                                <ToolbarItem>\n                                    <FilterChips\n                                        filterValues={this.params()}\n                                        filterCategories={[filterSystemName]}\n                                        apply={this.apply}\n                                    />\n                                </ToolbarItem>\n                            </ToolbarGroup>\n                        </TableToolbar>\n                    </InventoryCmp>\n                </Main>\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systems: sAllSystems(state)\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header)),\n        fetchData: options => dispatch(fetchSystems(options)),\n        optOutSystems: (systems, status) => dispatch(optOutSystemsAction(systems, status)),\n        addNotification: notification => dispatch(addNotification(notification)),\n        selectRows: (value, ids) => dispatch(selectEntities(value, ids)),\n        selectMultiple: () => dispatch({ type: 'SELECT_MULTIPLE_ENTITIES' })\n    };\n};\n\nexport default injectIntl(\n    withRouter(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(Systems)\n    )\n);\n\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".systems-toolbar > div {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.system-filter-chips {\\n  order: 6;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import { createSelector } from 'reselect';\nimport { createCveDetailsPage, createExposedSystemsTable, createSystemsListTable } from '../../Helpers/CVEHelper';\n\nconst cveListWithSystemsSelector = (state, cve) => ({ ...state.CVEStore.affectedSystemsByCVE, cve });\nconst systemsListAllSelector = state => state.SystemsStore;\nconst cveDetailsPageSelector = state => state.CVEStore.cveDetails;\n\nexport const sCveDetailsPage = createSelector(\n    [cveDetailsPageSelector],\n    createCveDetailsPage\n);\nexport const sExposedSystemsTable = createSelector(\n    [cveListWithSystemsSelector],\n    createExposedSystemsTable\n);\n\nexport const sAllSystems = createSelector(\n    [systemsListAllSelector],\n    createSystemsListTable\n);\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state, getSelectedFunc) {\n    // If a system does not have insights_id, it means it was deleted from inventory but somehow survived in Vuln backend\n    if (state.loaded) {\n        const selected = getSelectedFunc();\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.filter(item => item.insights_id).map(item => ({ ...item, selected: selected.has(item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, getSelectedFunc) {\n    const selected = getSelectedFunc();\n    const myRows = state.rows.slice();\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.has(item.id) };\n            return newValue;\n        })\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns, selected) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state, selected);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, selected);\n\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}