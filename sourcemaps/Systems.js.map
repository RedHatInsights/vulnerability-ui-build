{"version":3,"sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Systems/Systems.scss?4fb1","webpack:///./src/Components/SmartComponents/Systems/Systems.scss","webpack:///./src/Components/SmartComponents/Systems/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["init","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","filter","key","map","item","selected","some","system","id","selectEntities","myRows","slice","inventoryEntitiesReducer","action","type","payload","row","isOpen","content","module","i","options","transform","undefined","locals","exports","push","SystemsTableToolbar","selectedHosts","intl","parameters","systems","methods","apply","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","data","onSelect","kebabOptions","label","opt_out","formatMessage","messages","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","onClick","props","isDisabled","length","kebabHideExcludedSystems","kebabShowExcludedSystems","page","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","fetchSystems","bulkSelect","count","meta","total_items","checked","Boolean","handleOnCheckboxChange","actionsConfig","actions","dropdownProps","className","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","downloadReport","format","params","DownloadReport","exec","propTypes","dataShape","object","array","shape","func","any","withRouter","injectIntl","SystemsHook","useState","InventoryTable","setInventoryTable","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","firstMount","setFirstMount","urlParamsAllowed","setUrlParamsAllowed","inventory","React","createRef","dispatch","useDispatch","useSelector","SystemsStore","metadata","isLoading","useMemo","attributes","cveCount","cve_count","rest","inventory_id","loadInventory","a","insights","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","SYSTEMS_HEADER","getStore","useEffect","clearSystemStore","selectMultipleEntities","config","changeSystemsParams","systemId","optOutSystemsAction","then","addNotification","variant","title","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","VulnerabilityHeader","showBreadcrumb","ref","perPage","page_size","total","onRefresh","limit","per_page","current","onRefreshData","isLoaded","hasCheckbox","systemTableRowActions","optOut","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        default:\n            return state;\n    }\n};\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".systems-toolbar > div {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.system-filter-chips {\\n  order: 6;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import './Systems.scss';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystems({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { className: 'custom-class' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as pfReactTable from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { changeSystemsParams, selectMultipleEntities, clearSystemStore } from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams } from '../../../Helpers/MiscHelper';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsHook = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [firstMount, setFirstMount] = useState(true);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsStore }) =>SystemsStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore.metadata\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsStore }) => SystemsStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = (config) => {\n        if (metadata.page !== config.page || metadata.limit !== config.per_page) {\n            apply(config);\n        }\n\n        if (metadata && metadata.total_items <= config.per_page && inventory.current) {\n            inventory.current.onRefreshData(config);\n        }\n    };\n\n    useEffect(() => {\n        if (firstMount) {\n            apply(urlParameters);\n            setFirstMount(false);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.optOut)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsHook.propTypes  = {\n    intl: propTypes.any\n};\nexport default injectIntl(SystemsHook);\n"],"sourceRoot":""}