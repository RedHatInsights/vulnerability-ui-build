{"version":3,"sources":["webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Systems/Systems.scss?4fb1","webpack:///./src/Components/SmartComponents/Systems/Systems.scss","webpack:///./src/Components/SmartComponents/Systems/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","length","meta","data","selectPageNumber","isArray","handleUnselectAll","handleSelectAll","payload","page_size","total_items","page","then","map","item","id","handleOnCheckboxChange","title","intl","formatMessage","messages","selectNone","onClick","selectPage","count","collectedItems","union","filter","selectAll","SearchFilter","label","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","undefined","handleSearch","useEffect","type","conditionalFilterType","text","filterValues","onChange","event","value","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","kebabExportAsJson","kebabExportAsCsv","onSelect","fileType","downloadReport","kebabAction","callback","isDisabled","color","variant","isInline","key","style","buildActiveFilters","currentFilters","filterChips","Object","keys","FILTERS","reduce","array","includes","paramValues","split","filteredValues","values","push","object","name","category","chips","searchLabel","removeFilters","obj","some","chip","join","init","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","selected","system","selectEntities","myRows","slice","inventoryEntitiesReducer","action","row","isOpen","content","module","i","options","transform","locals","exports","SystemsTableToolbar","props","middlewareListener","addNew","on","newSelected","selectedHosts","handleSelect","handleRefresh","pageSize","optOut","opt_out","systems","config","params","allParams","allowedParams","forEach","queryString","qs","stringify","setFilter","history","createUrlParams","kebabOptions","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","doOptOut","kebabHideExcludedSystems","kebabShowExcludedSystems","setOptOut","setSelectedHosts","setPage","selectOptions","ops","fetchSystems","bulkSelect","checked","Boolean","actionsConfig","actions","dropdownProps","className","filterConfig","searchFilter","systemsSearchName","searchFilterByName","f","onRefresh","activeFiltersConfig","filters","parameters","onDelete","e","format","DownloadReport","exec","propTypes","dataShape","func","any","withRouter","injectIntl","SystemsHook","InventoryTable","setInventoryTable","parse","location","inventory","createRef","dispatch","useDispatch","useSelector","SystemsStore","metadata","isLoading","useMemo","attributes","cveCount","cve_count","rest","inventory_id","systemsListColumns","systemsColumnHeaderName","composed","systemsColumnHeaderCveCount","constructor","loadInventory","a","insights","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","getStore","selectMultipleEntities","per_page","changeSystemsParams","current","onRefreshData","systemId","optOutSystemsAction","addNotification","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","VulnerabilityHeader","showBreadcrumb","ref","total","isLoaded","hasCheckbox","systemTableRowActions","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import React from 'react';\nimport messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const  kebabAction = (label, callback, isDisabled =  false) =>{\n    const color = { color: (isDisabled ? '' : 'black') };\n    return (\n        <Button variant=\"link\" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>\n            {label}\n        </Button>\n    );\n};\n\nexport const buildActiveFilters = (currentFilters) =>{\n    const { filter } = currentFilters;\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n            const paramValues = currentFilters[key].split(',');\n            const filteredValues = paramValues.reduce((values, filter) =>{\n                values.push(FILTERS[key].items.reduce((object, item) => {\n\n                    if (filter === item.value) {\n                        object.name = item.label;\n                        object.value = item.value ;\n                    }\n                    else if (key === 'security_rule')\n                    {\n                        object.name = filter;\n                        object.value = filter;\n                    }\n\n                    return object;\n                }, {}));\n                return values;\n            }, []);\n\n            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        default:\n            return state;\n    }\n};\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".systems-toolbar > div {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.system-filter-chips {\\n  order: 6;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import './Systems.scss';\nimport qs from 'query-string';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { kebabAction, exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = (props) => {\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...props.selectedHosts]\n            : props.selectedHosts.filter(item => item !== payload.data.id);\n\n        props.handleSelect(false, newSelected);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const [selectListener] = useState(middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    }));\n\n    const createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = ['filter', 'page', 'page_size'];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n\n        props.setFilter(allParams.filter);\n        props.history.push('?' + queryString);\n    };\n\n    const downloadReport = format => {\n        let params = { ...props.params };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleRefresh = ({ page, page_size: pageSize, filter, opt_out: optOut }, callback) => {\n        const { meta } = props.systems;\n        if (meta.page !== page || meta.page_size !== pageSize) {\n            const config = {\n                page,\n                page_size: pageSize || meta.page_size,\n                filter,\n                opt_out: optOut || props.params().opt_out\n            };\n            createUrlParams(config);\n            if (callback) {return callback(config);}\n        }\n    };\n\n    const handleOptOut = () => {\n        props.setOptOut(!props.params().opt_out);\n        props.setSelectedHosts([]);\n        props.setPage(1);\n    };\n\n    const kebabOptions = [\n        '',\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabResumeAnalysis)\n            : props.intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n        () => props.doOptOut(), !props.selectedHosts.length),\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabHideExcludedSystems)\n            : props.intl.formatMessage(messages.kebabShowExcludedSystems),\n        () => handleOptOut())\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: props.selectedHosts,\n        selectorHandler: props.handleSelect,\n        items: props.systems,\n        fetchResource: ops =>handleRefresh(ops, (config) => fetchSystems(config))\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: props.selectedHosts.length,\n                items: selectOptions.items,\n                checked: Boolean(props.selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { className: 'custom-class' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        props.params().filter,\n                        (f) => handleRefresh(f, props.onRefresh)\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(props.parameters),\n                onDelete: (e, i) => removeFilters(i, (f) => handleRefresh(f, props.onRefresh))\n            }}\n            exportConfig={exportConfig({ downloadReport })}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    params: propTypes.func,\n    setPage: propTypes.func,\n    setFilter: propTypes.func,\n    setOptOut: propTypes.func,\n    selectedHosts: propTypes.array,\n    setSelectedHosts: propTypes.func,\n    doOptOut: propTypes.func,\n    onRefresh: propTypes.any,\n    parameters: propTypes.object,\n    handleSelect: propTypes.func,\n    history: propTypes.object,\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import qs from 'query-string';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as pfReactTable from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { changeSystemsParams, selectMultipleEntities } from '../../../Store/Actions/Actions';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsHook = (props) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [filter, setFilter] = useState(qs.parse(props.location.search).filter);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [optOut, setOptOut] = useState(false);\n    const [page, setPage] = useState(1);\n    const [pageSize] = useState(10);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsStore }) =>SystemsStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore.metadata\n    );\n    const isLoading =  useSelector(({ SystemsStore }) => SystemsStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const systemsListColumns = [\n        {\n            key: 'display_name',\n            title: props.intl.formatMessage(messages.systemsColumnHeaderName),\n            composed: ['facts.os_release', 'display_name']\n        },\n        {\n            key: 'cve_count',\n            title: props.intl.formatMessage(messages.systemsColumnHeaderCveCount)\n        }\n    ];\n\n    const params = () => ({ filter,  page_size: pageSize, opt_out: optOut, page });\n\n    useEffect(() => {\n        if (Object.keys(parameters).length !== 0 && parameters.constructor === Object) {\n            dispatch(fetchSystems(parameters));\n        }\n    }, [parameters, dispatch]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(\n                    systemsListColumns\n                )\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    useEffect(()=>{\n        if (!isLoading) {\n            dispatch(fetchSystems({ ...params() }));\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [optOut]);\n\n    const onRefresh = ({ page, per_page: perPage, opt_out: optOut, filter }) => {\n        if (metadata.page !== page || metadata.page_size !== perPage) {\n            dispatch(changeSystemsParams({ page, per_page: perPage, opt_out: optOut || params().opt_out,\n                filter: (filter === undefined) ? params().filter : filter }));\n        }\n\n        if (metadata.total_items <= perPage && inventory.current) {\n            inventory.current.onRefreshData({ page, perPage, opt_out: optOut || params().opt_out, filter });\n        }\n\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !optOut)).then(() => {\n                dispatch(fetchSystems({ filter, opt_out: optOut, page_size: pageSize, page: 1 }));\n                optOut === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: props.intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: props.intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        ),\n                        description: props.intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={onRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, optOut)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            params= {params}\n                            systems = {systems}\n                            parameters = {parameters}\n                            selectedHosts = {selectedHosts || []}\n                            setSelectedHosts = {setSelectedHosts}\n                            setOptOut = { setOptOut }\n                            setFilter ={setFilter}\n                            setPage ={setPage}\n                            doOptOut = { doOptOut}\n                            onRefresh = {onRefresh}\n                            handleSelect = {handleSelect}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsHook.propTypes  = {\n    location: propTypes.object,\n    intl: propTypes.any\n};\nexport default injectIntl(SystemsHook);\n"],"sourceRoot":""}