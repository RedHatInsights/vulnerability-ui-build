{"version":3,"sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Systems/Systems.scss?4fb1","webpack:///./src/Components/SmartComponents/Systems/Systems.scss","webpack:///./src/Components/SmartComponents/Systems/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["init","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","filter","key","map","item","selected","some","system","id","selectEntities","myRows","slice","inventoryEntitiesReducer","action","type","payload","row","isOpen","content","module","i","options","transform","undefined","locals","exports","push","SystemsTableToolbar","props","useState","middlewareListener","addNew","on","callback","newSelected","data","selectedHosts","handleSelect","onSelect","handleRefresh","page","pageSize","page_size","optOut","opt_out","meta","systems","config","params","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","setFilter","history","createUrlParams","kebabOptions","kebabAction","intl","formatMessage","messages","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","doOptOut","length","kebabHideExcludedSystems","kebabShowExcludedSystems","setOptOut","setSelectedHosts","setPage","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","fetchSystems","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","actionsConfig","actions","dropdownProps","className","filterConfig","searchFilter","systemsSearchName","searchFilterByName","f","onRefresh","activeFiltersConfig","filters","buildActiveFilters","parameters","onDelete","e","removeFilters","exportConfig","downloadReport","format","DownloadReport","exec","propTypes","dataShape","func","array","any","object","withRouter","injectIntl","SystemsHook","location","InventoryTable","setInventoryTable","parse","search","inventory","React","createRef","dispatch","useDispatch","useSelector","SystemsStore","metadata","isLoading","useMemo","attributes","cveCount","cve_count","rest","inventory_id","useEffect","constructor","loadInventory","a","insights","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","SYSTEMS_HEADER","getStore","selectMultipleEntities","perPage","per_page","changeSystemsParams","total_items","current","onRefreshData","systemId","optOutSystemsAction","then","addNotification","variant","title","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","VulnerabilityHeader","showBreadcrumb","ref","total","isLoaded","hasCheckbox","systemTableRowActions","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        default:\n            return state;\n    }\n};\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".systems-toolbar > div {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.system-filter-chips {\\n  order: 6;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import './Systems.scss';\nimport qs from 'query-string';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { kebabAction, exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = (props) => {\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...props.selectedHosts]\n            : props.selectedHosts.filter(item => item !== payload.data.id);\n\n        props.handleSelect(false, newSelected);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const [selectListener] = useState(middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    }));\n\n    const createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = ['filter', 'page', 'page_size'];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n\n        props.setFilter(allParams.filter);\n        props.history.push('?' + queryString);\n    };\n\n    const downloadReport = format => {\n        let params = { ...props.params };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleRefresh = ({ page, page_size: pageSize, filter, opt_out: optOut }, callback) => {\n        const { meta } = props.systems;\n        if (meta.page !== page || meta.page_size !== pageSize) {\n            const config = {\n                page,\n                page_size: pageSize || meta.page_size,\n                filter,\n                opt_out: optOut || props.params().opt_out\n            };\n            createUrlParams(config);\n            if (callback) {return callback(config);}\n        }\n    };\n\n    const handleOptOut = () => {\n        props.setOptOut(!props.params().opt_out);\n        props.setSelectedHosts([]);\n        props.setPage(1);\n    };\n\n    const kebabOptions = [\n        '',\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabResumeAnalysis)\n            : props.intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n        () => props.doOptOut(), !props.selectedHosts.length),\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabHideExcludedSystems)\n            : props.intl.formatMessage(messages.kebabShowExcludedSystems),\n        () => handleOptOut())\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: props.selectedHosts,\n        selectorHandler: props.handleSelect,\n        items: props.systems,\n        fetchResource: ops =>handleRefresh(ops, (config) => fetchSystems(config))\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: props.selectedHosts.length,\n                items: selectOptions.items,\n                checked: Boolean(props.selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { className: 'custom-class' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        props.params().filter,\n                        (f) => handleRefresh(f, props.onRefresh)\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(props.parameters),\n                onDelete: (e, i) => removeFilters(i, (f) => handleRefresh(f, props.onRefresh))\n            }}\n            exportConfig={exportConfig({ downloadReport })}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    params: propTypes.func,\n    setPage: propTypes.func,\n    setFilter: propTypes.func,\n    setOptOut: propTypes.func,\n    selectedHosts: propTypes.array,\n    setSelectedHosts: propTypes.func,\n    doOptOut: propTypes.func,\n    onRefresh: propTypes.any,\n    parameters: propTypes.object,\n    handleSelect: propTypes.func,\n    history: propTypes.object,\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import qs from 'query-string';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as pfReactTable from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { changeSystemsParams, selectMultipleEntities } from '../../../Store/Actions/Actions';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsHook = ({ intl, location }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [filter, setFilter] = useState(qs.parse(location.search).filter);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [optOut, setOptOut] = useState(false);\n    const [page, setPage] = useState(1);\n    const [pageSize] = useState(10);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsStore }) =>SystemsStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore.metadata\n    );\n    const isLoading =  useSelector(({ SystemsStore }) => SystemsStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const params = () => ({ filter,  page_size: pageSize, opt_out: optOut, page });\n\n    useEffect(() => {\n        if (Object.keys(parameters).length !== 0 && parameters.constructor === Object) {\n            dispatch(fetchSystems(parameters));\n        }\n    }, [parameters, dispatch]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    useEffect(()=>{\n        if (!isLoading) {\n            dispatch(fetchSystems({ ...params() }));\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [optOut]);\n\n    const onRefresh = ({ page, per_page: perPage, opt_out: optOut, filter }) => {\n        if (metadata.page !== page || metadata.page_size !== perPage) {\n            dispatch(changeSystemsParams({ page, per_page: perPage, opt_out: optOut || params().opt_out,\n                filter: (filter === undefined) ? params().filter : filter }));\n        }\n\n        if (metadata.total_items <= perPage && inventory.current) {\n            inventory.current.onRefreshData({ page, perPage, opt_out: optOut || params().opt_out, filter });\n        }\n\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !optOut)).then(() => {\n                dispatch(fetchSystems({ filter, opt_out: optOut, page_size: pageSize, page: 1 }));\n                optOut === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={onRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, optOut)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            params= {params}\n                            systems = {systems}\n                            parameters = {parameters}\n                            selectedHosts = {selectedHosts || []}\n                            setSelectedHosts = {setSelectedHosts}\n                            setOptOut = { setOptOut }\n                            setFilter ={setFilter}\n                            setPage ={setPage}\n                            doOptOut = { doOptOut}\n                            onRefresh = {onRefresh}\n                            handleSelect = {handleSelect}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsHook.propTypes  = {\n    location: propTypes.object,\n    intl: propTypes.any\n};\nexport default injectIntl(SystemsHook);\n"],"sourceRoot":""}