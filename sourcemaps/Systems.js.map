{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","sort","show_all","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEDetailsPageStore","type","ActionTypes","setIn","CVEsStore","cveName","data","SystemsPageStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","messages","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","propTypes","PropType","shape","object","details","resulotion","isRequired","string","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","a","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","item","attributes","status_name","children","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","STATUS_OPTIONS","find","option","parseInt","value","label","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","editBusinessRisk","onClick","event","rowId","rowData","showBusinessRiskModal","justification","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","SearchFilter","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","onChange","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","key","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","array","multiValue","split","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","columns","rows","entities","selectedRows","modifyInventory","loaded","lastSeenColumn","transforms","sortable","selected","selectEntities","myRows","inventoryEntitiesReducer","row","SystemsTableToolbar","systems","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","kebabOptions","kebabExcludeVulnerabilityAnalysis","isDisabled","kebabHideExcludedSystems","kebabShowExcludedSystems","selectOptions","ops","PrimaryToolbar","bulkSelect","checked","Boolean","actionsConfig","actions","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","onDelete","e","i","DownloadReport","dataShape","func","any","withRouter","injectIntl","SystemsPage","InventoryTable","setInventoryTable","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","urlParamsAllowed","setUrlParamsAllowed","inventory","createRef","dispatch","useDispatch","useSelector","useMemo","cveCount","cve_count","rest","inventory_id","loadInventory","insights","ReactRedux","react","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","SYSTEMS_HEADER","getStore","config","current","systemId","addNotification","variant","systemsExcludedNotification","systemsResumedNotificationTitle","systemsResumedNotificationBody","VulnerabilityHeader","systemsHeader","showBreadcrumb","Main","tableProps","canSelectAll","onSort","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sortBy","createSortBy","ref","total","onRefresh","pageSize","per_page","onRefreshData","isLoaded","hasCheckbox","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editBusinessRisk} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showBusinessRiskModal([\n                {\n                    id: rowData.id,\n                    business_risk_id: rowData.business_risk_id,\n                    justification: rowData.business_risk_justification\n                }\n            ])\n    },\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_justification\n                }\n            ])\n    }\n];\n\nexport const systemCveTableRowActions = (methods, entity) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    display_name: entity.display_name,\n                    status_id: rowData.status_id,\n                    cve_status_id: rowData.cve_status_id,\n                    justification: rowData.status_justification,\n                    cve_justification: rowData.cve_status_justification\n                }\n            ],\n            entity\n            )\n    }\n];\n\nexport const systemExposedTableRowActions = (showStatusModal, cve) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) => {\n            showStatusModal(\n                [{\n                    id: cve.id,\n                    status_id: cve.status_id,\n                    justification: cve.justification\n                }],\n                [{\n                    id: rowData.id,\n                    display_name: rowData.display_name,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_text\n                }]\n            );\n        }\n    }\n];\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import { sortable } from '@patternfly/react-table';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current) {\n            apply(urlParameters);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        tableProps={{\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy()\n                        }}\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.opt_out)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n"],"sourceRoot":""}