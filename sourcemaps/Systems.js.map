{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["Systems","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default","call","checkItem","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8___default","onRefresh","state","InventoryCmp","react__WEBPACK_IMPORTED_MODULE_15___default","a","createElement","removeListener","columns","key","title","composed","isTime","_this2","setHeader","breadcrumbs","to","paths","vulnerabilities","isActive","fetchData","setState","middlewareListener","addNew","on","callback","fetchInventory","insights","loadInventory","react","React","reactRouterDom","reactCore","reactIcons","pfReact","PaginationRow","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_1___default","inventoryEntitiesReducer","InventoryTable","value","newList","systemList","selected","page","_ref2","perPage","per_page","meta","systems","page_size","_this$props$systems","data","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_10__","_VulnerabilityHeader_VulnerabilityHeader__WEBPACK_IMPORTED_MODULE_26__","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_12__","hasCheckbox","total","total_items","items","map","item","id","attributes","inventory_id","Component","propTypes","func","dataShape","withRouter","connect","sAllSystems","header","dispatchAction","options","fetchSystems"],"mappings":"yaAmBMA,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACfE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,UAAYN,EAAKM,UAAUC,KAAfC,QAAAR,KACjBA,EAAKS,UAAYT,EAAKS,UAAUF,KAAfC,QAAAR,KACjBA,EAAKU,MAAQ,CACTC,aAAc,kBAAMC,EAAAC,EAAAC,cAAA,0BACpBC,eAAgB,aAChBC,QAAS,CACL,CAAEC,IAAK,eAAgBC,MAAO,OAAQC,SAAU,CAAC,mBAAoB,SACrE,CAAEF,IAAK,YAAaC,MAAO,QAC3B,CAAED,IAAK,UAAWC,MAAO,YAAaE,QAAQ,KAVvCpB,mEAeC,IAAAqB,EAAAnB,KAChBA,KAAKH,MAAMuB,UAAU,CACjBC,YAAa,CAAC,CAAEL,MAAO,gBAAiBM,GAAIC,IAAMC,iBAAmB,CAAER,MAAO,UAAWS,UAAU,MAEvGzB,KAAKH,MAAM6B,YACX1B,KAAK2B,SAAS,CACVd,eAAgBe,IAAmBC,OAAO,CACtCC,GAAI,wBACJC,SAAU,kBAAMZ,EAAKa,2LAM4CC,SAASC,cAAc,CAC5FC,MAAOC,IACPC,iBACAC,YACAC,aACAC,QAAS,CAAEC,qCALPC,uBAAoBC,sBAAmBC,oBAO/CC,IAAgBC,SAAhBC,IAAA,GACOJ,EAAkBK,YAAyBhD,KAAKQ,MAAMM,UACtD8B,MAGP5C,KAAK2B,SAAS,CACVlB,aAAciC,IAAqBO,iBAEvCjD,KAAKQ,MAAMK,qJAGLE,EAAKmC,GACX,IAAIC,EAAUnD,KAAKQ,MAAM4C,WACzBD,EAAQpC,GAAKsC,SAAWH,EACxBlD,KAAK2B,SAAS,CAAEyB,WAAYD,yCAGO,IAA3BG,EAA2BC,EAA3BD,KAAgBE,EAAWD,EAArBE,SACNC,EAAS1D,KAAKH,MAAM8D,QAApBD,KACJA,EAAKJ,OAASA,GAAQI,EAAKE,YAAcJ,GACzCxD,KAAKH,MAAM6B,UAAU,CACjB4B,KAAMI,EAAKE,YAAcJ,EAAU,EAAIF,EACvCM,UAAWJ,qCAKd,IACG/C,EAAiBT,KAAKQ,MAAtBC,aADHoD,EAEkB7D,KAAKH,MAAM8D,QAA1BG,EAFHD,EAEGC,KAAMJ,EAFTG,EAESH,KACd,OACIhD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACIrD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAqBhD,MAAM,YAC3BN,EAAAC,EAAAC,cAACqD,EAAA,KAAD,KACIvD,EAAAC,EAAAC,cAACH,EAAD,CACIyD,aAAa,EACbZ,KAAMI,EAAKJ,KACXa,MAAOT,EAAKU,YACZZ,QAASE,EAAKE,UACdrD,UAAWP,KAAKO,UAChB8D,MAAOP,EAAKQ,IAAI,SAAAC,GAAI,OAAAxB,IAAA,CAChByB,GAAID,EAAKE,WAAWC,cACjBH,EAAKE,yBA/EdrC,IAAMuC,WAwF5B/E,EAAQgF,UAAY,CAChBlD,UAAWkD,IAAUC,KACrBzD,UAAWwD,IAAUC,KACrBlB,QAASmB,KAgBEC,sBACXC,kBAdJ,SAAyBxE,GACrB,MAAO,CACHmD,QAASsB,YAAYzE,KAIF,WACvB,MAAO,CACHY,UAAW,SAAA8D,GAAM,OAAIC,YAAe/D,YAAU8D,KAC9CxD,UAAW,SAAA0D,GAAO,OAAID,YAAeE,YAAaD,OAKtDJ,CAGEpF","file":"js/Systems.js","sourcesContent":["import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@red-hat-insights/insights-frontend-components';\nimport { PaginationRow } from 'patternfly-react';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, setHeader } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { sAllSystems } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport { paths } from '../../../Utilities/Routes';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass Systems extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.onRefresh = this.onRefresh.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            removeListener: () => {},\n            columns: [\n                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'fqdn'] },\n                { key: 'cve_count', title: 'CVEs' },\n                { key: 'updated', title: 'Last Seen', isTime: true }\n            ]\n        };\n    }\n\n    componentDidMount() {\n        this.props.setHeader({\n            breadcrumbs: [{ title: 'Vulnerability', to: paths.vulnerabilities }, { title: 'Systems', isActive: true }]\n        });\n        this.props.fetchData();\n        this.setState({\n            removeListener: middlewareListener.addNew({\n                on: 'SYSTEMS_ALL_FULFILLED',\n                callback: () => this.fetchInventory()\n            })\n        });\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReact: { PaginationRow }\n        });\n        ReducerRegistry.register({\n            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryTable\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    onRefresh({ page, per_page: perPage }) {\n        const { meta } = this.props.systems;\n        if (meta.page !== page || meta.page_size !== perPage) {\n            this.props.fetchData({\n                page: meta.page_size !== perPage ? 1 : page,\n                page_size: perPage\n            });\n        }\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data, meta } = this.props.systems;\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"Systems\" />\n                <Main>\n                    <InventoryCmp\n                        hasCheckbox={false}\n                        page={meta.page}\n                        total={meta.total_items}\n                        perPage={meta.page_size}\n                        onRefresh={this.onRefresh}\n                        items={data.map(item => ({\n                            id: item.attributes.inventory_id,\n                            ...item.attributes\n                        }))}\n                    />\n                </Main>\n            </Page>\n        );\n    }\n}\n\nSystems.propTypes = {\n    fetchData: propTypes.func,\n    setHeader: propTypes.func,\n    systems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        systems: sAllSystems(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header)),\n        fetchData: options => dispatchAction(fetchSystems(options))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Systems)\n);\n"],"sourceRoot":""}