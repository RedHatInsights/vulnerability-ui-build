{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Utilities/interceptors.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","instance","axios","create","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","ReadOnlyNotification","err","isCancel","errObject","data","errors","api","GitApi","undefined","getCveDetails","synopsis","getSystemDetails","system","getAffectedSystemsByCVE","apiProps","parameterArray","constructParameters","getAffectedSystemsByCve","getSystems","getSystemsList","getCveListByAccount","getCveList","optOutSystem","setSystemOptOut","getCveListBySystem","Object","keys","forEach","key","params","map","item","setSystemCveStatus","setStatus","optOutSystems","systems","optOut","opt_out","inventory_id","Array","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","getAffectedSystemsIdsByCve","getSystemsIds","getCveIdsList","getCveIdsBySystem","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","status_id","cveDetails","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","action","newState","slice","isArray","includes","splice","indexOf","push","isOpen","cves","length","cve","index","findIndex","element","id","metadata","limit","offet","filter","sort","show_all","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEDetailsPageStore","type","ActionTypes","setIn","CVEsStore","cveName","SystemsPageStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","APIHelper","fetchSystems","options","fetchCveDetails","fetchSystemDetails","noError","fetchCveListByAccount","optOutSystemAction","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","clearInventoryStore","clearCVEsStore","filename","toISOString","split","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","a","data_format","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","replace","FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","ExclamationCircleIcon","color","somethingWrong","tryRefreshing","ifProblemPersists","values","statusPageLink","statusPage","history","back","returnPreviousPage","InsightsSystemRule","rule","TextContent","className","Text","h3","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","shape","object","details","resulotion","isRequired","string","InsightsNoSystemRule","exposedSystemNoRules","exposedSystemNoRulesInfo","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","attributes","status_name","children","createCveDetailsPage","asMutable","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","find","option","value","business_risk_id","toString","label","business_risk_justification","business_risk_text","STATUS_OPTIONS","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","rowIndex","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","justification","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_status_id","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","SearchFilter","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","onChange","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","array","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","columns","rows","entities","selectedRows","modifyInventory","loaded","lastSeenColumn","transforms","sortable","selected","selectEntities","myRows","inventoryEntitiesReducer","row","SystemsTableToolbar","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","kebabOptions","kebabExcludeVulnerabilityAnalysis","isDisabled","kebabHideExcludedSystems","kebabShowExcludedSystems","selectOptions","ops","PrimaryToolbar","bulkSelect","checked","Boolean","actionsConfig","actions","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","onDelete","e","i","DownloadReport","dataShape","any","withRouter","injectIntl","SystemsPage","InventoryTable","setInventoryTable","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","urlParamsAllowed","setUrlParamsAllowed","isFirstMount","setIsFirstMount","inventory","createRef","dispatch","useDispatch","useSelector","useMemo","cveCount","cve_count","rest","loadInventory","insights","ReactRedux","react","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","pfReact","reactCore","inventoryConnector","mergeWithEntities","mergeWithDetail","SYSTEMS_HEADER","getStore","config","clearNotifications","current","systemId","addNotification","systemsExcludedNotification","systemsResumedNotificationTitle","systemsResumedNotificationBody","VulnerabilityHeader","systemsHeader","showBreadcrumb","Main","tableProps","isStickyHeader","canSelectAll","onSort","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sortBy","createSortBy","ref","total","onRefresh","pageSize","per_page","onRefreshData","isLoaded","hasCheckbox","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n","let BASE_ROUTE = '/api/vulnerability/';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis, apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule',\n        'rule_name'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystems(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function optOutSystem(system, status) {\n    let result = api.setSystemOptOut(system, status);\n    return result;\n}\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve(synopsis, apiProps) {\n    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_DETAILS + '_REJECTED':\n            newState = state.setIn(['cveDetails', 'error'], true);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n        case ActionTypes.FETCH_SYSTEMS + '_REJECTED':\n            newState.error = true;\n            return newState;\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.error = true;\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () => ({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () => ({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, ExclamationCircleIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={ExclamationCircleIcon} color={'var(--pf-global--danger-color--100)'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.somethingWrong} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.tryRefreshing} />\n                <br/><br/>\n                <FormattedMessage {...messages.ifProblemPersists}\n                    values = {{\n                        statusPageLink:\n                                <a href=\"https://status.redhat.com\" target=\"__blank\" rel=\"noopener noreferrer\">\n                                    <FormattedMessage {...messages.statusPage} />\n                                </a>\n                    }}\n                />\n                <br/><br/>\n                <Button variant=\"primary\" onClick={ () => history.back() }>\n                    <FormattedMessage {...messages.returnPreviousPage} />\n                </Button>\n\n            </EmptyStateBody>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { sortable } from '@patternfly/react-table';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport { reactCore } from '@redhat-cloud-services/frontend-components-utilities/files/inventoryDependencies';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification, clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport { GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstMount, setIsFirstMount] = useState(true);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const error = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.error\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            },\n            pfReact: reactCore\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    useEffect(() => {\n        dispatch(clearNotifications());\n    }, [error, dispatch]);\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current && isFirstMount) {\n            apply(urlParameters);\n            setIsFirstMount(false);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    const processError = () => {\n        dispatch(clearNotifications());\n        return GenericError;\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { InventoryTable && !error && (\n                    <InventoryTable\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy()\n                        }}\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.opt_out)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                ) || processError() }\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n"],"sourceRoot":""}