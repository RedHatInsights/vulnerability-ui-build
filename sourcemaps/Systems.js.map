{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["Systems","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default","call","filterChange","debounce","value","page_size","systems","meta","setState","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_2___default","state","filter","fetchData","checkItem","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8___default","onRefresh","InventoryCmp","react__WEBPACK_IMPORTED_MODULE_16___default","a","createElement","removeListener","columns","key","title","composed","isTime","setHeader","breadcrumbs","to","paths","vulnerabilities","isActive","fetchInventory","insights","loadInventory","react","React","reactRouterDom","reactCore","reactIcons","pfReact","PaginationRow","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","inventoryEntitiesReducer","InventoryTable","newList","systemList","selected","page","_ref2","perPage","per_page","_this$props$systems","data","_patternfly_react_core__WEBPACK_IMPORTED_MODULE_10__","_VulnerabilityHeader_VulnerabilityHeader__WEBPACK_IMPORTED_MODULE_27__","_red_hat_insights_insights_frontend_components__WEBPACK_IMPORTED_MODULE_12__","hasCheckbox","total","total_items","items","map","item","id","attributes","inventory_id","onFilterChange","buttonTitle","placeholder","Component","propTypes","func","dataShape","withRouter","connect","sAllSystems","header","dispatchAction","options","fetchSystems"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main, SimpleTableFilter } from '@red-hat-insights/insights-frontend-components';\nimport debounce from 'lodash/debounce';\nimport { PaginationRow } from 'patternfly-react';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, setHeader } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { sAllSystems } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { paths } from '../../../Utilities/Routes';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\n/*eslint camelcase: 0*/\n\nclass Systems extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.onRefresh = this.onRefresh.bind(this);\n        this.filterChange = this.filterChange.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            filter: '',\n            removeListener: () => {},\n            columns: [\n                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'fqdn'] },\n                { key: 'cve_count', title: 'CVEs' },\n                { key: 'updated', title: 'Last Seen', isTime: true }\n            ]\n        };\n    }\n\n    componentDidMount() {\n        this.props.setHeader({\n            breadcrumbs: [{ title: 'Vulnerability', to: paths.vulnerabilities }, { title: 'Systems', isActive: true }]\n        });\n        this.props.fetchData();\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReact: { PaginationRow }\n        });\n        ReducerRegistry.register({\n            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryTable\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    filterChange = debounce(value => {\n        const { meta } = this.props.systems;\n        const { page_size } = meta;\n        this.setState({ ...this.state, filter: value }, () => this.props.fetchData({ page_size, filter: this.state.filter }));\n    }, 400);\n\n    onRefresh({ page, per_page: perPage }) {\n        const { meta } = this.props.systems;\n        if (meta.page !== page || meta.page_size !== perPage) {\n            this.props.fetchData({\n                page: meta.page_size !== perPage ? 1 : page,\n                page_size: perPage,\n                filter: this.state.filter\n            });\n        }\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data, meta } = this.props.systems;\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"Systems\" />\n                <Main>\n                    <InventoryCmp\n                        hasCheckbox={false}\n                        page={meta.page}\n                        total={meta.total_items}\n                        perPage={meta.page_size}\n                        onRefresh={this.onRefresh}\n                        items={data.map(item => ({\n                            id: item.attributes.inventory_id,\n                            ...item.attributes\n                        }))}\n                    >\n                        <SimpleTableFilter\n                            onFilterChange={this.filterChange}\n                            buttonTitle={null}\n                            placeholder=\"Find a system by UUID\"\n                        />\n                    </InventoryCmp>\n                </Main>\n            </Page>\n        );\n    }\n}\n\nSystems.propTypes = {\n    fetchData: propTypes.func,\n    setHeader: propTypes.func,\n    systems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        systems: sAllSystems(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header)),\n        fetchData: options => dispatchAction(fetchSystems(options))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Systems)\n);\n"],"sourceRoot":""}