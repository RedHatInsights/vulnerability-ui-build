{"version":3,"sources":["webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Systems/Systems.scss?4fb1","webpack:///./src/Components/SmartComponents/Systems/Systems.scss","webpack:///./src/Components/SmartComponents/Systems/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","multiRow","selectedItemsArray","Array","from","selectedItemsCount","length","meta","data","selectPageNumber","isArray","itemLabel","number","handleUnselectAll","handleSelectAll","payload","page_size","total_items","page","then","map","item","id","handleOnCheckboxChange","title","intl","formatMessage","messages","selectNone","onClick","selectPage","collectedItems","union","filter","selectAll","SearchFilter","placeholder","search","apply","React","useState","searchValue","setSearchValue","debounce","undefined","handleSearch","useEffect","type","conditionalFilterType","text","label","searchLabel","filterValues","onChange","event","value","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","methods","kebabExportAsJson","kebabExportAsCsv","onSelect","fileType","downloadReport","kebabAction","callback","isDisabled","color","variant","isInline","key","style","buildActiveFilters","currentFilters","filterChips","Object","keys","FILTERS","reduce","array","includes","paramValues","split","filteredValues","values","push","object","name","category","chips","removeFilters","obj","some","chip","join","init","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","selected","system","selectEntities","myRows","slice","inventoryEntitiesReducer","action","content","module","i","options","transform","locals","exports","SystemsTableToolbar","props","middlewareListener","addNew","on","newSelected","selectedHosts","handleSelect","createUrlParams","allParams","params","allowedParams","forEach","queryString","qs","stringify","setFilter","history","handleRefresh","pageSize","optOut","opt_out","systems","config","kebabOptions","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","doOptOut","kebabHideExcludedSystems","kebabShowExcludedSystems","setOptOut","setSelectedHosts","setPage","selectOptions","ops","fetchSystems","bulkSelect","count","checked","Boolean","actionsConfig","actions","dropdownProps","className","filterConfig","searchFilter","f","onRefresh","activeFiltersConfig","filters","parameters","onDelete","e","format","date","Date","toISOString","replace","data_format","Number","MAX_SAFE_INTEGER","response","JSON","downloadFile","propTypes","dataShape","func","any","withRouter","injectIntl","SystemsHook","InventoryTable","setInventoryTable","parse","location","inventory","createRef","dispatch","useDispatch","useSelector","SystemsStore","metadata","isLoading","useMemo","attributes","cveCount","cve_count","rest","inventory_id","systemsListColumns","systemsColumnHeaderName","composed","systemsColumnHeaderCveCount","constructor","loadInventory","a","insights","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","getStore","selectMultipleEntities","per_page","changeSystemsParams","current","onRefreshData","systemId","optOutSystemsAction","addNotification","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","VulnerabilityHeader","showBreadcrumb","ref","total","isLoaded","hasCheckbox","systemTableRowActions","isChecked"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n    const itemLabel = number => (number > 1 && 'items') || 'item';\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage)} (${selectPageNumber} ${itemLabel(selectPageNumber)})`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll)} (${meta.total_items ? meta.total_items : 0} \n                    ${itemLabel(meta.total_items)})`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(messages.searchLabel),\n        filterValues: {\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder,\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","/* eslint-disable camelcase */\nimport React from 'react';\nimport messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { Button } from '@patternfly/react-core';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { label: intl.formatMessage(messages.kebabExportAsJson) },\n    { label: intl.formatMessage(messages.kebabExportAsCsv) },\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const  kebabAction = (label, callback, isDisabled =  false) =>{\n    const color = { color: (isDisabled ? '' : 'black') };\n    return (\n        <Button variant=\"link\" isInline key= {label} isDisabled={isDisabled}  style={color} onClick={callback}>\n            {label}\n        </Button>\n    );\n};\n\nexport const buildActiveFilters = (currentFilters) =>{\n    const { filter } = currentFilters;\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n            const paramValues = currentFilters[key].split(',');\n            const filteredValues = paramValues.reduce((values, filter) =>{\n                values.push(FILTERS[key].items.reduce((object, item) => {\n\n                    if (filter === item.value) {\n                        object.name = item.label;\n                        object.value = item.value;\n                    }\n\n                    return object;\n                }, {}));\n\n                return values;\n            }, []);\n\n            array.push({ key, paramValues, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push({ key: 'filter', category: intl.formatMessage(messages.searchLabel), chips: [{ name: filter }] });\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.paramValues && item.paramValues.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.paramValues.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","// Initial State\nexport const init = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        const lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n\n        default:\n            return state;\n    }\n};\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./Systems.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".systems-toolbar > div {\\n  margin-right: var(--pf-global--spacer--sm); }\\n\\n.space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n.system-filter-chips {\\n  order: 6;\\n  flex-basis: 100%; }\\n\", \"\"]);\n\n// exports\n","import './Systems.scss';\nimport qs from 'query-string';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport { kebabAction, exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\n\nconst SystemsTableToolbar = (props) => {\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...props.selectedHosts]\n            : props.selectedHosts.filter(item => item !== payload.data.id);\n\n        props.handleSelect(false, newSelected);\n    };\n\n    // eslint-disable-next-line no-unused-vars\n    const [selectListener] = useState(middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    }));\n\n    const createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = ['filter', 'page', 'page_size'];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n\n        props.setFilter(allParams.filter);\n        props.history.push('?' + queryString);\n    };\n\n    const downloadReport = format => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        const { payload } = fetchSystems({\n            opt_out: props.params().opt_out,\n            filter: props.params().filter,\n            data_format: format,\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER\n        });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_systems--${date}`, format);\n            });\n    };\n\n    const handleRefresh = ({ page, page_size: pageSize, filter, opt_out: optOut }, callback) => {\n        const { meta } = props.systems;\n        if (meta.page !== page || meta.page_size !== pageSize) {\n            const config = {\n                page,\n                page_size: pageSize || meta.page_size,\n                filter,\n                opt_out: optOut || props.params().opt_out\n            };\n            createUrlParams(config);\n            if (callback) {return callback(config);}\n        }\n    };\n\n    const handleOptOut = () => {\n        props.setOptOut(!props.params().opt_out);\n        props.setSelectedHosts([]);\n        props.setPage(1);\n    };\n\n    const kebabOptions = [\n        '',\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabResumeAnalysis)\n            : props.intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n        () => props.doOptOut(), !props.selectedHosts.length),\n        kebabAction(props.params().opt_out ? props.intl.formatMessage(messages.kebabHideExcludedSystems)\n            : props.intl.formatMessage(messages.kebabShowExcludedSystems),\n        () => handleOptOut())\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: props.selectedHosts,\n        selectorHandler: props.handleSelect,\n        items: props.systems,\n        fetchResource: ops =>handleRefresh(ops, (config) => fetchSystems(config))\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: props.selectedHosts.length,\n                items: selectOptions.items,\n                checked: Boolean(props.selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions,\n                dropdownProps: { className: 'custom-class' }\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        props.intl.formatMessage(messages.searchLabel),\n                        props.params().filter,\n                        (f) => handleRefresh(f, props.onRefresh)\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(props.parameters),\n                onDelete: (e, i) => removeFilters(i, (f) => handleRefresh(f, props.onRefresh))\n            }}\n            exportConfig={exportConfig({ downloadReport })}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    params: propTypes.func,\n    setPage: propTypes.func,\n    setFilter: propTypes.func,\n    setOptOut: propTypes.func,\n    selectedHosts: propTypes.array,\n    setSelectedHosts: propTypes.func,\n    doOptOut: propTypes.func,\n    onRefresh: propTypes.any,\n    parameters: propTypes.object,\n    handleSelect: propTypes.func,\n    history: propTypes.object,\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import qs from 'query-string';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as pfReactTable from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { changeSystemsParams, selectMultipleEntities } from '../../../Store/Actions/Actions';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsHook = (props) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [filter, setFilter] = useState(qs.parse(props.location.search).filter);\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n    const [optOut, setOptOut] = useState(false);\n    const [page, setPage] = useState(1);\n    const [pageSize] = useState(10);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsStore }) => SystemsStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsStore }) =>SystemsStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsStore }) => SystemsStore.metadata\n    );\n    const isLoading =  useSelector(({ SystemsStore }) => SystemsStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const systemsListColumns = [\n        {\n            key: 'display_name',\n            title: props.intl.formatMessage(messages.systemsColumnHeaderName),\n            composed: ['facts.os_release', 'display_name']\n        },\n        {\n            key: 'cve_count',\n            title: props.intl.formatMessage(messages.systemsColumnHeaderCveCount)\n        }\n    ];\n\n    const params = () => ({ filter,  page_size: pageSize, opt_out: optOut, page });\n\n    useEffect(() => {\n        if (Object.keys(parameters).length !== 0 && parameters.constructor === Object) {\n            dispatch(fetchSystems(parameters));\n        }\n    }, [parameters, dispatch]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(\n                    systemsListColumns\n                )\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    useEffect(()=>{\n        if (!isLoading) {\n            dispatch(fetchSystems({ ...params() }));\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [optOut]);\n\n    const onRefresh = ({ page, per_page: perPage, opt_out: optOut, filter }) => {\n        if (metadata.page !== page || metadata.page_size !== perPage) {\n            dispatch(changeSystemsParams({ page, per_page: perPage, opt_out: optOut || params().opt_out,\n                filter: (filter === undefined) ? params().filter : filter }));\n        }\n\n        if (metadata.total_items <= perPage && inventory.current) {\n            inventory.current.onRefreshData({ page, perPage, opt_out: optOut || params().opt_out, filter });\n        }\n\n    };\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !optOut)).then(() => {\n                dispatch(fetchSystems({ filter, opt_out: optOut, page_size: pageSize, page: 1 }));\n                optOut === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: props.intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: props.intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: selectedHosts.length || (systemId && 1) || 0 }\n                        ),\n                        description: props.intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={onRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, optOut)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            params= {params}\n                            systems = {systems}\n                            parameters = {parameters}\n                            selectedHosts = {selectedHosts || []}\n                            setSelectedHosts = {setSelectedHosts}\n                            setOptOut = { setOptOut }\n                            setFilter ={setFilter}\n                            setPage ={setPage}\n                            doOptOut = { doOptOut}\n                            onRefresh = {onRefresh}\n                            handleSelect = {handleSelect}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsHook.propTypes  = {\n    location: propTypes.object,\n    intl: propTypes.any\n};\nexport default injectIntl(SystemsHook);\n"],"sourceRoot":""}