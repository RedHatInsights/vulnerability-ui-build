{"version":3,"sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/Systems/Systems.js"],"names":["init","columns","rows","entities","inventoryEntitiesReducer","state","arguments","length","undefined","type","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_0___default","modifyInventory","Systems","props","_this","_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default","this","_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default","call","checkItem","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8___default","InventoryCmp","react__WEBPACK_IMPORTED_MODULE_14___default","a","createElement","removeListener","key","title","composed","isTime","_this2","fetchData","setState","middlewareListener","addNew","on","callback","fetchInventory","insights","loadInventory","react","React","reactRouterDom","reactCore","reactIcons","pfReact","PaginationRow","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","_babel_runtime_helpers_objectSpread__WEBPACK_IMPORTED_MODULE_1___default","InventoryTable","value","newList","systemList","selected","data","systems","hasCheckbox","items","map","item","id","attributes","inventory_id","Component","propTypes","func","dataShape","withRouter","connect","sAllSystems","dispatchAction","fetchSystems"],"mappings":"gJACMA,EAAO,CACTC,QAAS,GACTC,KAAM,GACNC,SAAU,IAQP,IAAMC,EAA2B,SAAAH,GAAO,OAAI,WAA0B,IAAzBI,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBN,EACxD,QADyEM,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC1DC,MACX,IAAK,0BACD,OAPZ,SAAyBR,EAASI,GAC9B,OAAAK,IAAA,GAAYL,EAAZ,CAAmBJ,YAMJU,CAAgBV,EAASI,GAEpC,QACI,OAAOA,0VCHbO,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACfE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KACDO,UAAYN,EAAKM,UAAUC,KAAfC,QAAAR,KACjBA,EAAKT,MAAQ,CACTkB,aAAc,kBAAMC,EAAAC,EAAAC,cAAA,0BACpBC,eAAgB,aAChB1B,QAAS,CACL,CAAE2B,IAAK,eAAgBC,MAAO,OAAQC,SAAU,CAAC,mBAAoB,SACrE,CAAEF,IAAK,YAAaC,MAAO,QAC3B,CAAED,IAAK,UAAWC,MAAO,YAAaE,QAAQ,KATvCjB,mEAcC,IAAAkB,EAAAhB,KAChBA,KAAKH,MAAMoB,YACXjB,KAAKkB,SAAS,CACVP,eAAgBQ,IAAmBC,OAAO,CACtCC,GAAI,wBACJC,SAAU,kBAAMN,EAAKO,2LAM4CC,SAASC,cAAc,CAC5FC,MAAOC,IACPC,iBACAC,YACAC,aACAC,QAAS,CAAEC,qCALPC,uBAAoBC,sBAAmBC,oBAO/CC,IAAgBC,SAAhBC,IAAA,GACOJ,EAAkB9C,YAAyBY,KAAKX,MAAMJ,UACtDkD,MAGPnC,KAAKkB,SAAS,CACVX,aAAc0B,IAAqBM,iBAEvCvC,KAAKX,MAAMsB,qJAGLC,EAAK4B,GACX,IAAIC,EAAUzC,KAAKX,MAAMqD,WACzBD,EAAQ7B,GAAK+B,SAAWH,EACxBxC,KAAKkB,SAAS,CAAEwB,WAAYD,qCAGvB,IACGlC,EAAiBP,KAAKX,MAAtBkB,aACAqC,EAAS5C,KAAKH,MAAMgD,QAApBD,KACR,OACIpC,EAAAC,EAAAC,cAACH,EAAD,CACIuC,aAAa,EACbC,MAAOH,EAAKI,IAAI,SAAAC,GAAI,OAAAX,IAAA,CAChBY,GAAID,EAAKE,WAAWC,cACjBH,EAAKE,uBA1DNxB,IAAM0B,WAiE5BzD,EAAQ0D,UAAY,CAChBrC,UAAWqC,IAAUC,KACrBV,QAASW,KAeEC,sBACXC,kBAbJ,SAAyBrE,GACrB,MAAO,CACHwD,QAASc,YAAYtE,KAIF,WACvB,MAAO,CACH4B,UAAW,kBAAM2C,YAAeC,kBAKpCH,CAGE9D","file":"js/Systems.js","sourcesContent":["// Initial State\nconst init = {\n    columns: [],\n    rows: [],\n    entities: []\n};\n// Reducer\n\nfunction modifyInventory(columns, state) {\n    return { ...state, columns };\n}\n\nexport const inventoryEntitiesReducer = columns => (state = init, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { withRouter } from 'react-router-dom';\nimport { PaginationRow } from 'patternfly-react';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems } from '../../../Store/Actions/Actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport { sAllSystems } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\n\nclass Systems extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            removeListener: () => {},\n            columns: [\n                { key: 'display_name', title: 'Name', composed: ['facts.os_release', 'fqdn'] },\n                { key: 'cve_count', title: 'CVEs' },\n                { key: 'updated', title: 'Last Seen', isTime: true }\n            ]\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchData();\n        this.setState({\n            removeListener: middlewareListener.addNew({\n                on: 'SYSTEMS_ALL_FULFILLED',\n                callback: () => this.fetchInventory()\n            })\n        });\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReact: { PaginationRow }\n        });\n        ReducerRegistry.register({\n            ...mergeWithEntities(inventoryEntitiesReducer(this.state.columns)),\n            ...mergeWithDetail()\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryTable\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data } = this.props.systems;\n        return (\n            <InventoryCmp\n                hasCheckbox={false}\n                items={data.map(item => ({\n                    id: item.attributes.inventory_id,\n                    ...item.attributes\n                }))}\n            />\n        );\n    }\n}\n\nSystems.propTypes = {\n    fetchData: propTypes.func,\n    systems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        systems: sAllSystems(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        fetchData: () => dispatchAction(fetchSystems())\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Systems)\n);\n"],"sourceRoot":""}