{"version":3,"sources":["webpack:///./src/Store/Reducers/InventoryEntitiesReducer.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemsPage/SystemsPage.js","webpack:///./src/Store/ActionTypes.js","webpack:///./src/Helpers/MiscHelper.js","webpack:///./src/Utilities/interceptors.js","webpack:///./src/Helpers/APIHelper.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEDetailsPageStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsPageStore.js","webpack:///./src/Store/Reducers/CVEsStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Helpers/DownloadReport.js"],"names":["initialState","columns","rows","entities","selectedRows","modifyInventory","state","loaded","lastSeenColumn","filter","key","transforms","sortable","map","item","selected","some","system","id","selectEntities","myRows","slice","inventoryEntitiesReducer","action","type","payload","row","isOpen","SystemsTableToolbar","selectedHosts","intl","parameters","systems","methods","apply","handleSelect","doOptOut","setSelectedHosts","middlewareListener","addNew","on","callback","newSelected","data","onSelect","kebabOptions","label","opt_out","formatMessage","messages","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","onClick","props","isDisabled","length","kebabHideExcludedSystems","kebabShowExcludedSystems","page","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","fetchSystemsIds","PrimaryToolbar","bulkSelect","count","meta","total_items","checked","Boolean","handleOnCheckboxChange","actionsConfig","actions","filterConfig","searchFilter","systemsSearchName","searchFilterByName","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","i","removeFilters","exportConfig","downloadReport","format","params","DownloadReport","exec","fetchSystems","propTypes","dataShape","object","array","shape","func","any","withRouter","injectIntl","SystemsPage","useState","InventoryTable","setInventoryTable","useCreateUrlParams","SYSTEMS_ALLOWED_PARAMS","createUrlParams","urlParameters","urlParamsAllowed","setUrlParamsAllowed","inventory","React","createRef","dispatch","useDispatch","useSelector","SystemsPageStore","metadata","undefined","isLoading","useMemo","attributes","cveCount","cve_count","rest","inventory_id","loadInventory","a","insights","ReactRedux","react","reactRouterDom","pfReactTable","Table","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","SYSTEMS_HEADER","getStore","useEffect","clearSystemStore","clearInventoryStore","selectMultipleEntities","config","changeSystemsParams","current","systemId","optOutSystemsAction","then","addNotification","variant","title","systemsExcludedNotification","systemsResumedNotificationTitle","description","systemsResumedNotificationBody","VulnerabilityHeader","systemsHeader","showBreadcrumb","Main","tableProps","canSelectAll","onSort","event","index","direction","handleSortColumn","SYSTEMS_SORTING_HEADER","sort","sortBy","createSortBy","ref","perPage","page_size","total","onRefresh","pageSize","per_page","limit","onRefreshData","isLoaded","hasCheckbox","systemTableRowActions","isChecked","FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","CLEAR_INVENTORY_STORE","CLEAR_CVES_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","oneOfType","bool","constructParameters","apiProps","allowedParams","Object","keys","forEach","constructURLParameters","urlParams","includes","formatDate","date","Date","prepend","number","toFormat","isNaN","year","getFullYear","month","getMonth","day","getDate","constructFilterParameters","filterParams","prototype","hasOwnProperty","call","cvssEntry","CVSS_OPTIONS","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PUBLIC_DATE_OPTIONS","publish_date","public_from","public_to","getImpactDetails","impact","impactList","color","text","titleContent","size","impactColorList","unknown","header","indexOf","desc","asc","replace","findIndex","currentSort","columnName","useDefault","substr","window","history","pushState","location","pathname","qs","stringify","parse","search","updateRef","pages","parseInt","cvesCount","instance","axios","create","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","ReadOnlyNotification","err","isCancel","errObject","errors","api","GitApi","getCveDetails","synopsis","getSystemDetails","getAffectedSystemsByCVE","parameterArray","getAffectedSystemsByCve","getSystems","getSystemsList","getCveListByAccount","getCveList","optOutSystem","setSystemOptOut","getCveListBySystem","setSystemCveStatus","setStatus","optOutSystems","optOut","Array","setSystemsOptOut","setBusinessRisk","setCveBusinessRisk","setCveStatus","getExecutiveReport","getAffectedSystemsIdsByCve","getSystemsIds","getCveIdsList","getCveIdsBySystem","Immutable","breadcrumbs","affectedSystemsByCVE","openedRows","security_rule","status_id","cveDetails","cveList","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","timestamp","newState","isArray","splice","push","cves","cve","element","offet","show_all","isValid","stateTimestamp","actionTimestamp","CVEDetailsPageStore","ActionTypes","setIn","CVEsStore","cveName","BreadcrumbStore","set","setHeader","Promise","resolve","HeaderHelper","result","fetchAffectedSystemsByCVE","APIHelper","options","fetchCveDetails","handleCveDetailsError","fetchSystemDetails","noError","fetchCveListByAccount","optOutSystemAction","fetchCveListBySystem","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchCvesIds","fetchSystemDetailsIds","clearCVEsStore","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","rule_id","InsightsReportCard","report","PropType","details","resulotion","isRequired","string","InsightsNoSystemRule","p","exposedSystemNoRules","exposedSystemNoRulesInfo","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","status_name","children","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","STATUS_OPTIONS","option","createCveDetailsPage","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","rowIndex","editBusinessRisk","rowId","rowData","showBusinessRiskModal","justification","editStatus","showStatusModal","systemCveTableRowActions","entity","display_name","cve_justification","cve_status_justification","systemExposedTableRowActions","isOptOut","kebabExcludeAnalysis","multiRow","selectedItemsArray","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","selectNone","selectPage","collectedItems","union","selectAll","SearchFilter","placeholder","searchValue","setSearchValue","debounce","handleSearch","conditionalFilterType","filterValues","onChange","handleChangePage","_event","handleSetPageSize","fileType","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","multiValue","filteredValues","category","chips","searchLabel","obj","chip","join","filename","defaultParams","checkTypes","fetchData","formats","data_format","JSON","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString"],"mappings":"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","file":"js/Systems.js","sourcesContent":["import { sortable } from '@patternfly/react-table';\n\nexport const initialState = {\n    columns: [],\n    rows: [],\n    entities: [],\n    selectedRows: []\n};\n\nfunction modifyInventory(columns, state) {\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    if (state.loaded) {\n        let lastSeenColumn = state.columns.filter(({ key }) => key === 'updated');\n        lastSeenColumn = [{ ...lastSeenColumn[0], transforms: [sortable] }];\n\n        return {\n            ...state,\n            rows: state.rows.map(item => ({ ...item, selected: state.selectedRows.some(system => system === item.id) })),\n            columns: [\n                ...columns || [],\n                ...lastSeenColumn || []\n            ]\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntities(state, selected) {\n    const myRows = state.rows.slice();\n    if (!state.selectedRows) {state.selectedRows = [];}\n\n    const retval = {\n        ...state,\n        rows: myRows\n        .map(item => {\n            const newValue =  { ...item, selected: selected.some(system => system === item.id) };\n            return newValue;\n        }),\n        selectedRows: [...selected]\n    };\n    return retval;\n}\n\nexport const inventoryEntitiesReducer = (columns) => (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOAD_ENTITIES_FULFILLED':\n            return modifyInventory(columns, state);\n        case 'SELECT_MULTIPLE_ENTITIES':\n            return selectEntities(state, action.payload);\n        case 'EXPAND_ROW':\n            return {\n                ...state,\n                rows: state.rows.map(row => ({\n                    ...row,\n                    isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n                }))\n            };\n        case 'CLEAR_INVENTORY_STORE':\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchSystems, fetchSystemsIds } from '../../../Store/Actions/Actions';\nimport { middlewareListener } from '../../../Utilities/ReducerRegistry';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport { exportConfig, buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\n\nconst SystemsTableToolbar = ({ selectedHosts, intl, parameters, systems, methods }) => {\n\n    const { apply, handleSelect, doOptOut, setSelectedHosts } = methods;\n\n    const onSelect = (payload) => {\n        const newSelected = payload.data.selected ? [payload.data.id, ...selectedHosts]\n            : selectedHosts.filter(item => item !== payload.data.id);\n\n        handleSelect(false, newSelected);\n    };\n\n    middlewareListener.addNew({\n        on: 'SELECT_ENTITY',\n        callback: payload => onSelect(payload)\n    });\n\n    const downloadReport = format => {\n        let params = { ...parameters };\n        DownloadReport.exec(fetchSystems, params,  format, 'system-list');\n    };\n\n    const handleOptOut = () => {\n        apply({ opt_out: !parameters.opt_out, page: 1 });\n        setSelectedHosts([]);\n    };\n\n    const kebabOptions = [\n        '',\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabResumeAnalysis)\n                : intl.formatMessage(messages.kebabExcludeVulnerabilityAnalysis),\n            onClick: () => doOptOut(),\n            props: { isDisabled: !selectedHosts.length }\n        },\n        {\n            label: parameters.opt_out ? intl.formatMessage(messages.kebabHideExcludedSystems)\n                : intl.formatMessage(messages.kebabShowExcludedSystems),\n            onClick: handleOptOut\n        }\n    ];\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedHosts,\n        selectorHandler: handleSelect,\n        items: systems,\n        fetchResource: ops => fetchSystemsIds({ ...parameters, ...ops })\n    });\n\n    return (\n        <PrimaryToolbar\n            bulkSelect={{\n                count: selectedHosts.length,\n                items: selectOptions.items,\n                isDisabled: systems.meta.total_items === 0 && selectedHosts.length === 0,\n                checked: Boolean(selectedHosts.length),\n                onSelect: () => selectOptions.handleOnCheckboxChange()\n            }}\n            actionsConfig={{\n                actions: kebabOptions\n            }}\n            filterConfig={{\n                items: [\n                    searchFilter(\n                        messages.systemsSearchName,\n                        messages.searchFilterByName,\n                        parameters.filter,\n                        apply\n                    )\n                ]\n            }}\n            activeFiltersConfig={{\n                filters: buildActiveFilters(parameters),\n                onDelete: (e, i) => removeFilters(i, apply)\n            }}\n            exportConfig={{\n                isDisabled: systems.meta.total_items === 0,\n                ...exportConfig({ downloadReport })\n            }}\n        >\n        </PrimaryToolbar>\n\n    );\n\n};\n\nSystemsTableToolbar.propTypes = {\n    systems: dataShape,\n    parameters: propTypes.object,\n    selectedHosts: propTypes.array,\n    methods: propTypes.shape({\n        doOptOut: propTypes.func,\n        apply: propTypes.func,\n        handleSelect: propTypes.func,\n        setSelectedHosts: propTypes.func\n    }),\n    intl: propTypes.any\n};\n\nexport default withRouter(\n    injectIntl(SystemsTableToolbar)\n);\n\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport * as reactRouterDom from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as ReactRedux from 'react-redux';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport SystemsTableToolbar from './SystemsTableToolbar';\nimport { SYSTEMS_HEADER, SYSTEMS_ALLOWED_PARAMS, SYSTEMS_SORTING_HEADER } from '../../../Helpers/constants';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { systemTableRowActions } from '../../../Helpers/CVEHelper';\nimport React, { useEffect, Fragment, useState, useMemo } from 'react';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { fetchSystems, optOutSystemsAction } from '../../../Store/Actions/Actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/cjs/actions';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport {\n    changeSystemsParams,\n    selectMultipleEntities,\n    clearSystemStore,\n    clearInventoryStore\n} from '../../../Store/Actions/Actions';\nimport { useCreateUrlParams, createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\n\nconst selectHosts = ({ data, meta }) => {\n    const items = data && data.map(item => {\n        const { cve_count: cveCount, ...rest } = item.attributes;\n        return {\n            cve_count: (meta.opt_out && 'Excluded') || cveCount,\n            id: item.attributes.inventory_id,\n            ...rest\n        };\n    });\n    return items || [];\n};\n\nconst SystemsPage = ({ intl }) => {\n    const [InventoryTable, setInventoryTable] = useState(() => () => <div>Loading...</div>);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(SYSTEMS_ALLOWED_PARAMS);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const inventory = React.createRef();\n    const dispatch = useDispatch();\n\n    const systems = useSelector(({ SystemsPageStore }) => SystemsPageStore.payload);\n\n    const parameters = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.params\n    );\n\n    const metadata = useSelector(\n        ({ SystemsPageStore }) => SystemsPageStore.metadata\n    );\n\n    const [selectedHosts, setSelectedHosts] = useState(undefined);\n\n    const isLoading =  useSelector(({ SystemsPageStore }) => SystemsPageStore.isLoading);\n\n    const items = useMemo(() => selectHosts(systems), [systems]);\n\n    const loadInventory = async () => {\n        const {\n            inventoryConnector,\n            mergeWithEntities,\n            mergeWithDetail\n        } = await insights.loadInventory({\n            ReactRedux,\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(\n                inventoryEntitiesReducer(SYSTEMS_HEADER)\n            ),\n            ...mergeWithDetail()\n        });\n        const { InventoryTable } = inventoryConnector(ReducerRegistry.getStore());\n\n        setInventoryTable(() => InventoryTable);\n    };\n\n    useEffect(() => {\n        loadInventory();\n\n        return () => {\n            dispatch(clearSystemStore());\n            dispatch(clearInventoryStore());\n        };\n    }, []);\n\n    useEffect(()=>{\n        if (selectedHosts) {\n            dispatch(selectMultipleEntities(selectedHosts));\n        }\n    }, [selectedHosts, dispatch]);\n\n    const apply = (config) => {\n        dispatch(changeSystemsParams(config));\n    };\n\n    //DRY: SystemsExposed page has also the same function\n    const inventoryRefresh = ({ page, per_page: pageSize }) => {\n        if (metadata.page !== page || metadata.limit !== pageSize) {\n            apply({ page, page_size: pageSize });\n        }\n\n        if (metadata && metadata.total_items <= pageSize && inventory.current) {\n            inventory.current.onRefreshData({ page, page_size: pageSize });\n        }\n    };\n\n    useEffect(() => {\n        if (!inventory.current) {\n            apply(urlParameters);\n        }\n        else {\n            dispatch(fetchSystems(parameters));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    const handleSelect = (isChecked, payload) => {\n        if (!payload) { payload = []; }\n\n        setSelectedHosts(payload);\n    };\n\n    const doOptOut = (systemId = null) => {\n        if (selectedHosts && (selectedHosts.length > 0) || systemId) {\n            dispatch(optOutSystemsAction(systemId || selectedHosts, !parameters.opt_out)).then(() => {\n                dispatch(fetchSystems({ ...parameters, page: 1 }));\n                parameters.opt_out === false\n                    ? dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsExcludedNotification,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        )\n                    }))\n                    : dispatch(addNotification({\n                        variant: 'success',\n                        title: intl.formatMessage(\n                            messages.systemsResumedNotificationTitle,\n                            { count: systemId ? 1 : selectedHosts.length || 0 }\n                        ),\n                        description: intl.formatMessage(messages.systemsResumedNotificationBody)\n                    }));\n                setSelectedHosts([]);\n            });\n        }\n    };\n\n    const sortBy = () =>\n        createSortBy(\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort\n        );\n\n    const onSort = (event, index, direction) =>\n        handleSortColumn(\n            index,\n            direction,\n            SYSTEMS_SORTING_HEADER,\n            urlParameters.sort,\n            apply\n        );\n\n    return (\n        <Fragment>\n            <VulnerabilityHeader title={intl.formatMessage(messages.systemsHeader)} showBreadcrumb={false} />\n            <Main>\n                { InventoryTable &&  (\n                    <InventoryTable\n                        tableProps={{\n                            canSelectAll: false,\n                            onSort: (items.length > 0) && onSort,\n                            sortBy: (items.length > 0) && sortBy()\n                        }}\n                        ref={inventory}\n                        items={items}\n                        page={metadata && metadata.page || 1 }\n                        perPage={metadata && metadata.page_size || 20}\n                        total={metadata && metadata.total_items || 0}\n                        onRefresh={inventoryRefresh}\n                        isLoaded = {!isLoading}\n                        hasCheckbox={systems.length !== 0}\n                        actions={systemTableRowActions(doOptOut, parameters.opt_out)}\n                    >\n                        {systems.data && (<SystemsTableToolbar\n                            parameters = {parameters}\n                            systems = {systems}\n                            selectedHosts = {selectedHosts || []}\n                            methods = {{\n                                doOptOut,\n                                apply,\n                                handleSelect,\n                                setSelectedHosts\n                            }}\n                        />)}\n                    </InventoryTable>\n                )}\n            </Main>\n        </Fragment>\n    );\n};\n\nSystemsPage.propTypes  = {\n    intl: propTypes.any\n};\n\nexport default injectIntl(SystemsPage);\n","export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const CLEAR_INVENTORY_STORE = 'CLEAR_INVENTORY_STORE';\nexport const CLEAR_CVES_STORE = 'CLEAR_CVEs_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import { SecurityIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { SortByDirection } from '@patternfly/react-table';\nimport findIndex from 'lodash/findIndex';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { impactColorList, impactList, CVSS_OPTIONS, PUBLIC_DATE_OPTIONS } from './constants';\nimport qs from 'query-string';\nimport { IntlProvider } from '@redhat-cloud-services/frontend-components-translations';\n\nexport const dataShape = propTypes.shape({\n    data: propTypes.oneOfType([propTypes.object, propTypes.array]),\n    meta: propTypes.object,\n    isLoading: propTypes.bool\n});\n\n/**\n * Based on the  allowedParams it will construct the arguments for the API call\n * which is defined in the vulnerabilities-client. vulnerabilities-client is written is typescript\n * so we need to define and pass every single parameter. Order in allowedParams is important\n *\n * @param {Object} apiProps\n * @param {Array} allowedParams - order should align with the params in the vulnerabilities-client\n */\nexport function constructParameters(apiProps, allowedParams) {\n    if (apiProps) {\n        Object.keys(apiProps).forEach(\n            key => (\n                apiProps[key] === undefined\n                || apiProps[key] === ''\n            )\n            && delete apiProps[key]\n        );\n\n        const params = allowedParams.map(item => apiProps[item]);\n\n        return params;\n    }\n\n    return [];\n}\n\n// TODO DRY:similar to constructParameters\nexport function constructURLParameters(urlParams, allowedParams) {\n    if (urlParams) {\n        const params = { ...urlParams };\n        Object.keys(urlParams).forEach(\n            key => (\n                params[key] === undefined\n                || params[key] === ''\n                || !allowedParams.includes(key)\n                || params[key] === false\n            )\n            && delete params[key]\n\n        );\n        return params;\n    }\n}\n\nexport function formatDate(date = new Date()) {\n    const prepend = (number) => `${`${number}`.length === 1 ? '0' : ''}${number}`;\n    const toFormat = new Date(date);\n    if (toFormat instanceof Date && !isNaN(toFormat)) {\n        const year = toFormat.getFullYear();\n        const month = toFormat.getMonth();\n        const day = toFormat.getDate();\n        return `${year}-${prepend(month)}-${prepend(day)}`;\n    }\n\n    return toFormat;\n}\n\n/**\n * Contructs the filters which have more than one parameter that needs to be passed\n * and resets all the parameteres when it's needed\n *\n * @param {Object} filterParams\n * @return {Object}\n */\nexport function constructFilterParameters(filterParams) {\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'cvss_filter')) {\n        let cvssEntry = CVSS_OPTIONS.find(({ value }) => value === filterParams.cvss_filter);\n\n        if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter !== 'undefined') {\n            let values = filterParams.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n            let [from, to] = values;\n            cvssEntry = { from, to };\n        } else if (typeof cvssEntry === 'undefined' && typeof filterParams.cvss_filter === 'undefined') {\n            cvssEntry = { from: undefined, to: undefined };\n        } else if ((cvssEntry && cvssEntry.label === 'N/A') && filterParams.cvss_filter === 'from-1to-1') {\n            cvssEntry = { from: -1, to: -1 };\n        }\n\n        filterParams.cvss_from = cvssEntry.from;\n        filterParams.cvss_to = cvssEntry.to;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(filterParams, 'publish_date')) {\n        let publicEntry = PUBLIC_DATE_OPTIONS.find(item => item.value === filterParams.publish_date);\n\n        if (typeof publicEntry !== 'undefined') {\n            filterParams.public_from = publicEntry.from && formatDate(publicEntry.from);\n            filterParams.public_to = publicEntry.to && formatDate(publicEntry.to);\n        } else {\n            filterParams.public_from = undefined;\n            filterParams.public_to = undefined;\n            filterParams.publish_date = undefined;\n        }\n    }\n\n    return filterParams;\n}\n\nexport function getImpactDetails(impact) {\n    if (Object.keys(impactList).includes(impact)) {\n        return {\n            title: impactList[impact].title,\n            color: impactList[impact].color,\n            text: impactList[impact].text,\n            titleContent: (\n                <SecurityIcon size=\"lg\" />\n            )\n        };\n    } else {\n        return {\n            title: 'Unknown',\n            color: impactColorList.unknown,\n            text: '',\n            titleContent: (\n                <UnknownIcon size=\"lg\" />\n            )\n        };\n    }\n}\n\nexport const createSortBy = (header, value) => {\n    if (value) {\n        let direction = value.indexOf('-') === 0 ? SortByDirection.desc : SortByDirection.asc;\n        value = value.replace(/^(-|\\+)/, '');\n        const index = findIndex(header, item => item.key === value);\n        let sort = {\n            index,\n            direction\n        };\n        return sort;\n    }\n\n    return {};\n};\n\nexport const handleSortColumn = (key, direction, header, currentSort, apply) => {\n    let columnName = header[key].key;\n    const useDefault = currentSort && currentSort.substr(1) !== columnName;\n    if (direction === SortByDirection.desc || useDefault) {\n        columnName = '-' + columnName;\n    }\n\n    apply({ sort: columnName });\n};\n\nexport const updateStateSet = (stateSet, names, value) => {\n    [].concat(names).forEach(name => {\n        value ? stateSet.add(name) : stateSet.delete(name);\n    });\n    return stateSet;\n};\n\nexport const useCreateUrlParams = (allowedParams) => {\n    const urlParams = qs.parse(window.location.search);\n\n    const createUrlParams = (parameters) => {\n        window.history.pushState(\n            {},\n            '',\n            `${\n                window.location.pathname\n            }?${\n                qs.stringify(constructURLParameters(parameters, allowedParams))\n            }`\n        );\n    };\n\n    return [createUrlParams, urlParams];\n};\n\nexport const updateRef = (meta, apply) => {\n    const pages = parseInt(meta.pages);\n    const page = parseInt(meta.page);\n    const cvesCount = parseInt(meta.cvesCount);\n    const goTo = (pages === page && page > 1 && cvesCount === 1) ? (pages - 1) : page;\n\n    apply({ page: goTo });\n};\n\nexport const mountWithIntl = (Component) => {\n    const wrapper = mount(Component, {\n        wrappingComponent: IntlProvider\n    });\n    const provider = wrapper.getWrappingComponent();\n    provider.setProps({ locale: 'en' });\n\n    return wrapper;\n};\n","import {\n    authInterceptor,\n    interceptor401,\n    responseDataInterceptor\n} from '@redhat-cloud-services/frontend-components-utilities/files/interceptors';\nimport axios from 'axios';\nimport { ReadOnlyNotification } from '../Helpers/constants';\nconst instance = axios.create();\n\nexport function errorInterceptor(err) {\n    if (!axios.isCancel(err)) {\n        const errObject = { ...err };\n\n        if (errObject.response && errObject.response.data && errObject.response.data.errors) {\n            const data = errObject.response.data.errors[0];\n            throw data;\n        }\n\n        throw err;\n    }\n}\n\nexport function readOnlyInterceptor(error) {\n    if (error.response && error.response.status === 503) {\n        const data = ReadOnlyNotification;\n        throw data;\n    }\n\n    throw error;\n}\n\ninstance.interceptors.request.use(authInterceptor);\ninstance.interceptors.response.use(responseDataInterceptor);\ninstance.interceptors.response.use(null, interceptor401);\ninstance.interceptors.response.use(null, readOnlyInterceptor);\ninstance.interceptors.response.use(null, errorInterceptor);\n\nexport default instance;\n","let BASE_ROUTE = '/api/vulnerability/';\nimport { GitApi } from '@redhat-cloud-services/vulnerabilities-client';\nimport instance from '../Utilities/interceptors';\nimport { constructParameters } from './MiscHelper';\n\nlet api = new GitApi(undefined, BASE_ROUTE, instance);\n\nexport function getCveDetails(synopsis) {\n    const result = api.getCveDetails(synopsis);\n    return result;\n}\n\nexport function getSystemDetails(system) {\n    const result = api.getSystemDetails(system);\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis, apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule',\n        'rule_name'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystems(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsList(...parameterArray);\n    return result;\n}\n\nexport function getCveListByAccount(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveList(...parameterArray);\n    return result;\n}\n\nexport function optOutSystem(system, status) {\n    let result = api.setSystemOptOut(system, status);\n    return result;\n}\n\nexport function getCveListBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveListBySystem(system, ...params).catch(err => {\n            if (err && err.status === '404') {\n                return { errors: err };\n            }\n\n            throw err;\n        });\n    }\n}\n\nexport function setSystemCveStatus(params) {\n    let result = api.setStatus(params);\n    return result;\n}\n\nexport function optOutSystems(systems, optOut) {\n    const data = { opt_out: optOut, inventory_id: new Array(...systems) };\n    let result = api.setSystemsOptOut(data);\n    return result;\n}\n\nexport function setBusinessRisk(params) {\n    let result = api.setCveBusinessRisk(params);\n    return result;\n}\n\nexport function setCveStatus(params) {\n    let result = api.setCveStatus(params);\n    return result;\n}\n\nexport function getExecutiveReport() {\n    let result = api.getExecutiveReport();\n    return result;\n}\n\nexport function getAffectedSystemsIdsByCve(synopsis, apiProps) {\n    //TODO: Once all new endpoints for selecting IDs are introduced optimize all parameterNames arrays in this page\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'status_id',\n        'data_format',\n        'security_rule'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getAffectedSystemsIdsByCve(synopsis, ...parameterArray);\n    return result;\n}\n\nexport function getSystemsIds(apiProps) {\n    let parameterNames = ['filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'data_format', 'stale', 'uuid', 'opt_out'];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getSystemsIds(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsList(apiProps) {\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'data_format',\n        'business_risk_id',\n        'status_id',\n        'security_rule',\n        'show_all'\n    ];\n    let parameterArray = constructParameters(apiProps, parameterNames);\n    let result = api.getCveIdsList(...parameterArray);\n    return result;\n}\n\nexport function getCveIdsBySystem(apiProps) {\n    const { system } = apiProps;\n    let parameterNames = [\n        'filter',\n        'limit',\n        'offset',\n        'page',\n        'page_size',\n        'sort',\n        'cvss_from',\n        'cvss_to',\n        'public_from',\n        'public_to',\n        'impact',\n        'status_id',\n        'data_format',\n        'business_risk_id',\n        'security_rule'\n    ];\n    if (apiProps && system) {\n        Object.keys(apiProps).forEach(key => (apiProps[key] === undefined || apiProps[key] === '') && delete apiProps[key]);\n        const params = parameterNames.map(item => apiProps[item]);\n        return api.getCveIdsBySystem(system, ...params);\n    }\n}\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEDetailsPageStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../ActionTypes';\n\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20,\n        sort: '-last_upload'\n    }\n};\n\nexport const SystemsPageStore = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: false,\n        sort: '-public_date'\n    },\n    selectedCves: [],\n    openedCves: [],\n    expandCveDescription: false\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const CVEsStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList = {\n                timestamp: action.meta,\n                isLoading: true\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList = {\n                isLoading: false,\n                payload: { errors: action.payload }\n            };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList = {\n                    payload: action.payload,\n                    isLoading: false\n                };\n\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, selectedCves  };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState,  openedCves, expandCveDescription };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, openedCves, expandCveDescription };\n        }\n\n        case ActionTypes.CLEAR_CVES_STORE: {\n            return initialState;\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEDetailsPageStore } from '../Reducers/CVEDetailsPageStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsPageStore } from '../Reducers/SystemsPageStore';\nimport { CVEsStore } from '../Reducers/CVEsStore';\n\nReducerRegistry.register({ CVEDetailsPageStore });\nReducerRegistry.register({ CVEsStore });\nReducerRegistry.register({ SystemsPageStore });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n\nexport const clearInventoryStore = () =>({\n    type: ActionTypes.CLEAR_INVENTORY_STORE,\n    payload: []\n});\n\nexport const clearCVEsStore = () =>({\n    type: ActionTypes.CLEAR_CVES_STORE,\n    payload: []\n});\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p} className=\"pf-u-mb-sm\">\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n            </Text>\n            <Text\n                component={TextVariants.a}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://access.redhat.com/articles/2968471\"\n            >\n                <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = (methods, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [\n            {\n                title: <FormattedMessage {...messages.editBusinessRisk} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            },\n            {\n                title: <FormattedMessage {...messages.editStatus} />,\n                onClick: (event, rowId, rowData) =>\n                    methods.showStatusModal([\n                        {\n                            id: rowData.id,\n                            status_id: rowData.status_id,\n                            justification: rowData.status_justification\n                        }\n                    ])\n            }\n        ] : null;\n};\n\nexport const systemCveTableRowActions = (methods, entity, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) =>\n                methods.showStatusModal([\n                    {\n                        id: rowData.id,\n                        display_name: entity.display_name,\n                        status_id: rowData.status_id,\n                        cve_status_id: rowData.cve_status_id,\n                        justification: rowData.status_justification,\n                        cve_justification: rowData.cve_status_justification\n                    }\n                ],\n                entity\n                )\n        }] : null;\n};\n\nexport const systemExposedTableRowActions = (showStatusModal, cve, rowIndex) => {\n    return (rowIndex % 2 === 0) ?\n        [{\n            title: <FormattedMessage {...messages.editStatus} />,\n            onClick: (event, rowId, rowData) => {\n                showStatusModal(\n                    [{\n                        id: cve.id,\n                        status_id: cve.status_id,\n                        justification: cve.justification\n                    }],\n                    [{\n                        id: rowData.id,\n                        display_name: rowData.display_name,\n                        status_id: rowData.status_id,\n                        justification: rowData.status_text\n                    }]\n                );\n            }\n        }] : null;\n};\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title: (\n            isOptOut\n                ? <FormattedMessage {...messages.kebabResumeAnalysis} />\n                : <FormattedMessage {...messages.kebabExcludeAnalysis} />\n        ),\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n"],"sourceRoot":""}