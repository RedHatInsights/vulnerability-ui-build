{"version":3,"file":"js/9668.a11b346ae0e6f10e580a.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner.js","webpack:///./src/App.js","webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/PresentationalComponents/StaticPages/NoAccessPage.js","webpack:///./src/Utilities/VulnerabilityRoutes.js","webpack:///./src/Utilities/useFeatureFlag.js"],"sourcesContent":["import React from 'react';\nimport { Banner, Bullseye, Text } from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ReadOnlyBanner = () => {\n    return (\n        <Banner>\n            <Bullseye>\n                <Text>\n                    {intl.formatMessage(messages.readOnlyBannerText, { b: (...chunks) => <b>{chunks}</b> })}\n                </Text>\n                <a\n                    href=\"https://status.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ color: 'var(--pf-global--link--Color--light)' }}\n                    className=\"pf-u-ml-sm\"\n                >\n                    {intl.formatMessage(messages.learnMore)}\n                </a>\n            </Bullseye>\n        </Banner>\n    );\n};\n\nexport default ReadOnlyBanner;\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    Fragment\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport { setGlobalFilter } from './Store/Actions/Actions';\nimport { VulnerabilityRoutes } from './Utilities/VulnerabilityRoutes';\nimport { useLocation } from 'react-router-dom';\nimport NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';\nimport './App.scss';\nimport ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';\nimport { useRbac } from './Helpers/Hooks';\nimport { PERMISSIONS } from './Helpers/constants';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nReducerRegistry.register({ notifications });\n\nconst App = () => {\n    const { pathname } = useLocation();\n    const chrome = useChrome();\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);\n    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const appNavClick = useMemo(() => ({\n        cves(redirect) { chrome.appNavClick({ id: 'cves', redirect }); },\n        systems(redirect) { chrome.appNavClick({ id: 'systems', redirect }); },\n        reports(redirect) { chrome.appNavClick({ id: 'reports', redirect }); }\n    }), []);\n\n    useEffect(() => {\n        const baseComponentUrl = pathname.split('/')[1];\n        chrome &&\n            baseComponentUrl &&\n            appNavClick[baseComponentUrl] !== undefined &&\n            appNavClick[baseComponentUrl](false);\n\n        const unregister = chrome.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SIDs, tags] = chrome.mapGlobalFilter(data, true, true) ?? [null, null, null];\n            dispatch(setGlobalFilter({ workloads, SIDs, tags }));\n        });\n\n        return () => unregister();\n    }, [appNavClick, pathname, dispatch]);\n\n    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);\n\n    return (\n        isLoading ? <Spinner centered /> : isUserAuthorized ?\n            <Fragment>\n                <NotificationPortal />\n                {isReadOnlyBannerVisible && <ReadOnlyBanner />}\n                <VulnerabilityRoutes />\n            </Fragment>\n            : <NoAccessPage />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst Breadcrumb = ({ breadcrumbs }) => {\n    return (\n        <PfBreadcrumb key=\"PfBreadcrumb\" className=\"pf-u-mb-md\">\n            {breadcrumbs?.map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {\n                        item.isLoaded\n                            ? item.isActive\n                                ? item.title\n                                : <InsightsLink to={`/${item.to}`}>{item.title}</InsightsLink>\n                            : <Skeleton className=\"breadcrumb-skeleton\" />\n                    }\n                </BreadcrumbItem>\n            ))}\n        </PfBreadcrumb>\n    );\n};\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.arrayOf(propTypes.shape({\n        title: propTypes.string,\n        to: propTypes.string,\n        isActive: propTypes.bool,\n        isLoaded: propTypes.bool\n    }))\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst NoAccessPage = ({ intl, title = intl.formatMessage(messages.vulnerabilitiesHeader), emptyStateTitle }) => {\n    return (\n        <React.Fragment>\n            <Header\n                title={title}\n                showBreadcrumb={false}\n            />\n            <Main>\n                <NotAuthorized\n                    title={emptyStateTitle}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nNoAccessPage.propTypes = {\n    intl: propTypes.any,\n    title: propTypes.string,\n    emptyStateTitle: propTypes.string\n};\n\nexport default injectIntl(NoAccessPage);\n","import React, { useEffect, useState, lazy, Suspense, Fragment, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Navigate, Route, Routes, useLocation } from 'react-router-dom';\nimport { getSystems, checkEdgePresence } from '../Helpers/APIHelper';\nimport { PATHS } from '../Helpers/constants';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport useFeatureFlag from './useFeatureFlag';\n\nconst SystemsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ '../Components/SmartComponents/SystemsPage/SystemsPage'\n    )\n);\n\nconst LandingPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"LandingPage\" */ '../Components/SmartComponents/LandingPage/LandingPage'\n    )\n);\n\nconst Upgrade = lazy(() =>\n    import(\n        /* webpackChunkName: \"Upgrade\" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'\n    )\n);\n\nconst CVEDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"CVEDetailsPage\" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'\n    )\n);\n\nconst SystemDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"SystemDetailsPage\" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'\n    )\n);\nconst Reports = lazy(() =>\n    import(/* webpackChunkName: \"Reports\" */ '../Components/SmartComponents/Reports/ReportsPage')\n);\n\nexport const AccountStatContext = createContext({\n    hasConventionalSystems: true,\n    hasEdgeDevices: false\n});\n\nconst InsightsElement = ({ element: Element, title, globalFilterEnabled, ...elementProps }) => {\n    let location = useLocation();\n    const [hasConventionalSystems, setHasConventionalSystems] = useState(true);\n    const [hasEdgeDevices, setHasEdgeDevices] = useState(true);\n    const isEdgeParityEnabled = useFeatureFlag('vulnerability.edge_parity');\n    const chrome = useChrome();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await getSystems();\n            setHasConventionalSystems(result?.meta?.total_items > 0);\n        };\n\n        fetchData();\n\n        //if there is at least 1 edge device in the account level, not only in vulnerability\n        checkEdgePresence().then(edgeDevicePresent => setHasEdgeDevices(edgeDevicePresent));\n    }, []);\n\n    const subPath = location.pathname && location.pathname.split('/')[4];\n\n    useEffect(() => {\n        chrome.updateDocumentTitle(`${subPath ? `${subPath} - ` : ''} ${title} -\n         ${intl.formatMessage(messages.pageTitleSuffix)}`);\n    }, [chrome, intl, subPath]);\n\n    useEffect(() => {\n        chrome.hideGlobalFilter(!globalFilterEnabled);\n    }, [location.pathname]);\n\n    const accountHasSystem = isEdgeParityEnabled && (hasEdgeDevices || hasConventionalSystems) || hasConventionalSystems;\n\n    return (\n        !accountHasSystem ?\n            <AsyncComponent\n                appId=\"vulnerability_zero_state\"\n                appName=\"dashboard\"\n                module=\"./AppZeroState\"\n                scope=\"dashboard\"\n                ErrorComponent={<ErrorState />}\n                app=\"Vulnerability\"\n            />\n            : (\n                <AccountStatContext.Provider value={{ hasConventionalSystems, hasEdgeDevices }}>\n                    <Element\n                        {...elementProps}\n                        hasEdgeDevices={hasEdgeDevices}\n                        hasConventionalSystems={hasEdgeDevices}\n                    />\n                </AccountStatContext.Provider>)\n    );\n};\n\nInsightsElement.propTypes = {\n    element: PropTypes.func,\n    title: PropTypes.string,\n    globalFilterEnabled: PropTypes.bool\n};\n\nexport const VulnerabilityRoutes = () => {\n    return (\n        <Suspense fallback={Fragment}>\n            <Routes>\n                <Route\n                    path={PATHS.cveDetailsPage.to}\n                    element={\n                        <InsightsElement\n                            element={CVEDetailsPage}\n                            title={intl.formatMessage(messages.cvesHeader)}\n                            globalFilterEnabled\n                        />\n                    }\n                />\n                <Route\n                    path={PATHS.cveDetailsEdgePage.to}\n                    element={\n                        <InsightsElement\n                            element={CVEDetailsPage}\n                            title={intl.formatMessage(messages.cvesHeader)}\n                            isImmutableTabOpen\n                        />\n                    }\n                />\n                <Route\n                    path={PATHS.systemDetailsPage.to}\n                    element={<SystemDetailsPage />}\n                />\n\n                <Route\n                    path={PATHS.home.to}\n                    element={\n                        <InsightsElement\n                            element={LandingPage}\n                            title={intl.formatMessage(messages.cvesHeader)}\n                            globalFilterEnabled\n                        />\n                    }\n                />\n\n                <Route\n                    path={PATHS.cvesPage.to}\n                    element={\n                        <InsightsElement\n                            element={LandingPage}\n                            title={intl.formatMessage(messages.cvesHeader)}\n                            globalFilterEnabled\n                        />\n                    }\n                />\n\n                <Route\n                    path={PATHS.systemsPage.to}\n                    element={\n                        <InsightsElement\n                            element={SystemsPage}\n                            title={intl.formatMessage(messages.systemsHeader)}\n                            globalFilterEnabled\n                        />\n                    }\n                />\n\n                <Route\n                    path={PATHS.upgrade.to}\n                    element={<InsightsElement element={Upgrade} title={intl.formatMessage(messages.upgradePageTitle)} />}\n                />\n\n                <Route\n                    path={PATHS.reports.to}\n                    element={<InsightsElement element={Reports} title={intl.formatMessage(messages.reportsPageTitle)} />}\n                />\n\n                <Route\n                    path=\"*\"\n                    element={<Navigate to=\"cves\" />}\n                />\n            </Routes>\n        </Suspense>\n    );\n};\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n    const { flagsReady } = useFlagsStatus();\n    const isFlagEnabled = useFlag(flag);\n    return flagsReady ? isFlagEnabled : false;\n};\n"],"names":["React","Banner","Bullseye","Text","intl","formatMessage","messages","readOnlyBannerText","b","_len","arguments","length","chunks","Array","_key","href","target","rel","style","color","className","learnMore","ReducerRegistry","register","notifications","pathname","useLocation","chrome","useChrome","_useRbac","useRbac","PERMISSIONS","accessApplication","_useRbac2","_slicedToArray","isUserAuthorized","isLoading","_useState","useState","_useState2","isReadOnlyBannerVisible","setReadOnlyBannerVisible","dispatch","useDispatch","appNavClick","useMemo","cves","redirect","id","systems","reports","useEffect","baseComponentUrl","split","undefined","unregister","on","_ref","_chrome$mapGlobalFilt","data","_ref2","mapGlobalFilter","_ref3","workloads","SIDs","tags","setGlobalFilter","window","setVisible","Spinner","centered","Fragment","NotificationPortal","ReadOnlyBanner","VulnerabilityRoutes","NoAccessPage","Breadcrumb","breadcrumbs","PfBreadcrumb","key","map","item","BreadcrumbItem","title","isActive","isLoaded","InsightsLink","to","concat","Skeleton","propTypes","BaseDropdown","dropdownItems","disabled","props","_objectWithoutProperties","_excluded","isOpen","setIsOpen","useIntl","Dropdown","_extends","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","actions","PropTypes","Header","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","index","isFilled","position","ouiaId","defaultProps","cvesHeader","_ref$title","vulnerabilitiesHeader","emptyStateTitle","Main","NotAuthorized","injectIntl","SystemsPage","lazy","LandingPage","Upgrade","CVEDetailsPage","SystemDetailsPage","Reports","AccountStatContext","createContext","hasConventionalSystems","hasEdgeDevices","InsightsElement","Element","element","globalFilterEnabled","elementProps","location","setHasConventionalSystems","_useState3","_useState4","setHasEdgeDevices","isEdgeParityEnabled","useFeatureFlag","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","_result$meta","result","_context","prev","next","getSystems","sent","meta","total_items","stop","apply","checkEdgePresence","then","edgeDevicePresent","subPath","updateDocumentTitle","pageTitleSuffix","hideGlobalFilter","Provider","value","AsyncComponent","appId","appName","module","scope","ErrorComponent","ErrorState","app","Suspense","fallback","Routes","Route","path","PATHS","cveDetailsPage","cveDetailsEdgePage","isImmutableTabOpen","systemDetailsPage","home","cvesPage","systemsPage","systemsHeader","upgrade","upgradePageTitle","reportsPageTitle","Navigate","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag"],"sourceRoot":""}