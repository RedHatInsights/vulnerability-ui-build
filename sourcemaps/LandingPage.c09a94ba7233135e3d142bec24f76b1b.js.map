{"version":3,"file":"js/LandingPage.c3922413c4f50ad84f67.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\n\nconst CVEsTableWithContext = ({ context, header }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title: <EmptyStateNoCVEs secondParagraph={\n                        context.params.affecting === 'true'\n                            ? messages.emptyStateYourSystemsShouldHaveCVEs\n                            : messages.emptyStateThereShouldBeCVEs\n                    } />\n                }\n            ]\n        }]);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, expandedRows } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    return (\n        !cves.isLoading ? (\n            <Fragment>\n                <Table\n                    canSelectAll={false}\n                    aria-label={'Vulnerability CVE table'}\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    onCollapse={!isEmpty ? (event, rowKey) => methods.openCves(rowKey) : undefined}\n                    actionResolver={!(cves.data.length === 0) ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                cves.meta.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId={'cves-table'}\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n                <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n            </Fragment>\n        ) : (\n            <SkeletonTable colSize={header?.length} rowSize={20} variant={TableVariant.compact} />\n        )\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport { CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS } from '../../../Helpers/constants';\n\nconst CVEsTableToolbarWithContext = (props) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const onExpandAllClick = () => {\n        const { context } = props;\n        const { cves, methods, isAllExpanded } = context;\n\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const { context } = props;\n    const { cves, params, methods, selectedCves, isAllExpanded, selectedRowsRawData } = context;\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const selectOptions  = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        {\n            label: props.intl.formatMessage(messages.editBusinessRisk),\n            onClick: () => methods.showBusinessRiskModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                id,\n                business_risk_id: attributes.business_risk_id,\n                justification: attributes.business_risk_text\n            })), true),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(selectedRowsRawData.map(({ id, attributes }) => ({\n                id,\n                exposed_systems_count: attributes.systems_affected,\n                justification: attributes.status_text,\n                status_id: attributes.status_id\n            }), []), true),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: props.intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnModalOpen(true)\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: props.intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n            { exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport ColumnManagementModal from '../Modals/ColumnManagementModal';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = () => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const [isColumnModalOpen, setColumnModalOpen] = useState(false);\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const selectedRowsRawData = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedRowsRawData\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            apply(urlParameters);\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            urlParamsAllowed\n                && setUrlParam({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                updateRef={() => {\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    selectedRowsRawData,\n                    params: parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        showBusinessRiskModal,\n                        showStatusModal,\n                        openCves,\n                        setColumnModalOpen\n                    }\n                }}\n            >\n                <CveBusinessRiskModal />\n                <CveStatusModal />\n                <ColumnManagementModal\n                    appliedColumns={columns}\n                    applyColumns={newColumns => dispatch(changeColumnsCveList(newColumns))}\n                    isModalOpen={isColumnModalOpen}\n                    setModalOpen={setColumnModalOpen}\n                />\n\n                <Stack>\n                    <StackItem>\n                        <CVEsTableToolbar />\n                    </StackItem>\n                    <StackItem>\n                        <CVEsTable header={columns.filter(column => column.isShown ?? column.isShownByDefault)} />\n                    </StackItem>\n                </Stack>\n            </CVETableContext.Provider>\n        );\n    } else {\n        return <ErrorHandler code={parseInt(cves.errors.status)} />;\n    }\n\n};\n\nexport default CVEs;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2021/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position={'right'}\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color={'var(--pf-global--secondary-color--100)'}\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","context","header","cves","methods","selectedCves","expandedRows","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","undefined","isOpen","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Fragment","Table","canSelectAll","cells","heightAuto","props","colSpan","title","secondParagraph","params","affecting","messages","onSelect","event","isSelected","rowId","cveName","selectCves","onCollapse","rowKey","openCves","actionResolver","rowData","rowIndex","cveTableRowActions","sortBy","createSortBy","key","meta","sort","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","PaginationWrapper","propTypes","CVETableContext","Consumer","currentFilter","currentValue","filterByAffecting","values","join","page","label","intl","type","conditionalFilterType","urlParam","filterValues","onChange","value","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","useState","exportPDF","setExportPDF","isAllExpanded","selectedRowsRawData","filter","selectedCvesCount","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","formatMessage","onClick","showBusinessRiskModal","attributes","business_risk_id","justification","business_risk_text","isDisabled","showStatusModal","exposed_systems_count","systems_affected","status_text","status_id","setColumnModalOpen","PrimaryToolbar","pagination","total_items","itemCount","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","expandAll","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","React","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","isColumnModalOpen","cveList","useSelector","CVEsStore","parameters","columns","useMemo","createCveListByAccount","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","useEffect","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","parseInt","status","Provider","format","DownloadReport","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","expandCve","ColumnManagementModal","appliedColumns","applyColumns","newColumns","changeColumnsCveList","isModalOpen","setModalOpen","Stack","StackItem","column","isShown","isShownByDefault","Popover","enableFlip","position","headerContent","bodyContent","footerContent","href","target","rel","color","className","style","verticalAlign","Header","showBreadcrumb","Main"],"sourceRoot":""}