{"version":3,"file":"js/740.f235f19c941788e7cf16.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) => {\n    const { cves, methods, selectedCves, expandedRows, canEditStatus } = context;\n\n    // TODO Material for refatoring when we'll introduce \"manage column\"\n    if (!cves?.meta?.patch_access) {\n        header = header.filter(item => item.key !== 'advisory');\n    }\n\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : !cves.data || cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  isAllExpanded } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], isAllExpanded);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const isEmpty = !cves.data || cves.data.length === 0;\n\n    const rows = !isEmpty ? cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map((cve, index) => {\n        const current = index % 2 === 0 ? expandedRows.find(opened => opened.id === cve.id) || false : { isOpen: undefined };\n        return ({ ...cve, isOpen: current && current.isOpen });\n    }) : [];\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        isStickyHeader\n                        canSelectAll={false}\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows={isEmpty ? noCves() : rows}\n                        onSelect={!isEmpty ? handleOnSelect : undefined}\n                        actionResolver={ (!isEmpty && canEditStatus) &&\n                            ((rowData, rowIndex) => systemCveTableRowActions(methods, entity, rowIndex.rowIndex))}\n                        sortBy={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                        ouiaId={'cves-table'}\n                        variant={TableVariant.compact}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={6} rowSize={20} variant={TableVariant.compact}/>\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ entity, intl, context }) => {\n\n    const onExpandAllClick = () => {\n        const { cves, methods, isAllExpanded } = context;\n        const isOpen = !isAllExpanded;\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, expandedRows, !isAllExpanded);\n    };\n\n    const { cves, parameters, methods, selectedCves, isAllExpanded, canEditStatus, canRemediate } = context;\n    const { filter, advisory } = parameters;\n    const selectedCvesCount = canRemediate && ((selectedCves && selectedCves.length) || 0);\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = ['',\n        ...(canEditStatus ?\n            [({\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(\n                    [...selectedCves].map(item => ({\n                        id: item,\n                        ...cves.data.filter(cve => item === cve.id)\n                        .map(item => ({\n                            status_id: item.status_id,\n                            cve_status_id: item.cve_status_id,\n                            justification: item.status_justification,\n                            cve_justification: item.cve_status_justification\n                        }))[0]\n                    })), []\n                ),\n                props: { isDisabled: !selectedCvesCount }\n            })] : [])\n    ];\n\n    const selectedCvesData = selectedCves.flatMap(item => cves.data.filter(cve => item === cve.id));\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                dedicatedAction={(canRemediate && entity && <Remediation systems={entity} cves={selectedCvesData} />)}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount || cves.meta.total_items === 0 },\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        knownExploitFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        useCvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        useSearchFilter('advisory', messages.advisory, messages.search, advisory, methods.apply)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (_, chips) => removeFilters(chips, methods.apply),\n                    deleteTitle: intl.formatMessage(messages.resetFilters)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n                expandAll = {{\n                    isAllExpanded,\n                    onClick: onExpandAllClick\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters, useUrlParams, updateRef } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilityHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport {\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { NotConnected } from '@redhat-cloud-services/frontend-components/NotConnected';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = ({ entity, intl, allowedCveActions, showHeaderLabel, setPageTitle }) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n    const [isFirstLoad, setIsFirstLoad] = useState(true);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.isAllExpanded\n    );\n\n    const [canRemediate, canEditStatus] = ['REMEDIATE', 'EDIT_STATUS'].map(action => allowedCveActions.includes(action));\n    const cves = useMemo(() => createCveListBySystem(entity.id, systemCVEs), [systemCVEs, entity.id]);\n    const [urlParameters, setUrlParams] = useUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && entity.id) {\n            return <NotConnected\n                titleText={intl.formatMessage(messages.notConnectedTitleText)}\n                bodyText={intl.formatMessage(messages.notConnectedBodyText)}\n                buttonText={intl.formatMessage(messages.notConnectedButtonText)}\n            />;\n        }\n        else {\n            return <ErrorHandler code={statusCode}/>;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (setPageTitle) {\n            document.title = `${entity.display_name}\n                - ${intl.formatMessage(messages.systemsHeader)} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n        }\n\n        if (isFirstLoad) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setIsFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: entity.id }));\n            urlParamsAllowed\n                && setUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const showStatusModal = cvesList => {\n        let selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n        selectedCves = selectedCves.map((\n            // eslint-disable-next-line camelcase\n            { id, cve_status_id, status_id, status_justification: justification, cve_status_justification: cve_justification }) =>\n            ({ id, cve_status_id, status_id, justification, cve_justification })); // omit properties we don't need\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cveList={selectedCves}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventoryList={[{ id: entity.id, display_name: entity.display_name }]}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, isAllExpanded) => {\n        dispatch(expandSystemCve({ isOpen, cves, isAllExpanded }));\n    };\n\n    if (!systemCVEs.payload.errors) {\n        return (\n            <CVETableContext.Provider\n                value={{\n                    cves,\n                    parameters,\n                    selectedCves,\n                    expandedRows,\n                    isAllExpanded,\n                    canRemediate,\n                    canEditStatus,\n                    methods: {\n                        apply,\n                        downloadReport,\n                        selectCves: handleCveSelect,\n                        openCves: handleCveOpen,\n                        showStatusModal,\n                        fetchResource: params => fetchSystemDetailsIds({ ...params, system: entity.id })\n                    }\n                }}\n            >\n                <StatusModal />\n\n                <Stack hasGutter>\n                    {showHeaderLabel && (\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {intl.formatMessage(messages.cvesHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                    )}\n                    <StackItem>\n                        <SystemCveTableToolbar entity={entity.id} />\n                    </StackItem>\n                </Stack>\n\n                <SystemCveTable\n                    header={SYSTEM_DETAILS_HEADER}\n                    entity={entity.id}\n                />\n            </CVETableContext.Provider>\n        );\n    }\n    else {\n        return processError(systemCVEs.payload.errors);\n    }\n\n};\n\nSystemCVEs.defaultProps = {\n    allowedCveActions: [],\n    showHeaderLabel: false,\n    setPageTitle: false\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.object,\n    intl: propTypes.any,\n    allowedCveActions: propTypes.array,\n    showHeaderLabel: propTypes.bool\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const Wrapper = customItnlProvider ? IntlProvider : Fragment;\n    return <Wrapper {...customItnlProvider && {\n        locale: navigator.language.slice(0, 2),\n        messages\n    } } >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool,\n    customRouter: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false,\n    customRouter: false\n};\n\nexport default TranslateSystemCves;\n"],"names":["SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","expandedRows","canEditStatus","meta","patch_access","filter","item","key","isEmpty","data","length","rows","map","cve","includes","id","selected","index","current","find","opened","isOpen","undefined","Fragment","isLoading","SkeletonTable","colSize","rowSize","variant","TableVariant","Table","isStickyHeader","canSelectAll","cells","heightAuto","props","colSpan","title","Object","prototype","hasOwnProperty","call","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","noCves","onSelect","event","isSelected","rowId","cveName","selectCves","actionResolver","rowData","rowIndex","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","isAllExpanded","openCves","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","ouiaId","PaginationWrapper","propTypes","CVETableContext","Consumer","SystemCveToolbarWithContext","intl","parameters","canRemediate","advisory","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","actions","label","formatMessage","messages","onClick","showStatusModal","status_id","cve_status_id","justification","status_justification","cve_justification","cve_status_justification","isDisabled","selectedCvesData","flatMap","PrimaryToolbar","pagination","itemCount","total_items","page","perPage","page_size","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","dedicatedAction","Remediation","systems","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","securityRuleFilter","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","publishDateFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","removeFilters","deleteTitle","exportConfig","expandAll","defaultProps","totalNumber","downloadReport","injectIntl","createContext","SystemCVEs","status","statusCode","allowedCveActions","showHeaderLabel","setPageTitle","dispatch","useDispatch","useState","StatusModal","setStatusModal","urlParamsAllowed","setUrlParamsAllowed","isFirstLoad","setIsFirstLoad","systemCVEs","useSelector","SystemCvesStore","cveList","action","createCveListBySystem","useUrlParams","CVES_ALLOWED_PARAMS","urlParameters","setUrlParams","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","document","display_name","fetchCveListBySystem","system","clearSystemCvesStore","clearNotifications","payload","errors","parseInt","NotConnected","titleText","bodyText","buttonText","ErrorHandler","code","Provider","value","format","DownloadReport","iSelected","selectSystemCve","expandSystemCve","cvesList","Array","from","some","element","CvePairStatusModal","updateRef","inventoryList","type","fetchSystemDetailsIds","Stack","hasGutter","StackItem","TextContent","Text","component","TextVariants","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","locale","navigator","language","slice","customRouter"],"sourceRoot":""}