{"version":3,"sources":["webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js"],"names":["InventoryDetail","props","checkItem","key","value","newList","state","systemList","selected","setState","toggleLinkHover","linkHovered","optOutSystem","inventoryId","then","fetchSystemDetails","addNotification","variant","title","description","match","params","removeListener","fetchInventory","insights","loadInventory","react","React","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","INVENTORY_ACTION_TYPES","ReducerRegistry","register","systemDetailStore","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","opt_out","isOptOut","entity","onClick","Component","propTypes","func","object","mapStateToProps","entityDetails","mapDispatchToProps","dispatch","system","status","optOutSystemAction","notification","withRouter","connect","CvePairStatusModal","cves","updateRef","inventories","hasDifferentStatus","useState","cveList","inventoryList","useJustificationInput","getDefaultLabel","JustificationInput","justification","setJustification","setJustificationProps","setProps","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","item","id","useEffect","isDisabled","disabled","cve_status_id","status_id","toString","handleSave","cveIds","setStatusParams","parseInt","cve","status_text","inventory_id","setSystemCveStatus","length","getSystemsStatus","getCvestatus","getSystemsJustification","getCveJustification","inventory","some","handleCheckboxChange","checked","successNotification","modalTitle","array","bool","SystemCvesTableWithContext","noCves","context","filterFields","filter","Object","prototype","hasOwnProperty","call","meta","emptyComponent","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","undefined","heightAuto","cells","colSpan","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","expandCveDescription","openCves","header","selectedCves","openedCves","rows","has","isLoading","systemCveTableRowActions","createSortBy","sort","handleOnCollapse","direction","handleSortColumn","apply","any","SystemCvesTable","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","ops","fetchResource","filterCveSearchTerm","defaultProps","totalNumber","SystemCveToolbar","CVETableContext","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","statusCode","NoVulnerabilityData","GenericError","dataReload","page","pages","reloadPage","page_size","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","Array","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","payload","response","JSON","downloadFile","Date","toISOString","element","StatusModal","defaultParams","queryObject","parse","location","search","errors","SystemCvesStore","createCveListBySystem","cvePromise","SystemDetail","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","initialState","loaded","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","component","LOAD_ENTITY_REJECTED"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, []);\n\n    useEffect(() => {\n        let state = (cveList &&\n            ((checkboxState && !hasDifferentStatus) && cveList[0].cve_status_id\n                || cveList[0].status_id.toString())) || '0';\n        setStatusId(state);\n\n    }, [checkboxState]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        return (cveList &&\n            (checkboxState && cveList[0].cve_status_id || cveList[0].status_id.toString())) || '0';\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: 'CVE status updated'\n    };\n\n    let modalTitle = 'Set status for this CVE and system pair';\n    if (inventoryIds.length > 1 || cves.length > 1) {\n        modalTitle = 'Set status for these CVE and system pairs';\n    }\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {hasDifferentStatus ?\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title=\"Selected pairs have different statuses. Changes will be applied to all \" />\n                        : ''}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool\n};\n\nexport default CvePairStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder=\"Find a CVE...\"\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} disabled={cves.data.length === 0} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n"],"sourceRoot":""}