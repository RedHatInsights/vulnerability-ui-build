{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["SystemCvesTableWithContext","noCves","props","entity","cves","context","filter","item","meta","hasOwnProperty","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","this","header","params","selectedCves","rows","map","cve","has","selected","loader","Array","cells","title","colSpan","Table","aria-label","onSelect","isSelectable","undefined","isLoading","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","bool","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCvesCount","size","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","showStatusList","Boolean","filterValues","Remediation","systemId","DownloadReportKebab","downloadReport","defaultProps","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","SystemCves","processError","error","status","parseInt","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","setState","state","sendRequest","cveNames","concat","forEach","add","Set","fetchData","showAllParam","show_all","system","payload","fetchCveListBySystem","page_size","Number","MAX_SAFE_INTEGER","data_format","page","then","response","JSON","stringify","downloadFile","Date","toISOString","StatusDropdown","setCallback","cveList","createCveListBySystem","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","func","connect","SystemCvesStore","entityDetails","dispatch","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","display_name","isActive","Fragment","buttonAction","withRouter","opt_out","dispatchAction","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","component","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","actions","onClick","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport { RowLoader } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        isSelectable: propTypes.bool,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves } = params;\n        const rows = cves.data.map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve);\n        const loader = [...Array(3)].map(() => ({\n            cells: [\n                {\n                    title: <RowLoader />,\n                    props: {\n                        colSpan: header.length\n                    }\n                }\n            ]\n        }));\n        return (\n            <Fragment>\n                <Table\n                    aria-label={'Vulnerability CVE table'}\n                    onSelect={(this.props.isSelectable && this.handleOnSelect) || undefined}\n                    cells={header}\n                    rows={cves.isLoading ? loader : rows}\n                    sortBy={createSortBy([{ key: 'checkbox' }, ...header], cves.meta.sort)}\n                    onSort={(event, key, direction) =>\n                        handleSortColumn(key, direction, [{ key: 'checkbox' }, ...header], cves.meta.sort, methods.apply)\n                    }\n                    gridBreakPoint={'grid-lg'}\n                >\n                    {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    )}\n                </Table>\n                <TableToolbar>\n                    <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                </TableToolbar>\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DownloadReportKebab from '../../PresentationalComponents/DownloadReportKebab/DownloadReportKebab';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    {showRemediationButton && (\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                        />\n                    )}\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <DownloadReportKebab downloadReport={methods.downloadReport} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    {\n        title: 'Description',\n        key: 'description',\n        transforms: [classNames('col-width-description')],\n        columnTransforms: [classNames('hide-description')]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base ',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-15')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set() };\n    }\n\n    componentDidMount() {\n        StatusDropdown.setCallback(this.sendRequest);\n        this.apply({ show_all: 'true', sort: '-public_date' });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            [].concat(cveNames).forEach(cveName => {\n                isSelected ? selectedCves.add(cveName) : selectedCves.delete(cveName);\n            });\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        //TODO: need a better way of doing this\n        const showAllParam = this.state.hasOwnProperty('show_all') && !this.state.show_all;\n        // eslint-disable-next-line camelcase\n        fetchData && fetchData({ ...this.state, show_all: showAllParam, system: entity.id });\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state, show_all: !this.state.show_all };\n        let { payload } = fetchCveListBySystem({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves } = this;\n        const cves = createCveListBySystem(entity.id, cveList);\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} isSelectable entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && SystemCvesStore.cveList,\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SystemCves);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis, SystemNotFound } from '../../../Helpers/constants';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: 'Vulnerability', to: paths.vulnerabilities },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return (\n                <SystemNotFound />\n            );\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system)),\n        addNotification: notification => dispatchAction(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}