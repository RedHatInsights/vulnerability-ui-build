{"version":3,"sources":["webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/Reducers/BreadcrumbStore.js","webpack:///./src/Store/Reducers/CVEStore.js","webpack:///./src/Store/Reducers/SystemCvesStore.js","webpack:///./src/Store/Reducers/SystemsStore.js","webpack:///./src/Store/Reducers/VulnerabilitiesStore.js","webpack:///./src/Store/Actions/Actions.js","webpack:///./src/Components/SmartComponents/Modals/BaseModal.js","webpack:///./src/Components/SmartComponents/InsightsSystemRule/InsightsSystemRule.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Helpers/selectAllCheckboxHelper.js","webpack:///./src/Helpers/DownloadReport.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter.js","webpack:///./src/Helpers/TableToolbarHelper.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["FETCH_CVE_LIST","FETCH_CVE_DETAILS","HANDLE_CVE_DETAILS_ERROR","FETCH_SYSTEM_DETAILS","FETCH_AFFECTED_SYSTEMS_BY_CVE","FETCH_SYSTEMS","SET_HEADER","SYSTEM_OPT_OUT","FETCH_SYSTEM_CVE_LIST","CHANGE_SYSTEM_CVE_STATUS","CHANGE_EXPOSED_SYSTEMS_PARAMETERS","CHANGE_CVE_LIST_PARAMETERS","SELECT_CVE","SELECT_SYSTEM_CVE","SELECT_ENTITIES","SELECT_MULTIPLE_ENTITIES","EXPAND_CVE","EXPAND_ROW","EXPAND_SYSTEM_CVE","CHANGE_SYSTEMS_PARAMS","CHANGE_SYSTEM_CVE_LIST_PARAMETERS","CLEAR_SYSTEMS_STORE","CLEAR_SYSTEM_CVES_STORE","CLEAR_CVE_STORE","FETCH_AFFECTED_SYSTEM_IDS_BY_CVE","FETCH_SYSTEMS_IDS","FETCH_CVE_LIST_IDS","FETCH_SYTEM_DETAILS_IDS","initialState","Immutable","title","breadcrumbs","affectedSystemsByCVE","isLoading","openedRows","payload","meta","total_items","page","page_size","parameters","selectedHosts","security_rule","undefined","status_id","cveDetails","error","cveList","Date","openedCves","selectedCves","expandCveDescription","SystemCvesStore","applyReducerHash","state","timestamp","errors","action","newState","slice","Array","isArray","includes","splice","indexOf","push","isOpen","cves","length","map","cve","index","findIndex","element","id","metadata","limit","offet","params","filter","opt_out","show_all","sort","isValid","stateTimestamp","actionTimestamp","ReducerRegistry","register","CVEStore","type","ActionTypes","setIn","VulnerabilitiesStore","cveName","data","SystemsStore","BreadcrumbStore","set","setHeader","props","Promise","resolve","HeaderHelper","then","result","fetchAffectedSystemsByCVE","apiProps","APIHelper","fetchSystems","options","fetchCveDetails","synopsis","handleCveDetailsError","fetchSystemDetails","system","noError","fetchCveListByAccount","optOutSystemAction","status","fetchCveListBySystem","optOutSystemsAction","changeCveListParameters","changeExposedSystemsParameters","changeSystemCVEsParameters","selectCve","expandCve","selectSystemCve","expandSystemCve","expandRow","selectMultipleEntities","changeSystemsParams","clearSystemStore","clearSystemCvesStore","clearCveStore","fetchAffectedSystemsIdsByCve","fetchSystemsIds","fetchCvesIds","fetchSystemDetailsIds","useStatusSelect","initialValue","useState","statusId","setStatusId","setProps","StatusSelect","label","messages","statusLabel","fieldId","aria-label","onChange","selection","value","STATUS_OPTIONS","key","useJustificationInput","justification","setJustification","JustificationInput","justificationLabel","resizeOrientation","BaseModal","items","onSave","onSuccessNotification","targetItems","setTargetItems","handleClose","Fragment","variant","Boolean","onClose","actions","onClick","notification","addNotification","save","cancel","children","propTypes","any","func","array","updateRef","string","object","connect","dispatch","InsightsSystemRule","rule","TextContent","className","Text","component","TextVariants","h3","style","paddingLeft","Label","Tooltip","content","rulesIconTooltip","CSAwIcon","description","rule_id","InsightsReportCard","report","PropType","shape","details","resulotion","isRequired","InsightsNoSystemRule","p","exposedSystemNoRules","values","exposedSystemNoRulesInfo","target","rel","href","exposedSystemNoRulesInfoLink","createExposedSystemsTable","cvesCount","item","attributes","status_name","createSystemsListTable","affectedSystems","asMutable","cve_status_id","onlyThisSystemCvePair","find","option","parseInt","createCveDetailsPage","impact","public_date","processDate","rh_link","RHDBLink","mitre_link","createMitreLink","cvss3_score","cvss2_score","cvss2_metrics","cvss3_metrics","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","toString","business_risk_justification","business_risk_text","status_justification","status_text","systems_status_detail","systems_status_divergent","rules","MITRELink","cveTableRowActions","methods","editBusinessRisk","event","rowId","rowData","showBusinessRiskModal","editStatus","showStatusModal","systemCveTableRowActions","cve_justification","cve_status_justification","systemExposedTableRowActions","systemTableRowActions","optOut","isOptOut","kebabResumeAnalysis","kebabExcludeAnalysis","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","multiRow","selectedItemsArray","from","selectedItemsCount","selectPageNumber","handleUnselectAll","handleSelectAll","handleOnCheckboxChange","intl","formatMessage","selectNone","selectPage","count","collectedItems","union","selectAll","filename","defaultParams","date","checkTypes","fetchData","format","pages","formats","exec","a","data_format","response","JSON","stringify","downloadFile","this","Number","MAX_SAFE_INTEGER","toISOString","replace","split","SearchFilter","placeholder","search","apply","React","searchValue","setSearchValue","debounce","handleSearch","useEffect","conditionalFilterType","text","filterValues","handleChangePage","_event","handleSetPageSize","perPage","exportConfig","onSelect","fileType","downloadReport","buildActiveFilters","currentFilters","filterRulevalues","buildChip","parameter","FILTERS","reduce","name","filteredRule","buildChips","paramValues","filterChips","Object","keys","multiValue","filteredValues","category","chips","searchLabel","removeFilters","obj","some","chip","join","FilterNotFoundForCVE","height","EmptyStateVariant","large","headingLevel","size","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","emptyStateForMoreInfo","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoCvesReported","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","emptyStateSystemResumeAnalysis","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","errorReload","securityRuleFilter","currentFilter","dynamicFilters","currentValue","filterBySecurityRule","securityRules","radio","urlParam","unionWith","SECURITY_RULE_OPTIONS","isEqual","statusFilter","filterByStatus","checkbox","CvePairStatusModal","inventories","hasDifferentStatus","inventoryList","getCveJustification","getDefaultLabel","setJustificationProps","inventory","getDefaultCheckboxState","checkboxState","setCheckboxState","getCveStatus","getDefaultStatus","setSelectProps","inventoryIds","isDisabled","disabled","successNotification","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","cveIds","setStatusParams","inventory_id","setSystemCveStatus","hasGutter","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","systemName","b","chunks","cvePairStatusModalUseOverallCheckbox","isChecked","checked","cvePairStatusModalUseOverallTooltip","color","verticalAlign","bool","injectIntl","Remediation","remediationProvider","systems","concat","issues","nextProps","dispatchNotification","dataProvider","onRemediationCreated","getNotification","globalBackgroundColor100","remediateLabel","Component","oneOfType","routerParams","PaginationWrapper","pageNumber","totalItems","pageSize","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","defaultProps","publishDateFilter","publish_date","filterByPublishDate","publishDate","PUBLIC_DATE_OPTIONS","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","filterByImpact","IMPACT_OPTIONS","hasIcon","iconColor","businessRiskFilter","filterByBusinessRisk","businessRisk","module","i","transform","locals","exports","SystemCvesTableWithContext","context","header","entity","isEmpty","rows","selected","current","opened","SkeletonTable","colSize","rowSize","Table","cells","heightAuto","colSpan","prototype","hasOwnProperty","call","noCves","isSelected","selectCves","sortBy","createSortBy","onCollapse","rowKey","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","TableToolbar","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","selectedCvesCount","selectOptions","useMemo","ops","kebabCollapseCves","kebabExpandCves","PrimaryToolbar","pagination","actionsConfig","kebabToggleProps","bulkSelect","filterConfig","searchFilter","searchFilterByCveID","activeFiltersConfig","filters","onDelete","e","totalNumber","createContext","SystemCVEs","useDispatch","StatusModal","setStatusModal","firstMount","setFirstMount","urlParamsAllowed","setUrlParamsAllowed","systemCVEs","useSelector","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","constructFilterParameters","Provider","DownloadReport","iSelected","cvesList","Stack","StackItem","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","history","location","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","wrapper","intlProps","SystemDetail","optOutSystemHandler","loaded","PATHS","vulnerabilities","to","display_name","invalidSystem","isActive","entityDetails","systemDetailStore","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","setState","toggleLinkHover","linkHovered","optOutSystem","inventoryId","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","pfReactTable","PfTable","TableBody","TableHeader","TableGridBreakpoint","cellWidth","TableVariant","sortable","expandable","SortByDirection","inventoryConnector","mergeWithEntities","mergeWithDetail","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","Main"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["export const FETCH_CVE_LIST = 'FETCH_CVE_LIST';\nexport const EMPTY_CVE_LIST = 'EMPTY_CVE_LIST';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const HANDLE_CVE_DETAILS_ERROR = 'HANDLE_CVE_DETAILS_ERROR';\nexport const FETCH_SYSTEM_DETAILS = 'FETCH_SYSTEM_DETAILS';\nexport const FETCH_AFFECTED_SYSTEMS_BY_CVE = 'FETCH_AFFECTED_SYSTEMS_BY_CVE';\nexport const FETCH_SYSTEMS = 'FETCH_SYSTEMS';\nexport const SET_HEADER = 'SET_HEADER';\nexport const SYSTEM_OPT_OUT = 'SYSTEM_OPT_OUT';\nexport const FETCH_SYSTEM_CVE_LIST = 'FETCH_SYSTEM_CVE_LIST';\nexport const CHANGE_SYSTEM_CVE_STATUS = 'CHANGE_SYSTEM_CVE_STATUS';\nexport const CHANGE_EXPOSED_SYSTEMS_PARAMETERS = 'CHANGE_EXPOSED_SYSTEMS_PARAMETERS';\nexport const CHANGE_CVE_LIST_PARAMETERS = 'CHANGE_CVE_LIST_PARAMETERS';\nexport const SELECT_CVE = 'SELECT_CVE';\nexport const SELECT_SYSTEM_CVE = 'SELECT_SYSTEM_CVE';\nexport const SELECT_ENTITIES = 'SELECT_ENTITIES';\nexport const SELECT_MULTIPLE_ENTITIES = 'SELECT_MULTIPLE_ENTITIES';\nexport const EXPAND_CVE = 'EXPAND_CVE';\nexport const EXPAND_ROW = 'EXPAND_ROW'; //TODO unify it with EXPAND_CVE action\nexport const EXPAND_SYSTEM_CVE = 'EXPAND_SYSTEM_CVE';\nexport const FETCH_INSIGHTS_SYSTEM_RULES = 'FETCH_INSIGHTS_SYSTEM_RULES';\nexport const CHANGE_SYSTEMS_PARAMS = 'CHANGE_SYSTEMS_PARAMS';\nexport const CHANGE_SYSTEM_CVE_LIST_PARAMETERS = 'CHANGE_SYSTEM_CVE_LIST_PARAMETERS';\nexport const CLEAR_SYSTEMS_STORE = 'CLEAR_SYSTEMS_STORE';\nexport const CLEAR_SYSTEM_CVES_STORE = 'CLEAR_SYSTEM_CVES_STORE';\nexport const CLEAR_CVE_STORE = 'CLEAR_CVE_STORE';\nexport const FETCH_AFFECTED_SYSTEM_IDS_BY_CVE = 'FETCH_AFFECTED_SYSTEM_IDS_BY_CVE';\nexport const FETCH_SYSTEMS_IDS = 'FETCH_SYSTEMS_IDS';\nexport const FETCH_CVE_LIST_IDS = 'FETCH_CVE_LIST_IDS';\nexport const FETCH_SYTEM_DETAILS_IDS = 'FETCH_SYTEM_DETAILS_IDS';\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    title: 'Vulnerability',\n    breadcrumbs: []\n});\n\n// Reducer\nexport const BreadcrumbStore = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.SET_HEADER + '_FULFILLED':\n            newState = state.set('title', (action.payload && action.payload.title) || initialState.title);\n            newState = newState.set('breadcrumbs', (action.payload && action.payload.breadcrumbs) || initialState.breadcrumbs);\n            return newState;\n\n        default:\n            return state;\n    }\n};\n","import Immutable from 'seamless-immutable';\nimport * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = Immutable({\n    affectedSystemsByCVE: {\n        isLoading: true,\n        openedRows: [],\n        payload: {\n            meta: {\n                total_items: 0,\n                page: 1,\n                page_size: 20\n            }\n        }\n    },\n    parameters: {\n        page: 1,\n        page_size: 20,\n        selectedHosts: [],\n        security_rule: undefined,\n        status_id: undefined\n    },\n    cveDetails: {\n        isLoading: true,\n        payload: {},\n        error: false\n    }\n});\n\n// Reducer\nexport const CVEReducer = (state = initialState, action) => {\n    let newState;\n    switch (action.type) {\n        case ActionTypes.HANDLE_CVE_DETAILS_ERROR:\n            newState = state.setIn(['cveDetails', 'error'], action.payload.error);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n        case ActionTypes.FETCH_CVE_DETAILS + '_PENDING':\n            newState = state.setIn(['cveDetails', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_CVE_DETAILS + '_FULFILLED':\n            newState = state.setIn(['cveDetails', 'payload'], action.payload);\n            newState = newState.setIn(['cveDetails', 'isLoading'], false);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_PENDING':\n            newState = state.setIn(['affectedSystemsByCVE', 'isLoading'], true);\n            return newState;\n\n        case ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE + '_FULFILLED':\n            newState = state.setIn(['affectedSystemsByCVE', 'payload'], action.payload);\n            newState = newState.setIn(['affectedSystemsByCVE', 'isLoading'], false);\n            return newState;\n        case ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS:\n            newState = state.setIn(['parameters'], {\n                ...state.parameters,\n                ...action.payload,\n                page_size: action.payload.page_size || state.parameters.page_size\n            });\n            return newState;\n        case ActionTypes.CLEAR_CVE_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { FETCH_SYSTEM_CVE_LIST } from '../ActionTypes';\n\nexport const initialState = {\n    parameters: {\n        page: 1,\n        page_size: 20\n    },\n    cveList: {\n        isLoading: true,\n        payload: [],\n        meta: new Date(),\n        error: false\n    },\n    openedCves: [],\n    selectedCves: [],\n    expandCveDescription: false\n};\n\nfunction pendingVulnerabilities(state, { meta }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            ...state.cveList,\n            isLoading: true\n        }\n    };\n}\n\nfunction rejectedVulnerabilities(state, { meta, payload }) {\n    return {\n        ...state,\n        timestamp: meta,\n        cveList: {\n            payload: { errors: payload },\n            isLoading: false\n        }\n    };\n}\n\nfunction fulfilledVulnerabilities(state, action) {\n    const { payload, meta } = action;\n    if (meta >= state.timestamp) {\n        return {\n            ...state,\n            timestamp: meta,\n            cveList: {\n                payload,\n                isLoading: false\n            }\n        };\n    }\n\n    return state;\n}\n\nfunction selectEntity(state, action) {\n    let newState = state;\n    let selectedCves = newState.selectedCves.slice();\n    if (Array.isArray(action.payload)) {\n        selectedCves = action.payload;\n    } else {\n        (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n            selectedCves.push(action.payload);\n    }\n\n    return { ...newState, selectedCves };\n}\n\nfunction expandCve(state, action) {\n    let newState = state;\n    const { isOpen, cves, expandCveDescription } = action.payload;\n    let openedCves = newState.openedCves.slice();\n\n    if (cves.length > 0) {\n        cves.map(cve =>{\n            const index = openedCves.findIndex(element => element.id === cve);\n            if (index > -1) { openedCves[index] = ({ id: cve, isOpen });}\n            else {openedCves.push({ id: cve, isOpen });}\n        });\n    }\n    else {\n        openedCves = openedCves.map(cve => ({ id: cve.id, isOpen: false }));\n    }\n\n    return { ...newState, openedCves, expandCveDescription };\n}\n\nfunction changeParameters(state, action) {\n    let newState = state;\n    newState.parameters = { ...state.parameters, ...action.payload };\n    return newState;\n}\n\nfunction clearSystemCvesStore(state) {\n    let newState = state;\n    newState.selectedCves = [];\n    newState.openedCves = [];\n    newState.parameters = {\n        page: 1,\n        page_size: 20\n    };\n    return newState;\n}\n\nexport const SystemCvesStore = applyReducerHash(\n    {\n        [`${FETCH_SYSTEM_CVE_LIST}_PENDING`]: pendingVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_REJECTED`]: rejectedVulnerabilities,\n        [`${FETCH_SYSTEM_CVE_LIST}_FULFILLED`]: fulfilledVulnerabilities,\n        ['CHANGE_SYSTEM_CVE_LIST_PARAMETERS']: changeParameters,\n        ['SELECT_SYSTEM_CVE']: selectEntity,\n        ['EXPAND_SYSTEM_CVE']: expandCve,\n        ['CLEAR_SYSTEM_CVES_STORE']: clearSystemCvesStore\n    },\n    initialState\n);\n","import * as ActionTypes from '../../Store/ActionTypes';\n\n// Initial State\nexport const initialState = {\n    isLoading: true,\n    payload: {},\n    metadata: {\n        page: 1,\n        limit: 20,\n        offet: 0,\n        total_items: 0\n    },\n    params: {\n        filter: undefined,\n        opt_out: false,\n        page: 1,\n        page_size: 20\n    }\n};\n// Reducer\nexport const SystemsReducer = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case ActionTypes.FETCH_SYSTEMS + '_PENDING':\n            newState.isLoading = true;\n            return newState;\n\n        case ActionTypes.FETCH_SYSTEMS + '_FULFILLED':\n            newState.payload = action.payload;\n            newState.metadata = action.payload.meta;\n            newState.isLoading = false;\n            return newState;\n        case ActionTypes.CHANGE_SYSTEMS_PARAMS:\n            newState.params = {\n                ...newState.params,\n                ...action.payload,\n                page_size: action.payload.page_size || newState.params.page_size\n            };\n            return newState;\n        case ActionTypes.CLEAR_SYSTEMS_STORE:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import * as ActionTypes from '../ActionTypes';\n\n// Initial State\nexport const initialState = {\n    cveList: {\n        isLoading: true,\n        payload: [],\n        timestamp: new Date()\n    },\n    parameters: {\n        show_all: 'true',\n        sort: '-public_date',\n        selectedCves: [],\n        openedCves: [],\n        expandCveDescription: false\n    }\n};\n\nfunction isValid(stateTimestamp, actionTimestamp) {\n    return actionTimestamp >= stateTimestamp;\n}\n\n// Reducer\nexport const VulnerabilitiesStore = (state = initialState, action) => {\n    let newState = { ...state };\n\n    switch (action.type) {\n        case ActionTypes.FETCH_CVE_LIST + '_PENDING':\n            newState.cveList.isLoading = true;\n            newState.cveList.timestamp = action.meta;\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_REJECTED':\n            newState.cveList.isLoading = false;\n            newState.cveList.payload = { errors: action.payload };\n            return newState;\n\n        case ActionTypes.FETCH_CVE_LIST + '_FULFILLED':\n            if (isValid(state.cveList.timestamp, action.meta)) {\n                newState.cveList.payload = action.payload;\n                newState.cveList.isLoading = false;\n                newState.cveList.timestamp = action.meta;\n                return newState;\n            }\n\n            return state;\n\n        case ActionTypes.CHANGE_CVE_LIST_PARAMETERS + '_FULFILLED':\n            newState.parameters = { ...newState.parameters, ...action.payload };\n            return newState;\n\n        case ActionTypes.SELECT_CVE: {\n            let selectedCves = newState.parameters.selectedCves.slice();\n            if (Array.isArray(action.payload)) {\n                selectedCves = action.payload;\n            } else {\n                (selectedCves.includes(action.payload) && selectedCves.splice(selectedCves.indexOf(action.payload), 1)) ||\n                    selectedCves.push(action.payload);\n            }\n\n            return { ...newState, parameters: { ...newState.parameters, selectedCves } };\n        }\n\n        case ActionTypes.EXPAND_CVE: {\n            if (Array.isArray(action.payload)) {\n                const openedCves = action.payload;\n                const expandCveDescription = action.payload.length === 0 ? false : true;\n                return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n            }\n\n            const cveName = newState.cveList.payload.data[action.payload / 2].id;\n            const openedCves = newState.parameters.openedCves.slice();\n            (openedCves.includes(cveName) && openedCves.splice(openedCves.indexOf(cveName), 1)) || openedCves.push(cveName);\n\n            const expandCveDescription = (openedCves.length === newState.cveList.payload.data.length);\n\n            return { ...newState, parameters: { ...newState.parameters, openedCves, expandCveDescription } };\n        }\n\n        default:\n            return state;\n    }\n};\n","import * as APIHelper from '../../Helpers/APIHelper';\nimport * as HeaderHelper from '../../Helpers/HeaderHelper';\nimport ReducerRegistry from '../../Utilities/ReducerRegistry';\nimport * as ActionTypes from '../ActionTypes';\nimport { BreadcrumbStore } from '../Reducers/BreadcrumbStore';\nimport { CVEReducer } from '../Reducers/CVEStore';\nimport { SystemCvesStore } from '../Reducers/SystemCvesStore';\nimport { SystemsReducer } from '../Reducers/SystemsStore';\nimport { VulnerabilitiesStore } from '../Reducers/VulnerabilitiesStore';\n\nReducerRegistry.register({ CVEStore: CVEReducer });\nReducerRegistry.register({ VulnerabilitiesStore });\nReducerRegistry.register({ SystemsStore: SystemsReducer });\nReducerRegistry.register({ BreadcrumbStore });\nReducerRegistry.register({ SystemCvesStore });\n\nexport const setHeader = props => ({\n    type: ActionTypes.SET_HEADER,\n    payload: new Promise(resolve => {\n        resolve(HeaderHelper.setHeader(props));\n    }).then(result => result)\n});\n\nexport const fetchAffectedSystemsByCVE = (cve, apiProps) =>({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEMS_BY_CVE,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getAffectedSystemsByCVE(cve, apiProps));\n    }).then(result => result)\n});\n\nexport const fetchSystems = options => ({\n    type: ActionTypes.FETCH_SYSTEMS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystems(options));\n    }).then(result => result)\n});\n\nexport const fetchCveDetails = synopsis => ({\n    type: ActionTypes.FETCH_CVE_DETAILS,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getCveDetails(synopsis));\n    }).then(result => result)\n});\n\nexport const handleCveDetailsError = () => ({\n    type: ActionTypes.HANDLE_CVE_DETAILS_ERROR,\n    payload: { error: true }\n});\n\nexport const fetchSystemDetails = system => ({\n    type: ActionTypes.FETCH_SYSTEM_DETAILS,\n    meta: { noError: true },\n    payload: new Promise(resolve => {\n        resolve(APIHelper.getSystemDetails(system));\n    }).then(result => result)\n});\n\nexport const fetchCveListByAccount = apiProps => ({\n    type: ActionTypes.FETCH_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListByAccount(apiProps)\n});\n\nexport const optOutSystemAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystem(system, status));\n    }).then(result => result)\n});\n\nexport const fetchCveListBySystem = apiProps => ({\n    type: ActionTypes.FETCH_SYSTEM_CVE_LIST,\n    meta: new Date(),\n    payload: APIHelper.getCveListBySystem(apiProps)\n});\n\nexport const changeSystemCveStatusAction = (inventoryId, cve, statusId, callback) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_STATUS,\n    payload: APIHelper.setSystemCveStatus(inventoryId, cve, statusId, callback)\n});\n\nexport const optOutSystemsAction = (system, status) => ({\n    type: ActionTypes.SYSTEM_OPT_OUT,\n    payload: new Promise(resolve => {\n        resolve(APIHelper.optOutSystems(system, status));\n    }).then(result => result)\n});\n\nexport const changeCveListParameters = apiProps => ({\n    type: ActionTypes.CHANGE_CVE_LIST_PARAMETERS,\n    payload: new Promise(resolve => {\n        resolve(apiProps);\n    }).then(result => result)\n});\n\nexport const changeExposedSystemsParameters = (params) => ({\n    type: ActionTypes.CHANGE_EXPOSED_SYSTEMS_PARAMETERS,\n    payload: params\n});\n\nexport const changeSystemCVEsParameters = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEM_CVE_LIST_PARAMETERS,\n    payload: params\n});\n\nexport const selectCve = apiProps => ({\n    type: ActionTypes.SELECT_CVE,\n    payload: apiProps\n});\n\nexport const expandCve = apiProps => ({\n    type: ActionTypes.EXPAND_CVE,\n    payload: apiProps\n});\n\nexport const selectSystemCve = apiProps => ({\n    type: ActionTypes.SELECT_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandSystemCve = apiProps => ({\n    type: ActionTypes.EXPAND_SYSTEM_CVE,\n    payload: apiProps\n});\n\nexport const expandRow = (id, isOpen) => ({\n    type: ActionTypes.EXPAND_ROW,\n    payload: { id, isOpen }\n});\n\nexport const selectEntities = (value, ids) => ({\n    type: ActionTypes.SELECT_ENTITIES,\n    payload: ids\n});\n\nexport const selectMultipleEntities = (selectedHosts) => ({\n    type: ActionTypes.SELECT_MULTIPLE_ENTITIES,\n    payload: selectedHosts\n});\n\nexport const changeSystemsParams = (params) => ({\n    type: ActionTypes.CHANGE_SYSTEMS_PARAMS,\n    payload: params\n});\n\nexport const clearSystemStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEMS_STORE,\n    payload: []\n});\n\nexport const clearSystemCvesStore = () => ({\n    type: ActionTypes.CLEAR_SYSTEM_CVES_STORE,\n    payload: []\n});\n\nexport const clearCveStore = () => ({\n    type: ActionTypes.CLEAR_CVE_STORE,\n    payload: []\n});\n\nexport const fetchAffectedSystemsIdsByCve = (cve, apiProps) => ({\n    type: ActionTypes.FETCH_AFFECTED_SYSTEM_IDS_BY_CVE,\n    payload: APIHelper.getAffectedSystemsIdsByCve(cve, apiProps)\n});\n\nexport const fetchSystemsIds = (apiProps) => ({\n    type: ActionTypes.FETCH_SYSTEMS_IDS,\n    payload: APIHelper.getSystemsIds(apiProps)\n});\n\nexport const fetchCvesIds = (apiProps) => ({\n    type: ActionTypes.FETCH_CVE_LIST_IDS,\n    payload: APIHelper.getCveIdsList(apiProps)\n});\n\nexport const fetchSystemDetailsIds = (apiProps) =>({\n    type: ActionTypes.FETCH_SYTEM_DETAILS_IDS,\n    payload: APIHelper.getCveIdsBySystem(apiProps)\n});\n","import { Button, FormGroup, FormSelect, FormSelectOption, Modal, TextArea } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { STATUS_OPTIONS } from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport function useStatusSelect(initialValue) {\n    const [statusId, setStatusId] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const StatusSelect = (\n        <FormGroup label={<FormattedMessage {...messages.statusLabel} />} fieldId={'statusId'}>\n            <FormSelect aria-label=\"Select Input\" onChange={selection => setStatusId(selection)} value={statusId} {...props}>\n                {STATUS_OPTIONS.map(({ value, label }) => (\n                    <FormSelectOption key={value} value={value} label={label} />\n                ))}\n            </FormSelect>\n        </FormGroup>\n    );\n    return { StatusSelect, statusId, setStatusId, setProps };\n}\n\nexport function useJustificationInput(initialValue) {\n    const [justification, setJustification] = useState(initialValue);\n    const [props, setProps] = useState({});\n    const JustificationInput = (\n        <FormGroup label={<FormattedMessage {...messages.justificationLabel} />} fieldId={'label'}>\n            <TextArea\n                key=\"input\"\n                type=\"text\"\n                onChange={value => setJustification(value)}\n                value={justification}\n                resizeOrientation='vertical'\n                aria-label={'justification note'}\n                {...props}\n            />\n        </FormGroup>\n    );\n    return { JustificationInput, justification, setJustification, setProps };\n}\n\nexport const BaseModal = ({ items, title, onSave, onSuccessNotification, ...props }) => {\n    const [targetItems, setTargetItems] = useState(items);\n\n    const createNotification = notification => {\n        return props.addNotification(notification);\n    };\n\n    const handleClose = () => {\n        setTargetItems(undefined);\n    };\n\n    const handleSave = () => {\n        onSave().then(() => createNotification(onSuccessNotification));\n        handleClose();\n    };\n\n    return (\n        <React.Fragment>\n            <Modal\n                variant=\"small\"\n                title={title}\n                isOpen={Boolean(targetItems)}\n                onClose={handleClose}\n                actions={[\n                    <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                        {<FormattedMessage {...messages.save} />}\n                    </Button>,\n                    <Button key=\"cancel\" variant=\"secondary\" onClick={handleClose}>\n                        {<FormattedMessage {...messages.cancel} />}\n                    </Button>\n                ]}\n            >\n                {props.children}\n            </Modal>\n        </React.Fragment>\n    );\n};\n\nBaseModal.propTypes = {\n    children: propTypes.any,\n    onClose: propTypes.func,\n    items: propTypes.array,\n    updateRef: propTypes.func,\n    addNotification: propTypes.func,\n    title: propTypes.string,\n    onSave: propTypes.func,\n    onSuccessNotification: propTypes.object\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addNotification: data => dispatch(addNotification(data))\n    };\n};\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(BaseModal);\n","import React, { Fragment } from 'react';\nimport { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport PropType from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport InsightsReportCard from '@redhat-cloud-services/frontend-components-inventory-insights/esm/InsightsReportCard';\nimport { CSAwIcon } from '../../PresentationalComponents/CSAwIcon/CSAwIcon';\nimport Label from '../../PresentationalComponents/Snippets/Label';\nimport messages from '../../../Messages';\n\nexport const InsightsSystemRule = ({ rule, cve }) => {\n    return (\n        <Fragment>\n            { !rule ? <InsightsNoSystemRule cve={cve}/> :\n                <Fragment>\n                    <TextContent className=\"icon-with-label\">\n                        <Text component={TextVariants.h3} style={{ paddingLeft: 'var(--pf-global--spacer--lg)' }}>\n                            <Label>\n                                <Tooltip content={<FormattedMessage {...messages.rulesIconTooltip} />}>\n                                    <CSAwIcon />\n                                </Tooltip>\n                            </Label>\n                            <span className=\"rule-name\">{rule.rule.description || rule.rule.rule_id}</span>\n                        </Text>\n                    </TextContent>\n\n                    <InsightsReportCard report={rule} />\n                </Fragment>\n            }\n        </Fragment>\n\n    );\n};\n\nInsightsSystemRule.propTypes = {\n    rule: PropType.shape({\n        rule: PropType.object,\n        details: PropType.object,\n        resulotion: PropType.object\n    }).isRequired,\n    cve: PropType.string\n};\n\nexport const InsightsNoSystemRule = ({ cve }) => {\n    return (\n        <TextContent className=\"icon-with-label\">\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRules} values={{ cve }} />\n            </Text>\n            <Text component={TextVariants.p}>\n                <FormattedMessage {...messages.exposedSystemNoRulesInfo}/> <CSAwIcon/>\n                <br/>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://access.redhat.com/articles/2968471\">\n                    <FormattedMessage {...messages.exposedSystemNoRulesInfoLink} />\n                </a>\n            </Text>\n        </TextContent>\n    );\n};\n\nInsightsNoSystemRule.propTypes = {\n    cve: PropType.string\n};\n","import { Tooltip } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport React from 'react';\nimport { BUSINESS_RISK_OPTIONS, STATUS_OPTIONS } from './constants';\nimport { FormattedMessage } from 'react-intl';\nimport { InsightsSystemRule, InsightsNoSystemRule } from '../Components/SmartComponents/InsightsSystemRule/InsightsSystemRule';\nimport messages from '../Messages';\n\n/**\n * Creates the tables rows for systems exposed table\n *\n * @param {Boolean} isLoading\n * @param {Array} payload fetched data\n * @param {Array} openedRows id of opened(expaned) row\n *\n */\nexport const createExposedSystemsTable = ({ isLoading, payload, openedRows, cve }) => {\n    if (isLoading) {\n        return { data: (payload && payload.data) || [], meta: {}, isLoading };\n    }\n\n    let { data, meta } = payload;\n    const cvesCount = data && data.length;\n    const tableRows = data.map(item => ({\n        ...item.attributes,\n        id: item.id,\n        isOpen: openedRows.includes(item.id),\n        status: item.attributes.status_name,\n        children: item.attributes.rule\n            ? <InsightsSystemRule cve={cve} rule={item.attributes.rule} />\n            : <InsightsNoSystemRule cve={cve}/>\n    }));\n\n    return { data: tableRows, meta: { ...meta, cvesCount },  isLoading };\n\n};\n\nexport function createSystemsListTable(affectedSystems) {\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        const dataWithStatus = data.map(item => ({\n            ...item,\n            attributes: {\n                ...item.attributes,\n                status: (\n                    <span>\n                        {item.attributes.cve_status_id !== item.attributes.status_id ? (\n                            <Tooltip content={<FormattedMessage {...messages.onlyThisSystemCvePair} />}>\n                                <ServerAltIcon />\n                            </Tooltip>\n                        ) : (\n                            ''\n                        )}{' '}\n                        {item.attributes.status_id !== undefined &&\n                            STATUS_OPTIONS.find(option => parseInt(option.value) === item.attributes.status_id).label}\n                    </span>\n                )\n            }\n        }));\n        return { data: dataWithStatus, meta, isLoading };\n    }\n\n    return { data: (affectedSystems.payload && affectedSystems.payload.data) || [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    let error = cves.error;\n    if (!isLoading && !error) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n\n        data = {\n            impact: data.attributes.impact,\n            public_date: processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score,\n            cvss2_score: data.attributes.cvss2_score,\n            cvss2_metrics: data.attributes.cvss2_metrics,\n            cvss3_metrics: data.attributes.cvss3_metrics,\n            business_risk: BUSINESS_RISK_OPTIONS.find(\n                option => option.value === data.attributes.business_risk_id.toString()\n            ).label,\n            business_risk_justification: data.attributes.business_risk_text,\n            business_risk_id: data.attributes.business_risk_id,\n            status: STATUS_OPTIONS.find(option => option.value === data.attributes.status_id.toString()).label,\n            status_id: data.attributes.status_id,\n            status_justification: data.attributes.status_text,\n            systems_status_detail: data.attributes.systems_status_detail,\n            systems_status_divergent: data.attributes.systems_status_divergent,\n            rules: data.attributes.rules\n        };\n\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading, error };\n}\n\nexport function createRHDBLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://access.redhat.com/security/cve/' + item}>\n            {<FormattedMessage {...messages.RHDBLink} />}{<ExternalLinkAltIcon className=\"pf-u-ml-sm\"/>}\n        </a>\n    );\n}\n\nexport function createMitreLink(item) {\n    return (\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>\n            {<FormattedMessage {...messages.MITRELink} />}{<ExternalLinkAltIcon />}\n        </a>\n    );\n}\n\nexport const cveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editBusinessRisk} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showBusinessRiskModal([\n                {\n                    id: rowData.id,\n                    business_risk_id: rowData.business_risk_id,\n                    justification: rowData.business_risk_justification\n                }\n            ])\n    },\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_justification\n                }\n            ])\n    }\n];\n\nexport const systemCveTableRowActions = methods => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) =>\n            methods.showStatusModal([\n                {\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    cve_status_id: rowData.cve_status_id,\n                    justification: rowData.status_justification,\n                    cve_justification: rowData.cve_status_justification\n                }\n            ])\n    }\n];\n\nexport const systemExposedTableRowActions = (showStatusModal, cve) => [\n    {\n        title: <FormattedMessage {...messages.editStatus} />,\n        onClick: (event, rowId, rowData) => {\n            showStatusModal(\n                [{\n                    id: cve.id,\n                    status_id: cve.status_id,\n                    justification: cve.justification\n                }],\n                [{\n                    id: rowData.id,\n                    status_id: rowData.status_id,\n                    justification: rowData.status_text\n                }]\n            );\n        }\n    }\n];\n\nexport const systemTableRowActions = (optOut, isOptOut) => [\n    {\n        title:\n            <FormattedMessage {... isOptOut\n                ? messages.kebabResumeAnalysis\n                : messages.kebabExcludeAnalysis}\n            />,\n        onClick: (event, rowId, rowData) => {\n            optOut([rowData.id]);\n        }\n    }\n];\n","import union from 'lodash/union';\nimport messages from '../Messages';\nimport { intl } from '../Utilities/IntlProvider';\n\nconst selectAllCheckbox = ({ selectedItems, selectorHandler, items, fetchResource, multiRow = false }) => {\n\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const selectPageNumber = ((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length;\n\n    const handleSelectPage = () => {\n        const { data } = items;\n        const collectedItems = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, collectedItems);\n    };\n\n    const handleUnselectAll = () => {\n        selectorHandler(false, []);\n    };\n\n    const handleSelectAll = () => {\n\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                //TODO: current only one new endpoint is introduced. Once, we have all new endpoints,  get rid of this map\n                const items = response.map(item => item.id && item.id || item);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    return ({\n        handleOnCheckboxChange,\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselectAll\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.total_items ? meta.total_items : 0 })}`,\n                onClick: handleSelectAll\n            }\n        ]\n    }\n\n    );\n};\n\nexport default selectAllCheckbox;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\n\nclass DownloadReport  {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Number.MAX_SAFE_INTEGER,\n            date: new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc'\n        };\n\n        this.params = {\n            cve: ''\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n    }\n\n    filename = (page) => {\n        switch (page) {\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${this.defaultParams.date}`;\n            case 'system-list':\n                return `vulnerability_systems--${this.defaultParams.date}`;\n            default:\n                return `vulnerability_cves--${this.defaultParams.date}`;\n\n        }\n    }\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    }\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page) => {\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = Array.isArray(params) ? params[0] : '';\n\n        try {\n            let { payload } = Array.isArray(params)\n                ? await fetchData(this.params.cve, {\n                    ...params[1],\n                    ...this.defaultParams,\n                    data_format: format\n                }) :\n                await fetchData({\n                    ...params,\n                    ...this.defaultParams,\n                    data_format: format\n                });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n            // downaloads the files\n            downloadFile(data, this.filename(page), format);\n        } catch (error) {\n            throw `${error}`;\n        }\n\n    }\n\n}\n\nexport default new DownloadReport();\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { intl } from '../../../../Utilities/IntlProvider';\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\n\nconst SearchFilter = (label, placeholder, search, apply) => {\n    const [searchValue, setSearchValue] = React.useState();\n    const [handleSearch] = React.useState(() =>\n        debounce(filter =>  {if (filter !== undefined) { apply({ filter, page: 1 }); }}, 400)\n    );\n\n    React.useEffect(() => setSearchValue(search), [search]);\n\n    return {\n        type: conditionalFilterType.text,\n        label: intl.formatMessage(label),\n        filterValues: {\n            'aria-label': 'search-field',\n            id: `search-${label.id}`,\n            onChange: (event, value) => {\n                setSearchValue(value);\n                handleSearch(value);\n            },\n            placeholder: intl.formatMessage(placeholder),\n            value: searchValue\n        }\n    };\n};\n\nexport default SearchFilter;\n","import messages from '../Messages';\nimport { FILTERS } from './constants';\nimport { intl } from '../Utilities/IntlProvider';\n\nexport const handleChangePage = (_event, page, apply) => apply({ page });\n\nexport const handleSetPageSize = (_event, perPage, apply) => apply({ page_size: perPage, page: 1 });\n\nexport const exportConfig = (methods) => (\n    { onSelect: (_event, fileType) =>   methods.downloadReport(fileType) }\n);\n\nexport const buildActiveFilters = (currentFilters, filterRulevalues = []) => {\n\n    const { filter } = currentFilters;\n\n    const buildChip = (key, parameter) => (\n        FILTERS[key].items.reduce((object, item) => {\n            if (parameter === item.value) {\n                object.name = item.label;\n                object.value = item.value ;\n            }\n            else if (key === 'security_rule' && !['true', 'false'].includes(parameter))\n            {\n                const filteredRule = filterRulevalues.find(({ value }) => value === parameter);\n                object.name = filteredRule && filteredRule.label || parameter ;\n                object.value = parameter;\n            }\n\n            return object;\n        }, {})\n    );\n\n    const buildChips = (paramValues, key) => {\n        return paramValues.reduce((values, parameter) => {\n            values.push(buildChip(key, parameter));\n            return values;\n        }, []);\n    };\n\n    const filterChips = Object.keys(FILTERS).reduce((array, key) => {\n        if (key !== 'show_all' && Object.keys(currentFilters).includes(key) && !['', undefined].includes(currentFilters[key])) {\n\n            const multiValue = typeof currentFilters[key] === 'string' && currentFilters[key].split(',');\n            const filteredValues = (multiValue && multiValue.length > 1)\n                                            && buildChips(multiValue, key)\n                                            || [buildChip(key, currentFilters[key])];\n\n            array.push({ key, multiValue, category: FILTERS[key].title, chips: filteredValues });\n        }\n\n        return array;\n    }, []);\n\n    filter && filterChips.push(\n        { key: 'filter',\n            category: intl.formatMessage(messages.searchLabel),\n            chips: [{ name: filter }]\n        }\n    );\n\n    return filterChips;\n};\n\nexport const removeFilters = (chips, apply) =>{\n    const emptyFilter = chips.reduce((obj, item) =>{\n        if (item.key === 'filter' || (item.multiValue && item.multiValue.length === 1)) {\n            obj[item.key] = '';\n        }\n        else {\n            obj[item.key] = item.multiValue.filter(value => !item.chips.some(chip => chip.value === value)).join(',');\n        }\n\n        return obj;\n    }, {});\n\n    apply(emptyFilter);\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoCvesReported} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { SECURITY_RULE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport unionWith from 'lodash/unionWith';\nimport isEqual from 'lodash/isEqual';\n\nconst securityRuleFilter = (apply, currentFilter = {}, dynamicFilters = []) => {\n    let { security_rule: currentValue } = currentFilter;\n    if (currentValue === '' || !currentValue) {\n        currentValue = 'all';\n    }\n\n    const filterBySecurityRule = values => {\n        apply({ security_rule: values === 'all' ? '' : values, page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.securityRules),\n        type: conditionalFilterType.radio,\n        urlParam: 'security_rule',\n        filterValues: {\n            onChange: (event, value) => {\n                filterBySecurityRule(value);\n            },\n            items:\n                unionWith(SECURITY_RULE_OPTIONS, dynamicFilters, isEqual).map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default securityRuleFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { STATUS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst statusFilter = (apply, currentFilter = {}) => {\n\n    let { status_id: currentValue } = currentFilter;\n\n    const filterByStatus = values => {\n        apply({ status_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.status),\n        type: conditionalFilterType.checkbox,\n        filterValues: {\n            onChange: (event, value) => {\n                filterByStatus(value);\n            },\n            items: STATUS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default statusFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: checkboxState });\n        setJustificationProps({ disabled: checkboxState });\n        setStatusId(getCveStatus());\n        setJustification(getCveJustification());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCveStatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCveStatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState) { // use overall (CVE) status\n                        return hasDifferentStatus ? '0' : cveList[0].cve_status_id || '0';\n                    }\n                    else { // use system pair status\n                        return hasDifferentStatus ? '0' : cveList[0].status_id || '0';\n                    }\n                }\n                else {\n                    return '0';\n                }\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n            }\n\n            case 'systemDetail': {\n                if (checkboxState) { // use overall (CVE) justification\n                    return (cveList && cveList.length === 1 && cveList[0].cve_justification) || '';\n                }\n                else { // use system pair justification\n                    return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n                }\n            }\n\n            default: {\n                return '';\n            }\n        }\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack hasGutter>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryIds[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport  AnsibeTowerIcon  from '@patternfly/react-icons/dist/js/icons/ansibeTower-icon';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport globalBackgroundColor100 from '@patternfly/react-tokens/dist/js/global_BackgroundColor_100';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nclass Remediation extends Component {\n    static propTypes = {\n        cves: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        systems: propTypes.oneOfType([\n            propTypes.array,\n            propTypes.string\n        ]),\n        addNotification: propTypes.func\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.cves !== this.props.cves) {\n            return true;\n        }\n\n        if (nextProps.systems !== this.props.systems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    remediationProvider = (cves = [], systems = []) => {\n        cves = [].concat(cves);\n        systems = [].concat(systems);\n        return cves.length && systems.length\n            ? {\n                issues: cves.map(cve => ({\n                    id: `vulnerabilities:${cve}`,\n                    description: cve\n                })),\n                systems\n            }\n            : false;\n    };\n\n    render() {\n        const { cves, systems, addNotification: dispatchNotification } = this.props;\n        return (\n            <div>\n                <RemediationButton\n                    dataProvider={() => this.remediationProvider(cves, systems)}\n                    isDisabled={this.remediationProvider(cves, systems) === false}\n                    onRemediationCreated={result => dispatchNotification(result.getNotification())}\n                >\n                    <AnsibeTowerIcon size='sm' color={globalBackgroundColor100.value} />\n                    &nbsp;{<FormattedMessage {...messages.remediateLabel} />}\n                </RemediationButton>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) =>{\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map(cve => {\n        const current = openedCves.find(opened => opened.id === cve.id);\n        return ({ ...cve, isOpen: current && current.isOpen || false });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows  ={isEmpty ? noCves() : rows}\n                        onSelect ={!isEmpty ? handleOnSelect : undefined}\n                        actions ={!isEmpty ? systemCveTableRowActions(methods) : undefined}\n                        sortBy ={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={2} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/components/cjs/PrimaryToolbar';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ showRemediationButton, entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = parameters;\n    const selectedCvesCount = showRemediationButton === true ? (selectedCves && selectedCves.length) || 0 : undefined;\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops, show_all: !parameters.show_all }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = [\n        showRemediationButton && entity && <Remediation systems={entity} cves={selectedCves} /> || '',\n        {\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })), []\n            ),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore,\n    fetchSystemDetailsIds\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport '../CVEs/vulnerabilities.scss';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { useCreateUrlParams, updateRef } from '../../../Helpers/MiscHelper';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = (props) => {\n\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [firstMount, setFirstMount] = useState(true);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListBySystem(props.entity, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: props.entity };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && props.entity) {\n            return EmptyVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (firstMount) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setFirstMount(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: props.entity }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let hasDifferentStatus;\n        if (cvesList.length > 1) {\n            const selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cves={cvesList}\n                updateRef={() => updateRef(cves.meta, apply)}\n                inventories={[{ id: props.entity }]}\n                hasDifferentStatus={hasDifferentStatus}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.errors) {\n        return (\n            <Fragment>\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        parameters,\n                        selectedCves,\n                        openedCves,\n                        expandCveDescription,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves: handleCveSelect,\n                            openCves: handleCveOpen,\n                            showStatusModal,\n                            fetchResource: params => fetchSystemDetailsIds({ ...params, system: props.entity })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={props.entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={SYSTEM_DETAILS_HEADER} entity={props.entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            </Fragment>);\n    }\n    else {\n        return processError(systemCVEs.errors);\n    }\n\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.string,\n    cveList: propTypes.any,\n    fetchData: propTypes.func,\n    history: propTypes.object,\n    location: propTypes.object,\n    intl: propTypes.any\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { PATHS } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        loaded: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler, loaded } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: PATHS.vulnerabilities.title, to: PATHS.vulnerabilities.to },\n                { title: PATHS.systems.title, to: PATHS.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity || !loaded) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut, loaded } }) {\n    return {\n        entity,\n        isOptOut,\n        loaded\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nexport const initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { Page } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport {\n    Table as PfTable,\n    TableBody,\n    TableHeader,\n    TableGridBreakpoint,\n    cellWidth,\n    TableVariant,\n    sortable,\n    expandable,\n    SortByDirection\n} from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            pfReactTable: {\n                Table: PfTable,\n                TableBody,\n                TableHeader,\n                TableGridBreakpoint,\n                cellWidth,\n                TableVariant,\n                sortable,\n                expandable,\n                SortByDirection\n            }\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}