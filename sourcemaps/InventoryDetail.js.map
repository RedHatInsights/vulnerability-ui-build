{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","object","string","defaultProps","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","value","label","intl","formatMessage","publishDate","type","conditionalFilterType","radio","urlParam","filterValues","onChange","event","items","PUBLIC_DATE_OPTIONS","map","item","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSS_OPTIONS","impactFilter","impact","filterByImpact","values","length","filter","join","checkbox","IMPACT_OPTIONS","hasIcon","color","iconColor","split","businessRiskFilter","business_risk_id","filterByBusinessRisk","businessRisk","BUSINESS_RISK_OPTIONS","content","module","i","options","transform","undefined","locals","exports","push","SystemCvesTableWithContext","context","header","entity","cves","methods","selectedCves","openedCves","isEmpty","data","rows","cve","includes","id","selected","current","find","opened","isOpen","isLoading","colSize","rowSize","Table","aria-label","cells","heightAuto","colSpan","title","Object","prototype","hasOwnProperty","call","noCves","onSelect","isSelected","rowId","cveName","selectCves","actions","systemCveTableRowActions","sortBy","createSortBy","key","sort","onCollapse","rowKey","expandCveDescription","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","any","array","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","parameters","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","multiRow","Remediation","systems","editStatus","showStatusModal","status_id","cve_status_id","isDisabled","kebabCollapseCves","kebabExpandCves","pagination","actionsConfig","kebabToggleProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","securityRuleFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","totalNumber","downloadReport","bool","injectIntl","createContext","SystemCVEs","dispatch","useDispatch","useState","StatusModal","setStatusModal","firstMount","setFirstMount","urlParamsAllowed","setUrlParamsAllowed","systemCVEs","useSelector","SystemCvesStore","cveList","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","filterParams","params","constructFilterParameters","changeSystemCVEsParameters","useEffect","fetchCveListBySystem","system","clearSystemCvesStore","error","status","errors","parseInt","Provider","format","DownloadReport","exec","iSelected","payload","selectSystemCve","expandSystemCve","cvesList","hasDifferentStatus","Array","from","some","element","CvePairStatusModal","updateRef","inventories","Stack","StackItem","TextContent","Text","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","fetchData","history","location","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","PATHS","vulnerabilities","to","display_name","invalidSystem","isActive","React","connect","entityDetails","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","state","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","setState","toggleLinkHover","linkHovered","optOutSystem","inventoryId","then","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PUBLIC_DATE_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PUBLIC_DATE_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSS_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSS_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { BUSINESS_RISK_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: BUSINESS_RISK_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) =>{\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map(cve => {\n        const current = openedCves.find(opened => opened.id === cve.id);\n        return ({ ...cve, isOpen: current && current.isOpen || false });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows  ={isEmpty ? noCves() : rows}\n                        onSelect ={!isEmpty ? handleOnSelect : undefined}\n                        actions ={!isEmpty ? systemCveTableRowActions(methods) : undefined}\n                        sortBy ={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={2} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ showRemediationButton, entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = parameters;\n    const selectedCvesCount = showRemediationButton === true ? (selectedCves && selectedCves.length) || 0 : undefined;\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops, show_all: !parameters.show_all }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = [\n        showRemediationButton && entity && <Remediation systems={entity} cves={selectedCves} /> || '',\n        {\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })), []\n            ),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {{\n                    isDisabled: cves.meta.total_items === 0,\n                    ...exportConfig(methods)\n                }}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve,\n    clearSystemCvesStore\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport '../CVEs/vulnerabilities.scss';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { constructFilterParameters } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { useCreateUrlParams } from '../../../Helpers/MiscHelper';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = (props) => {\n\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [firstMount, setFirstMount] = useState(true);\n    const [urlParamsAllowed, setUrlParamsAllowed] = useState(false);\n\n    const systemCVEs = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.cveList\n    );\n    const parameters = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.parameters\n    );\n    const selectedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.selectedCves\n    );\n    const openedCves = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.openedCves\n    );\n    const expandCveDescription = useSelector(\n        ({ SystemCvesStore }) => SystemCvesStore.expandCveDescription\n    );\n\n    const cves = useMemo(() => createCveListBySystem(props.entity, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(CVES_ALLOWED_PARAMS);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: props.entity };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && props.entity) {\n            return EmptyVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeSystemCVEsParameters(params));\n    };\n\n    useEffect(() => {\n        if (firstMount) {\n            apply({ sort: '-public_date',  ...urlParameters });\n            setFirstMount(false);\n        }\n        else {\n            dispatch(fetchCveListBySystem({ ...parameters, system: props.entity }));\n            urlParamsAllowed\n                && createUrlParams({ ...parameters })\n                || setUrlParamsAllowed(true);\n        }\n    }, [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearSystemCvesStore());\n        };\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let hasDifferentStatus;\n        if (cvesList.length > 1) {\n            const selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        setStatusModal(() => () =>\n            (<CvePairStatusModal\n                cves={cvesList}\n                updateRef={() => { apply(parameters); }}\n                inventories={[{ id: props.entity }]}\n                hasDifferentStatus={hasDifferentStatus}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.errors) {\n        return (\n            <Fragment>\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        parameters,\n                        selectedCves,\n                        openedCves,\n                        expandCveDescription,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves: handleCveSelect,\n                            openCves: handleCveOpen,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: props.entity })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={props.entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={SYSTEM_DETAILS_HEADER} entity={props.entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            </Fragment>);\n    }\n    else {\n        return processError(systemCVEs.errors);\n    }\n\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.string,\n    cveList: propTypes.any,\n    fetchData: propTypes.func,\n    history: propTypes.object,\n    location: propTypes.object,\n    intl: propTypes.any\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { PATHS } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: PATHS.vulnerabilities.title, to: PATHS.vulnerabilities.to },\n                { title: PATHS.systems.title, to: PATHS.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}