{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CvePairStatusModal","cves","updateRef","inventories","hasDifferentStatus","intl","type","useState","cveList","inventoryList","useJustificationInput","length","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","item","id","useEffect","isDisabled","disabled","cve_status_id","successNotification","variant","title","formatMessage","messages","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","key","fieldId","label","cvePairStatusModalUseOverallCheckbox","name","isChecked","onChange","checked","content","cvePairStatusModalUseOverallTooltip","className","style","verticalAlign","propTypes","array","func","bool","any","string","injectIntl","SystemCvesTableWithContext","noCves","props","entity","context","heightAuto","cells","colSpan","filter","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filterCategories","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","SearchFilter","placeholder","searchFilterLabel","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","filterCveSearchTerm","defaultProps","totalNumber","React","createContext","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","dataReload","page","reloadPage","pages","setState","state","page_size","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","Array","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","element","StatusModal","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","impact","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","component","TextVariants","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","ConnectedSystemCves","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","onClick","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={handleCheckboxChange}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(\n                this.handleCveDescription,\n                expandCveDescription,\n                { isDisabled: cves.data.length === 0 }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),\n            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab\n                            dropdownItems={kebabOptions}\n                            disabled={cves.data.length === 0 && selectedCvesCount === 0}\n                        />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport messages from '../../../Messages';\nimport { injectIntl, IntlProvider } from 'react-intl';\n\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';;\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}