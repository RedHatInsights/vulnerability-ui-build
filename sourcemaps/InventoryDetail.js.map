{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/BaseKebab.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/KebabItems.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/PresentationalComponents/Filters/FilterChips.js","webpack:///./src/Components/PresentationalComponents/Filters/Filters.js","webpack:///./src/Components/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/Components/PresentationalComponents/SelectAllCheckbox/SelectAllCheckbox.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","object","string","defaultProps","content","module","i","options","transform","undefined","locals","exports","push","BaseKebab","dropdownItems","disabled","useState","isOpen","setOpen","onSelect","toggle","onToggle","kebabState","isDisabled","isPlain","array","bool","kebabItemDownloadJSON","downloadReport","key","kebabExportAsJson","kebabItemDownloadCSV","kebabExportAsCsv","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabEditBusinessRisk","kebabItemEditStatus","showStatusModal","inventoryIds","kebabEditStatus","kebabItemToggleCvesDescription","toggleCveDescription","isExpanded","kebabCollapseCves","kebabExpandCves","CvePairStatusModal","updateRef","inventories","hasDifferentStatus","intl","type","cveList","inventoryList","useJustificationInput","length","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","map","item","id","useEffect","cve_status_id","successNotification","title","formatMessage","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","systemName","b","chunks","fieldId","label","cvePairStatusModalUseOverallCheckbox","name","isChecked","onChange","checked","cvePairStatusModalUseOverallTooltip","color","verticalAlign","any","injectIntl","FilterChips","filterValues","filterCategories","localFilters","localFilterCategories","show_all","allowedFilters","urlParam","Object","entries","find","filter","includes","filterIsNotEmpty","ChipGroup","withToolbar","value","values","ChipGroupToolbarItem","categoryName","split","chip","mapChip","indexOf","Chip","newFilter","join","removeFilter","Button","resetParams","reduce","o","removeAllFilters","filterChipsClear","Filters","addFilter","param","filters","SearchFilter","placeholder","filterValue","updateFilterValue","debounce","applyFunction","event","SelectAllCheckbox","setIsOpen","selectedItems","multiRow","selectedItemsArray","Array","from","selectedItemsCount","data","checkboxlabel","Boolean","selectPageNumber","handleUnselectAll","selectorHandler","handleSelectAll","fetchResource","payload","DropdownItem","selectNone","union","selectPage","selectAll","Dropdown","DropdownToggle","splitButtonItems","Checkbox","oneOfType","impact","SystemCveToolbarWithContext","handleCveDescription","context","methods","expandCveDescription","params","openedCves","openCves","showRemediationButton","entity","selectedCves","selectedCvesCount","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","ToolbarGroup","selectCves","ops","searchFilterLabel","Remediation","systemId","ToolbarItem","filterCveSearchTerm","totalNumber","CVETableContext","Consumer","SystemCvesTableWithContext","noCves","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","handleOnSelect","isSelected","rowId","cveName","rowKey","header","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","SystemCvesTable","React","createContext","SystemCves","processError","error","status","dataReload","reloadPage","pages","setState","state","config","cvssEntry","CVSSOptions","cvss_filter","parseFloat","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","queryString","qs","stringify","history","fetchData","system","DownloadReport","exec","fetchCveListBySystem","element","StatusModal","queryObject","parse","location","search","errors","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","ConnectedSystemCves","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","import { Dropdown, KebabToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst BaseKebab = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    function handleOnKebabToggle(kebabState) {\n        setOpen(kebabState);\n    }\n\n    function handleOnKebabSelect() {\n        setOpen(!isOpen);\n    }\n\n    return (\n        <div>\n            <Dropdown\n                onSelect={handleOnKebabSelect}\n                toggle={<KebabToggle onToggle={handleOnKebabToggle} isDisabled={disabled} />}\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={dropdownItems}\n                {...props}\n            />\n        </div>\n    );\n};\n\nBaseKebab.propTypes = {\n    dropdownItems: propTypes.array,\n    disabled: propTypes.bool\n};\n\nexport default BaseKebab;\n","import { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n\nexport const kebabItemToggleCvesDescription = (toggleCveDescription, isExpanded, { ...props }) => (\n    <DropdownItem key=\"toggleCveDescription\" component=\"button\" onClick={() => toggleCveDescription()} {...props}>\n        {isExpanded ? <FormattedMessage {...messages.kebabCollapseCves} /> : <FormattedMessage {...messages.kebabExpandCves} /> }\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystemAnalysis = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeVulnerabilityAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystem = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemToggleExcludeSystemDisplay = (handleOptOut, isOptedOut,  { ...props }) => (\n    <DropdownItem key=\"toggle_opt_out\" component=\"button\" onClick={() => handleOptOut()} {...props}>\n        {isOptedOut ?\n            <FormattedMessage {...messages.kebabHideExcludedSystems} />  :\n            <FormattedMessage {...messages.kebabShowExcludedSystems} />}\n    </DropdownItem>\n);\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryIds[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={handleCheckboxChange}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nconst FilterChips = (props) => {\n    const { filterValues, filterCategories, apply } = props;\n    const localFilters = { ...filterValues };\n    const localFilterCategories = [...filterCategories];\n\n    delete localFilters.show_all;\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter[key].length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    const removeAllFilters = (allowedFilters) => {\n\n        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});\n\n        apply({ ...resetParams, page: 1 });\n    };\n\n    const filterIsNotEmpty = (filter) => {\n        return filter && (!filter.includes(undefined) && !filter.includes(''));\n    };\n\n    const getFilters = () => {\n        const filters = localFilterCategories.map(\n            ({ urlParam }) => Object.entries(localFilters).find(([key]) => key === urlParam)\n        );\n\n        return filters.filter(filter => filterIsNotEmpty(filter));\n    };\n\n    const allowedFilters = getFilters();\n\n    return allowedFilters.length > 0 &&\n        <React.Fragment>\n            <ChipGroup withToolbar>\n                {allowedFilters.map(([key, value]) => {\n                    const { title, urlParam, values } = localFilterCategories.find(({ urlParam }) => urlParam === key);\n                    return (\n                        <ChipGroupToolbarItem key={key} categoryName={title}>\n                            { value && value.toString().split(',').map(chip => {\n                                const mapChip = values.find(({ value }) => value.indexOf(chip) !== -1);\n                                let { value, label } = mapChip ? { ...mapChip } : { value: key, label: chip };\n                                return (\n                                    <Chip key={value} onClick={() => removeFilter(urlParam, chip)}>\n                                        { label }\n                                    </Chip>\n                                );\n                            }) }\n                        </ChipGroupToolbarItem>\n                    );\n                }) }\n            </ChipGroup>\n            <Button variant=\"link\" onClick={() => removeAllFilters(allowedFilters)}>\n                <FormattedMessage {...messages.filterChipsClear} />\n            </Button>\n        </React.Fragment>;\n};\n\nFilterChips.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default FilterChips;\n","import { FilterDropdown } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst Filters = props => {\n    const { filterValues, filterCategories, apply } = props;\n\n    const addFilter = (param, value, type) => {\n        let newFilter;\n        if (type === 'radio' || param === 'show_all') {\n            newFilter = { [param]: value };\n        } else {\n            newFilter = filterValues[param] ? { [param]: `${filterValues[param]},${value}` } : { [param]: value };\n        }\n\n        apply({ ...newFilter, page: 1 });\n    };\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter.length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <FilterDropdown\n                    addFilter={addFilter}\n                    removeFilter={removeFilter}\n                    filters={filterValues}\n                    filterCategories={filterCategories}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nFilters.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default Filters;\n","import { ConditionalFilter } from '@redhat-cloud-services/frontend-components';\nimport debounce from 'lodash/debounce';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect }  from 'react';\n\nconst SearchFilter = props => {\n    const { placeholder, value, apply } = props;\n    const [filterValue, updateFilterValue] = useState(value);\n\n    const [applyFunction] = useState(() => debounce(filter => {\n        if (filter !== undefined) { apply({ filter, page: 1 }); }\n    }, 400));\n\n    useEffect(() => applyFunction(filterValue), [filterValue, applyFunction]);\n    useEffect(() => updateFilterValue(value), [value]);\n\n    return (\n        <ConditionalFilter\n            placeholder={placeholder}\n            onChange={(event, value) => updateFilterValue(value)}\n            value={filterValue}\n        />\n    );\n};\n\nSearchFilter.propTypes = {\n    placeholder: propTypes.string,\n    value: propTypes.string,\n    apply: propTypes.func\n};\n\nexport default SearchFilter;\n","import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport union from 'lodash/union';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nconst SelectAllCheckbox = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const { selectedItems, items, multiRow } = props;\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const checkboxlabel = Boolean(selectedItemsCount) && `${selectedItemsCount} selected`;\n    const selectPageNumber = multiRow ? data.length / 2 : data.length;\n\n    const handleOnToggle = isOpen => {\n        setIsOpen(isOpen);\n    };\n\n    const handleOnSelect = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const handleSelectPage = () => {\n        const { items: { data }, selectorHandler } = props;\n        const items = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, items);\n    };\n\n    const handleUnselectAll = () => {\n        const { selectorHandler } = props;\n        selectorHandler(false, undefined);\n    };\n\n    const handleSelectAll = () => {\n        const { items: { meta }, selectorHandler, fetchResource } = props;\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    const dropdownItems = [\n        <DropdownItem key=\"none\" onClick={handleUnselectAll}>\n            {props.intl.formatMessage(messages.selectNone)}\n        </DropdownItem>,\n        <DropdownItem key=\"page\" onClick={handleSelectPage} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectPage, { count: selectPageNumber })}\n        </DropdownItem>,\n        <DropdownItem key=\"all\" onClick={handleSelectAll} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectAll, { count: meta.total_items })}\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            onSelect={handleOnSelect}\n            toggle={\n                <DropdownToggle\n                    splitButtonItems={[\n                        <Checkbox\n                            id={'selectAllcheckbox'}\n                            key={'selectAllcheckbox'}\n                            isChecked={selectedItemsCount === 0 ? false : meta.total_items === selectedItemsCount ? true : null}\n                            onChange={handleOnCheckboxChange}\n                        />,\n                        checkboxlabel\n                    ]}\n                    onToggle={handleOnToggle}\n                    isDisabled={meta.total_items === 0 && selectedItemsCount === 0}\n                />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n        />\n    );\n};\n\nSelectAllCheckbox.propTypes = {\n    selectorHandler: propTypes.func,\n    fetchResource: propTypes.func,\n    selectedItems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    items: propTypes.object,\n    multiRow: propTypes.bool,\n    intl: propTypes.any\n};\n\nSelectAllCheckbox.defaultProps = {\n    impact: 'Unknown',\n    selectedItems: [],\n    items: {},\n    multiRow: false\n};\n\nexport default injectIntl(SelectAllCheckbox);\n","import { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(\n                this.handleCveDescription,\n                expandCveDescription,\n                { isDisabled: cves.data.length === 0 }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),\n            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab\n                            dropdownItems={kebabOptions}\n                            disabled={cves.data.length === 0 && selectedCvesCount === 0}\n                        />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { Component, Fragment } from 'react';\nimport qs from 'query-string';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { CVSSOptions, PublicDateOptions } from '../../../Helpers/constants';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport SystemCveTable from './SystemCveTable';\nimport messages from '../../../Messages';\n\nimport '../CVEs/vulnerabilities.scss';\n\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return EmptyVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const { entity } = this.props;\n        const params = { ...this.state, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { paths } from '../../../Utilities/Routes';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}