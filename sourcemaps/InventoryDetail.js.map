{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["SystemDetail","props","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","setHeader","title","hostname","breadcrumbs","to","paths","vulnerabilities","systems","isActive","react_default","a","createElement","Fragment","CVEs","entity","affectedSystemId","React","Component","propTypes","func","string","withRouter","connect","state","entityDetails","id","display_name","header","dispatchAction","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","arguments","length","undefined","type","LOAD_ENTITY_FULFILLED","objectSpread_default","activeApps","name","component","InventoryDetail","_this","checkItem","bind","assertThisInitialized_default","InventoryCmp","removeListener","_this2","setState","middlewareListener","addNew","on","callback","fetchData","cve","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","key","value","newList","systemList","selected","data","affectedSystems","Card","CardBody","items","map","item","inventory_id","dataShape","sExposedSystemsTable","fetchAffectedSystemsByCVE"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport CVEs from '../CVEs/CVEs';\n\nclass SystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        this.props.setHeader({\n            title: this.props.hostname,\n            breadcrumbs: [\n                { title: 'Vulnerability', to: paths.vulnerabilities },\n                { title: 'Systems', to: paths.systems },\n                { title: this.props.hostname, isActive: true }\n            ]\n        });\n        return (\n            <React.Fragment>\n                <CVEs entity={this.props.affectedSystemId} />\n            </React.Fragment>\n        );\n    }\n}\n\nSystemDetail.propTypes = {\n    setHeader: propTypes.func,\n    hostname: propTypes.string,\n    affectedSystemId: propTypes.string\n};\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystemId: state.entityDetails.entity.id,\n        hostname: state.entityDetails.entity.display_name\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = INVENTORY_ACTION_TYPES => (state = initialState, action) => {\n    switch (action.type) {\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [{ title: 'Vulnerabilities', name: 'vulnerabilities', component: SystemDetail }]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { withRouter } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchAffectedSystemsByCVE } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\n\nclass InventoryDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            removeListener: () => {}\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            removeListener: middlewareListener.addNew({\n                on: 'LOAD_ENTITIES_FULFILLED',\n                callback: () => this.props.fetchData(this.props.cve)\n            })\n        });\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryDetail\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data } = this.props.affectedSystems;\n        return (\n            <Card>\n                <CardBody>\n                    <InventoryCmp items={data.map(item => item.inventory_id)} />\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nInventoryDetail.propTypes = {\n    cve: propTypes.string,\n    fetchData: propTypes.func,\n    affectedSystems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystems: sExposedSystemsTable(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        fetchData: cve => dispatchAction(fetchAffectedSystemsByCVE(cve))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}