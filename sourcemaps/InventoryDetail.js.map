{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CvePairStatusModal","cves","updateRef","inventories","hasDifferentStatus","intl","type","useState","cveList","inventoryList","useJustificationInput","length","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","item","id","useEffect","isDisabled","disabled","cve_status_id","successNotification","variant","title","formatMessage","messages","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","key","fieldId","label","cvePairStatusModalUseOverallCve","name","isChecked","onChange","checked","propTypes","array","func","bool","any","string","injectIntl","SystemCvesTableWithContext","noCves","props","entity","context","heightAuto","cells","colSpan","filter","Object","prototype","hasOwnProperty","call","meta","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","Component","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filterCategories","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","SearchFilter","placeholder","searchFilterLabel","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","filterCveSearchTerm","defaultProps","totalNumber","React","createContext","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","dataReload","page","reloadPage","pages","setState","state","page_size","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","Array","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","element","StatusModal","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","impact","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","component","TextVariants","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","ConnectedSystemCves","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","onClick","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Checkbox, Form, FormGroup, Stack, StackItem, Alert } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, []);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    }, [checkboxState]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label={intl.formatMessage(messages.cvePairStatusModalUseOverallCve)}\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),\n            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab\n                            dropdownItems={kebabOptions}\n                            disabled={cves.data.length === 0 && selectedCvesCount === 0}\n                        />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport messages from '../../../Messages';\nimport { injectIntl, IntlProvider } from 'react-intl';\n\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nconst ConnectedSystemCves = withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';;\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}