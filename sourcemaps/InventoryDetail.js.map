{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/EmptyStates/EmptyStates.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["FilterNotFoundForCVE","style","height","variant","EmptyStateVariant","large","headingLevel","size","messages","emptyStateNoMatchingCves","whiteSpace","emptyStateMaybeFollowing","emptyStateNoCveReported","component","TextVariants","p","emptyStateForMoreInfo","href","target","rel","emptyStateForMoreLink","FilterNotFoundForSystem","emptyStateNoSystemsMatching","emptyStateMaybeExcluded","emptyStateIfCveForSystem","EmptyCVEListForSystem","emptyStateNoReportedSystem","emptyStateNoCveAffects","EmptyExcludedSystem","buttonAction","icon","SecurityIcon","emptyStateSystemExcludedTitle","emptyStateSystemExcludedBody","onClick","emptyStateSystemResumeAnalysis","propTypes","func","EmptyCVEList","emptyStateIfCveForSystems","EmptyVulnerabilityData","CubesIcon","emptyStateNoData","emptyStateActivateInsights","emptyStateLearnInsights","GenericError","className","errorReload","CvePairStatusModal","cves","updateRef","inventories","hasDifferentStatus","intl","type","useState","cveList","inventoryList","useJustificationInput","length","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","toString","getCveStatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","map","item","id","useEffect","isDisabled","disabled","cve_status_id","cve_justification","successNotification","title","formatMessage","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","systemName","b","chunks","key","fieldId","label","cvePairStatusModalUseOverallCheckbox","name","isChecked","onChange","checked","content","cvePairStatusModalUseOverallTooltip","color","verticalAlign","array","bool","any","string","injectIntl","module","i","options","transform","undefined","locals","exports","push","PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","totalItems","total_items","pageSize","Fragment","itemCount","DEFAULT_PAGE_SIZE","onSetPage","onPerPageSelect","PaginationVariant","Component","object","defaultProps","publishDateFilter","currentFilter","currentValue","publish_date","filterByPublishDate","value","publishDate","conditionalFilterType","radio","urlParam","filterValues","event","PublicDateOptions","cvssBaseScoreFilter","cvss_filter","filterByCvssScore","cvssBaseScore","CVSSOptions","impactFilter","impact","filterByImpact","values","filter","join","checkbox","IMPACT_OPTIONS","hasIcon","iconColor","split","businessRiskFilter","business_risk_id","filterByBusinessRisk","businessRisk","businessRiskOptions","SystemCvesTableWithContext","context","header","entity","methods","selectedCves","openedCves","isEmpty","data","rows","includes","selected","current","find","opened","isOpen","isLoading","colSize","rowSize","Table","aria-label","cells","heightAuto","colSpan","Object","prototype","hasOwnProperty","call","noCves","onSelect","isSelected","rowId","cveName","selectCves","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","rowKey","expandCveDescription","openCves","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","parameters","selectedCvesCount","selectOptions","useMemo","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","show_all","multiRow","Remediation","systemId","editStatus","showStatusModal","kebabCollapseCves","kebabExpandCves","pagination","actionsConfig","kebabToggleProps","dropdownProps","bulkSelect","Boolean","handleOnCheckboxChange","filterConfig","searchFilter","searchFilterByCveID","securityRuleFilter","statusFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","e","removeFilters","exportConfig","totalNumber","downloadReport","createContext","SystemCVEs","dispatch","useDispatch","StatusModal","setStatusModal","systemCVEs","useSelector","SystemCvesStore","createCveListBySystem","useCreateUrlParams","CVES_ALLOWED_PARAMS","createUrlParams","urlParameters","isFirstMount","fetchCveListBySystem","system","config","cvssEntry","parseFloat","from","to","cvss_from","cvss_to","publicEntry","public_from","format","public_to","changeSystemCVEsParameters","error","status","errors","Provider","params","DownloadReport","exec","iSelected","payload","selectSystemCve","expandSystemCve","cvesList","Array","element","Stack","StackItem","TextContent","Text","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","SYSTEM_DETAILS_HEADER","fetchData","history","location","ConnectedSystemCves","withRouter","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","PATHS","vulnerabilities","systems","display_name","invalidSystem","isActive","React","connect","entityDetails","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","state","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","setState","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport {\n    Bullseye,\n    Button,\n    Card,\n    CardBody,\n    CardHeader,\n    EmptyStateVariant,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    Text,\n    TextVariants,\n    TextContent,\n    Title\n} from '@patternfly/react-core';\n\nimport { CubesIcon, ExternalLinkAltIcon, FrownOpenIcon, SecurityIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\n// Reports that no CVEs were found after filtering results\nexport const FilterNotFoundForCVE = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveReported} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateForMoreInfo} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const FilterNotFoundForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoMatchingCves} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <FormattedMessage {...messages.emptyStateMaybeFollowing} />\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateNoSystemsMatching} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateMaybeExcluded} />\n                    </Text>\n                    {<br></br>}\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem} />\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>\n                    </Text>\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyCVEListForSystem = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <Text component={TextVariants.p}>\n                        <FormattedMessage {...messages.emptyStateIfCveForSystem}/>\n                        <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                            <FormattedMessage {...messages.emptyStateForMoreLink} />  <ExternalLinkAltIcon />\n                        </a>.\n                    </Text>\n\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\nexport const EmptyExcludedSystem = ({ buttonAction }) => (\n    <Bullseye>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={SecurityIcon} size={'sm'} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateSystemExcludedTitle} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateSystemExcludedBody} />\n            </EmptyStateBody>\n            <Button variant=\"primary\" component=\"a\" onClick={buttonAction}>\n                <FormattedMessage {...messages.emptyStateSystemResumeAnalysis} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\nEmptyExcludedSystem.propTypes = {\n    buttonAction: propTypes.func\n};\n\nexport const EmptyCVEList = (\n    <Bullseye style={{ height: 'auto' }}>\n        <EmptyState variant={EmptyStateVariant.large}>\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoReportedSystem} />\n            </Title>\n            <TextContent>\n                <EmptyStateBody style={{ whiteSpace: 'normal' }}>\n                    <Text>\n                        <FormattedMessage {...messages.emptyStateNoCveAffects} />\n                    </Text>\n                    <FormattedMessage {...messages.emptyStateIfCveForSystems}/>\n                    <a href=\"https://access.redhat.com/security/team/contact/\" target=\"__blank\" rel=\"noopener noreferrer\">\n                        <FormattedMessage {...messages.emptyStateForMoreLink} /> <ExternalLinkAltIcon />\n                    </a>\n                    .\n                </EmptyStateBody>\n            </TextContent>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Indicates that Insights is not activated\nexport const EmptyVulnerabilityData = (\n    <Bullseye>\n        <EmptyState>\n            <EmptyStateIcon icon={CubesIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n                <FormattedMessage {...messages.emptyStateNoData} />\n            </Title>\n            <EmptyStateBody>\n                <FormattedMessage {...messages.emptyStateActivateInsights} />\n            </EmptyStateBody>\n            <Button\n                variant=\"primary\"\n                component=\"a\"\n                href=\"http://access.redhat.com/products/cloud_management_services_for_rhel#getstarted\"\n            >\n                <FormattedMessage {...messages.emptyStateLearnInsights} />\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n\n// Generic error\nexport const GenericError = (\n    <Card className=\"ins-empty-rule-cards\">\n        <CardHeader>\n            <FrownOpenIcon size=\"lg\" />\n        </CardHeader>\n        <CardBody>\n            <FormattedMessage {...messages.errorReload} />\n        </CardBody>\n    </Card>\n);\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: checkboxState });\n        setJustificationProps({ disabled: checkboxState });\n        setStatusId(getCveStatus());\n        setJustification(getCveJustification());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCveStatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCveStatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState) { // use overall (CVE) status\n                        return hasDifferentStatus ? '0' : cveList[0].cve_status_id || '0';\n                    }\n                    else { // use system pair status\n                        return hasDifferentStatus ? '0' : cveList[0].status_id || '0';\n                    }\n                }\n                else {\n                    return '0';\n                }\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n            }\n\n            case 'systemDetail': {\n                if (checkboxState) { // use overall (CVE) justification\n                    return (cveList && cveList.length === 1 && cveList[0].cve_justification) || '';\n                }\n                else { // use system pair justification\n                    return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n                }\n            }\n\n            default: {\n                return '';\n            }\n        }\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryIds[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={checked => setCheckboxState(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1500px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__check,\\n.page__Vulnerabilities .pf-c-table__check {\\n  vertical-align: unset !important; }\\n\", \"\"]);\n\n// exports\n","\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items: totalItems, page_size: pageSize } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={totalItems || 0}\n                    perPage={pageSize || DEFAULT_PAGE_SIZE}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { PublicDateOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst publishDateFilter = (apply, currentFilter = {}) => {\n    let { publish_date: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByPublishDate = value => {\n        apply({ publish_date: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.publishDate),\n        type: conditionalFilterType.radio,\n        urlParam: 'publish_date',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByPublishDate(value);\n            },\n            items: PublicDateOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default publishDateFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { CVSSOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst cvssBaseScoreFilter = (apply, currentFilter = {}) => {\n    let { cvss_filter: currentValue } = currentFilter;\n\n    // Empty string value is not supported by PF Radio at the moment\n    if (currentValue === '' || !currentValue) {\n        currentValue = '0';\n    }\n\n    const filterByCvssScore = value => {\n        apply({ cvss_filter: (value !== '0' && value) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.cvssBaseScore),\n        type: conditionalFilterType.radio,\n        urlParam: 'cvss_filter',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByCvssScore(value);\n            },\n            items: CVSSOptions.map(item => ({ label: item.label, value: item.value })),\n            value: currentValue\n        }\n    };\n};\n\nexport default cvssBaseScoreFilter;\n","\nimport React from 'react';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { IMPACT_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { SecurityIcon } from '@patternfly/react-icons';\n\nconst impactFilter = (apply, currentFilter = {}) => {\n    let { impact: currentValue } = currentFilter;\n\n    const filterByImpact = values => {\n        apply({ impact: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.impact),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'impact',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByImpact(value);\n            },\n            items: IMPACT_OPTIONS.map(item => ({\n                label: (\n                    <React.Fragment>\n                        { item.hasIcon && <SecurityIcon className=\"pf-u-mr-xs\" color={item.iconColor}/> }\n                        {item.label}\n                    </React.Fragment>\n                ),\n                value: item.value\n            })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default impactFilter;\n","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { businessRiskOptions } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst businessRiskFilter = (apply, currentFilter = {}) => {\n    let { business_risk_id: currentValue } = currentFilter;\n\n    const filterByBusinessRisk = values => {\n        apply({ business_risk_id: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '', page: 1 });\n    };\n\n    return {\n        label: intl.formatMessage(messages.businessRisk),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'business_risk_id',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByBusinessRisk(value);\n            },\n            items: businessRiskOptions.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default businessRiskFilter;\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\n\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport {\n    FilterNotFoundForSystem,\n    EmptyCVEListForSystem,\n    EmptyCVEList\n} from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './SystemCves';\n\nconst SystemCvesTableWithContext = ({ context, header, entity }) =>{\n    const noCves = () => {\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = filterFields.length !== 0\n            ? FilterNotFoundForSystem\n            : entity\n                ? EmptyCVEListForSystem\n                : cves.data.length === 0\n                    ? EmptyCVEList\n                    : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    const handleOnCollapse = (event, rowKey, isOpen) => {\n        const { cves, methods,  expandCveDescription } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, [cveName], expandCveDescription);\n    };\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const { cves, methods, selectedCves, openedCves } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const rows = cves.data\n    .map(cve => (selectedCves.includes(cve.id) && { ...cve, selected: true }) || cve)\n    .map(cve => {\n        const current = openedCves.find(opened => opened.id === cve.id);\n        return ({ ...cve, isOpen: current && current.isOpen || false });\n    });\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Fragment>\n                    <Table\n                        aria-label={'Vulnerability CVE table'}\n                        cells={header}\n                        rows  ={isEmpty ? noCves() : rows}\n                        onSelect ={!isEmpty ? handleOnSelect : undefined}\n                        actions ={!isEmpty ? systemCveTableRowActions(methods) : undefined}\n                        sortBy ={!isEmpty\n                            ? createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                        onCollapse={!isEmpty ? (event, rowKey, isOpen) => handleOnCollapse(event, rowKey, isOpen) : undefined}\n                        onSort={!isEmpty ?\n                            (event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                ) : undefined\n                        }\n                        gridBreakPoint={'grid-lg'}\n                    >\n                        <Fragment>\n                            <TableHeader />\n                            <TableBody />\n                        </Fragment>\n                    </Table>\n                    <TableToolbar>\n                        <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                    </TableToolbar>\n                </Fragment>\n            ) : (\n                <SkeletonTable colSize={2} rowSize={20} />\n            )}\n        </Fragment>\n    );\n\n};\n\nSystemCvesTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    entity: propTypes.string\n};\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","import React, { useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './SystemCves';\nimport Remediation from '../Remediation/Remediation';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport cvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport searchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters\n} from '../../../Helpers/TableToolbarHelper';\n\nconst SystemCveToolbarWithContext = ({ showRemediationButton, entity, intl, context }) => {\n\n    const handleCveDescription = () => {\n        const { cves, methods, expandCveDescription } = context;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    };\n\n    const { cves, parameters, methods, selectedCves, expandCveDescription } = context;\n    const { filter } = parameters;\n    const selectedCvesCount = showRemediationButton === true ? (selectedCves && selectedCves.length) || 0 : undefined;\n\n    const selectOptions  = useMemo(() => selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => methods.fetchResource({ ...parameters, ...ops, show_all: !parameters.show_all }),\n        multiRow: true\n    }), [selectedCves, cves, parameters, methods]);\n\n    const actions = [\n        showRemediationButton && <Remediation systemId={entity} selectedCves={selectedCves} /> || '',\n        {\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => methods.showStatusModal(\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })), []\n            ),\n            props: { isDisabled: !selectedCvesCount }\n        },\n        {\n            label: expandCveDescription\n                ? intl.formatMessage(messages.kebabCollapseCves)\n                : intl.formatMessage(messages.kebabExpandCves),\n            onClick: handleCveDescription,\n            props: { isDisabled: cves.meta.total_items === 0 }\n\n        }\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || 1,\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    kebabToggleProps: { isDisabled: !selectedCvesCount && cves.meta.total_items === 0 },\n                    dropdownProps: { className: 'custom-class' }\n                } }\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0,\n                    checked: Boolean(selectedCvesCount),\n                    onSelect: ()=> selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        searchFilter(messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, parameters),\n                        impactFilter(methods.apply, parameters),\n                        cvssBaseScoreFilter(methods.apply, parameters),\n                        businessRiskFilter(methods.apply, parameters),\n                        statusFilter(methods.apply, parameters),\n                        publishDateFilter(methods.apply, parameters)\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(parameters),\n                    onDelete: (e, i) => removeFilters(i, methods.apply)\n                }}\n                exportConfig = {exportConfig(methods)}\n            />\n        </React.Fragment>\n    );\n\n};\n\nSystemCveToolbarWithContext.defaultProps = {\n    showRemediationButton: false,\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nSystemCveToolbarWithContext.propTypes = {\n    showRemediationButton: propTypes.bool,\n    entity: propTypes.string,\n    context: propTypes.object,\n    intl: propTypes.any\n};\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","import {\n    fetchCveListBySystem,\n    changeSystemCVEsParameters,\n    selectSystemCve,\n    expandSystemCve\n} from '../../../Store/Actions/Actions';\nimport propTypes from 'prop-types';\nimport '../CVEs/vulnerabilities.scss';\nimport messages from '../../../Messages';\nimport { withRouter } from 'react-router-dom';\nimport SystemCveTable from './SystemCveTable';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SYSTEM_DETAILS_HEADER, CVES_ALLOWED_PARAMS } from '../../../Helpers/constants';\nimport { CVSSOptions, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport React, { useMemo, useEffect, Fragment, createContext, useState } from 'react';\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { EmptyVulnerabilityData, GenericError } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport { useCreateUrlParams } from '../../../Helpers/MiscHelper';\n\nexport const CVETableContext = createContext({});\n\nexport const SystemCVEs = (props) => {\n    const dispatch = useDispatch();\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const systemCVEs = useSelector(({ SystemCvesStore }) => SystemCvesStore.cveList);\n    const parameters = useSelector(({ SystemCvesStore }) => SystemCvesStore.parameters);\n    const selectedCves = useSelector(({ SystemCvesStore }) => SystemCvesStore.selectedCves);\n    const openedCves = useSelector(({ SystemCvesStore }) => SystemCvesStore.openedCves);\n    const expandCveDescription = useSelector(({ SystemCvesStore }) => SystemCvesStore.expandCveDescription);\n    const cves =  useMemo(() => createCveListBySystem(props.entity, systemCVEs), [systemCVEs]);\n    const [createUrlParams, urlParameters] = useCreateUrlParams(props, CVES_ALLOWED_PARAMS);\n\n    useEffect(() =>{\n        !parameters.isFirstMount && dispatch(fetchCveListBySystem({ ...parameters, system: props.entity }));\n    }, [parameters, dispatch]);\n\n    const downloadReport = format => {\n        const params = { ...parameters, system: props.entity };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    const processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && props.entity) {\n            return EmptyVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    const apply = (config = {}) => {\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        createUrlParams(config);\n        dispatch(changeSystemCVEsParameters(config));\n    };\n\n    useEffect(() => {\n        dispatch(\n            changeSystemCVEsParameters({ ...parameters, ...urlParameters, page: 1, isFirstMount: false, sort: '-public_date' })\n        );\n    }, []);\n\n    const showStatusModal = cvesList => {\n        let hasDifferentStatus;\n        if (cvesList.length > 1) {\n            const selectedCves = Array.from(cves.data.filter(cve => cvesList.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        setStatusModal(()=> () =>\n            (<CvePairStatusModal\n                cves={cvesList}\n                updateRef={() => { apply(parameters); }}\n                inventories={[{ id: props.entity }]}\n                hasDifferentStatus={hasDifferentStatus}\n                type={'systemDetail'}\n            />)\n        );\n    };\n\n    const handleCveSelect = (iSelected, payload) => {\n        dispatch(selectSystemCve(payload));\n    };\n\n    const handleCveOpen = (isOpen, cves, expandCveDescription) => {\n        dispatch(expandSystemCve({ isOpen, cves, expandCveDescription }));\n    };\n\n    if (!systemCVEs.errors) {\n        return (\n            <Fragment>\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        parameters,\n                        selectedCves,\n                        openedCves,\n                        expandCveDescription,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves: handleCveSelect,\n                            openCves: handleCveOpen,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: props.entity })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={props.entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={SYSTEM_DETAILS_HEADER} entity={props.entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            </Fragment>);\n    }\n    else {\n        return processError(systemCVEs.errors);\n    }\n\n};\n\nSystemCVEs.propTypes = {\n    entity: propTypes.string,\n    cveList: propTypes.any,\n    fetchData: propTypes.func,\n    history: propTypes.object,\n    location: propTypes.object,\n    intl: propTypes.any\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(SystemCVEs)\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { PATHS } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport { EmptyExcludedSystem } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: PATHS.vulnerabilities.title, to: PATHS.vulnerabilities.to },\n                { title: PATHS.systems.title, to: PATHS.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <EmptyExcludedSystem buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}