{"version":3,"sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Helpers/VulnerabilitiesHelper.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CVEs","props","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","emptyStore","entity","Component","Vulnerabilities","VulnerabilitiesCves","params","react_default","a","createElement","React","defaultProps","header","title","key","width","hasSort","Fragment","Tooltip","position","content","info_circle_icon","fetchResource","fetchCveListByAccount","dataMapper","cveList","isLoading","payload","asMutable","data","meta","map","row","id","cells","MiscHelper","attributes","impact","synopsis","description","cvss3_score","cvss2_score","concat","systems_affected","public_date","showAllCheckbox","defaultSort","propTypes","func","array","bool","string","any","withRouter","connect","dispatchAction","emptyCveList","SystemDetail","affectedSystemId","state","entityDetails","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","arguments","length","undefined","type","LOAD_ENTITY_FULFILLED","objectSpread_default","activeApps","name","component","InventoryDetail","_this","checkItem","bind","assertThisInitialized_default","InventoryCmp","removeListener","_this2","setState","middlewareListener","addNew","on","callback","fetchData","cve","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","value","newList","systemList","selected","affectedSystems","Card","CardBody","items","item","inventory_id","dataShape","sExposedSystemsTable","fetchAffectedSystemsByCVE"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["\nimport { Vulnerabilities, VulnerabilitiesCves } from '@red-hat-insights/insights-frontend-components';\nimport { withRouter } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport { connect } from 'react-redux';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { emptyCveList, fetchCveListByAccount } from '../../../Store/Actions/Actions';\n\nclass CVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillUnmount() {\n        this.props.emptyStore();\n    }\n\n    render() {\n        const { entity } = this.props;\n        const Component = (entity && Vulnerabilities) || VulnerabilitiesCves;\n        const params = (entity && { entity }) || this.props;\n        return <Component {...params} />;\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        emptyStore: () => dispatchAction(emptyCveList())\n    };\n};\n\nCVEs.defaultProps = {\n    header: [\n        { title: ' ', key: 'impact', width: 3 },\n        { title: 'Name', key: 'synopsis', width: 10 },\n        { title: 'Description', key: 'description', hasSort: false, width: 50 },\n        {\n            title: (\n                <React.Fragment>\n                    {'CVSS Base Score'} <Tooltip\n                        position=\"right\"\n                        content={\n                            <div>All CVEs use Common Vulnerability Scoring System v3 except where noted.</div>\n                        }\n                    >\n                        <InfoCircleIcon />\n                    </Tooltip>\n                </React.Fragment>\n            ),\n            key: 'cvss_score',\n            width: 10\n        },\n        { title: 'Systems Exposed', key: 'systems_affected', width: 3 },\n        { title: 'Publish date', key: 'public_date', width: 10 }\n    ],\n    fetchResource: fetchCveListByAccount,\n    dataMapper: createCveListByAccount,\n    showAllCheckbox: true,\n    defaultSort: '-public_date'\n};\n\nCVEs.propTypes = {\n    dataMapper: propTypes.func,\n    fetchResource: propTypes.func,\n    header: propTypes.array,\n    showAllCheckbox: propTypes.bool,\n    entity: propTypes.string,\n    emptyStore: propTypes.func,\n    defaultSort: propTypes.any\n};\n\nexport default withRouter(\n    connect(\n        null,\n        mapDispatchToProps\n    )(CVEs)\n);\n","import * as MiscHelper from './MiscHelper';\n\nexport function createCveListByAccount(cveList) {\n    let isLoading = cveList.isLoading;\n    if (!isLoading) {\n        let payload = cveList.payload.asMutable();\n        let data = payload.data;\n        let meta = payload.meta;\n        data = data.map(row => ({\n            id: row.id,\n            cells: [\n                MiscHelper.processImpactForTable(row.attributes.impact),\n                row.attributes.synopsis,\n                MiscHelper.truncate(row.attributes.description, 200),\n                row.attributes.cvss3_score || (row.attributes.cvss2_score && `${row.attributes.cvss2_score} (v2)`) || 'N/A',\n                row.attributes.systems_affected,\n                MiscHelper.processDate(row.attributes.public_date)\n            ]\n        }));\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCurrentVulnerabilitiesCard(impacts) {\n    let dataSet = impacts.payload;\n    let isLoading = impacts.isLoading;\n    if (!isLoading) {\n        dataSet = impacts.payload;\n    }\n\n    dataSet = { content: dataSet, isLoading };\n    return dataSet;\n}\n","import { withRouter } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CVEs from '../CVEs/CVEs';\n\nclass SystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CVEs entity={this.props.affectedSystemId} />\n            </React.Fragment>\n        );\n    }\n}\n\nSystemDetail.propTypes = {\n    affectedSystemId: propTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystemId: state.entityDetails.entity.id\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetail)\n);\n","import SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = INVENTORY_ACTION_TYPES => (state = initialState, action) => {\n    switch (action.type) {\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [{ title: 'Vulnerabilities', name: 'vulnerabilities', component: SystemDetail }]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { withRouter } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchAffectedSystemsByCVE } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\n\nclass InventoryDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            removeListener: () => {}\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            removeListener: middlewareListener.addNew({\n                on: 'LOAD_ENTITIES_FULFILLED',\n                callback: () => this.props.fetchData(this.props.cve)\n            })\n        });\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryDetail\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data } = this.props.affectedSystems;\n        return (\n            <Card>\n                <CardBody>\n                    <InventoryCmp items={data.map(item => item.inventory_id)} />\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nInventoryDetail.propTypes = {\n    cve: propTypes.string,\n    fetchData: propTypes.func,\n    affectedSystems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystems: sExposedSystemsTable(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        fetchData: cve => dispatchAction(fetchAffectedSystemsByCVE(cve))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}