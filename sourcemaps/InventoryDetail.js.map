{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-table/dist/esm/index.js","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/index.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CvePairStatusModal","cves","updateRef","inventoryIds","useState","cveList","useStatusSelect","length","status_id","toString","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","justification","JustificationInput","setJustificationProps","checkboxState","setCheckboxState","modalTitle","items","onSave","cveIds","map","item","id","setStatusParams","cve","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","variant","title","gutter","key","fieldId","label","name","isChecked","onChange","checked","props","isDisabled","propTypes","array","func","SystemCvesTableWithContext","noCves","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","Component","any","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","undefined","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","setState","state","sendRequest","cveNames","updateStateSet","Set","isExpanded","createUrlParams","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","response","payload","fetchCveListBySystem","page_size","Number","MAX_SAFE_INTEGER","data_format","page","JSON","downloadFile","Date","toISOString","StatusModal","queryObject","parse","location","search","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","component","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","onClick","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["export * from './components';\n//# sourceMappingURL=index.js.map","export * from './transformers';\nexport * from './headerUtils';\nexport * from './formatters';\nexport * from './utils';\n//# sourceMappingURL=index.js.map","import { Checkbox, Form, FormGroup, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventoryIds }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification, setProps: setJustificationProps } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        const props = { isDisabled: checked };\n        setCheckboxState(checked);\n        setSelectProps(props);\n        setJustificationProps(props);\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: 'CVE status updated'\n    };\n\n    let modalTitle = 'Set status for this CVE and system pair';\n    if (inventoryIds.length > 1 || cves.length > 1) {\n        modalTitle = 'Set status for these CVE and system pairs';\n    }\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryIds: propTypes.array\n};\n\nexport default CvePairStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={systemCveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({ id: item, status_id: '0' })),\n                undefined,\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCvesCount}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(response => {\n            const { value } = response;\n            if (expandCveDescription) {\n                const cveIds = value && value.data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.apply}\n                    inventoryIds={[this.props.entity && this.props.entity.id]}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}