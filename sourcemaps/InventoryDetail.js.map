{"version":3,"sources":["webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CvePairStatusModal","cves","updateRef","inventoryId","useState","cveList","useStatusSelect","length","status_id","toString","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","justification","JustificationInput","setJustificationProps","checkboxState","setCheckboxState","successNotification","variant","title","BaseModal","items","onSave","cveIds","map","item","id","setStatusParams","cve","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","Stack","gutter","StackItem","Form","key","FormGroup","fieldId","Checkbox","label","name","isChecked","onChange","checked","props","isDisabled","propTypes","array","func","string","SystemCvesTableWithContext","noCves","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","this","openCves","header","params","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","Component","any","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","selectedCvesCount","size","undefined","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","business_risk_id","kebabItemEditStatus","showStatusModal","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","setState","state","sendRequest","cveNames","updateStateSet","Set","createUrlParams","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","page_size","Number","MAX_SAFE_INTEGER","data_format","page","response","JSON","downloadFile","Date","toISOString","StatusModal","queryObject","parse","location","search","errors","Provider","SystemCveTableToolbar","SystemCveTable","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","component","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","onClick","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Checkbox, Form, FormGroup, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventoryId }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification, setProps: setJustificationProps } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryId\n            }\n            : { cve: cveIds, inventory_id: inventoryId };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        const props = { isDisabled: checked };\n        setCheckboxState(checked);\n        setSelectProps(props);\n        setJustificationProps(props);\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title=\"Set status for this CVE and host pair\"\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryId: propTypes.string\n};\n\nexport default CvePairStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={systemCveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                [...selectedCves].map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, [...selectedCves].map(item => ({ id: item, status_id: '0' })), {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCvesCount}\n                                selectorHandler={methods.selectCves}\n                                cves={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                            />\n                        )}\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={filterCategories}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base ',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set(), openedCves: new Set(), StatusModal: () => null };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    openCves = (isOpen, cveNames) => {\n        let { openedCves } = this.state;\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves) });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        fetchData && fetchData({ ...this.state, system: entity.id });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        let { payload } = fetchCveListBySystem({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal cves={cves} updateRef={this.apply} inventoryId={this.props.entity && this.props.entity.id} />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}