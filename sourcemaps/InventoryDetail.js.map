{"version":3,"sources":["webpack:///./node_modules/@patternfly/react-table/dist/esm/index.js","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/index.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["CvePairStatusModal","cves","updateRef","inventories","useState","cveList","inventoryList","useStatusSelect","length","status_id","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","setProps","useJustificationInput","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","inventoryIds","map","item","id","useEffect","props","isDisabled","modalTitle","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","variant","title","gutter","key","fieldId","label","name","isChecked","onChange","checked","propTypes","array","func","SystemCvesTableWithContext","noCves","entity","context","filter","meta","hasOwnProperty","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","Component","any","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","undefined","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditStatus","showStatusModal","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","multiRow","Filters","searchPlaceholder","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","dataReload","page","reloadPage","pages","setState","state","page_size","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","createUrlParams","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","StatusModal","queryObject","parse","location","search","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","component","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","onClick","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["export * from './components';\n//# sourceMappingURL=index.js.map","export * from './transformers';\nexport * from './headerUtils';\nexport * from './formatters';\nexport * from './utils';\n//# sourceMappingURL=index.js.map","import { Checkbox, Form, FormGroup, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            const props = { isDisabled: true };\n            setSelectProps(props);\n            setJustificationProps(props);\n        }\n    }, []);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        return (cveList && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        const props = { isDisabled: checked };\n        setCheckboxState(checked);\n        setSelectProps(props);\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps(props);\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: 'CVE status updated'\n    };\n\n    let modalTitle = 'Set status for this CVE and system pair';\n    if (inventoryIds.length > 1 || cves.length > 1) {\n        modalTitle = 'Set status for these CVE and system pairs';\n    }\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array\n};\n\nexport default CvePairStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForSystem;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={systemCveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({ id: item, status_id: '0' })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCvesCount}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips filterValues={params} filterCategories={filterCategories} apply={methods.apply} />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}