{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["SystemCvesTableWithContext","noCves","props","entity","cves","context","filter","item","meta","hasOwnProperty","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","rowKey","isOpen","this","openCves","header","params","selectedCves","openedCves","rows","map","cve","has","selected","actions","title","onClick","rowData","showBusinessRiskModal","business_risk_id","justification","business_risk_justification","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","variant","Component","propTypes","any","array","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCvesCount","size","undefined","kebabOptions","kebabItemEditBusinessRisk","isDisabled","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","showStatusList","Boolean","filterValues","Remediation","systemId","BaseKebab","dropdownItems","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","parseInt","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","setState","state","sendRequest","cveNames","updateStateSet","Set","createUrlParams","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","page_size","Number","MAX_SAFE_INTEGER","data_format","page","then","response","JSON","downloadFile","Date","toISOString","BusinessRiskModal","open","updateRef","StatusDropdown","setCallback","queryObject","parse","location","search","cveList","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","func","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","Fragment","buttonAction","opt_out","dispatchAction","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","component","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","optOutSystemAction","notification"],"mappings":"ymCASMA,G,+LAOFC,OAAS,WAAM,MACiB,EAAKC,MAAzBC,EADG,EACHA,OACAC,EAFG,EACKC,QACRD,KAIR,OAA4B,IAHP,CAAC,SAAU,YAAa,UAAW,cAAe,YAAa,SAAU,aAAaE,OACvG,SAAAC,GAAI,OAAIH,EAAKI,KAAKC,eAAeF,IAASH,EAAKI,KAAKD,KAEvCG,OACNC,IACAR,EACAS,IACqB,IAArBR,EAAKS,KAAKH,OACVI,SADJ,G,EAYXC,eAAiB,SAACC,EAAOC,EAAYC,GAAU,IACnCb,EAAY,EAAKH,MAAjBG,QACAD,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACRC,EAAUhB,EAAKS,KAAKK,IAAUd,EAAKS,KAAKK,GAAOG,GACrDF,EAAQG,WAAWL,EAAYG,I,kEAXlBJ,EAAOO,EAAQC,GAAQ,IAC5BnB,EAAYoB,KAAKvB,MAAjBG,QACAD,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACRC,EAAUhB,EAAKS,KAAKU,IAAWnB,EAAKS,KAAKU,GAAQF,GACvDF,EAAQO,SAASF,EAAQJ,K,+BAUpB,aACuBK,KAAKvB,MAAzBG,EADH,EACGA,QAASsB,EADZ,EACYA,OACTC,EAA0BvB,EAA1BuB,OAAQxB,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACdU,EAA6BD,EAA7BC,aAAcC,EAAeF,EAAfE,WAChBC,EAAO3B,EAAKS,KACjBmB,IAAI,SAAAC,GAAG,OAAKJ,EAAaK,IAAID,EAAIZ,KAArB,MAAiCY,EAAjC,CAAsCE,UAAU,KAAWF,IACvED,IAAI,SAAAC,GAAG,OAAKH,EAAWI,IAAID,EAAIZ,KAAnB,MAA+BY,EAA/B,CAAoCT,QAAQ,KAAWS,IAC9DG,EAAU,CACZ,CACIC,MAAO,qBACPC,QAAS,SAACtB,EAAOE,EAAOqB,GAAf,OACLpB,EAAQqB,sBAAsB,CAC1B,CACInB,GAAIkB,EAAQlB,GACZoB,iBAAkBF,EAAQE,iBAC1BC,cAAeH,EAAQI,kCAK3C,OACI,kBAAC,WAAD,KACMvC,EAAKwC,UAiCH,kBAAC,gBAAD,CAAeC,QAAS,EAAGC,QAAS,KAhCpC,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CACIC,aAAY,0BACZC,SAAUxB,KAAKV,eACfmC,MAAOvB,EACPI,KAAMA,EACNK,QAASA,EACTe,OAAQC,YAAa,CAAC,CAAEC,IAAK,YAAc,CAAEA,IAAK,aAA9B,WAA+C1B,IAASvB,EAAKI,KAAK8C,MACtFC,OAAQ,SAACvC,EAAOqC,EAAKG,GAAb,OACJC,YACIJ,EACAG,EAFY,CAGX,CAAEH,IAAK,YAAc,CAAEA,IAAK,aAHjB,WAGkC1B,IAC9CvB,EAAKI,KAAK8C,KACVnC,EAAQuC,QAGhBC,eAAgB,UAChBC,WAAY,SAAC5C,EAAOO,EAAQC,GAAhB,OAA2B,EAAKqC,iBAAiB7C,EAAOO,EAAQC,MAEzEpB,EAAKwC,WAAkC,IAArBxC,EAAKS,KAAKH,QAAgBe,KAAKxB,UAChD,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIZ,kBAAC,eAAD,KACI,kBAAC6D,GAAA,EAAD,CAAmBC,QAAQ,SAASvD,KAAMJ,EAAKI,KAAMkD,MAAOvC,EAAQuC,e,GAvFvDM,aAAnChE,GACKiE,UAAY,CACf5D,QAAS4D,IAAUC,IACnBvC,OAAQsC,IAAUE,MAClBhE,OAAQ8D,IAAUG,QA8F1B,IAGeC,GAHS,SAAAnE,GAAK,OACzB,kBAACoE,GAAgBC,SAAjB,KAA2B,SAAAlE,GAAO,OAAI,kBAAC,GAAD,KAA4BA,QAASA,GAAaH,O,6RC3FtFsE,G,yIAgBO,MAC+D/C,KAAKvB,MAAjEuE,EADH,EACGA,gBAAiBC,EADpB,EACoBA,sBAAuBvE,EAD3C,EAC2CA,OAAQE,EADnD,EACmDA,QAChDD,EAA0BC,EAA1BD,KAAMwB,EAAoBvB,EAApBuB,OAAQT,EAAYd,EAAZc,QACdU,EAAiBD,EAAjBC,aACF8C,GACmC,IAArClD,KAAKvB,MAAMwE,sBAAkC7C,GAAgBA,EAAa+C,MAAS,OAAIC,EACrFC,EAAe,CACjBC,aACI5D,EAAQqB,sBACR,IAAIX,GAAcG,IAAI,SAAAzB,GAAI,MAAK,CAAEc,GAAId,EAAMkC,iBAAkB,OAC7D,CAAEuC,YAAaL,IAEnBM,aAAsB9D,EAAQ+D,gBAC9BC,aAAqBhE,EAAQ+D,iBAEjC,OACI,kBAAC,eAAD,CAAcE,UAAU,+BACpB,kBAACC,GAAA,EAAD,CAAcD,UAAU,iCACnBV,GACG,kBAACY,GAAA,EAAD,CACIC,cAAeZ,EACfa,gBAAiBrE,EAAQG,WACzBlB,KAAMA,EACNqF,cAAe,SAAAC,GAAG,OAAIvE,EAAQsE,c,+UAAR,IAA2B7D,EAA3B,GAAsC8D,OAGpE,kBAACC,GAAA,EAAD,CACIjC,MAAOvC,EAAQuC,MACfkC,eAAgBC,QAAQ1F,GACxBsE,gBAAiBA,EACjBqB,aAAclE,IAEjB8C,GAAyB,kBAACqB,GAAA,EAAD,CAAaC,SAAU7F,EAAOkB,GAAIQ,aAAcA,IAC1E,kBAACoE,GAAA,EAAD,CAAWC,cAAepB,KAG9B,kBAACO,GAAA,EAAD,KACI,kBAACvB,GAAA,EAAD,CAAmBJ,MAAOvC,EAAQuC,MAAOlD,KAAMJ,EAAKI,a,GArD9BwD,aAApCQ,GACKP,UAAY,CACfQ,gBAAiBR,IAAUkC,KAC3BzB,sBAAuBT,IAAUkC,KACjChG,OAAQ8D,IAAUG,OAClB/D,QAAS4D,IAAUG,QALrBI,GAQK4B,aAAe,CAClB3B,iBAAiB,EACjBC,uBAAuB,EACvB2B,YAAa,EACb3C,MAAO,aACPwB,eAAgB,cA+CxB,IAGeoB,GAHU,SAAApG,GAAK,OAC1B,kBAACoE,GAAgBC,SAAjB,KAA2B,SAAAlE,GAAO,OAAI,kBAAC,GAAD,KAA6BA,QAASA,GAAaH,O,+iBC3DtF,IAAMoE,GAAkBiC,IAAMC,cAAc,IAE7C7E,GAAS,CACX,CACIU,MAAO,OACPgB,IAAK,WACLoD,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,YAC9BE,eAAgB,CAACC,MAErB,CACIzE,MAAO,eACPgB,IAAK,cACLoD,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACItE,MAAO,aACPgB,IAAK,aACLoD,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACItE,MAAO,SACPgB,IAAK,SACLoD,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,aAElC,CAAEtE,MAAO,SAAUgB,IAAK,SAAUoD,WAAY,CAACC,IAAUC,YAAW,kBACpE,CAAEtE,MAAO,gBAAiBgB,IAAK,gBAAiBoD,WAAY,CAACC,IAAUC,YAAW,mBAGhFI,G,YASF,WAAY7G,GAAO,0BACf,4BAAMA,KAWV8G,aAAe,SAAAC,GAAS,IACZC,EAAWD,EAAXC,OAER,OAAmB,MADAC,SAASD,IACF,EAAKhH,MAAMC,OAC1BiH,IAEAC,KAlBI,EAsBnB3D,MAAQ,WAAiB,IAAhB4D,EAAgB,uDAAP,GACd,GAAIA,EAAO7G,eAAe,eAAgB,CACtC,IAAI8G,EAAYC,IAAYC,KAAK,SAAAlH,GAAI,OAAIA,EAAKmH,QAAUJ,EAAOK,cAC/D,IAAKJ,EAAW,CACZ,IAAIK,EAASN,EAAOK,YAAYE,MAAM,WAAWvH,OAAO,SAAAC,GAAI,OAAIuH,WAAWvH,KAC3EgH,EAAY,CAAEG,MAAOJ,EAAOK,YAAaI,KAAMH,EAAO,GAAII,GAAIJ,EAAO,IAGzEN,EAAOW,UAAYV,EAAUQ,KAC7BT,EAAOY,QAAUX,EAAUS,GAG/B,GAAIV,EAAO7G,eAAe,gBAAiB,CACvC,IAAI0H,EAAcC,IAAkBX,KAAK,SAAAlH,GAAI,OAAIA,EAAKmH,QAAUJ,EAAOe,eACvEf,EAAOgB,YAAcH,EAAYJ,MAAQI,EAAYJ,KAAKQ,OAAO,cACjEjB,EAAOkB,UAAYL,EAAYH,IAAMG,EAAYH,GAAGO,OAAO,cAG/D,EAAKE,SAAL,MAAmB,EAAKC,MAAxB,GAAkCpB,GAAU,EAAKqB,cAxClC,EA2CnBrH,WAAa,SAACL,EAAY2H,GAAa,IAC7B/G,EAAiB,EAAK6G,MAAtB7G,aAEFA,EADA+G,EACeC,YAAehH,EAAc+G,EAAU3H,GAEvC,IAAI6H,IAGvB,EAAKL,SAAL,MAAmB,EAAKC,MAAxB,CAA+B7G,aAAc,IAAIiH,IAAIjH,OAnDtC,EAsDnBH,SAAW,SAACF,EAAQoH,GAAa,IACvB9G,EAAe,EAAK4G,MAApB5G,WAEFA,EADA8G,EACaC,YAAe/G,EAAY8G,EAAUpH,GAErC,IAAIsH,IAGrB,EAAKL,SAAL,MAAmB,EAAKC,MAAxB,CAA+B5G,WAAY,IAAIgH,IAAIhH,OA9DpC,EAiEnBiH,gBAAkB,SAAAC,GACd,IAAMpH,EAAS,MAAKoH,GACdC,EAAgB,CAAC,cAAe,eAAgB,SAAU,QAAS,SAAU,OAAQ,YAAa,OAAQ,UAChHC,OAAOC,KAAKH,GAAWI,QACnB,SAAA/F,GAAG,YACkBwB,IAAhBjD,EAAOyB,IAAsC,KAAhBzB,EAAOyB,KAAgB4F,EAAcI,SAAShG,KAAwB,IAAhBzB,EAAOyB,YACpFzB,EAAOyB,KAEtB,IAAMiG,EAAcC,IAAGC,UAAU5H,GACjC,EAAK1B,MAAMuJ,QAAQC,KAAK,IAAMJ,IA1Ef,EA6EnBX,YAAc,WAAM,MACc,EAAKzI,MAA3ByJ,EADQ,EACRA,UAAWxJ,EADH,EACGA,OACnBwJ,GAAaA,EAAU,MAAK,EAAKjB,MAAX,CAAkBkB,OAAQzJ,EAAOkB,MACvD,EAAK0H,gBAAgB,EAAKL,QAhFX,EAmFnBxD,eAAiB,SAAAqD,GACb,IAAM3G,EAAS,MAAK,EAAK8G,OACnBmB,EAAYC,YAAqB,MAAKlI,EAAN,CAAcmI,UAAWC,OAAOC,iBAAkBC,YAAa3B,EAAQ4B,KAAM,KAA7GN,QACNA,GACIA,EAAQO,KAAK,YAAwB,IAAfC,EAAe,EAArBxJ,KACNA,EAAkB,SAAX0H,EAAoB+B,KAAKd,UAAUa,GAAYA,EAC5D,OAAOE,uBAAa1J,EAAD,8BAA6B,IAAI2J,MAAOC,eAAiBlC,MAzFrE,EA6FnB/F,sBAAwB,SAAApC,GACpB,EAAKqI,SAAS,CACViC,kBAAmB,kBAAM,kBAAC,IAAD,CAAmBC,MAAI,EAACvK,KAAMA,EAAMwK,UAAW,EAAKlH,YA7FjF,EAAKgF,MAAQ,CAAE7G,aAAc,IAAIiH,IAAOhH,WAAY,IAAIgH,IAAO4B,kBAAmB,kBAAM,OAFzE,E,iEAMfG,IAAeC,YAAYrJ,KAAKkH,aAChC,IACMoC,EAAcxB,IAAGyB,MAAMvJ,KAAKvB,MAAM+K,SAASC,QACjDzJ,KAAKiC,MAAL,MAFsB,CAAEJ,KAAM,gBAE9B,GAAkCyH,M,+BA0F7B,MACuBtJ,KAAKvB,MAAzBiL,EADH,EACGA,QAAShL,EADZ,EACYA,OACTuD,EAAuEjC,KAAvEiC,MAAOwB,EAAgEzD,KAAhEyD,eAAgB5D,EAAgDG,KAAhDH,WAAYI,EAAoCD,KAApCC,SAAUc,EAA0Bf,KAA1Be,sBAC7CkI,EAAsBjJ,KAAKiH,MAA3BgC,kBACFtK,EAAO+K,EACLC,EAAWhL,EAAXgL,OACR,OAAKA,EA6BM3J,KAAKuF,aAAaoE,GA3BrB,kBAAC9G,GAAgB+G,SAAjB,CACI3D,MAAO,CACHtH,OACAwB,OAAQH,KAAKiH,MACbvH,QAAS,CACLuC,QACAwB,iBACA5D,aACAI,WACAc,wBACAiD,cAAe,SAAA7D,GAAM,OAAIkI,YAAqB,MAAKlI,EAAN,CAAcgI,OAAQzJ,EAAOkB,UAIlF,kBAACqJ,EAAD,MAEA,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,GAAD,CAAuB9G,uBAAqB,EAACvE,OAAQA,KAEzD,kBAACoL,EAAA,EAAD,KACI,kBAACE,GAAD,CAAgB9J,OAAQA,GAAQxB,OAAQA,W,GAzI3C6D,aAAnB+C,GACK9C,UAAY,CACf9D,OAAQ8D,IAAUG,OAClB+G,QAASlH,IAAUC,IACnByF,UAAW1F,IAAUyH,KACrBjC,QAASxF,IAAUG,OACnB6G,SAAUhH,IAAUG,QAqJ5B,IAMeuH,eACXC,kBAdJ,YAAyE,IAA9CC,EAA8C,EAA9CA,gBAAkC1L,EAAY,EAA7B2L,cAAiB3L,OACzD,MAAO,CACHgL,QAASU,GAAmBE,YAAsB5L,EAAOkB,GAAIwK,EAAgBV,SAC7EhL,WAImB,SAAA6L,GACvB,MAAO,CACHrC,UAAW,SAAA/H,GAAM,OAAIoK,EAASlC,YAAqBlI,OAKvDgK,CAGE7E,KC5MAkF,G,YAQF,WAAY/L,GAAO,6CACTA,I,sDAGD,MAC6CuB,KAAKvB,MAA/CC,EADH,EACGA,OAAQ+L,EADX,EACWA,SAAUC,EADrB,EACqBA,oBAS1B,OARA1K,KAAKvB,MAAMkM,UAAU,CACjBC,YAAa,CACT,CAAEhK,MAAOiK,IAAMC,gBAAgBlK,MAAO2F,GAAIsE,IAAMC,gBAAgBvE,IAChE,CAAE3F,MAAOiK,IAAME,QAAQnK,MAAO2F,GAAIsE,IAAME,QAAQxE,IAChD,CAAE3F,MAAQlC,GAAUA,EAAOsM,cAAiB,iBAAkBC,UAAU,MAI3EvM,EAMA+L,EAQG,kBAAC,IAAMS,SAAP,KACI,kBAAC,IAAD,CAA2BC,aAAc,kBAAMT,GAAoB,OAPvE,kBAAC,IAAMQ,SAAP,KACI,kBAAC,GAAD,CAAiBxM,OAAQA,EAAOkB,MAPpC,kBAAC,IAAD,U,GAxBWkF,IAAMvC,WAA3BiI,GACKhI,UAAY,CACfmI,UAAWnI,IAAUyH,KACrBvL,OAAQ8D,IAAUG,OAClB8H,SAAUjI,IAAUkC,KACpBgG,oBAAqBlI,IAAUyH,MAoDxBC,mBACXC,kBARJ,YAA2E,QAAhDE,cACvB,MAAO,CACH3L,OAFmE,EAA/BA,OAGpC+L,SAHmE,EAAvBW,UANzB,WACvB,MAAO,CACHT,UAAW,SAAAzK,GAAM,OAAImL,YAAeV,YAAUzK,OAYlDiK,CAGEK,K,yjBCnEN,IAAIc,GAAe,CACfC,QAAQ,GAICC,GAAoB,SAACC,EAAwBf,GAAzB,OAAiD,WAAkC,IAAjCzD,EAAiC,uDAAzBqE,GAAcI,EAAW,uCAChH,OAAQA,EAAOC,MACX,KAAKC,KAAuB,aACxB,aACO3E,EADP,GAEOyE,EAAOtD,QAAQhJ,MAE1B,KAAKqM,EAAuBI,sBACxB,aACO5E,EADP,CAEIsE,QAAQ,EACRO,WAAY,CACR,CACIlL,MAAO,kBACPmL,KAAM,kBACNC,UAAW,kBAAM,kBAAC,GAAD,CAActB,oBAAqBA,SAIpE,QACI,OAAOzD,K,skBCbbgF,G,YASF,WAAYxN,GAAO,0BACf,4BAAMA,KAkCVyN,UAAY,SAACtK,EAAKqE,GACd,IAAIkG,EAAU,EAAKlF,MAAMmF,WACzBD,EAAQvK,GAAKlB,SAAWuF,EACxB,EAAKe,SAAS,CAAEoF,WAAYD,KAtCb,EAyCnBE,gBAAkB,SAAApG,GACd,EAAKe,SAAL,MAAmB,EAAKC,MAAxB,CAA+BqF,YAAarG,MA1C7B,EA6CnBsG,aAAe,SAAAtG,GACX,EAAKxH,MAAM8N,aAAa,EAAKtF,MAAMuF,YAAavG,GAAO0C,KAAK,WACxD,EAAKlK,MAAMgO,mBAAmB,EAAKxF,MAAMuF,cAC/B,IAAVvG,EACM,EAAKxH,MAAMiO,gBAAgB,CACzBpK,QAAS,UACT1B,MAAO,6DAET,EAAKnC,MAAMiO,gBAAgB,CACzBpK,QAAS,UACT1B,MAAO,qDACP+L,YAAa,sDArDzB,EAAK1F,MAAQ,CACTuF,YAAa,EAAK/N,MAAMmO,MAAMzM,OAAOqM,YACrCK,eAAgB,aAChBP,aAAa,GANF,E,uEAWftM,KAAKvB,MAAMgO,mBAAmBzM,KAAKiH,MAAMuF,aACzCxM,KAAK8M,mB,uJAI4FC,SAASC,cAAc,CACpHC,MAAOnI,IACPoI,iBACAC,YACAC,e,gBAJIC,E,EAAAA,mBAAoBC,E,EAAAA,kBAAmBC,E,EAAAA,gBAAiB9B,E,EAAAA,uBAOhE+B,KAAgBC,SAAhB,MACOH,IADP,GAEOC,EAAgB/B,GAAkBC,EAAwBzL,KAAKuM,iBAGtEvM,KAAKgH,SAAS,CACV0G,gBAAiBL,IAAqBM,oBACtCC,cAAeP,IAAqBQ,UAExC7N,KAAKiH,MAAM4F,iB,2HA6BN,aACsC7M,KAAKiH,MAAxCyG,EADH,EACGA,gBAAiBE,EADpB,EACoBA,cADpB,EAE0B5N,KAAKvB,MAA5BqP,qBAFH,MAEmB,GAFnB,IAGyCA,EAAtC1C,QAASX,OAHZ,SAG8B/L,EAAWoP,EAAXpP,OAEnC,OACI,kBAACqP,EAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAqBpN,MAAM,GAAGqN,UAAU,GACnCP,GACG,kBAACA,EAAD,CACIQ,UAAQ,EACRvN,QACIjC,GAAU,CACN+L,EACM,CACE7J,MAAO,gCACPC,QAAS,kBAAM,EAAK0L,cAAa,KAEnC,CACE3L,MAAO,sCACPC,QAAS,kBAAM,EAAK0L,cAAa,SAQ5DqB,GACG,kBAAC,OAAD,KACI,kBAAC,IAAM1C,SAAP,KACI,kBAAC0C,EAAD,CAAelD,oBAAqB1K,KAAKuM,sB,GArGvCzH,IAAMvC,WAA9B0J,GACKzJ,UAAY,CACfiK,mBAAoBjK,IAAUyH,KAC9B6D,cAAetL,IAAUG,OACzB4J,aAAc/J,IAAUyH,KACxB2C,MAAOpK,IAAUG,OACjB+J,gBAAiBlK,IAAUyH,MAsHpBC,sBACXC,kBAfJ,SAAyBlD,GACrB,MAAO,CACH6G,cAAe7G,EAAMoD,gBAIF,WACvB,MAAO,CACHkC,aAAc,SAACpE,EAAQ1C,GAAT,OAAoB4F,YAAe8C,YAAmBhG,EAAQ1C,KAC5EgH,mBAAoB,SAAAtE,GAAM,OAAIkD,YAAeoB,YAAmBtE,KAChEuE,gBAAiB,SAAA0B,GAAY,OAAI/C,YAAeqB,0BAAgB0B,OAKpEjE,CAGE8B","file":"js/InventoryDetail.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n        const actions = [\n            {\n                title: 'Edit business risk',\n                onClick: (event, rowId, rowData) =>\n                    methods.showBusinessRiskModal([\n                        {\n                            id: rowData.id,\n                            business_risk_id: rowData.business_risk_id,\n                            justification: rowData.business_risk_justification\n                        }\n                    ])\n            }\n        ];\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={actions}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                [...selectedCves].map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    {showRemediationButton && (\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                        />\n                    )}\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <BaseKebab dropdownItems={kebabOptions} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport BusinessRiskModal from '../BusinessRiskModal/BusinessRiskModal';\nimport '../CVEs/vulnerabilities.scss';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base ',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set(), openedCves: new Set(), BusinessRiskModal: () => null };\n    }\n\n    componentDidMount() {\n        StatusDropdown.setCallback(this.sendRequest);\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    openCves = (isOpen, cveNames) => {\n        let { openedCves } = this.state;\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves) });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = ['cvss_filter', 'publish_date', 'filter', 'limit', 'offset', 'page', 'page_size', 'sort', 'impact'];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        fetchData && fetchData({ ...this.state, system: entity.id });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        let { payload } = fetchCveListBySystem({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal open cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showBusinessRiskModal } = this;\n        const { BusinessRiskModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showBusinessRiskModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <BusinessRiskModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis, SystemNotFound } from '../../../Helpers/constants';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return (\n                <SystemNotFound />\n            );\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system)),\n        addNotification: notification => dispatchAction(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}