{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/BaseKebab.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/Filters/FilterChips.js","webpack:///./src/Components/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/Components/PresentationalComponents/SelectAllCheckbox.js","webpack:///./src/Components/PresentationalComponents/Filters/Filters.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["BaseKebab","dropdownItems","disabled","props","useState","isOpen","setOpen","onSelect","toggle","onToggle","kebabState","isDisabled","isPlain","propTypes","array","bool","kebabItemDownloadJSON","downloadReport","key","component","onClick","messages","kebabExportAsJson","kebabItemDownloadCSV","kebabExportAsCsv","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabEditBusinessRisk","kebabItemEditStatus","showStatusModal","inventoryIds","kebabEditStatus","kebabItemToggleCvesDescription","toggleCveDescription","isExpanded","kebabCollapseCves","kebabExpandCves","kebabItemExcludeSystemAnalysis","doOptOut","isOptOut","kebabResumeAnalysis","kebabExcludeVulnerabilityAnalysis","kebabItemToggleExcludeSystemDisplay","handleOptOut","isOptedOut","kebabHideExcludedSystems","kebabShowExcludedSystems","FilterChips","filterValues","filterCategories","apply","localFilters","localFilterCategories","show_all","allowedFilters","map","urlParam","Object","entries","find","filter","includes","undefined","filterIsNotEmpty","length","Fragment","withToolbar","value","title","values","categoryName","toString","split","chip","mapChip","indexOf","label","newFilter","item","join","page","removeFilter","variant","resetParams","reduce","o","removeAllFilters","filterChipsClear","object","func","SearchFilter","placeholder","filterValue","updateFilterValue","debounce","applyFunction","useEffect","onChange","event","string","SelectAllCheckbox","setIsOpen","selectedItems","items","multiRow","selectedItemsArray","Array","from","selectedItemsCount","meta","data","checkboxlabel","Boolean","selectPageNumber","itemLabel","number","handleUnselectAll","selectorHandler","handleSelectAll","fetchResource","payload","page_size","total_items","then","id","intl","formatMessage","selectNone","union","selectPage","selectAll","splitButtonItems","isChecked","oneOfType","any","defaultProps","impact","injectIntl","Filters","addFilter","param","type","filters","CvePairStatusModal","updateRef","inventories","hasDifferentStatus","cveList","inventoryList","useJustificationInput","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","cve_status_id","successNotification","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","fieldId","cvePairStatusModalUseOverallCheckbox","name","checked","content","cvePairStatusModalUseOverallTooltip","className","style","verticalAlign","SystemCvesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","rowKey","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","Component","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","ToolbarGroup","ops","searchFilterLabel","Remediation","systemId","ToolbarItem","filterCveSearchTerm","totalNumber","React","createContext","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","dataReload","reloadPage","pages","setState","state","config","cvssEntry","CVSSOptions","cvss_filter","parseFloat","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","queryString","qs","stringify","history","push","fetchData","system","date","Date","toISOString","replace","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","element","StatusModal","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","TextVariants","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","ConnectedSystemCves","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"uMAKMA,EAAY,SAAC,GAA0C,IAAxCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAaC,EAAY,sCAC/BC,oBAAS,GADsB,WAClDC,EADkD,KAC1CC,EAD0C,KAWzD,OACI,6BACI,kBAAC,IAAD,KACIC,SAPZ,WACID,GAASD,IAODG,OAAQ,kBAAC,IAAD,CAAaC,SAZjC,SAA6BC,GACzBJ,EAAQI,IAWoDC,WAAYT,IAChEG,OAAQA,EACRO,SAAO,EACPX,cAAeA,GACXE,MAMpBH,EAAUa,UAAY,CAClBZ,cAAeY,IAAUC,MACzBZ,SAAUW,IAAUE,MAGTf,O,gUC7BFgB,EAAwB,SAACC,EAAD,OAAsBd,EAAtB,iBACjC,kBAAC,IAAD,KAAce,IAAI,OAAOC,UAAU,SAASC,QAAS,kBAAMH,EAAe,UAAad,GACnF,kBAAC,IAAqBkB,IAASC,qBAI1BC,EAAuB,SAACN,EAAD,OAAsBd,EAAtB,iBAChC,kBAAC,IAAD,KAAce,IAAI,MAAMC,UAAU,SAASC,QAAS,kBAAMH,EAAe,SAAYd,GACjF,kBAAC,IAAqBkB,IAASG,oBAI1BC,EAA4B,SAACC,EAAuBC,EAAxB,OAAmCxB,EAAnC,iBACrC,kBAAC,IAAD,KAAce,IAAI,mBAAmBC,UAAU,SAASC,QAAS,kBAAMM,EAAsBC,KAAWxB,GACpG,kBAAC,IAAqBkB,IAASO,yBAI1BC,EAAsB,SAACC,EAAiBH,EAAMI,EAAxB,OAA4C5B,EAA5C,iBAC/B,kBAAC,IAAD,KAAce,IAAI,aAAaC,UAAU,SAASC,QAAS,kBAAMU,EAAgBH,EAAMI,KAAmB5B,GACtG,kBAAC,IAAqBkB,IAASW,mBAI1BC,EAAiC,SAACC,EAAsBC,EAAvB,OAAwChC,EAAxC,iBAC1C,kBAAC,IAAD,KAAce,IAAI,uBAAuBC,UAAU,SAASC,QAAS,kBAAMc,MAA4B/B,GAClGgC,EAAa,kBAAC,IAAqBd,IAASe,mBAAwB,kBAAC,IAAqBf,IAASgB,mBAI/FC,EAAiC,SAACC,EAAUC,EAAX,OAA2BrC,EAA3B,iBAC1C,kBAAC,IAAD,KAAce,IAAI,aAAaC,UAAU,SAASC,QAAS,kBAAMmB,MAAgBpC,GAC5EqC,EACG,kBAAC,IAAqBnB,IAASoB,qBAC/B,kBAAC,IAAqBpB,IAASqB,qCAY9BC,EAAsC,SAACC,EAAcC,EAAf,OAAiC1C,EAAjC,iBAC/C,kBAAC,IAAD,KAAce,IAAI,iBAAiBC,UAAU,SAASC,QAAS,kBAAMwB,MAAoBzC,GACpF0C,EACG,kBAAC,IAAqBxB,IAASyB,0BAC/B,kBAAC,IAAqBzB,IAAS0B,6B,0tBClD3C,IAAMC,EAAc,SAAC7C,GAAU,IACnB8C,EAA0C9C,EAA1C8C,aAAcC,EAA4B/C,EAA5B+C,iBAAkBC,EAAUhD,EAAVgD,MAClCC,EAAe,EAAH,GAAQH,GACpBI,EAAwB,IAAIH,UAE3BE,EAAaE,SAEpB,IAoCMC,EAPcF,EAAsBG,IAClC,gBAAGC,EAAH,EAAGA,SAAH,OAAkBC,OAAOC,QAAQP,GAAcQ,KAAK,iCAAmBH,MAG5DI,OAAO,SAAAA,GAAM,OATP,SAACA,GACtB,OAAOA,IAAYA,EAAOC,cAASC,KAAeF,EAAOC,SAAS,IAQlCE,CAAiBH,KAKrD,OAAON,EAAeU,OAAS,GAC3B,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAWC,aAAW,GACjBZ,EAAeC,IAAI,YAAkB,eAAhBtC,EAAgB,KAAXkD,EAAW,OACEf,EAAsBO,KAAK,qBAAGH,WAA4BvC,IAAtFmD,EAD0B,EAC1BA,MAAOZ,EADmB,EACnBA,SAAUa,EADS,EACTA,OACzB,OACI,kBAAC,IAAD,CAAsBpD,IAAKA,EAAKqD,aAAcF,GACxCD,GAASA,EAAMI,WAAWC,MAAM,KAAKjB,IAAI,SAAAkB,GACvC,IAAMC,EAAUL,EAAOV,KAAK,mBAAwC,IAAxC,EAAGQ,MAAkBQ,QAAQF,KADV,EAExBC,EAAU,EAAH,GAAQA,GAAY,CAAEP,MAAOlD,EAAK2D,MAAOH,GAAjEN,EAFyC,EAEzCA,MAAOS,EAFkC,EAElCA,MACb,OACI,kBAAC,IAAD,CAAM3D,IAAKkD,EAAOhD,QAAS,kBAjDtC,SAACF,EAAKkD,GACvB,IAAME,EAASF,EAAMK,MAAM,KACrBK,EAAY,OACb5D,EAAM+B,EAAa/B,GACnBuD,MAAM,KACNZ,OAAO,SAAAkB,GAAI,OAAKT,EAAOR,SAASiB,KAChCC,KAAK,MAGV,GAA8B,IAA1BF,EAAU5D,GAAK+C,OACfd,EAAM,EAAD,GAAM2B,EAAN,CAAiBG,KAAM,SACzB,CACH,IAAMpB,EAAS,EAAH,GAAQZ,EAAR,OAAuB/B,OAAM6C,IACzCZ,EAAM,EAAD,GAAMU,EAAN,CAAcoB,KAAM,MAoCgCC,CAAazB,EAAUiB,KAClDG,SAQ9B,kBAAC,IAAD,CAAQM,QAAQ,OAAO/D,QAAS,kBAzCf,SAACmC,GAEtB,IAAM6B,EAAc7B,EAAe8B,OAAO,SAACC,EAAGpE,GAAJ,YAAkBoE,EAAlB,OAAsBpE,EAAI,QAAK6C,KAAc,IAEvFZ,EAAM,EAAD,GAAMiC,EAAN,CAAmBH,KAAM,KAqCYM,CAAiBhC,KACnD,kBAAC,IAAqBlC,IAASmE,qBAK/CxC,EAAYnC,UAAY,CACpBoC,aAAcpC,IAAU4E,OACxBvC,iBAAkBrC,IAAUC,MAC5BqC,MAAOtC,IAAU6E,MAGN1C,O,mHC9ET2C,EAAe,SAAAxF,GAAS,IAClByF,EAA8BzF,EAA9ByF,YAAaxB,EAAiBjE,EAAjBiE,MAAOjB,EAAUhD,EAAVgD,MADF,EAEe/C,mBAASgE,GAFxB,WAEnByB,EAFmB,KAENC,EAFM,OAIF1F,mBAAS,kBAAM2F,IAAS,SAAAlC,QAC7BE,IAAXF,GAAwBV,EAAM,CAAEU,SAAQoB,KAAM,KACnD,OAFIe,EAJmB,YAW1B,OAHAC,oBAAU,kBAAMD,EAAcH,IAAc,CAACA,EAAaG,IAC1DC,oBAAU,kBAAMH,EAAkB1B,IAAQ,CAACA,IAGvC,kBAAC,oBAAD,CACIwB,YAAaA,EACbM,SAAU,SAACC,EAAO/B,GAAR,OAAkB0B,EAAkB1B,IAC9CA,MAAOyB,KAKnBF,EAAa9E,UAAY,CACrB+E,YAAa/E,IAAUuF,OACvBhC,MAAOvD,IAAUuF,OACjBjD,MAAOtC,IAAU6E,MAGNC,O,8JCxBTU,EAAoB,SAAClG,GAAU,MACLC,oBAAS,GADJ,WAC1BC,EAD0B,KAClBiG,EADkB,KAGzBC,EAAmCpG,EAAnCoG,cAAeC,EAAoBrG,EAApBqG,MAAOC,EAAatG,EAAbsG,SACxBC,EAAqBC,MAAMC,KAAKL,GAChCM,EAAqBH,GAAsBA,EAAmBzC,OAC5D6C,EAAeN,EAAfM,KAAMC,EAASP,EAATO,KACRC,EAAgBC,QAAQJ,IAAR,UAAkCA,EAAlC,aAChBK,EAAmBT,EAAWM,EAAK9C,OAAS,EAAI8C,EAAK9C,OACrDkD,EAAY,SAAAC,GAAM,OAAKA,EAAS,EAAK,QAAY,QAgBjDC,EAAoB,YAEtBC,EAD4BnH,EAApBmH,kBACQ,OAAOvD,IAGrBwD,EAAkB,WAAM,IACTT,EAA2C3G,EAApDqG,MAASM,KAAQQ,EAAmCnH,EAAnCmH,gBAAiBE,EAAkBrH,EAAlBqH,cAEpCC,GAAYD,GAAiBA,EAAc,CAAEE,UAAWZ,EAAKa,YAAa1C,KAAM,KAAhFwC,QACNA,GACIA,EAAQG,KAAK,YAAwB,IAC3BpB,EAD2B,EAArBO,KACWvD,IAAI,SAAAuB,GAAI,OAAIA,EAAK8C,KACxCP,GAAgB,EAAMd,MAY5BvG,EAAgB,CAClB,kBAAC,IAAD,CAAciB,IAAI,OAAOE,QAASiG,GAC7BlH,EAAM2H,KAAKC,cAAc1G,IAAS2G,aAEvC,kBAAC,IAAD,CAAc9G,IAAI,OAAOE,QAlCJ,WAAM,IACV2F,EAA4B5G,EAArCqG,MAASO,MAEjBO,EAF6CnH,EAApBmH,kBAET,EADFW,IAAMlB,EAAKlD,OAAO,SAAAkB,GAAI,OAAIA,EAAK8C,KAAIrE,IAAI,SAAAuB,GAAI,OAAIA,EAAK8C,KAAKnB,KAgCnB/F,WAAiC,IAArBmG,EAAKa,aAChExH,EAAM2H,KAAKC,cAAc1G,IAAS6G,YADvC,KACsDhB,EADtD,IACyEC,EAAUD,GADnF,KAGA,kBAAC,IAAD,CAAchG,IAAI,MAAME,QAASmG,EAAiB5G,WAAiC,IAArBmG,EAAKa,aAC9DxH,EAAM2H,KAAKC,cAAc1G,IAAS8G,WADvC,KACqDrB,EAAKa,YAD1D,IACwER,EAAUL,EAAKa,aADvF,MAKJ,OACI,kBAAC,IAAD,CACIpH,SAhDe,WACnB+F,GAAWjG,IAgDPG,OACI,kBAAC,IAAD,CACI4H,iBAAkB,CACd,kBAAC,IAAD,CACIP,GAAI,oBACJ3G,IAAK,oBACLmH,UAAkC,IAAvBxB,IAAmCC,EAAKa,cAAgBd,GAA4B,MAC/FX,SA9BO,WACA,IAAvBW,EACAU,IAEAF,OA4BYL,GAEJvG,SAhEO,SAAAJ,GACnBiG,EAAUjG,IAgEEM,WAAiC,IAArBmG,EAAKa,aAA4C,IAAvBd,IAG9CxG,OAAQA,EACRJ,cAAeA,KAK3BoG,EAAkBxF,UAAY,CAC1ByG,gBAAiBzG,IAAU6E,KAC3B8B,cAAe3G,IAAU6E,KACzBa,cAAe1F,IAAUyH,UAAU,CAC/BzH,IAAUC,MACVD,IAAU4E,SAEde,MAAO3F,IAAU4E,OACjBgB,SAAU5F,IAAUE,KACpB+G,KAAMjH,IAAU0H,KAGpBlC,EAAkBmC,aAAe,CAC7BC,OAAQ,UACRlC,cAAe,GACfC,MAAO,GACPC,UAAU,GAGCiC,gBAAWrC,I,4oBC3G1B,IAAMsC,EAAU,SAAAxI,GAAS,IACb8C,EAA0C9C,EAA1C8C,aAAcC,EAA4B/C,EAA5B+C,iBAAkBC,EAAUhD,EAAVgD,MA8BxC,OACI,kBAAC,IAAMe,SAAP,KACI,6BACI,kBAAC,iBAAD,CACI0E,UAhCE,SAACC,EAAOzE,EAAO0E,GAC7B,IAAIhE,EAEAA,EADS,UAATgE,GAA8B,aAAVD,EACR,OAAGA,EAAQzE,GAEXnB,EAAa4F,GAAb,OAAyBA,EAAzB,UAAoC5F,EAAa4F,GAAjD,YAA2DzE,IAA3D,OAA0EyE,EAAQzE,GAGlGjB,EAAM,EAAD,GAAM2B,EAAN,CAAiBG,KAAM,MAyBhBC,aAtBK,SAAChE,EAAKkD,GACvB,IAAME,EAASF,EAAMK,MAAM,KACrBK,EAAY,OACb5D,EAAM+B,EAAa/B,GACnBuD,MAAM,KACNZ,OAAO,SAAAkB,GAAI,OAAKT,EAAOR,SAASiB,KAChCC,KAAK,MAGV,GAAyB,IAArBF,EAAUb,OACVd,EAAM,EAAD,GAAM2B,EAAN,CAAiBG,KAAM,SACzB,CACH,IAAMpB,EAAS,EAAH,GAAQZ,EAAR,OAAuB/B,OAAM6C,IACzCZ,EAAM,EAAD,GAAMU,EAAN,CAAcoB,KAAM,OAUjB8D,QAAS9F,EACTC,iBAAkBA,OAOtCyF,EAAQ9H,UAAY,CAChBoC,aAAcpC,IAAU4E,OACxBvC,iBAAkBrC,IAAUC,MAC5BqC,MAAOtC,IAAU6E,MAGNiD,O,oNC9CFK,EAAqB,SAAC,GAA6E,IAA3ErH,EAA2E,EAA3EA,KAAMsH,EAAqE,EAArEA,UAAWC,EAA0D,EAA1DA,YAA0D,IAA7CC,0BAA6C,SAAjBrB,EAAiB,EAAjBA,KAAMgB,EAAW,EAAXA,KAAW,EAC1F1I,mBAASuB,GAApByH,EADqG,cAEpFhJ,mBAAS8I,GAA1BG,EAFqG,cAQxGC,YA0CJ,WACI,GAAID,GAA0C,IAAzBA,EAAcpF,QAAgBoF,EAAc,GAAGE,cAChE,OA2BIF,GAA0C,IAAzBA,EAAcpF,QAAgBoF,EAAc,GAAGE,eAAkB,GAxB1F,GAAIH,GAA8B,IAAnBA,EAAQnF,OACnB,OAAOuF,IAhDWC,IAJtBC,EAJwG,EAIxGA,mBACAH,EALwG,EAKxGA,cACAI,EANwG,EAMxGA,iBACUC,EAP8F,EAOxGC,SAPwG,EASlEzJ,mBAmD1C,WAEI,GAAIiJ,GAA0C,IAAzBA,EAAcpF,QAAgBoF,EAAc,GAAGS,UAAW,KACtEC,EADsE,IACzDV,EADyD,MAE3E,OAAOD,EAAQY,KAAK,SAAAC,GAAG,OAAKA,EAAIH,YAAcC,EAAUD,YAG5D,GAAIV,GAA8B,IAAnBA,EAAQnF,OACnB,OAAO,EAGX,OAAO,EA9DwCiG,IATyD,WASrGC,EATqG,KAStFC,EATsF,OAUlCC,YA4B1E,WAEI,GAAIhB,GAAiBA,EAAcpF,OAAS,GAAKoF,EAAc,GAAGS,UAC9D,OAkCIT,GAAiBA,EAAc,GAAGS,UAAUtF,YAAe,IA/BnE,GAAI4E,GAAWA,EAAQnF,OAAS,EAC5B,OAAOqG,IAnC2EC,IAAlFC,EAVoG,EAUpGA,aAAcC,EAVsF,EAUtFA,SAAUC,EAV4E,EAU5EA,YAAuBC,EAVqD,EAU/Dd,SACvC9H,EAAesH,EAAc7F,IAAI,SAAAuB,GAAI,OAAIA,EAAK8C,KAEpD5B,oBAAU,WACFkE,IACAQ,EAAe,CAAEhK,YAAY,IAC7BiJ,EAAsB,CAAE1J,UAAU,MAEvC,CAACiK,EAAeQ,EAAgBf,IAEnC3D,oBAAU,WACNyE,EAAYJ,MAEb,CAACH,EAAeO,IA2DnB,SAASJ,IACL,OAAQxB,GACJ,IAAK,iBACD,OAAQM,GAA8B,IAAnBA,EAAQnF,QAAgBmF,EAAQ,GAAGU,UAAUtF,YAAe,IAGnF,IAAK,eACD,OAAI4E,EACIe,IAAkBhB,EAA6BC,EAAQ,GAAGwB,eAAiB,EACtEzB,EAA4B,IAC3BgB,GAAkBhB,EACf,IAD2CC,EAAQ,GAAGU,UAExD,IAGnB,QACI,MAAO,KAMnB,SAASN,IACL,OAAQJ,GAA8B,IAAnBA,EAAQnF,QAAgBmF,EAAQ,GAAGG,eAAkB,GAW5E,IAAMsB,EAAsB,CACxB1F,QAAS,UACTd,MAAOyD,EAAKC,cAAc1G,IAASyJ,qCAGjCC,EAAajD,EAAKC,cAAc1G,IAAS2J,wBAAyB,CAAEC,MAAOlJ,EAAakC,OAAStC,EAAKsC,SAE5G,OACI,kBAAC,IAAD,CAAWuC,MAAO4C,EAAS8B,OAnGZ,WACf,IAAMC,EAAS/B,EAAQ5F,IAAI,SAAAuB,GAAI,OAAIA,EAAK8C,KAClCuD,EAAmBjB,EAOnB,CAAEF,IAAKkB,EAAQE,aAActJ,GAN7B,CACE+H,UAAWwB,SAASb,GACpBR,IAAKkB,EACLI,YAAahC,EACb8B,aAActJ,GAGtB,OAAOyJ,YAAmBJ,GAAiBxD,KAAKqB,IAyFDwC,sBAAuBZ,EAAqBxG,MAAO0G,GAC9F,kBAAC,IAAD,CAAOW,OAAQ,MACVvC,GACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIhE,QAAQ,UACRwG,UAAQ,EACRtH,MAAOyD,EAAKC,cAAc1G,IAASuK,4BAI/C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM1K,IAAI,OACN,kBAAC,IAAD,CAAW2K,QAAS,WAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIhH,MAAOiD,EAAKC,cAAc1G,IAASyK,sCACnCjE,GAAG,sBACHkE,KAAK,sBACL1D,UAAW8B,EACXjE,SArCpC,SAA8B8F,GAC1B5B,EAAiB4B,GACjBrB,EAAe,CAAEhK,WAAYqL,IAC7BtB,EAAYJ,KACZX,EAAiBH,KACjBI,EAAsB,CAAE1J,SAAU8L,QAmCV,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,QAASnE,EAAKC,cAAc1G,IAAS6K,sCAErC,kBAAC,IAAD,CACIC,UAAU,aACVC,MAAO,CAAEC,cAAe,WAM3C7B,EACAd,OAQzBV,EAAmBnI,UAAY,CAC3Bc,KAAMd,IAAUC,MAChBmI,UAAWpI,IAAU6E,KACrBwD,YAAarI,IAAUC,MACvBqI,mBAAoBtI,IAAUE,KAC9B+G,KAAMjH,IAAU0H,IAChBO,KAAMjI,IAAUuF,QAGLsC,gBAAWM,I,umCCjLpBsD,G,+LAOFC,OAAS,WAAM,MACiB,EAAKpM,MAAzBqM,EADG,EACHA,OACA7K,EAFG,EACK8K,QACR9K,KAOR,MAAQ,CAAC,CACL+K,YAAY,EACZC,MAAO,CACH,CACIxM,MAAO,CAAEyM,QAAS,GAClBvI,MARkC,IAHzB,CAAC,SAAU,YAAa,UAAW,cAAe,YAAa,SAAU,aAAaR,OACvG,SAAAkB,GAAI,OAAIrB,OAAOmJ,UAAUC,eAAeC,KAAKpL,EAAKmF,KAAM/B,IAASpD,EAAKmF,KAAK/B,KAE5Cd,OAC7B+I,IAA0BR,EAASS,IAA8C,IAArBtL,EAAKoF,KAAK9C,OAAgBiJ,SAAenJ,O,EAwB/GoJ,eAAiB,SAAChH,EAAOiH,EAAYC,GAAU,IACnCZ,EAAY,EAAKtM,MAAjBsM,QACA9K,EAAkB8K,EAAlB9K,KAAM2L,EAAYb,EAAZa,QACRC,EAAU5L,EAAKoF,KAAKsG,IAAU1L,EAAKoF,KAAKsG,GAAOxF,GACrDyF,EAAQE,WAAWJ,EAAYG,I,kEAZlBpH,EAAOsH,EAAQpN,GAAQ,IAC5BoM,EAAYiB,KAAKvN,MAAjBsM,QACA9K,EAA0B8K,EAA1B9K,KAAM2L,EAAoBb,EAApBa,QACNK,EAD0BlB,EAAXmB,OACfD,qBACFJ,EAAU5L,EAAKoF,KAAK0G,IAAW9L,EAAKoF,KAAK0G,GAAQ5F,GACvDyF,EAAQO,SAASxN,EAAQkN,EAASI,K,+BAU7B,aACuBD,KAAKvN,MAAzBsM,EADH,EACGA,QAASqB,EADZ,EACYA,OACTF,EAA0BnB,EAA1BmB,OAAQjM,EAAkB8K,EAAlB9K,KAAM2L,EAAYb,EAAZa,QACdS,EAA6BH,EAA7BG,aAAcC,EAAeJ,EAAfI,WAChBC,EAAOtM,EAAKoF,KACjBvD,IAAI,SAAAyG,GAAG,OAAK8D,EAAaG,IAAIjE,EAAIpC,KAArB,MAAiCoC,EAAjC,CAAsCkE,UAAU,KAAWlE,IACvEzG,IAAI,SAAAyG,GAAG,OAAK+D,EAAWE,IAAIjE,EAAIpC,KAAnB,MAA+BoC,EAA/B,CAAoC5J,QAAQ,KAAW4J,IAEpE,OACI,kBAAC,WAAD,KACMtI,EAAKyM,UAkCH,kBAAC,gBAAD,CAAeC,QAAS,EAAGC,QAAS,KAjCpC,kBAAC,WAAD,KACI,kBAACC,GAAA,EAAD,CACIC,aAAY,0BACZ7B,MAAOmB,EACPG,KAA8B,IAArBtM,EAAKoF,KAAK9C,OAAiByJ,KAAKnB,SAAW0B,EACpD1N,SAAkC,IAArBoB,EAAKoF,KAAK9C,OAAgByJ,KAAKP,oBAAiBpJ,EAC7D0K,QAAiC,IAArB9M,EAAKoF,KAAK9C,OAAgByK,aAAyBpB,QAAWvJ,EAC1E4K,OAAgC,IAArBhN,EAAKoF,KAAK9C,OACjB2K,YAAa,CAAC,CAAE1N,IAAK,YAAc,CAAEA,IAAK,aAA9B,WAA+C4M,IAASnM,EAAKmF,KAAK+H,WAAQ9K,EAC1F+K,WAAmC,IAArBnN,EAAKoF,KAAK9C,OACpB,SAACkC,EAAOsH,EAAQpN,GAAhB,OAA2B,EAAK0O,iBAAiB5I,EAAOsH,EAAQpN,SAAU0D,EAC9EiL,OAA+B,IAArBrN,EAAKoF,KAAK9C,OAChB,SAACkC,EAAOjF,EAAK+N,GAAb,OACIC,YACIhO,EACA+N,EAFY,CAGX,CAAE/N,IAAK,YAAc,CAAEA,IAAK,aAHjB,WAGkC4M,IAC9CnM,EAAKmF,KAAK+H,KACVvB,EAAQnK,aACRY,EAEZoL,eAAgB,WAEhB,kBAAC,WAAD,KACI,kBAAC,KAAD,MACA,kBAAC,KAAD,QAGR,kBAAC,eAAD,KACI,kBAACC,GAAA,EAAD,CAAmBjK,QAAQ,SAAS2B,KAAMnF,EAAKmF,KAAM3D,MAAOmK,EAAQnK,e,GArFvDkM,aAAnC/C,GACKzL,UAAY,CACf4L,QAAS5L,IAAU0H,IACnBuF,OAAQjN,IAAUC,MAClB0L,OAAQ3L,IAAU4E,QA4F1B,IAGe6J,GAHS,SAAAnP,GAAK,OACzB,kBAACoP,GAAgBC,SAAjB,KAA2B,SAAA/C,GAAO,OAAI,kBAAC,GAAD,KAA4BA,QAASA,GAAatM,O,qqBC5EtFsP,G,+LAeFC,qBAAuB,WAAM,IACjBjD,EAAY,EAAKtM,MAAjBsM,QACA9K,EAA0B8K,EAA1B9K,KAAM2L,EAAoBb,EAApBa,QACNK,EAD0BlB,EAAXmB,OACfD,qBACFtN,GAAUsN,EACVK,EAAcL,EAA4E,GAArDhM,EAAKoF,KAAKlD,OAAO,SAAAoG,GAAG,OAAIA,EAAIpC,KAAIrE,IAAI,SAAAyG,GAAG,OAAIA,EAAIpC,KAC1FyF,EAAQO,SAASxN,EAAQ2N,GAAaL,I,0DAGjC,MAC8CD,KAAKvN,MAAhDwP,EADH,EACGA,sBAAuBnD,EAD1B,EAC0BA,OAAQC,EADlC,EACkCA,QAC/B9K,EAA0B8K,EAA1B9K,KAAMiM,EAAoBnB,EAApBmB,OAAQN,EAAYb,EAAZa,QACdS,EAA+CH,EAA/CG,aAAcJ,EAAiCC,EAAjCD,qBAAsB9J,EAAW+J,EAAX/J,OACtC+L,GACmC,IAArClC,KAAKvN,MAAMwP,sBAAkC5B,GAAgBA,EAAa8B,MAAS,OAAI9L,EACrFb,EAAmB,CACrB4M,IACAC,IACAC,IACAC,IACAC,IACAC,KAGEC,EAAe,CACjBvO,aACIyL,EAAQxL,gBACR,IAAIiM,GAAcvK,IAAI,SAAAuB,GAAI,WACtB8C,GAAI9C,GACDpD,EAAKoF,KAAKlD,OAAO,SAAAoG,GAAG,OAAIlF,IAASkF,EAAIpC,KACvCrE,IAAI,SAAAuB,GAAI,MAAK,CAAE+E,UAAW/E,EAAK+E,UAAWc,cAAe7F,EAAK6F,iBAAkB,MAErF,GACA,CAAEjK,YAAaiP,IAEnB3N,aACIyL,KAAKgC,qBACL/B,EACA,CAAEhN,WAAiC,IAArBgB,EAAKoF,KAAK9C,SAE5BjD,aAAsBsM,EAAQrM,eAAgB,CAAEN,WAAiC,IAArBgB,EAAKoF,KAAK9C,SACtE1C,aAAqB+L,EAAQrM,eAAgB,CAAEN,WAAiC,IAArBgB,EAAKoF,KAAK9C,UAEzE,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,eAAD,CAAciI,UAAU,+BACpB,kBAACkE,GAAA,EAAD,CAAclE,UAAU,iCACnBwD,GACG,kBAACtJ,GAAA,EAAD,CACIE,cAAewH,EACfzG,gBAAiBgG,EAAQE,WACzBhH,MAAO7E,EACP6F,cAAe,SAAA8I,GAAG,OAAIhD,EAAQ9F,cAAR,MAA2BoG,EAA3B,GAAsC0C,KAC5D7J,UAAQ,IAGhB,kBAACd,GAAA,EAAD,CACIC,YAAa8H,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASkP,mBACpDnM,MAAOP,EACPV,MAAOmK,EAAQnK,QAGnB,kBAACwF,GAAA,EAAD,CACI1F,aAAc2K,EACd1K,iBAAkBA,EAClBC,MAAOmK,EAAQnK,QAElBwM,GAAyB,kBAACa,GAAA,EAAD,CAAaC,SAAUjE,EAAO3E,GAAIkG,aAAcA,IAC1E,kBAAC/N,GAAA,EAAD,CACIC,cAAemQ,EACflQ,SAA+B,IAArByB,EAAKoF,KAAK9C,QAAsC,IAAtB2L,KAI5C,kBAACS,GAAA,EAAD,KACI,kBAACjB,GAAA,EAAD,CAAmBjM,MAAOmK,EAAQnK,MAAO2D,KAAMnF,EAAKmF,SAG5D,kBAAC,eAAD,CAAcqF,UAAU,aACpB,kBAACkE,GAAA,EAAD,KACI,kBAACK,GAAA,EAAD,KACI,kBAAC1N,GAAA,EAAD,CACIC,aAAc2K,EACd1K,iBAAgB,CAAGyN,KAAH,OAA2BzN,GAC3CC,MAAOmK,EAAQnK,gB,GAnGLkM,aAApCI,GACK5O,UAAY,CACf8O,sBAAuB9O,IAAUE,KACjCyL,OAAQ3L,IAAU4E,OAClBgH,QAAS5L,IAAU4E,OACnBqC,KAAMjH,IAAU0H,KALlBkH,GAQKjH,aAAe,CAClBmH,uBAAuB,EACvBiB,YAAa,EACbzN,MAAO,aACPlC,eAAgB,cAiGxB,IAGeyH,gBAHU,SAAAvI,GAAK,OAC1B,kBAACoP,GAAgBC,SAAjB,KAA2B,SAAA/C,GAAO,OAAI,kBAAC,GAAD,KAA6BA,QAASA,GAAatM,Q,yjBCzHtF,IAAMoP,GAAkBsB,IAAMC,cAAc,IAE7CC,G,YAUF,WAAY5Q,GAAO,0BACf,4BAAMA,KAeV6Q,aAAe,SAAAC,GAAS,IACZC,EAAWD,EAAXC,OAER,OAAmB,MADA5F,SAAS4F,IACF,EAAK/Q,MAAMqM,OAC1B2E,IAEAC,KAtBI,EA0BnBC,WAAa,WAAM,MACQ,EAAKlR,MAAMiJ,QAA1BtC,EADO,EACPA,KAAMC,EADC,EACDA,KACN9B,EAAgB6B,EAAhB7B,KACFqM,EAAarM,IADK6B,EAAVyK,OACuBxK,EAAK9C,OAAS,GAAM,EAAI,EAAIgB,EAEjE,EAAKuM,SAAL,MAEW,EAAKC,MAFhB,CAGQxM,KAAMqM,EACN5J,UAAWZ,EAAKY,YAEpB,EAAKvE,QArCM,EAyCnBA,MAAQ,WAAiB,IAAhBuO,EAAgB,uDAAP,GAEd,GAAIhO,OAAOmJ,UAAUC,eAAeC,KAAK2E,EAAQ,eAAgB,CAC7D,IAAIC,EAAYC,IAAYhO,KAAK,SAAAmB,GAAI,OAAIA,EAAKX,QAAUsN,EAAOG,cAE/D,QAAyB,IAAdF,QAA2D,IAAvBD,EAAOG,YAA6B,CAC/E,IAAIvN,EAASoN,EAAOG,YAAYpN,MAAM,WAAWZ,OAAO,SAAAkB,GAAI,OAAI+M,WAAW/M,KAC3E4M,EAAY,CAAE/K,KAAMtC,EAAO,GAAIyN,GAAIzN,EAAO,cACd,IAAdqN,QAA2D,IAAvBD,EAAOG,cACzDF,EAAY,CAAE/K,UAAM7C,EAAWgO,QAAIhO,IAGvC2N,EAAOM,UAAYL,EAAU/K,KAC7B8K,EAAOO,QAAUN,EAAUI,GAG/B,GAAIrO,OAAOmJ,UAAUC,eAAeC,KAAK2E,EAAQ,gBAAiB,CAC9D,IAAIQ,EAAcC,IAAkBvO,KAAK,SAAAmB,GAAI,OAAIA,EAAKX,QAAUsN,EAAOU,oBAE5C,IAAhBF,GACPR,EAAOW,YAAcH,EAAYtL,MAAQsL,EAAYtL,KAAK0L,OAAO,cACjEZ,EAAOa,UAAYL,EAAYH,IAAMG,EAAYH,GAAGO,OAAO,gBAE3DZ,EAAOW,iBAActO,EACrB2N,EAAOa,eAAYxO,EACnB2N,EAAOU,kBAAerO,GAI9B,EAAKyN,SAAL,MAAmB,EAAKC,MAAxB,GAAkCC,GAAU,EAAKc,cAtElC,EAyEnBhF,WAAa,SAACJ,EAAYqF,GAAa,IAC7B1E,EAAiB,EAAK0D,MAAtB1D,aAEFA,EADA0E,EACeC,YAAe3E,EAAc0E,EAAUrF,GAEvC,IAAIuF,IAGvB,EAAKnB,SAAL,MAAmB,EAAKC,MAAxB,CAA+B1D,aAAc,IAAI4E,IAAI5E,OAjFtC,EAqFnBF,SAAW,SAACxN,EAAQoS,EAAUtQ,GAAe,MACE,EAAKsP,MAA1CzD,EADmC,EACnCA,WAaN,GAdyC,EACvBL,uBAGW8E,EAASxO,SAClC+J,EAAayE,GAIbzE,EADAyE,EACaC,YAAe1E,EAAYyE,EAAUpS,GAErC,IAAIsS,KAGhBhM,MAAMiM,QAAQH,GAAW,CAC1B,IAAMI,EAAc,EAAK1S,MAAMiJ,QAAQrC,KACjC+L,EAAoBD,EAAYhP,OAAO,SAAAoG,GAAG,OAAI+D,EAAWE,IAAIjE,EAAIpC,MAEvE1F,EAAc0Q,EAAY5O,OAAS,IAAM6O,EAAkB7O,OAG/D,EAAKuN,SAAL,MAAmB,EAAKC,MAAxB,CAA+BzD,WAAY,IAAI2E,IAAI3E,GAAaL,qBAAsBxL,MA1GvE,EA6GnB4Q,gBAAkB,SAAAC,GACd,IAAMpF,EAAS,MAAKoF,GACdC,EAAgB,CAClB,cACA,eACA,SACA,QACA,SACA,OACA,YACA,OACA,SACA,mBACA,YACA,iBAEJvP,OAAOwP,KAAKF,GAAWG,QACnB,SAAAjS,GAAG,YACkB6C,IAAhB6J,EAAO1M,IAAsC,KAAhB0M,EAAO1M,KAAgB+R,EAAcnP,SAAS5C,KAAwB,IAAhB0M,EAAO1M,YACpF0M,EAAO1M,KAEtB,IAAMkS,EAAcC,IAAGC,UAAU1F,GACjC,EAAKzN,MAAMoT,QAAQC,KAAK,IAAMJ,IAnIf,EAsInBZ,YAAc,WAAM,MACc,EAAKrS,MAA3BsT,EADQ,EACRA,UAAWjH,EADH,EACGA,OACXmB,EAAyB,EAAK8D,MAA9B9D,qBACR8F,GAAaA,EAAU,MAAK,EAAKhC,MAAX,CAAkBiC,OAAQlH,EAAO3E,MACtDD,KAAK,YAAc,IAAXb,EAAW,EAAXA,KACL,GAAI4G,EAAsB,CACtB,IAAMxC,EAASpE,GAAQA,EAAKvD,IAAI,SAAAyG,GAAG,OAAIA,EAAIpC,KAC3C,EAAKgG,UAAS,EAAM1C,EAAQwC,MAGpC,EAAKoF,gBAAgB,EAAKtB,QAhJX,EAmJnBxQ,eAAiB,SAAAqR,GACb,IAAM1E,EAAS,MAAK,EAAK6D,OACjBjF,EAAW,EAAKrM,MAAhBqM,OACFmH,GAAO,IAAIC,MAAOC,cAAcC,QAAQ,QAAS,KAAKrP,MAAM,KAAK,GAAK,OACtEgD,EAAYsM,YAAqB,MAChCnG,EAD+B,CAElClG,UAAWsM,OAAOC,iBAClBC,YAAa5B,EACbrN,KAAM,EACNyO,OAAQlH,EAAO3E,MALbJ,QAQNA,GACIA,EAAQG,KAAK,YAAwB,IAAfuM,EAAe,EAArBpN,KACNA,EAAkB,SAAXuL,EAAoB8B,KAAKd,UAAUa,GAAYA,EAC5D,OAAOE,uBAAatN,EAAD,8BAA8B4M,GAAQrB,MAlKlD,EAsKnBxQ,gBAAkB,SAAAH,GAEd,IAAIwH,EACJ,GAAIxH,EAAKsC,OAAS,EAAG,CACjB,IAAM8J,EAAepH,MAAMC,KAAK,EAAKzG,MAAMiJ,QAAQrC,KAAKlD,OAAO,SAAAoG,GAAG,OAAItI,EAAKqI,KAAK,SAAAsK,GAAO,OAAIA,EAAQzM,KAAOoC,EAAIpC,QAE9GsB,EAAqB4E,EAAa/D,KAAK,SAAAsK,GACnC,QAAOvG,EAAalK,OAAO,SAAAoG,GAAG,OAAIA,EAAIH,YAAcwK,EAAQxK,YAAW7F,OAAS,KAIxF,EAAKuN,SAAS,CACV+C,YAAa,kBACT,kBAACvL,EAAA,EAAD,CACIrH,KAAMA,EACNsH,UAAW,EAAKoI,WAChBnI,YAAa,CAAC,CAAErB,GAAI,EAAK1H,MAAMqM,QAAU,EAAKrM,MAAMqM,OAAO3E,KAC3DsB,mBAAoBA,EACpBL,KAAM,qBAtLlB,EAAK2I,MAAQ,CACT1D,aAAc,IAAI4E,IAClB3E,WAAY,IAAI2E,IAChB4B,YAAa,kBAAM,MACnB5G,sBAAsB,GANX,E,iEAWf,IACM6G,EAAcnB,IAAGoB,MAAM/G,KAAKvN,MAAMuU,SAASC,QACjDjH,KAAKvK,MAAL,MAFsB,CAAE0L,KAAM,gBAE9B,GAAkC2F,M,+BAiL7B,MACuB9G,KAAKvN,MAAzBiJ,EADH,EACGA,QAASoD,EADZ,EACYA,OACTrJ,EAAiEuK,KAAjEvK,MAAOlC,EAA0DyM,KAA1DzM,eAAgBuM,EAA0CE,KAA1CF,WAAYK,EAA8BH,KAA9BG,SAAU/L,EAAoB4L,KAApB5L,gBAC7CyS,EAAgB7G,KAAK+D,MAArB8C,YACF5S,EAAOyH,EACLwL,EAAWjT,EAAXiT,OACF9G,EAAS,CACX,CACIzJ,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASwT,OAC9C3T,IAAK,WACL4T,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,YAC9BE,eAAgB,CAACC,MAErB,CACI9Q,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAAS+T,aAC9ClU,IAAK,cACL4T,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACI3Q,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASoH,QAC9CvH,IAAK,SACL4T,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,aAElC,CACI3Q,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASgU,eAC9CnU,IAAK,aACL4T,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACI3Q,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASiU,cAC9CpU,IAAK,gBACL4T,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACI3Q,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAAS6P,QAC9ChQ,IAAK,SACL4T,WAAY,CAACC,IAAUC,YAAW,mBAI1C,OAAKJ,EAoCMlH,KAAKsD,aAAa4D,GAlCrB,kBAACrF,GAAgBgG,SAAjB,CACInR,MAAO,CACHzC,OACAiM,OAAQF,KAAK+D,MACbnE,QAAS,CACLnK,QACAlC,iBACAuM,aACAK,WACA/L,kBACA0F,cAAe,SAAAoG,GAAM,OAAImG,YAAqB,MAAKnG,EAAN,CAAc8F,OAAQlH,EAAO3E,UAIlF,kBAAC0M,EAAD,MAEA,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMxU,UAAWyU,IAAaC,IACzBnI,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAASyU,0BAIpD,kBAACL,EAAA,EAAD,KACI,kBAACM,GAAD,CAAuBpG,uBAAqB,EAACnD,OAAQA,KAEzD,kBAACiJ,EAAA,EAAD,KACI,kBAACO,GAAD,CAAgBlI,OAAQA,EAAQtB,OAAQA,W,GAhR3C6C,aAAnB0B,GACKlQ,UAAY,CACf2L,OAAQ3L,IAAU4E,OAClB2D,QAASvI,IAAU0H,IACnBkL,UAAW5S,IAAU6E,KACrB6N,QAAS1S,IAAU4E,OACnBiP,SAAU7T,IAAU4E,OACpBqC,KAAMjH,IAAU0H,KA2RxB,IAUa0N,GAAsBC,YAC/BxN,aACIyN,kBAnBR,YAAyE,IAA9CC,EAA8C,EAA9CA,gBAAkC5J,EAAY,EAA7B6J,cAAiB7J,OACzD,MAAO,CACHpD,QAASgN,GAAmBE,YAAsB9J,EAAO3E,GAAIuO,EAAgBhN,SAC7EoD,WAImB,SAAA+J,GACvB,MAAO,CACH9C,UAAW,SAAA7F,GACP,IAAM4I,EAAazC,YAAqBnG,GAExC,OADA2I,EAASC,GACFA,EAAW/O,WAOtB0O,CAGEpF,MAIJ0F,GAAsB,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,mBAAuBvW,EAAY,gCAI1DuW,EAAqB,CACrBC,QAASC,KACTC,SAAU,CACNC,OAAQC,UAAUC,SAASC,MAAM,EAAG,GACpC5V,gBAEJ,CACA6V,QAAShT,WACTiT,UAAW,IAVXR,EAF0D,EAE1DA,QACAQ,EAH0D,EAG1DA,UAWJ,OAAO,kBAACR,EAAYQ,EAChB,kBAAClB,GAAyB9V,KAIlCsW,GAAoB5V,UAAY,CAC5B6V,mBAAoB7V,IAAUE,MAGlC0V,GAAoBjO,aAAe,CAC/BkO,oBAAoB,GAGTD,I,SC3VTW,G,YAQF,WAAYjX,GAAO,6CACTA,I,sDAGD,MAC6CuN,KAAKvN,MAA/CqM,EADH,EACGA,OAAQhK,EADX,EACWA,SAAU6U,EADrB,EACqBA,oBAS1B,OARA3J,KAAKvN,MAAMmX,UAAU,CACjBC,YAAa,CACT,CAAElT,MAAOmT,IAAMC,gBAAgBpT,MAAO0N,GAAIyF,IAAMC,gBAAgB1F,IAChE,CAAE1N,MAAOmT,IAAME,QAAQrT,MAAO0N,GAAIyF,IAAME,QAAQ3F,IAChD,CAAE1N,MAAQmI,GAAUA,EAAOmL,cAAiB,kBAAC,KAAqBtW,KAASuW,eAAmBC,UAAU,MAI3GrL,EAIAhK,EAQG,kBAAC,IAAM0B,SAAP,KACI,kBAAC,IAAD,CAA2B4T,aAAc,kBAAMT,GAAoB,OAPvE,kBAAC,IAAMnT,SAAP,KACI,kBAAC+R,GAAD,CAAqBzJ,OAAQA,EAAO3E,MANrC,S,GAvBQgJ,IAAMxB,WAA3B+H,GACKvW,UAAY,CACfyW,UAAWzW,IAAU6E,KACrB8G,OAAQ3L,IAAU4E,OAClBjD,SAAU3B,IAAUE,KACpBsW,oBAAqBxW,IAAU6E,MAkDxBwQ,mBACXC,kBARJ,YAA2E,QAAhDE,cACvB,MAAO,CACH7J,OAFmE,EAA/BA,OAGpChK,SAHmE,EAAvBuV,UANzB,SAAAxB,GACvB,MAAO,CACHe,UAAW,SAAAxJ,GAAM,OAAIyI,EAASe,YAAUxJ,OAY5CqI,CAGEiB,K,0jBClEN,IAAIY,GAAe,CACfC,QAAQ,GAICC,GAAoB,SAACC,EAAwBd,GAAzB,OAAiD,WAAkC,IAAjC5F,EAAiC,uDAAzBuG,GAAcI,EAAW,uCAChH,OAAQA,EAAOtP,MACX,KAAKuP,KAAuB,aACxB,aACO5G,EADP,GAEO2G,EAAO3Q,QAAQV,MAE1B,KAAKoR,EAAuBG,sBACxB,aACO7G,EADP,CAEIwG,QAAQ,EACRM,WAAY,CACR,CACIlU,MAAO,kBACP0H,KAAM,kBACN5K,UAAW,kBAAM,kBAAC,GAAD,CAAckW,oBAAqBA,SAIpE,KAAKc,EAAuBK,qBACxB,aACO/G,EADP,CAEIwG,QAAQ,EACRM,WAAY,CACR,CACIlU,MAAO,kBACP0H,KAAM,kBACN5K,UAAW,kBAAM,kBAAC,GAAD,WAIjC,QACI,OAAOsQ,K,ukBCvBbgH,G,YAUF,WAAYtY,GAAO,0BACf,4BAAMA,KAmCVuY,UAAY,SAACxX,EAAKkD,GACd,IAAIuU,EAAU,EAAKlH,MAAMmH,WACzBD,EAAQzX,GAAKiN,SAAW/J,EACxB,EAAKoN,SAAS,CAAEoH,WAAYD,KAvCb,EA0CnBE,gBAAkB,SAAAzU,GACd,EAAKoN,SAAL,MAAmB,EAAKC,MAAxB,CAA+BqH,YAAa1U,MA3C7B,EA8CnB2U,aAAe,SAAA3U,GACX,EAAKjE,MAAM4Y,aAAa,EAAKtH,MAAMuH,YAAa5U,GAAOwD,KAAK,WACxD,EAAKzH,MAAM8Y,mBAAmB,EAAKxH,MAAMuH,cAC/B,IAAV5U,EACM,EAAKjE,MAAM+Y,gBAAgB,CACzB/T,QAAS,UACTd,MAAO,EAAKlE,MAAM2H,KAAKC,cAAc1G,KAAS8X,0BAEhD,EAAKhZ,MAAM+Y,gBAAgB,CACzB/T,QAAS,UACTd,MAAO,EAAKlE,MAAM2H,KAAKC,cAAc1G,KAAS+X,8BAC9CC,YAAa,EAAKlZ,MAAM2H,KAAKC,cAAc1G,KAASiY,yCAtDhE,EAAK7H,MAAQ,CACTuH,YAAa,EAAK7Y,MAAMoZ,MAAM3L,OAAOoL,YACrCQ,eAAgB,aAChBV,aAAa,GANF,E,uEAWfpL,KAAKvN,MAAM8Y,mBAAmBvL,KAAK+D,MAAMuH,aACzCtL,KAAK+L,mB,uJAI4FC,SAASC,cAAc,CACpHC,MAAO/I,IACPgJ,iBACAC,YACAC,aACAC,iB,gBALIC,E,EAAAA,mBAAoBC,E,EAAAA,kBAAmBC,E,EAAAA,gBAAiBhC,E,EAAAA,uBAQhEiC,KAAgBC,SAAhB,MACOH,IADP,GAEOC,EAAgBjC,GAAkBC,EAAwBzK,KAAKqL,iBAGtErL,KAAK8D,SAAS,CACV8I,gBAAiBL,EAAmBG,KAAgBG,YAAYC,oBAChEC,cAAeR,EAAmBG,KAAgBG,YAAYG,UAElEhN,KAAK+D,MAAM+H,iB,2HA6BN,aACsC9L,KAAK+D,MAAxC6I,EADH,EACGA,gBAAiBG,EADpB,EACoBA,cADpB,EAE0B/M,KAAKvN,MAA5Bwa,qBAFH,MAEmB,GAFnB,IAGyCA,EAAtC5C,QAASvV,OAHZ,SAG8BgK,EAAWmO,EAAXnO,OAEnC,OACI,kBAACoO,EAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAqBxW,MAAM,GAAGyW,UAAU,GACnCR,GACG,kBAACA,EAAD,CACIS,UAAQ,EACRtM,QACIjC,GAAU,CACNhK,EACM,CACE6B,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAAS2Z,6BAC9C5Z,QAAS,kBAAM,EAAK2X,cAAa,KAEnC,CACE1U,MAAOqJ,KAAKvN,MAAM2H,KAAKC,cAAc1G,KAAS4Z,8BAC9C7Z,QAAS,kBAAM,EAAK2X,cAAa,SAQ5D0B,GACG,kBAAC,OAAD,KACI,kBAAC,IAAMvW,SAAP,KACI,kBAACuW,EAAD,CAAepD,oBAAqB3J,KAAKqL,sB,GAvGvClI,IAAMxB,WAA9BoJ,GACK5X,UAAY,CACfoY,mBAAoBpY,IAAU6E,KAC9BiV,cAAe9Z,IAAU4E,OACzBsT,aAAclY,IAAU6E,KACxB6T,MAAO1Y,IAAU4E,OACjByT,gBAAiBrY,IAAU6E,KAC3BoC,KAAMjH,IAAU0H,KAuHT2N,sBACXxN,aACIyN,kBAhBR,SAAyB1E,GACrB,MAAO,CACHkJ,cAAelJ,EAAM4E,gBAIF,SAAAE,GACvB,MAAO,CACHwC,aAAc,SAACrF,EAAQxC,GAAT,OAAoBqF,EAAS2E,YAAmBxH,EAAQxC,KACtE+H,mBAAoB,SAAAvF,GAAM,OAAI6C,EAAS0C,YAAmBvF,KAC1DwF,gBAAiB,SAAAiC,GAAY,OAAI5E,EAAS2C,0BAAgBiC,OAM1DhF,CAGEsC","file":"js/InventoryDetail.js","sourcesContent":["/* eslint-disable camelcase */\nimport { Dropdown, KebabToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst BaseKebab = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    function handleOnKebabToggle(kebabState) {\n        setOpen(kebabState);\n    }\n\n    function handleOnKebabSelect() {\n        setOpen(!isOpen);\n    }\n\n    return (\n        <div>\n            <Dropdown\n                onSelect={handleOnKebabSelect}\n                toggle={<KebabToggle onToggle={handleOnKebabToggle} isDisabled={disabled} />}\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={dropdownItems}\n                {...props}\n            />\n        </div>\n    );\n};\n\nBaseKebab.propTypes = {\n    dropdownItems: propTypes.array,\n    disabled: propTypes.bool\n};\n\nexport default BaseKebab;\n","/* eslint-disable camelcase */\nimport { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n\nexport const kebabItemToggleCvesDescription = (toggleCveDescription, isExpanded, { ...props }) => (\n    <DropdownItem key=\"toggleCveDescription\" component=\"button\" onClick={() => toggleCveDescription()} {...props}>\n        {isExpanded ? <FormattedMessage {...messages.kebabCollapseCves} /> : <FormattedMessage {...messages.kebabExpandCves} /> }\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystemAnalysis = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeVulnerabilityAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystem = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemToggleExcludeSystemDisplay = (handleOptOut, isOptedOut,  { ...props }) => (\n    <DropdownItem key=\"toggle_opt_out\" component=\"button\" onClick={() => handleOptOut()} {...props}>\n        {isOptedOut ?\n            <FormattedMessage {...messages.kebabHideExcludedSystems} />  :\n            <FormattedMessage {...messages.kebabShowExcludedSystems} />}\n    </DropdownItem>\n);\n","import React from 'react';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nconst FilterChips = (props) => {\n    const { filterValues, filterCategories, apply } = props;\n    const localFilters = { ...filterValues };\n    const localFilterCategories = [...filterCategories];\n\n    delete localFilters.show_all;\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter[key].length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    const removeAllFilters = (allowedFilters) => {\n\n        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});\n\n        apply({ ...resetParams, page: 1 });\n    };\n\n    const filterIsNotEmpty = (filter) => {\n        return filter && (!filter.includes(undefined) && !filter.includes(''));\n    };\n\n    const getFilters = () => {\n        const filters = localFilterCategories.map(\n            ({ urlParam }) => Object.entries(localFilters).find(([key]) => key === urlParam)\n        );\n\n        return filters.filter(filter => filterIsNotEmpty(filter));\n    };\n\n    const allowedFilters = getFilters();\n\n    return allowedFilters.length > 0 &&\n        <React.Fragment>\n            <ChipGroup withToolbar>\n                {allowedFilters.map(([key, value]) => {\n                    const { title, urlParam, values } = localFilterCategories.find(({ urlParam }) => urlParam === key);\n                    return (\n                        <ChipGroupToolbarItem key={key} categoryName={title}>\n                            { value && value.toString().split(',').map(chip => {\n                                const mapChip = values.find(({ value }) => value.indexOf(chip) !== -1);\n                                let { value, label } = mapChip ? { ...mapChip } : { value: key, label: chip };\n                                return (\n                                    <Chip key={value} onClick={() => removeFilter(urlParam, chip)}>\n                                        { label }\n                                    </Chip>\n                                );\n                            }) }\n                        </ChipGroupToolbarItem>\n                    );\n                }) }\n            </ChipGroup>\n            <Button variant=\"link\" onClick={() => removeAllFilters(allowedFilters)}>\n                <FormattedMessage {...messages.filterChipsClear} />\n            </Button>\n        </React.Fragment>;\n};\n\nFilterChips.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default FilterChips;\n","import { ConditionalFilter } from '@redhat-cloud-services/frontend-components';\nimport debounce from 'lodash/debounce';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect }  from 'react';\n\nconst SearchFilter = props => {\n    const { placeholder, value, apply } = props;\n    const [filterValue, updateFilterValue] = useState(value);\n\n    const [applyFunction] = useState(() => debounce(filter => {\n        if (filter !== undefined) { apply({ filter, page: 1 }); }\n    }, 400));\n\n    useEffect(() => applyFunction(filterValue), [filterValue, applyFunction]);\n    useEffect(() => updateFilterValue(value), [value]);\n\n    return (\n        <ConditionalFilter\n            placeholder={placeholder}\n            onChange={(event, value) => updateFilterValue(value)}\n            value={filterValue}\n        />\n    );\n};\n\nSearchFilter.propTypes = {\n    placeholder: propTypes.string,\n    value: propTypes.string,\n    apply: propTypes.func\n};\n\nexport default SearchFilter;\n","import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport union from 'lodash/union';\nimport messages from '../../Messages';\nimport { injectIntl } from 'react-intl';\n\nconst SelectAllCheckbox = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const { selectedItems, items, multiRow } = props;\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const checkboxlabel = Boolean(selectedItemsCount) && `${selectedItemsCount} selected`;\n    const selectPageNumber = multiRow ? data.length / 2 : data.length;\n    const itemLabel = number => (number > 1 && 'items') || 'item';\n\n    const handleOnToggle = isOpen => {\n        setIsOpen(isOpen);\n    };\n\n    const handleOnSelect = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const handleSelectPage = () => {\n        const { items: { data }, selectorHandler } = props;\n        const items = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, items);\n    };\n\n    const handleUnselectAll = () => {\n        const { selectorHandler } = props;\n        selectorHandler(false, undefined);\n    };\n\n    const handleSelectAll = () => {\n        const { items: { meta }, selectorHandler, fetchResource } = props;\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    const dropdownItems = [\n        <DropdownItem key=\"none\" onClick={handleUnselectAll}>\n            {props.intl.formatMessage(messages.selectNone)}\n        </DropdownItem>,\n        <DropdownItem key=\"page\" onClick={handleSelectPage} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectPage)} ({selectPageNumber} {itemLabel(selectPageNumber)})\n        </DropdownItem>,\n        <DropdownItem key=\"all\" onClick={handleSelectAll} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectAll)} ({meta.total_items} {itemLabel(meta.total_items)})\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            onSelect={handleOnSelect}\n            toggle={\n                <DropdownToggle\n                    splitButtonItems={[\n                        <Checkbox\n                            id={'selectAllcheckbox'}\n                            key={'selectAllcheckbox'}\n                            isChecked={selectedItemsCount === 0 ? false : meta.total_items === selectedItemsCount ? true : null}\n                            onChange={handleOnCheckboxChange}\n                        />,\n                        checkboxlabel\n                    ]}\n                    onToggle={handleOnToggle}\n                    isDisabled={meta.total_items === 0 && selectedItemsCount === 0}\n                />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n        />\n    );\n};\n\nSelectAllCheckbox.propTypes = {\n    selectorHandler: propTypes.func,\n    fetchResource: propTypes.func,\n    selectedItems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    items: propTypes.object,\n    multiRow: propTypes.bool,\n    intl: propTypes.any\n};\n\nSelectAllCheckbox.defaultProps = {\n    impact: 'Unknown',\n    selectedItems: [],\n    items: {},\n    multiRow: false\n};\n\nexport default injectIntl(SelectAllCheckbox);\n","import { FilterDropdown } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst Filters = props => {\n    const { filterValues, filterCategories, apply } = props;\n\n    const addFilter = (param, value, type) => {\n        let newFilter;\n        if (type === 'radio' || param === 'show_all') {\n            newFilter = { [param]: value };\n        } else {\n            newFilter = filterValues[param] ? { [param]: `${filterValues[param]},${value}` } : { [param]: value };\n        }\n\n        apply({ ...newFilter, page: 1 });\n    };\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter.length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <FilterDropdown\n                    addFilter={addFilter}\n                    removeFilter={removeFilter}\n                    filters={filterValues}\n                    filterCategories={filterCategories}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nFilters.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default Filters;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={handleCheckboxChange}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(\n                this.handleCveDescription,\n                expandCveDescription,\n                { isDisabled: cves.data.length === 0 }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),\n            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab\n                            dropdownItems={kebabOptions}\n                            disabled={cves.data.length === 0 && selectedCvesCount === 0}\n                        />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport messages from '../../../Messages';\nimport { injectIntl, IntlProvider } from 'react-intl';\n\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves--${date}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';;\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}