{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/DownloadReportKebab.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["SystemCvesTableWithContext","noCves","props","entity","cves","context","filter","item","meta","hasOwnProperty","length","FilterNotFoundForCVE","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","rowKey","isOpen","this","openCves","header","params","selectedCves","openedCves","rows","map","cve","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","variant","Component","propTypes","any","array","object","SystemCvesTable","CVETableContext","Consumer","DownloadReportKebab","downloadReport","dropdownItems","kebabItemDownloadJSON","kebabItemDownloadCSV","BaseKebab","func","SystemCveToolbarWithContext","showAllCheckbox","showRemediationButton","selectedCvesCount","size","undefined","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","Filters","showStatusList","Boolean","filterValues","Remediation","systemId","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","title","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","parseInt","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","find","value","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","setState","state","sendRequest","cveNames","updateStateSet","Set","createUrlParams","allParams","allowedParams","Object","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","payload","fetchCveListBySystem","page_size","Number","MAX_SAFE_INTEGER","data_format","page","then","response","JSON","downloadFile","Date","toISOString","StatusDropdown","setCallback","queryObject","parse","location","search","cveList","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","Fragment","buttonAction","opt_out","dispatchAction","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","component","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","actions","onClick","optOutSystemAction","notification"],"mappings":"ykCASMA,G,+LAOFC,OAAS,WAAM,MACiB,EAAKC,MAAzBC,EADG,EACHA,OACAC,EAFG,EACKC,QACRD,KAIR,OAA4B,IAHP,CAAC,SAAU,YAAa,UAAW,cAAe,YAAa,SAAU,aAAaE,OACvG,SAAAC,GAAI,OAAIH,EAAKI,KAAKC,eAAeF,IAASH,EAAKI,KAAKD,KAEvCG,OACNC,IACAR,EACAS,IACqB,IAArBR,EAAKS,KAAKH,OACVI,SADJ,G,EAYXC,eAAiB,SAACC,EAAOC,EAAYC,GAAU,IACnCb,EAAY,EAAKH,MAAjBG,QACAD,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACRC,EAAUhB,EAAKS,KAAKK,IAAUd,EAAKS,KAAKK,GAAOG,GACrDF,EAAQG,WAAWL,EAAYG,I,kEAXlBJ,EAAOO,EAAQC,GAAQ,IAC5BnB,EAAYoB,KAAKvB,MAAjBG,QACAD,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACRC,EAAUhB,EAAKS,KAAKU,IAAWnB,EAAKS,KAAKU,GAAQF,GACvDF,EAAQO,SAASF,EAAQJ,K,+BAUpB,aACuBK,KAAKvB,MAAzBG,EADH,EACGA,QAASsB,EADZ,EACYA,OACTC,EAA0BvB,EAA1BuB,OAAQxB,EAAkBC,EAAlBD,KAAMe,EAAYd,EAAZc,QACdU,EAA6BD,EAA7BC,aAAcC,EAAeF,EAAfE,WAChBC,EAAO3B,EAAKS,KACjBmB,IAAI,SAAAC,GAAG,OAAKJ,EAAaK,IAAID,EAAIZ,KAArB,KAAiCY,EAAjC,CAAsCE,UAAU,KAAWF,IACvED,IAAI,SAAAC,GAAG,OAAKH,EAAWI,IAAID,EAAIZ,KAAnB,KAA+BY,EAA/B,CAAoCT,QAAQ,KAAWS,IACpE,OACI,kBAAC,WAAD,KACM7B,EAAKgC,UAgCH,kBAAC,gBAAD,CAAeC,QAAS,EAAGC,QAAS,KA/BpC,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CACIC,aAAY,0BACZC,SAAUhB,KAAKV,eACf2B,MAAOf,EACPI,KAAMA,EACNY,OAAQC,YAAa,CAAC,CAAEC,IAAK,YAAc,CAAEA,IAAK,aAA9B,WAA+ClB,IAASvB,EAAKI,KAAKsC,MACtFC,OAAQ,SAAC/B,EAAO6B,EAAKG,GAAb,OACJC,YACIJ,EACAG,EAFY,CAGX,CAAEH,IAAK,YAAc,CAAEA,IAAK,aAHjB,WAGkClB,IAC9CvB,EAAKI,KAAKsC,KACV3B,EAAQ+B,QAGhBC,eAAgB,UAChBC,WAAY,SAACpC,EAAOO,EAAQC,GAAhB,OAA2B,EAAK6B,iBAAiBrC,EAAOO,EAAQC,MAEzEpB,EAAKgC,WAAkC,IAArBhC,EAAKS,KAAKH,QAAgBe,KAAKxB,UAChD,kBAAC,WAAD,KACI,kBAAC,IAAD,MACA,kBAAC,IAAD,QAIZ,kBAAC,eAAD,KACI,kBAACqD,EAAA,EAAD,CAAmBC,QAAQ,SAAS/C,KAAMJ,EAAKI,KAAM0C,MAAO/B,EAAQ+B,e,GAzEvDM,aAAnCxD,GACKyD,UAAY,CACfpD,QAASoD,IAAUC,IACnB/B,OAAQ8B,IAAUE,MAClBxD,OAAQsD,IAAUG,QAgF1B,IAGeC,GAHS,SAAA3D,GAAK,OACzB,kBAAC4D,GAAgBC,SAAjB,KAA2B,SAAA1D,GAAO,OAAI,kBAAC,GAAD,KAA4BA,QAASA,GAAaH,O,8BCxFtF8D,GAAsB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,eACrBC,EAAgB,CAACC,aAAsBF,GAAiBG,aAAqBH,IACnF,OACI,6BACI,kBAACI,GAAA,EAAD,CAAWH,cAAeA,MAKtCF,GAAoBP,UAAY,CAC5BQ,eAAgBR,IAAUa,MAGfN,U,+PCPTO,G,yIAgBO,MAC+D9C,KAAKvB,MAAjEsE,EADH,EACGA,gBAAiBC,EADpB,EACoBA,sBAAuBtE,EAD3C,EAC2CA,OAAQE,EADnD,EACmDA,QAChDD,EAA0BC,EAA1BD,KAAMwB,EAAoBvB,EAApBuB,OAAQT,EAAYd,EAAZc,QACdU,EAAiBD,EAAjBC,aACF6C,GACmC,IAArCjD,KAAKvB,MAAMuE,sBAAkC5C,GAAgBA,EAAa8C,MAAS,OAAIC,EAC3F,OACI,kBAAC,eAAD,CAAcC,UAAU,+BACpB,kBAACC,GAAA,EAAD,CAAcD,UAAU,iCACnBJ,GACG,kBAACM,GAAA,EAAD,CACIC,cAAeN,EACfO,gBAAiB9D,EAAQG,WACzBlB,KAAMA,EACN8E,cAAe,SAAAC,GAAG,OAAIhE,EAAQ+D,c,+UAAR,IAA2BtD,EAA3B,GAAsCuD,OAGpE,kBAACC,GAAA,EAAD,CACIlC,MAAO/B,EAAQ+B,MACfmC,eAAgBC,QAAQnF,GACxBqE,gBAAiBA,EACjBe,aAAc3D,IAEjB6C,GAAyB,kBAACe,GAAA,EAAD,CAAaC,SAAUtF,EAAOkB,GAAIQ,aAAcA,IAC1E,kBAAC,GAAD,CAAqBoC,eAAgB9C,EAAQ8C,kBAGjD,kBAACa,GAAA,EAAD,KACI,kBAACxB,EAAA,EAAD,CAAmBJ,MAAO/B,EAAQ+B,MAAO1C,KAAMJ,EAAKI,a,GA5C9BgD,aAApCe,GACKd,UAAY,CACfe,gBAAiBf,IAAUiC,KAC3BjB,sBAAuBhB,IAAUiC,KACjCvF,OAAQsD,IAAUG,OAClBvD,QAASoD,IAAUG,QALrBW,GAQKoB,aAAe,CAClBnB,iBAAiB,EACjBC,uBAAuB,EACvBmB,YAAa,EACb1C,MAAO,aACPe,eAAgB,cAsCxB,IAGe4B,GAHU,SAAA3F,GAAK,OAC1B,kBAAC4D,GAAgBC,SAAjB,KAA2B,SAAA1D,GAAO,OAAI,kBAAC,GAAD,KAA6BA,QAASA,GAAaH,O,okBC9CtF,IAAM4D,GAAkBgC,IAAMC,cAAc,IAE7CpE,GAAS,CACX,CACIqE,MAAO,OACPnD,IAAK,WACLoD,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,YAC9BE,eAAgB,CAACC,MAErB,CACIN,MAAO,eACPnD,IAAK,cACLoD,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACIH,MAAO,aACPnD,IAAK,aACLoD,WAAY,CAACC,IAAUC,YAAW,kBAEtC,CACIH,MAAO,SACPnD,IAAK,SACLoD,WAAY,CAACC,IAAUC,YAAW,iBAClCC,iBAAkB,CAACD,YAAW,aAElC,CAAEH,MAAO,SAAUnD,IAAK,SAAUoD,WAAY,CAACC,IAAUC,YAAW,mBAGlEI,G,YASF,WAAYrG,GAAO,0BACf,4BAAMA,KAWVsG,aAAe,SAAAC,GAAS,IACZC,EAAWD,EAAXC,OAER,OAAmB,MADAC,SAASD,IACF,EAAKxG,MAAMC,OAC1ByG,IAEAC,KAlBI,EAsBnB3D,MAAQ,WAAiB,IAAhB4D,EAAgB,uDAAP,GACd,GAAIA,EAAOrG,eAAe,eAAgB,CACtC,IAAIsG,EAAYC,IAAYC,KAAK,SAAA1G,GAAI,OAAIA,EAAK2G,QAAUJ,EAAOK,cAC/D,IAAKJ,EAAW,CACZ,IAAIK,EAASN,EAAOK,YAAYE,MAAM,WAAW/G,OAAO,SAAAC,GAAI,OAAI+G,WAAW/G,KAC3EwG,EAAY,CAAEG,MAAOJ,EAAOK,YAAaI,KAAMH,EAAO,GAAII,GAAIJ,EAAO,IAGzEN,EAAOW,UAAYV,EAAUQ,KAC7BT,EAAOY,QAAUX,EAAUS,GAG/B,GAAIV,EAAOrG,eAAe,gBAAiB,CACvC,IAAIkH,EAAcC,IAAkBX,KAAK,SAAA1G,GAAI,OAAIA,EAAK2G,QAAUJ,EAAOe,eACvEf,EAAOgB,YAAcH,EAAYJ,MAAQI,EAAYJ,KAAKQ,OAAO,cACjEjB,EAAOkB,UAAYL,EAAYH,IAAMG,EAAYH,GAAGO,OAAO,cAG/D,EAAKE,SAAL,MAAmB,EAAKC,MAAxB,GAAkCpB,GAAU,EAAKqB,cAxClC,EA2CnB7G,WAAa,SAACL,EAAYmH,GAAa,IAC7BvG,EAAiB,EAAKqG,MAAtBrG,aAEFA,EADAuG,EACeC,YAAexG,EAAcuG,EAAUnH,GAEvC,IAAIqH,IAGvB,EAAKL,SAAL,MAAmB,EAAKC,MAAxB,CAA+BrG,aAAc,IAAIyG,IAAIzG,OAnDtC,EAsDnBH,SAAW,SAACF,EAAQ4G,GAAa,IACvBtG,EAAe,EAAKoG,MAApBpG,WAEFA,EADAsG,EACaC,YAAevG,EAAYsG,EAAU5G,GAErC,IAAI8G,IAGrB,EAAKL,SAAL,MAAmB,EAAKC,MAAxB,CAA+BpG,WAAY,IAAIwG,IAAIxG,OA9DpC,EAiEnByG,gBAAkB,SAAAC,GACd,IAAM5G,EAAS,MAAK4G,GACdC,EAAgB,CAClB,cACA,eACA,SACA,QACA,SACA,OACA,YACA,OACA,UAEJC,OAAOC,KAAKH,GAAWI,QACnB,SAAA/F,GAAG,YACkB+B,IAAhBhD,EAAOiB,IAAsC,KAAhBjB,EAAOiB,KAAgB4F,EAAcI,SAAShG,KAAwB,IAAhBjB,EAAOiB,YACpFjB,EAAOiB,KAEtB,IAAMiG,EAAcC,KAAGC,UAAUpH,GACjC,EAAK1B,MAAM+I,QAAQC,KAAK,IAAMJ,IApFf,EAuFnBX,YAAc,WAAM,MACc,EAAKjI,MAA3BiJ,EADQ,EACRA,UAAWhJ,EADH,EACGA,OACnBgJ,GAAaA,EAAU,MAAK,EAAKjB,MAAX,CAAkBkB,OAAQjJ,EAAOkB,MACvD,EAAKkH,gBAAgB,EAAKL,QA1FX,EA6FnBjE,eAAiB,SAAA8D,GACb,IAAMnG,EAAS,MAAK,EAAKsG,OACnBmB,EAAYC,YAAqB,MAAK1H,EAAN,CAAc2H,UAAWC,OAAOC,iBAAkBC,YAAa3B,EAAQ4B,KAAM,KAA7GN,QACNA,GACIA,EAAQO,KAAK,YAAwB,IAAfC,EAAe,EAArBhJ,KACNA,EAAkB,SAAXkH,EAAoB+B,KAAKd,UAAUa,GAAYA,EAC5D,OAAOE,uBAAalJ,EAAD,8BAA6B,IAAImJ,MAAOC,eAAiBlC,MAjGpF,EAAKG,MAAQ,CAAErG,aAAc,IAAIyG,IAAOxG,WAAY,IAAIwG,KAFzC,E,iEAMf4B,IAAeC,YAAY1I,KAAK0G,aAChC,IACMiC,EAAcrB,KAAGsB,MAAM5I,KAAKvB,MAAMoK,SAASC,QACjD9I,KAAKyB,MAAL,MAFsB,CAAEJ,KAAM,gBAE9B,GAAkCsH,M,+BA8F7B,MACuB3I,KAAKvB,MAAzBsK,EADH,EACGA,QAASrK,EADZ,EACYA,OACT+C,EAAgDzB,KAAhDyB,MAAOe,EAAyCxC,KAAzCwC,eAAgB3C,EAAyBG,KAAzBH,WAAYI,EAAaD,KAAbC,SACrCtB,EAAOoK,EACLC,EAAWrK,EAAXqK,OACR,OAAKA,EA0BMhJ,KAAK+E,aAAaiE,GAxBrB,kBAAC3G,GAAgB4G,SAAjB,CACIxD,MAAO,CACH9G,OACAwB,OAAQH,KAAKyG,MACb/G,QAAS,CACL+B,QACAe,iBACA3C,aACAI,WACAwD,cAAe,SAAAtD,GAAM,OAAI0H,YAAqB,MAAK1H,EAAN,CAAcwH,OAAQjJ,EAAOkB,UAIlF,kBAACsJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,GAAD,CAAuBpG,uBAAqB,EAACtE,OAAQA,KAEzD,kBAACyK,EAAA,EAAD,KACI,kBAACE,GAAD,CAAgBnJ,OAAQA,GAAQxB,OAAQA,W,GAzI3CqD,aAAnB+C,GACK9C,UAAY,CACftD,OAAQsD,IAAUG,OAClB4G,QAAS/G,IAAUC,IACnByF,UAAW1F,IAAUa,KACrB2E,QAASxF,IAAUG,OACnB0G,SAAU7G,IAAUG,QAqJ5B,IAMemH,eACXC,kBAdJ,YAAyE,IAA9CC,EAA8C,EAA9CA,gBAAkC9K,EAAY,EAA7B+K,cAAiB/K,OACzD,MAAO,CACHqK,QAASS,GAAmBE,YAAsBhL,EAAOkB,GAAI4J,EAAgBT,SAC7ErK,WAImB,SAAAiL,GACvB,MAAO,CACHjC,UAAW,SAAAvH,GAAM,OAAIwJ,EAAS9B,YAAqB1H,OAKvDoJ,CAGEzE,KC1MA8E,G,YAQF,WAAYnL,GAAO,6CACTA,I,sDAGD,MAC6CuB,KAAKvB,MAA/CC,EADH,EACGA,OAAQmL,EADX,EACWA,SAAUC,EADrB,EACqBA,oBAS1B,OARA9J,KAAKvB,MAAMsL,UAAU,CACjBC,YAAa,CACT,CAAEzF,MAAO0F,IAAMC,gBAAgB3F,MAAOwB,GAAIkE,IAAMC,gBAAgBnE,IAChE,CAAExB,MAAO0F,IAAME,QAAQ5F,MAAOwB,GAAIkE,IAAME,QAAQpE,IAChD,CAAExB,MAAQ7F,GAAUA,EAAO0L,cAAiB,iBAAkBC,UAAU,MAI3E3L,EAMAmL,EAQG,kBAAC,IAAMS,SAAP,KACI,kBAAC,IAAD,CAA2BC,aAAc,kBAAMT,GAAoB,OAPvE,kBAAC,IAAMQ,SAAP,KACI,kBAAC,GAAD,CAAiB5L,OAAQA,EAAOkB,MAPpC,kBAAC,IAAD,U,GAxBWyE,IAAMtC,WAA3B6H,GACK5H,UAAY,CACf+H,UAAW/H,IAAUa,KACrBnE,OAAQsD,IAAUG,OAClB0H,SAAU7H,IAAUiC,KACpB6F,oBAAqB9H,IAAUa,MAoDxByG,mBACXC,kBARJ,YAA2E,QAAhDE,cACvB,MAAO,CACH/K,OAFmE,EAA/BA,OAGpCmL,SAHmE,EAAvBW,UANzB,WACvB,MAAO,CACHT,UAAW,SAAA7J,GAAM,OAAIuK,YAAeV,YAAU7J,OAYlDqJ,CAGEK,K,yjBCnEN,IAAIc,GAAe,CACfC,QAAQ,GAICC,GAAoB,SAACC,EAAwBf,GAAzB,OAAiD,WAAkC,IAAjCrD,EAAiC,uDAAzBiE,GAAcI,EAAW,uCAChH,OAAQA,EAAOC,MACX,KAAKC,KAAuB,aACxB,aACOvE,EADP,GAEOqE,EAAOlD,QAAQxI,MAE1B,KAAKyL,EAAuBI,sBACxB,aACOxE,EADP,CAEIkE,QAAQ,EACRO,WAAY,CACR,CACI3G,MAAO,kBACP4G,KAAM,kBACNC,UAAW,kBAAM,kBAAC,GAAD,CAActB,oBAAqBA,SAIpE,QACI,OAAOrD,K,skBCbb4E,G,YASF,WAAY5M,GAAO,0BACf,4BAAMA,KAkCV6M,UAAY,SAAClK,EAAKqE,GACd,IAAI8F,EAAU,EAAK9E,MAAM+E,WACzBD,EAAQnK,GAAKV,SAAW+E,EACxB,EAAKe,SAAS,CAAEgF,WAAYD,KAtCb,EAyCnBE,gBAAkB,SAAAhG,GACd,EAAKe,SAAL,MAAmB,EAAKC,MAAxB,CAA+BiF,YAAajG,MA1C7B,EA6CnBkG,aAAe,SAAAlG,GACX,EAAKhH,MAAMkN,aAAa,EAAKlF,MAAMmF,YAAanG,GAAO0C,KAAK,WACxD,EAAK1J,MAAMoN,mBAAmB,EAAKpF,MAAMmF,cAC/B,IAAVnG,EACM,EAAKhH,MAAMqN,gBAAgB,CACzBhK,QAAS,UACTyC,MAAO,6DAET,EAAK9F,MAAMqN,gBAAgB,CACzBhK,QAAS,UACTyC,MAAO,qDACPwH,YAAa,sDArDzB,EAAKtF,MAAQ,CACTmF,YAAa,EAAKnN,MAAMuN,MAAM7L,OAAOyL,YACrCK,eAAgB,aAChBP,aAAa,GANF,E,uEAWf1L,KAAKvB,MAAMoN,mBAAmB7L,KAAKyG,MAAMmF,aACzC5L,KAAKkM,mB,uJAI4FC,SAASC,cAAc,CACpHC,MAAOhI,IACPiI,iBACAC,YACAC,e,gBAJIC,E,EAAAA,mBAAoBC,E,EAAAA,kBAAmBC,E,EAAAA,gBAAiB9B,E,EAAAA,uBAOhE+B,KAAgBC,SAAhB,MACOH,IADP,GAEOC,EAAgB/B,GAAkBC,EAAwB7K,KAAK2L,iBAGtE3L,KAAKwG,SAAS,CACVsG,gBAAiBL,IAAqBM,oBACtCC,cAAeP,IAAqBQ,UAExCjN,KAAKyG,MAAMwF,iB,2HA6BN,aACsCjM,KAAKyG,MAAxCqG,EADH,EACGA,gBAAiBE,EADpB,EACoBA,cADpB,EAE0BhN,KAAKvB,MAA5ByO,qBAFH,MAEmB,GAFnB,IAGyCA,EAAtC1C,QAASX,OAHZ,SAG8BnL,EAAWwO,EAAXxO,OAEnC,OACI,kBAACyO,EAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAqB7I,MAAM,GAAG8I,UAAU,GACnCP,GACG,kBAACA,EAAD,CACIQ,UAAQ,EACRC,QACI7O,GAAU,CACNmL,EACM,CACEtF,MAAO,gCACPiJ,QAAS,kBAAM,EAAK7B,cAAa,KAEnC,CACEpH,MAAO,sCACPiJ,QAAS,kBAAM,EAAK7B,cAAa,SAQ5DqB,GACG,kBAAC,OAAD,KACI,kBAAC,IAAM1C,SAAP,KACI,kBAAC0C,EAAD,CAAelD,oBAAqB9J,KAAK2L,sB,GArGvCtH,IAAMtC,WAA9BsJ,GACKrJ,UAAY,CACf6J,mBAAoB7J,IAAUa,KAC9BqK,cAAelL,IAAUG,OACzBwJ,aAAc3J,IAAUa,KACxBmJ,MAAOhK,IAAUG,OACjB2J,gBAAiB9J,IAAUa,MAsHpByG,sBACXC,kBAfJ,SAAyB9C,GACrB,MAAO,CACHyG,cAAezG,EAAMgD,gBAIF,WACvB,MAAO,CACHkC,aAAc,SAAChE,EAAQ1C,GAAT,OAAoBwF,YAAegD,YAAmB9F,EAAQ1C,KAC5E4G,mBAAoB,SAAAlE,GAAM,OAAI8C,YAAeoB,YAAmBlE,KAChEmE,gBAAiB,SAAA4B,GAAY,OAAIjD,YAAeqB,0BAAgB4B,OAKpEnE,CAGE8B","file":"js/InventoryDetail.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport BaseKebab from './BaseKebab';\nimport { kebabItemDownloadCSV, kebabItemDownloadJSON } from './KebabItems';\n\nconst DownloadReportKebab = ({ downloadReport }) => {\n    const dropdownItems = [kebabItemDownloadJSON(downloadReport), kebabItemDownloadCSV(downloadReport)];\n    return (\n        <div>\n            <BaseKebab dropdownItems={dropdownItems} />\n        </div>\n    );\n};\n\nDownloadReportKebab.propTypes = {\n    downloadReport: propTypes.func\n};\n\nexport default DownloadReportKebab;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DownloadReportKebab from '../../PresentationalComponents/DownloadReportKebab/DownloadReportKebab';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Filters from '../Filters/Filters';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showAllCheckbox: propTypes.bool,\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showAllCheckbox: false,\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showAllCheckbox, showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        return (\n            <TableToolbar className=\"space-between-toolbar-items\">\n                <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                    {showRemediationButton && (\n                        <SelectAllCheckbox\n                            selectedItems={selectedCvesCount}\n                            selectorHandler={methods.selectCves}\n                            cves={cves}\n                            fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                        />\n                    )}\n                    <Filters\n                        apply={methods.apply}\n                        showStatusList={Boolean(entity)}\n                        showAllCheckbox={showAllCheckbox}\n                        filterValues={params}\n                    />\n                    {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                    <DownloadReportKebab downloadReport={methods.downloadReport} />\n                </ToolbarGroup>\n\n                <ToolbarGroup>\n                    <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                </ToolbarGroup>\n            </TableToolbar>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, sortable, expandable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport StatusDropdown from '../StatusDropdown/StatusDropdown';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport qs from 'query-string';\nimport { withRouter } from 'react-router-dom';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base ',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-15')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set(), openedCves: new Set() };\n    }\n\n    componentDidMount() {\n        StatusDropdown.setCallback(this.sendRequest);\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n            if (!cvssEntry) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { value: config.cvss_filter, from: values[0], to: values[1] };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n            config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n            config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    openCves = (isOpen, cveNames) => {\n        let { openedCves } = this.state;\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves) });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        fetchData && fetchData({ ...this.state, system: entity.id });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        let { payload } = fetchCveListBySystem({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves } = this;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis, SystemNotFound } from '../../../Helpers/constants';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return (\n                <SystemNotFound />\n            );\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system)),\n        addNotification: notification => dispatchAction(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}