{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/PaginationWrapper/PaginationWrapper.js","webpack:///./src/Helpers/VulnerabilitiesHelper.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/_baseFlatten.js","webpack:///./node_modules/lodash/_arrayPush.js","webpack:///./node_modules/lodash/_isFlattenable.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/isArguments.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/map.js","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss?f1f2","webpack:///./src/Components/SmartComponents/CVEs/vulnerabilities.scss","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SelectAllCheckbox/SelectAllCheckbox.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["PaginationWrapper","handleChangePage","_event","pageNumber","props","apply","page","handleSetPageSize","perPage","page_size","nextProps","meta","this","variant","total_items","Fragment","itemCount","DEFAULT_PAGE_SIZE","perPageOptions","PER_PAGE_OPTIONS","onSetPage","onPerPageSelect","PaginationVariant","Component","propTypes","func","object","string","defaultProps","createCveListByAccount","cveList","parameters","isLoading","payload","data","errors","row","index","id","business_risk_id","attributes","business_risk_justification","business_risk_text","status_id","status_justification","status_text","cells","title","key","to","synopsis","processDate","public_date","impact","hasLabel","parseCvssScore","cvss2_score","cvss3_score","systems_affected","toString","businessRiskOptions","find","option","value","label","systems_status_divergent","content","color","STATUS_OPTIONS","isOpen","openedCves","includes","selected","selectedCves","component","TextVariants","h6","p","description","parent","createCveListBySystem","systemId","handleCVELink","tooltipPosition","cve_status_id","location","href","indexOf","document","baseURI","baseFlatten","map","module","exports","collection","iteratee","arrayPush","isFlattenable","array","depth","predicate","isStrict","result","length","values","offset","Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","Array","i","options","transform","locals","push","Remediation","remediationProvider","size","issues","cve","systems","dispatchNotification","addNotification","dataProvider","isDisabled","onRemediationCreated","getNotification","className","connect","dispatch","notification","routerParams","SelectAllCheckbox","handleOnToggle","setState","handleOnSelect","state","handleSelectPage","cves","selectorHandler","filter","item","handleSelectAll","fetchResource","then","cveNames","handleUnselectAll","handleOnCheckboxChange","selectedItems","nextState","checkboxlabel","Boolean","dropdownItems","onClick","onSelect","toggle","splitButtonItems","isChecked","onChange","onToggle","number","CvePairStatusModal","updateRef","inventoryId","useState","useStatusSelect","StatusSelect","statusId","setSelectProps","setProps","useJustificationInput","justification","JustificationInput","setJustificationProps","checkboxState","setCheckboxState","successNotification","BaseModal","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","setSystemCveStatus","onSuccessNotification","Stack","gutter","StackItem","Form","FormGroup","fieldId","Checkbox","name","checked","SystemCvesTableWithContext","noCves","entity","context","hasOwnProperty","FilterNotFoundForCVE","EmptyCVEListForSystem","EmptyCVEList","event","isSelected","rowId","methods","cveName","selectCves","rowKey","openCves","header","params","rows","has","colSize","rowSize","Table","aria-label","actions","cveTableRowActions","sortBy","createSortBy","sort","onSort","direction","handleSortColumn","gridBreakPoint","onCollapse","handleOnCollapse","any","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","showRemediationButton","selectedCvesCount","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditBusinessRisk","showBusinessRiskModal","kebabItemEditStatus","showStatusModal","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","ToolbarGroup","ops","Filters","searchPlaceholder","filterValues","BaseKebab","ToolbarItem","FilterChips","bool","totalNumber","SystemCveToolbar","React","createContext","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","config","cvssEntry","CVSSOptions","cvss_filter","split","parseFloat","from","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","updateStateSet","Set","createUrlParams","allParams","allowedParams","Object","keys","forEach","queryString","qs","stringify","history","fetchData","system","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","BusinessRiskModal","open","StatusModal","queryObject","parse","search","Provider","SystemCveTableToolbar","SystemCveTable","withRouter","SystemCvesStore","entityDetails","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","display_name","isActive","buttonAction","opt_out","dispatchAction","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","fetchSystemDetails","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","optOutSystemAction"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["/* eslint-disable camelcase */\n\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { DEFAULT_PAGE_SIZE, PER_PAGE_OPTIONS } from '../../../Helpers/constants';\n\nclass PaginationWrapper extends Component {\n    static propTypes = {\n        apply: propTypes.func,\n        meta: propTypes.object,\n        variant: propTypes.string\n    };\n\n    static defaultProps = {\n        variant: 'top'\n    };\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.meta === this.props.meta) {\n            return false;\n        }\n\n        return true;\n    }\n    handleChangePage = (_event, pageNumber) => this.props.apply({ page: pageNumber });\n\n    handleSetPageSize = (_event, perPage) => this.props.apply({ page_size: perPage, page: 1 });\n\n    render() {\n        const { meta, variant } = this.props;\n        const { page, total_items, page_size } = meta;\n        return (\n            <React.Fragment>\n                <Pagination\n                    page={page || 1}\n                    itemCount={total_items || 0}\n                    perPage={page_size || DEFAULT_PAGE_SIZE}\n                    perPageOptions={PER_PAGE_OPTIONS}\n                    onSetPage={this.handleChangePage}\n                    onPerPageSelect={this.handleSetPageSize}\n                    variant={PaginationVariant[variant]}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginationWrapper;\n","import { Text, TextContent, TextVariants, Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, ServerAltIcon } from '@patternfly/react-icons';\nimport { Shield } from '@redhat-cloud-services/frontend-components';\nimport { parseCvssScore, processDate } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport { flatMap } from 'lodash';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { businessRiskOptions, STATUS_OPTIONS } from './constants';\n\nexport function createCveListByAccount({ cveList, parameters }) {\n    let isLoading = cveList.isLoading;\n    if (!isLoading) {\n        let payload = cveList.payload;\n\n        let { data, meta, errors } = payload;\n\n        data =\n            data &&\n            flatMap(data, (row, index) => [\n                {\n                    id: row.id,\n                    business_risk_id: row.attributes.business_risk_id,\n                    business_risk_justification: row.attributes.business_risk_text,\n                    status_id: row.attributes.status_id,\n                    status_justification: row.attributes.status_text,\n                    cells: [\n                        {\n                            title: (\n                                <span key={row.id}>\n                                    <Link to={'/cves/' + row.attributes.synopsis}>{row.attributes.synopsis}</Link>\n                                </span>\n                            )\n                        },\n\n                        { title: <span key={row.id}>{processDate(row.attributes.public_date)}</span> },\n                        {\n                            title: (\n                                <span key={row.id}>\n                                    <Shield impact={row.attributes.impact} hasLabel />\n                                </span>\n                            )\n                        },\n                        {\n                            title: (\n                                <span key={row.id}>\n                                    {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                                </span>\n                            )\n                        },\n\n                        { title: <span key={row.id}>{row.attributes.systems_affected.toString()}</span> },\n                        {\n                            title: (\n                                <span key={row.id}>\n                                    {\n                                        businessRiskOptions.find(\n                                            option => option.value === row.attributes.business_risk_id.toString()\n                                        ).label\n                                    }\n                                </span>\n                            )\n                        },\n                        {\n                            title: (\n                                <span key={row.id}>\n                                    {row.attributes.systems_status_divergent > 0 ? (\n                                        <Tooltip content=\"Individual CVE-Status pairs have differences from overall CVE status\">\n                                            <ExclamationTriangleIcon color={'var(--pf-global--warning-color--100)'} />\n                                        </Tooltip>\n                                    ) : (\n                                        ''\n                                    )}{' '}\n                                    {STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString()).label}\n                                </span>\n                            )\n                        }\n                    ],\n                    isOpen: parameters.openedCves.includes(row.id),\n                    selected: parameters.selectedCves.includes(row.id)\n                },\n                {\n                    cells: [\n                        {\n                            title: (\n                                <TextContent>\n                                    <Text component={TextVariants.h6}>Description</Text>\n                                    <Text component={TextVariants.p}>{row.attributes.description}</Text>\n                                </TextContent>\n                            )\n                        }\n                    ],\n                    parent: index * 2\n                }\n            ]);\n        return { data, meta, isLoading, errors };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nexport function createCveListBySystem(systemId, cveList) {\n    let isLoading = cveList && cveList.isLoading;\n    if (!isLoading) {\n        const {\n            payload: { data, meta, errors }\n        } = cveList;\n        return {\n            data:\n                data &&\n                flatMap(data, (row, index) => [\n                    {\n                        id: row.id,\n                        business_risk_id: row.attributes.business_risk_id,\n                        business_risk_justification: row.attributes.business_risk_text,\n                        status_id: row.attributes.status_id,\n                        status_justification: row.attributes.status_text,\n                        cells: [\n                            {\n                                title: <span key={row.id}>{handleCVELink(row.attributes.synopsis)}</span>\n                            },\n                            {\n                                title: <span key={row.id}>{processDate(row.attributes.public_date)}</span>\n                            },\n                            {\n                                title: (\n                                    <span key={row.id}>\n                                        {parseCvssScore(row.attributes.cvss2_score, row.attributes.cvss3_score, true)}\n                                    </span>\n                                )\n                            },\n                            {\n                                title: (\n                                    <span key={row.id}>\n                                        <Shield impact={row.attributes.impact} tooltipPosition={'right'} hasLabel />\n                                    </span>\n                                )\n                            },\n                            {\n                                title: (\n                                    <span key={row.id}>\n                                        {\n                                            businessRiskOptions.find(\n                                                option => option.value === row.attributes.business_risk_id.toString()\n                                            ).label\n                                        }\n                                    </span>\n                                )\n                            },\n                            {\n                                title: (\n                                    <span key={row.id}>\n                                        {row.attributes.cve_status_id !== row.attributes.status_id ? (\n                                            <Tooltip content=\"Applies only to this system-CVE pair\">\n                                                <ServerAltIcon />\n                                            </Tooltip>\n                                        ) : (\n                                            ''\n                                        )}{' '}\n                                        {\n                                            STATUS_OPTIONS.find(option => option.value === row.attributes.status_id.toString())\n                                            .label\n                                        }\n                                    </span>\n                                )\n                            }\n                        ],\n                        isOpen: false,\n                        selected: false\n                    },\n                    {\n                        cells: [\n                            {\n                                title: row.attributes.description\n                            }\n                        ],\n                        parent: index * 2\n                    }\n                ]),\n            meta,\n            errors,\n            isLoading\n        };\n    }\n\n    return { data: [], meta: (cveList.payload && cveList.payload.meta) || {}, isLoading };\n}\n\nfunction handleCVELink(synopsis) {\n    if (location.href.indexOf('vulnerability') !== -1) {\n        return <Link to={'/cves/' + synopsis}>{synopsis}</Link>;\n    } else {\n        return <a href={`${document.baseURI}rhel/vulnerability/cves/${synopsis}`}>{synopsis}</a>;\n    }\n}\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/sass-loader/lib/loader.js??ref--5-2!./vulnerabilities.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ins-active-app-vulnerabilities .cvetable-toolbar,\\n.page__Vulnerabilities .cvetable-toolbar {\\n  justify-content: space-between; }\\n  .ins-active-app-vulnerabilities .cvetable-toolbar > div,\\n  .page__Vulnerabilities .cvetable-toolbar > div {\\n    align-self: flex-end; }\\n\\n.ins-active-app-vulnerabilities .space-between-toolbar-items,\\n.page__Vulnerabilities .space-between-toolbar-items {\\n  justify-content: space-between;\\n  flex-wrap: nowrap; }\\n  .ins-active-app-vulnerabilities .space-between-toolbar-items > div,\\n  .page__Vulnerabilities .space-between-toolbar-items > div {\\n    flex-wrap: nowrap; }\\n\\n.ins-active-app-vulnerabilities .vulnerability-toolbar-spacing,\\n.page__Vulnerabilities .vulnerability-toolbar-spacing {\\n  justify-content: flex-start; }\\n  .ins-active-app-vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child),\\n  .page__Vulnerabilities .vulnerability-toolbar-spacing > div:not(:last-child) {\\n    margin-right: var(--pf-global--spacer--sm); }\\n\\n@media screen and (max-width: 1100px) {\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .ins-active-app-vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-options-menu,\\n  .page__Vulnerabilities .pf-c-pagination:not(.pf-m-footer) .pf-c-pagination__nav {\\n    display: none;\\n    visibility: hidden; }\\n  .ins-active-app-vulnerabilities .pf-c-pagination__total-items,\\n  .page__Vulnerabilities .pf-c-pagination__total-items {\\n    display: flex;\\n    visibility: visible; } }\\n\\n.ins-active-app-vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next,\\n.page__Vulnerabilities .pf-c-pagination.pf-m-footer.ins-c-pagination-next {\\n  margin-left: auto; }\\n\\n.ins-active-app-vulnerabilities #download-report,\\n.page__Vulnerabilities #download-report {\\n  cursor: pointer; }\\n\\n.ins-active-app-vulnerabilities .number-of-results,\\n.page__Vulnerabilities .number-of-results {\\n  display: inline-block;\\n  min-width: 55px;\\n  text-align: right;\\n  margin-right: 5px; }\\n\\n.ins-active-app-vulnerabilities .table-header-icon,\\n.page__Vulnerabilities .table-header-icon {\\n  margin-right: 5px;\\n  margin-right: 0.3125rem; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  color: var(--pf-global--primary-color--100); }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column:hover,\\n.page__Vulnerabilities .status-dropdown-column:hover {\\n  cursor: pointer; }\\n  .ins-active-app-vulnerabilities .status-dropdown-column:hover > svg,\\n  .page__Vulnerabilities .status-dropdown-column:hover > svg {\\n    visibility: visible; }\\n\\n.ins-active-app-vulnerabilities .status-dropdown-column > svg,\\n.page__Vulnerabilities .status-dropdown-column > svg {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities tbody > tr > td.pf-c-table__check,\\n.page__Vulnerabilities tbody > tr > td.pf-c-table__check {\\n  vertical-align: middle;\\n  padding-top: 0px !important;\\n  padding-bottom: 0px !important; }\\n\\n.ins-active-app-vulnerabilities thead > tr > td.pf-c-table__check,\\n.page__Vulnerabilities thead > tr > td.pf-c-table__check {\\n  visibility: hidden; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table tr > *,\\n.page__Vulnerabilities .pf-c-table tr > * {\\n  vertical-align: middle !important; }\\n\\n.ins-active-app-vulnerabilities p.pf-c-empty-state__body ul,\\n.page__Vulnerabilities p.pf-c-empty-state__body ul {\\n  margin-top: 0px;\\n  margin-bottom: var(--pf-global--spacer--sm); }\\n  .ins-active-app-vulnerabilities p.pf-c-empty-state__body ul li,\\n  .page__Vulnerabilities p.pf-c-empty-state__body ul li {\\n    margin-top: 0px; }\\n\\n@media (max-width: 1400px) and (min-width: 992px) {\\n  .ins-active-app-vulnerabilities .hide-description,\\n  .page__Vulnerabilities .hide-description {\\n    --pf-hidden-visible--Display: var(\\n                --pf-hidden-visible--hidden--Display\\n            );\\n    --pf-hidden-visible--Visibility: var(\\n                --pf-hidden-visible--hidden--Visibility\\n            ); } }\\n\\n@media (min-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-sml,\\n  .page__Vulnerabilities .remediation-btn-sml {\\n    display: none;\\n    visibility: hidden; } }\\n\\n@media (max-width: 1400px) {\\n  .ins-active-app-vulnerabilities .remediation-btn-lg,\\n  .page__Vulnerabilities .remediation-btn-lg {\\n    display: none;\\n    visibility: none; } }\\n\\n.ins-active-app-vulnerabilities .col-width-10,\\n.page__Vulnerabilities .col-width-10 {\\n  width: 10%; }\\n\\n.ins-active-app-vulnerabilities .col-width-15,\\n.page__Vulnerabilities .col-width-15 {\\n  width: 15%; }\\n\\n.ins-active-app-vulnerabilities .col-width-description,\\n.page__Vulnerabilities .col-width-description {\\n  width: 35%; }\\n\\n.ins-active-app-vulnerabilities .no-wrap,\\n.page__Vulnerabilities .no-wrap {\\n  white-space: nowrap; }\\n\\n.ins-active-app-vulnerabilities .pf-c-table__expandable-row-content,\\n.page__Vulnerabilities .pf-c-table__expandable-row-content {\\n  white-space: normal; }\\n\\n.ins-active-app-vulnerabilities tr.pf-m-expanded .pf-c-table__action,\\n.page__Vulnerabilities tr.pf-m-expanded .pf-c-table__action {\\n  display: none; }\\n\", \"\"]);\n\n// exports\n","/* eslint-disable camelcase */\n\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport RemediationButton from '@redhat-cloud-services/frontend-components-remediations/RemediationButton';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/files/RouterParams';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Remediation extends Component {\n    static propTypes = {\n        systemId: propTypes.string,\n        selectedCves: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.selectedCves !== this.props.selectedCves) {\n            return true;\n        }\n\n        return false;\n    }\n\n    remediationProvider = selectedCves => {\n        if (!selectedCves || selectedCves.size === 0) {\n            return false;\n        }\n\n        return {\n            issues: [...selectedCves].map(cve => ({ id: `vulnerabilities:${cve}`, description: cve })),\n            systems: [this.props.systemId]\n        };\n    };\n\n    render() {\n        const { selectedCves, addNotification: dispatchNotification } = this.props;\n        return (\n            <div>\n                <RemediationButton\n                    dataProvider={() => this.remediationProvider(selectedCves)}\n                    isDisabled={this.remediationProvider(selectedCves) === false}\n                    onRemediationCreated={result => dispatchNotification(result.getNotification())}\n                >\n                    <span className={'remediation-btn-lg'}>Remediate with Ansible</span>\n                    <span className={'remediation-btn-sml'}>Remediate</span>\n                </RemediationButton>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    null,\n    dispatch => ({\n        addNotification: notification => dispatch(addNotification(notification))\n    })\n)(routerParams(Remediation));\n","import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass SelectAllCheckbox extends Component {\n    static propTypes = {\n        selectedItems: propTypes.number,\n        selectorHandler: propTypes.func,\n        fetchResource: propTypes.func,\n        cves: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextState.isOpen !== this.state.isOpen || nextProps.selectedItems !== this.props.selectedItems) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleOnToggle = isOpen => {\n        this.setState({\n            isOpen\n        });\n    };\n\n    handleOnSelect = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n    handleSelectPage = () => {\n        const {\n            cves: { data },\n            selectorHandler\n        } = this.props;\n        const cveNames = data.filter(item => item.id).map(cve => cve.id);\n        selectorHandler(true, cveNames);\n    };\n\n    handleSelectAll = () => {\n        const {\n            cves: { meta },\n            selectorHandler,\n            fetchResource\n        } = this.props;\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const cveNames = response.map(cve => cve.id);\n                selectorHandler(true, cveNames);\n            });\n    };\n\n    handleUnselectAll = () => {\n        const { selectorHandler } = this.props;\n        selectorHandler(false, undefined);\n    };\n\n    handleOnCheckboxChange = () => {\n        const { selectedItems } = this.props;\n        if (selectedItems === 0) {\n            this.handleSelectAll();\n        } else {\n            this.handleUnselectAll();\n        }\n    };\n\n    render() {\n        const { selectedItems, cves } = this.props;\n        const { meta } = cves;\n        const { isOpen } = this.state;\n        const checkboxlabel = Boolean(selectedItems) && `${selectedItems} selected`;\n\n        const dropdownItems = [\n            <DropdownItem key=\"none\" onClick={this.handleUnselectAll}>\n                Select none (0 items)\n            </DropdownItem>,\n            <DropdownItem key=\"page\" onClick={this.handleSelectPage}>\n                Select page ({meta.page_size} items)\n            </DropdownItem>,\n            <DropdownItem key=\"all\" onClick={this.handleSelectAll}>\n                Select all ({meta.total_items} items)\n            </DropdownItem>\n        ];\n        return (\n            <Dropdown\n                onSelect={this.handleOnSelect}\n                toggle={\n                    <DropdownToggle\n                        splitButtonItems={[\n                            <Checkbox\n                                key={'selectAllcheckbox'}\n                                isChecked={meta.total_items === selectedItems ? true : selectedItems === 0 ? false : null}\n                                onChange={this.handleOnCheckboxChange}\n                            />,\n                            checkboxlabel\n                        ]}\n                        onToggle={this.handleOnToggle}\n                    />\n                }\n                isOpen={isOpen}\n                dropdownItems={dropdownItems}\n            />\n        );\n    }\n}\n\nexport default SelectAllCheckbox;\n","import { Checkbox, Form, FormGroup, Stack, StackItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventoryId }) => {\n    const [cveList] = useState(cves);\n    const { StatusSelect, statusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const { JustificationInput, justification, setProps: setJustificationProps } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(false);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryId\n            }\n            : { cve: cveIds, inventory_id: inventoryId };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getDefaultLabel() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        const props = { isDisabled: checked };\n        setCheckboxState(checked);\n        setSelectProps(props);\n        setJustificationProps(props);\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: `Status updated for ${cveList.length} CVEs`\n    };\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={successNotification}\n            title=\"Set status for this CVE and host pair\"\n        >\n            <Stack gutter={'md'}>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryId: propTypes.string\n};\n\nexport default CvePairStatusModal;\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForCVE } from '../../../Helpers/constants';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => cves.meta.hasOwnProperty(item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForCVE;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={cveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditBusinessRisk,\n    kebabItemEditStatus\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../SelectAllCheckbox/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n        const kebabOptions = [\n            kebabItemEditBusinessRisk(\n                methods.showBusinessRiskModal,\n                [...selectedCves].map(item => ({ id: item, business_risk_id: '0' })),\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemEditStatus(methods.showStatusModal, [...selectedCves].map(item => ({ id: item, status_id: '0' })), {\n                isDisabled: !selectedCvesCount\n            }),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCvesCount}\n                                selectorHandler={methods.selectCves}\n                                cves={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                            />\n                        )}\n                        <Filters\n                            searchPlaceholder=\"Find a CVE…\"\n                            apply={methods.apply}\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={filterCategories}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'Name',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base ',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = { selectedCves: new Set(), openedCves: new Set(), BusinessRiskModal: () => null, StatusModal: () => null };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    apply = (config = {}) => {\n        if (config.hasOwnProperty('cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter !== 'undefined'\n            ) {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            }\n            else if (typeof cvssEntry === 'undefined' &&\n                typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (config.hasOwnProperty('publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    openCves = (isOpen, cveNames) => {\n        let { openedCves } = this.state;\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves) });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        fetchData && fetchData({ ...this.state, system: entity.id });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        let { payload } = fetchCveListBySystem({ ...params, page_size: Number.MAX_SAFE_INTEGER, data_format: format, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showBusinessRiskModal = cves => {\n        this.setState({\n            BusinessRiskModal: () => <BusinessRiskModal open cves={cves} updateRef={this.apply} />\n        });\n    };\n\n    showStatusModal = cves => {\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal cves={cves} updateRef={this.apply} inventoryId={this.props.entity && this.props.entity.id} />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showBusinessRiskModal, showStatusModal } = this;\n        const { BusinessRiskModal, StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showBusinessRiskModal,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n                    <BusinessRiskModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => dispatch(fetchCveListBySystem(params))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\nimport { InvalidObject } from '@redhat-cloud-services/frontend-components';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return (\n                <InvalidObject />\n            );\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        setHeader: header => dispatchAction(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        optOutSystem: (system, status) => dispatchAction(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatchAction(fetchSystemDetails(system)),\n        addNotification: notification => dispatchAction(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}