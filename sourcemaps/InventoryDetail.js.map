{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js"],"names":["SystemCvesTableWithContext","noCves","props","entity","cves","context","heightAuto","cells","colSpan","title","filter","item","Object","prototype","hasOwnProperty","call","meta","length","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","undefined","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","map","cve","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","actions","systemCveTableRowActions","sortBy","createSortBy","key","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","apply","gridBreakPoint","PaginationWrapper","variant","Component","propTypes","any","array","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filterCategories","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","kebabItemEditStatus","showStatusModal","status_id","cve_status_id","isDisabled","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","SearchFilter","placeholder","intl","formatMessage","messages","searchFilterLabel","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","disabled","ToolbarItem","FilterChips","filterCveSearchTerm","bool","defaultProps","totalNumber","injectIntl","React","createContext","SystemCves","processError","error","status","parseInt","NoVulnerabilityData","GenericError","dataReload","cveList","page","reloadPage","pages","setState","state","page_size","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","Array","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","then","cveIds","payload","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","hasDifferentStatus","some","element","StatusModal","CvePairStatusModal","updateRef","inventories","type","queryObject","parse","location","search","errors","cveId","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","impact","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","component","TextVariants","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","func","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","onClick","inventoryKebabOptionsExclude","optOutSystemAction","notification","useState","inventoryList","useJustificationInput","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","inventory","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","useEffect","successNotification","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","onSave","setStatusParams","inventory_id","status_text","setSystemCveStatus","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","fieldId","label","cvePairStatusModalUseOverallCve","isChecked","onChange","checked","string"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} disabled={cves.data.length === 0} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';;\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, []);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    }, [checkboxState]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label={intl.formatMessage(messages.cvePairStatusModalUseOverallCve)}\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n"],"sourceRoot":""}