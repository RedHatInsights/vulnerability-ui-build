{"version":3,"sources":["webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/BaseKebab.js","webpack:///./src/Components/PresentationalComponents/DownloadReportKebab/KebabItems.js","webpack:///./src/Components/PresentationalComponents/Filters/FilterChips.js","webpack:///./src/Components/PresentationalComponents/Filters/Filters.js","webpack:///./src/Components/PresentationalComponents/Filters/SearchFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/PresentationalComponents/SelectAllCheckbox.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["BaseKebab","dropdownItems","disabled","props","useState","isOpen","setOpen","onSelect","toggle","onToggle","kebabState","isDisabled","isPlain","propTypes","array","bool","kebabItemDownloadJSON","downloadReport","key","component","onClick","messages","kebabExportAsJson","kebabItemDownloadCSV","kebabExportAsCsv","kebabItemEditBusinessRisk","showBusinessRiskModal","cves","kebabEditBusinessRisk","kebabItemEditStatus","showStatusModal","inventoryIds","kebabEditStatus","kebabItemToggleCvesDescription","toggleCveDescription","isExpanded","kebabCollapseCves","kebabExpandCves","FilterChips","filterValues","filterCategories","apply","localFilters","localFilterCategories","show_all","allowedFilters","map","urlParam","Object","entries","find","filter","includes","undefined","filterIsNotEmpty","length","Fragment","withToolbar","value","title","values","categoryName","toString","split","chip","mapChip","indexOf","label","newFilter","item","join","page","removeFilter","variant","resetParams","reduce","o","removeAllFilters","filterChipsClear","object","func","Filters","addFilter","param","type","filters","SearchFilter","placeholder","filterValue","updateFilterValue","debounce","applyFunction","useEffect","onChange","event","string","CvePairStatusModal","updateRef","inventories","hasDifferentStatus","intl","cveList","inventoryList","useJustificationInput","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","setProps","status_id","inventory","some","cve","getDefaultCheckboxState","checkboxState","setCheckboxState","useStatusSelect","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","id","cve_status_id","successNotification","formatMessage","cvePairStatusModalUpdateSuccessful","modalTitle","cvePairStatusModalTitle","count","items","onSave","cveIds","setStatusParams","inventory_id","parseInt","status_text","setSystemCveStatus","then","onSuccessNotification","gutter","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","systemName","b","chunks","fieldId","cvePairStatusModalUseOverallCheckbox","name","isChecked","checked","content","cvePairStatusModalUseOverallTooltip","className","color","style","verticalAlign","any","injectIntl","SelectAllCheckbox","setIsOpen","selectedItems","multiRow","selectedItemsArray","Array","from","selectedItemsCount","meta","data","checkboxlabel","Boolean","selectPageNumber","handleUnselectAll","selectorHandler","handleSelectAll","fetchResource","payload","page_size","total_items","selectNone","union","selectPage","selectAll","splitButtonItems","oneOfType","defaultProps","impact","SystemCvesTableWithContext","noCves","entity","context","heightAuto","cells","colSpan","prototype","hasOwnProperty","call","FilterNotFoundForSystem","EmptyCVEListForSystem","EmptyCVEList","handleOnSelect","isSelected","rowId","methods","cveName","selectCves","rowKey","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","has","selected","isLoading","colSize","rowSize","Table","aria-label","actions","systemCveTableRowActions","sortBy","createSortBy","sort","onCollapse","handleOnCollapse","onSort","direction","handleSortColumn","gridBreakPoint","PaginationWrapper","Component","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","filtersSecurityRules","filtersSeverity","filtersCVSSScore","filtersBusinessRisk","filtersStatus","filtersPublishDate","kebabOptions","ToolbarGroup","ops","searchFilterLabel","Remediation","systemId","ToolbarItem","filterCveSearchTerm","totalNumber","React","createContext","SystemCves","processError","error","status","NoVulnerabilityData","GenericError","dataReload","reloadPage","pages","setState","state","config","cvssEntry","CVSSOptions","cvss_filter","parseFloat","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isArray","visibleCves","visibleOpenedCves","createUrlParams","allParams","allowedParams","keys","forEach","queryString","qs","stringify","history","push","fetchData","system","DownloadReport","exec","fetchCveListBySystem","element","StatusModal","queryObject","parse","location","search","errors","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","publishDate","cvssBaseScore","businessRisk","Provider","Stack","StackItem","TextContent","Text","TextVariants","h2","systemCvesTableHeader","SystemCveTableToolbar","SystemCveTable","ConnectedSystemCves","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","TranslateSystemCves","customItnlProvider","Wrapper","IntlProvider","intProps","locale","navigator","language","slice","wrapper","intlProps","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","invalidSystem","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","inventoryOptOutSuccess","inventoryResumeAnalysisTitle","description","inventoryResumeAnalysisDescription","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","getStore","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","inventoryKebabOptionsResume","inventoryKebabOptionsExclude","optOutSystemAction","notification"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["/* eslint-disable camelcase */\nimport { Dropdown, KebabToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nconst BaseKebab = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    function handleOnKebabToggle(kebabState) {\n        setOpen(kebabState);\n    }\n\n    function handleOnKebabSelect() {\n        setOpen(!isOpen);\n    }\n\n    return (\n        <div>\n            <Dropdown\n                onSelect={handleOnKebabSelect}\n                toggle={<KebabToggle onToggle={handleOnKebabToggle} isDisabled={disabled} />}\n                isOpen={isOpen}\n                isPlain\n                dropdownItems={dropdownItems}\n                {...props}\n            />\n        </div>\n    );\n};\n\nBaseKebab.propTypes = {\n    dropdownItems: propTypes.array,\n    disabled: propTypes.bool\n};\n\nexport default BaseKebab;\n","/* eslint-disable camelcase */\nimport { DropdownItem } from '@patternfly/react-core';\nimport React from 'react';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nexport const kebabItemDownloadJSON = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"json\" component=\"button\" onClick={() => downloadReport('json')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsJson} />\n    </DropdownItem>\n);\n\nexport const kebabItemDownloadCSV = (downloadReport, { ...props }) => (\n    <DropdownItem key=\"csv\" component=\"button\" onClick={() => downloadReport('csv')} {...props}>\n        <FormattedMessage {...messages.kebabExportAsCsv} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditBusinessRisk = (showBusinessRiskModal, cves, { ...props }) => (\n    <DropdownItem key=\"editBusinessRisk\" component=\"button\" onClick={() => showBusinessRiskModal(cves)} {...props}>\n        <FormattedMessage {...messages.kebabEditBusinessRisk} />\n    </DropdownItem>\n);\n\nexport const kebabItemEditStatus = (showStatusModal, cves, inventoryIds,  { ...props }) => (\n    <DropdownItem key=\"editStatus\" component=\"button\" onClick={() => showStatusModal(cves, inventoryIds)} {...props}>\n        <FormattedMessage {...messages.kebabEditStatus} />\n    </DropdownItem>\n);\n\nexport const kebabItemToggleCvesDescription = (toggleCveDescription, isExpanded, { ...props }) => (\n    <DropdownItem key=\"toggleCveDescription\" component=\"button\" onClick={() => toggleCveDescription()} {...props}>\n        {isExpanded ? <FormattedMessage {...messages.kebabCollapseCves} /> : <FormattedMessage {...messages.kebabExpandCves} /> }\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystemAnalysis = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeVulnerabilityAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemExcludeSystem = (doOptOut, isOptOut,  { ...props }) => (\n    <DropdownItem key=\"do_opt_out\" component=\"button\" onClick={() => doOptOut()} {...props}>\n        {isOptOut ?\n            <FormattedMessage {...messages.kebabResumeAnalysis} /> :\n            <FormattedMessage {...messages.kebabExcludeAnalysis} />}\n    </DropdownItem>\n);\n\nexport const kebabItemToggleExcludeSystemDisplay = (handleOptOut, isOptedOut,  { ...props }) => (\n    <DropdownItem key=\"toggle_opt_out\" component=\"button\" onClick={() => handleOptOut()} {...props}>\n        {isOptedOut ?\n            <FormattedMessage {...messages.kebabHideExcludedSystems} />  :\n            <FormattedMessage {...messages.kebabShowExcludedSystems} />}\n    </DropdownItem>\n);\n","import React from 'react';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\n\nconst FilterChips = (props) => {\n    const { filterValues, filterCategories, apply } = props;\n    const localFilters = { ...filterValues };\n    const localFilterCategories = [...filterCategories];\n\n    delete localFilters.show_all;\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter[key].length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    const removeAllFilters = (allowedFilters) => {\n\n        const resetParams = allowedFilters.reduce((o, key) => ({ ...o, [key[0]]: undefined }), {});\n\n        apply({ ...resetParams, page: 1 });\n    };\n\n    const filterIsNotEmpty = (filter) => {\n        return filter && (!filter.includes(undefined) && !filter.includes(''));\n    };\n\n    const getFilters = () => {\n        const filters = localFilterCategories.map(\n            ({ urlParam }) => Object.entries(localFilters).find(([key]) => key === urlParam)\n        );\n\n        return filters.filter(filter => filterIsNotEmpty(filter));\n    };\n\n    const allowedFilters = getFilters();\n\n    return allowedFilters.length > 0 &&\n        <React.Fragment>\n            <ChipGroup withToolbar>\n                {allowedFilters.map(([key, value]) => {\n                    const { title, urlParam, values } = localFilterCategories.find(({ urlParam }) => urlParam === key);\n                    return (\n                        <ChipGroupToolbarItem key={key} categoryName={title}>\n                            { value && value.toString().split(',').map(chip => {\n                                const mapChip = values.find(({ value }) => value.indexOf(chip) !== -1);\n                                let { value, label } = mapChip ? { ...mapChip } : { value: key, label: chip };\n                                return (\n                                    <Chip key={value} onClick={() => removeFilter(urlParam, chip)}>\n                                        { label }\n                                    </Chip>\n                                );\n                            }) }\n                        </ChipGroupToolbarItem>\n                    );\n                }) }\n            </ChipGroup>\n            <Button variant=\"link\" onClick={() => removeAllFilters(allowedFilters)}>\n                <FormattedMessage {...messages.filterChipsClear} />\n            </Button>\n        </React.Fragment>;\n};\n\nFilterChips.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default FilterChips;\n","import { FilterDropdown } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\n\nconst Filters = props => {\n    const { filterValues, filterCategories, apply } = props;\n\n    const addFilter = (param, value, type) => {\n        let newFilter;\n        if (type === 'radio' || param === 'show_all') {\n            newFilter = { [param]: value };\n        } else {\n            newFilter = filterValues[param] ? { [param]: `${filterValues[param]},${value}` } : { [param]: value };\n        }\n\n        apply({ ...newFilter, page: 1 });\n    };\n\n    const removeFilter = (key, value) => {\n        const values = value.split(',');\n        const newFilter = {\n            [key]: filterValues[key]\n            .split(',')\n            .filter(item => !values.includes(item))\n            .join(',')\n        };\n\n        if (newFilter.length !== 0) {\n            apply({ ...newFilter, page: 1 });\n        } else {\n            const filter = { ...filterValues, [key]: undefined };\n            apply({ ...filter, page: 1 });\n        }\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <FilterDropdown\n                    addFilter={addFilter}\n                    removeFilter={removeFilter}\n                    filters={filterValues}\n                    filterCategories={filterCategories}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nFilters.propTypes = {\n    filterValues: propTypes.object,\n    filterCategories: propTypes.array,\n    apply: propTypes.func\n};\n\nexport default Filters;\n","import { ConditionalFilter } from '@redhat-cloud-services/frontend-components';\nimport debounce from 'lodash/debounce';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect }  from 'react';\n\nconst SearchFilter = props => {\n    const { placeholder, value, apply } = props;\n    const [filterValue, updateFilterValue] = useState(value);\n\n    const [applyFunction] = useState(() => debounce(filter => {\n        if (filter !== undefined) { apply({ filter, page: 1 }); }\n    }, 400));\n\n    useEffect(() => applyFunction(filterValue), [filterValue, applyFunction]);\n    useEffect(() => updateFilterValue(value), [value]);\n\n    return (\n        <ConditionalFilter\n            placeholder={placeholder}\n            onChange={(event, value) => updateFilterValue(value)}\n            value={filterValue}\n        />\n    );\n};\n\nSearchFilter.propTypes = {\n    placeholder: propTypes.string,\n    value: propTypes.string,\n    apply: propTypes.func\n};\n\nexport default SearchFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false, intl, type }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            setSelectProps({ isDisabled: true });\n            setJustificationProps({ disabled: true });\n        }\n    }, [checkboxState, setSelectProps, setJustificationProps]);\n\n    useEffect(() => {\n        setStatusId(getCvestatus());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [checkboxState, setStatusId]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        switch (type) {\n            case 'systemsExposed' : {\n                return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';\n            }\n\n            case 'systemDetail': {\n                if (cveList) {\n                    if (checkboxState && !hasDifferentStatus) { return cveList[0].cve_status_id || 0;}\n                    else if (hasDifferentStatus) {return '0';}\n                    else if (!checkboxState && !hasDifferentStatus) {return cveList[0].status_id;}\n                    else {return '0';}\n                } else {return '0';}\n            }\n\n            default: {\n                return '0';\n            }\n        }\n\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        setCheckboxState(checked);\n        setSelectProps({ isDisabled: checked });\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps({ disabled: checked });\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: intl.formatMessage(messages.cvePairStatusModalUpdateSuccessful)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cves.length });\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                {hasDifferentStatus &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0].id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryIds[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={checkboxState}\n                                        onChange={handleCheckboxChange}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool,\n    intl: propTypes.any,\n    type: propTypes.string\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import { Checkbox, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport union from 'lodash/union';\nimport messages from '../../Messages';\nimport { injectIntl } from 'react-intl';\n\nconst SelectAllCheckbox = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const { selectedItems, items, multiRow } = props;\n    const selectedItemsArray = Array.from(selectedItems); // we might get array or set and there's no common method for size\n    const selectedItemsCount = selectedItemsArray && selectedItemsArray.length;\n    const { meta, data } = items;\n    const checkboxlabel = Boolean(selectedItemsCount) && `${selectedItemsCount} selected`;\n    const selectPageNumber = multiRow ? data.length / 2 : data.length;\n\n    const handleOnToggle = isOpen => {\n        setIsOpen(isOpen);\n    };\n\n    const handleOnSelect = () => {\n        setIsOpen(!isOpen);\n    };\n\n    const handleSelectPage = () => {\n        const { items: { data }, selectorHandler } = props;\n        const items = union(data.filter(item => item.id).map(item => item.id), selectedItemsArray);\n        selectorHandler(true, items);\n    };\n\n    const handleUnselectAll = () => {\n        const { selectorHandler } = props;\n        selectorHandler(false, undefined);\n    };\n\n    const handleSelectAll = () => {\n        const { items: { meta }, selectorHandler, fetchResource } = props;\n        // eslint-disable-next-line camelcase\n        let { payload } = fetchResource && fetchResource({ page_size: meta.total_items, page: 1 });\n        payload &&\n            payload.then(({ data: response }) => {\n                const items = response.map(item => item.id);\n                selectorHandler(true, items);\n            });\n    };\n\n    const handleOnCheckboxChange = () => {\n        if (selectedItemsCount === 0) {\n            handleSelectAll();\n        } else {\n            handleUnselectAll();\n        }\n    };\n\n    const dropdownItems = [\n        <DropdownItem key=\"none\" onClick={handleUnselectAll}>\n            {props.intl.formatMessage(messages.selectNone)}\n        </DropdownItem>,\n        <DropdownItem key=\"page\" onClick={handleSelectPage} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectPage, { count: selectPageNumber })}\n        </DropdownItem>,\n        <DropdownItem key=\"all\" onClick={handleSelectAll} isDisabled={meta.total_items === 0}>\n            {props.intl.formatMessage(messages.selectAll, { count: meta.total_items })}\n        </DropdownItem>\n    ];\n\n    return (\n        <Dropdown\n            onSelect={handleOnSelect}\n            toggle={\n                <DropdownToggle\n                    splitButtonItems={[\n                        <Checkbox\n                            id={'selectAllcheckbox'}\n                            key={'selectAllcheckbox'}\n                            isChecked={selectedItemsCount === 0 ? false : meta.total_items === selectedItemsCount ? true : null}\n                            onChange={handleOnCheckboxChange}\n                        />,\n                        checkboxlabel\n                    ]}\n                    onToggle={handleOnToggle}\n                    isDisabled={meta.total_items === 0 && selectedItemsCount === 0}\n                />\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n        />\n    );\n};\n\nSelectAllCheckbox.propTypes = {\n    selectorHandler: propTypes.func,\n    fetchResource: propTypes.func,\n    selectedItems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    items: propTypes.object,\n    multiRow: propTypes.bool,\n    intl: propTypes.any\n};\n\nSelectAllCheckbox.defaultProps = {\n    impact: 'Unknown',\n    selectedItems: [],\n    items: {},\n    multiRow: false\n};\n\nexport default injectIntl(SelectAllCheckbox);\n","import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        let emptyComponent = (filterFields.length !== 0)\n            ? FilterNotFoundForSystem : entity ? EmptyCVEListForSystem : (cves.data.length === 0) ? EmptyCVEList : undefined;\n\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: 8 },\n                    title: (\n                        emptyComponent\n                    )\n                }\n            ]\n        }]);\n\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            cells={header}\n                            rows  ={(cves.data.length === 0)  ? this.noCves() : rows}\n                            onSelect ={!(cves.data.length === 0) ? this.handleOnSelect : undefined}\n                            actions ={!(cves.data.length === 0) ? systemCveTableRowActions(methods) : undefined}\n                            sortBy ={!(cves.data.length === 0) ?\n                                createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort) : undefined}\n                            onCollapse={!(cves.data.length === 0) ?\n                                (event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen) : undefined}\n                            onSort={!(cves.data.length === 0) ?\n                                (event, key, direction) =>\n                                    handleSortColumn(\n                                        key,\n                                        direction,\n                                        [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                        cves.meta.sort,\n                                        methods.apply\n                                    ) : undefined\n                            }\n                            gridBreakPoint={'grid-lg'}\n                        >\n                            <Fragment>\n                                <TableHeader />\n                                <TableBody />\n                            </Fragment>\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveSearchTerm,\n    filtersSecurityRules\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\nimport messages from '../../../Messages';\nimport { injectIntl } from 'react-intl';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object,\n        intl: propTypes.any\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [\n            filtersSecurityRules,\n            filtersSeverity,\n            filtersCVSSScore,\n            filtersBusinessRisk,\n            filtersStatus,\n            filtersPublishDate\n        ];\n\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({\n                    id: item,\n                    ...cves.data.filter(cve => item === cve.id)\n                    .map(item => ({ status_id: item.status_id, cve_status_id: item.cve_status_id }))[0]\n                })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(\n                this.handleCveDescription,\n                expandCveDescription,\n                { isDisabled: cves.data.length === 0 }\n            ),\n            kebabItemDownloadJSON(methods.downloadReport, { isDisabled: cves.data.length === 0 }),\n            kebabItemDownloadCSV(methods.downloadReport, { isDisabled: cves.data.length === 0 })\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder={this.props.intl.formatMessage(messages.searchFilterLabel)}\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab\n                            dropdownItems={kebabOptions}\n                            disabled={cves.data.length === 0 && selectedCvesCount === 0}\n                        />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveSearchTerm, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default injectIntl(SystemCveToolbar);\n","/* eslint-disable camelcase */\nimport { Stack, StackItem, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\nimport messages from '../../../Messages';\nimport { injectIntl, IntlProvider } from 'react-intl';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nexport const CVETableContext = React.createContext({});\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        if (!Array.isArray(cveNames)) {\n            const visibleCves = this.props.cveList.data;\n            const visibleOpenedCves = visibleCves.filter(cve => openedCves.has(cve.id));\n\n            isExpanded = (visibleCves.length / 2 === visibleOpenedCves.length);\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id',\n            'security_rule'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const { entity } = this.props;\n        const params = { ...this.state, system: entity.id };\n        DownloadReport.exec(fetchCveListBySystem, params, format, 'system-cves');\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                    type={'systemDetail'}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n        const header = [\n            {\n                title: this.props.intl.formatMessage(messages.cveId),\n                key: 'synopsis',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')],\n                cellFormatters: [expandable]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.publishDate),\n                key: 'public_date',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.impact),\n                key: 'impact',\n                transforms: [sortable, classNames('col-width-10')],\n                columnTransforms: [classNames('no-wrap')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.cvssBaseScore),\n                key: 'cvss_score',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.businessRisk),\n                key: 'business_risk',\n                transforms: [sortable, classNames('col-width-10')]\n            },\n            {\n                title: this.props.intl.formatMessage(messages.status),\n                key: 'status',\n                transforms: [sortable, classNames('col-width-10')]\n            }\n        ];\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <TextContent>\n                                <Text component={TextVariants.h2}>\n                                    {this.props.intl.formatMessage(messages.systemCvesTableHeader)}\n                                </Text>\n                            </TextContent>\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport const ConnectedSystemCves = withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(SystemCves)\n    )\n);\n\nconst TranslateSystemCves = ({ customItnlProvider, ...props }) => {\n    const {\n        Wrapper,\n        intlProps\n    } = customItnlProvider ? {\n        Wrapper: IntlProvider,\n        intProps: {\n            locale: navigator.language.slice(0, 2),\n            messages\n        }\n    } : {\n        wrapper: Fragment,\n        intlProps: {}\n    };\n    return <Wrapper {...intlProps} >\n        <ConnectedSystemCves { ...props } />\n    </Wrapper>;\n};\n\nTranslateSystemCves.propTypes = {\n    customItnlProvider: propTypes.bool\n};\n\nTranslateSystemCves.defaultProps = {\n    customItnlProvider: false\n};\n\nexport default TranslateSystemCves;\n","import propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport { ConnectedSystemCves } from '../SystemCves/SystemCves';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';;\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || <FormattedMessage {...messages.invalidSystem} />, isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return null;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <ConnectedSystemCves entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func,\n        intl: propTypes.any\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector(ReducerRegistry.getStore()).InventoryDetailHead,\n            InventoryBody: inventoryConnector(ReducerRegistry.getStore()).AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryOptOutSuccess)\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: this.props.intl.formatMessage(messages.inventoryResumeAnalysisTitle),\n                    description: this.props.intl.formatMessage(messages.inventoryResumeAnalysisDescription)\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title='' showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsResume),\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: this.props.intl.formatMessage(messages.inventoryKebabOptionsExclude),\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    injectIntl(\n        connect(\n            mapStateToProps,\n            mapDispatchToProps\n        )(InventoryDetail)\n    )\n);\n"],"sourceRoot":""}