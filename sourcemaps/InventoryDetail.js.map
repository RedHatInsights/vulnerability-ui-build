{"version":3,"sources":["webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTable.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCveTableToolbar.js","webpack:///./src/Components/SmartComponents/SystemCves/SystemCves.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js","webpack:///./node_modules/@patternfly/react-table/dist/esm/index.js","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/index.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js"],"names":["SystemCvesTableWithContext","noCves","props","entity","cves","context","filter","item","Object","prototype","hasOwnProperty","call","meta","length","FilterNotFoundForSystem","EmptyCVEListForSystem","data","EmptyCVEList","handleOnSelect","event","isSelected","rowId","methods","cveName","id","selectCves","rowKey","isOpen","this","expandCveDescription","params","openCves","header","selectedCves","openedCves","rows","map","cve","has","selected","isLoading","colSize","rowSize","Table","aria-label","onSelect","cells","actions","systemCveTableRowActions","sortBy","createSortBy","key","sort","onSort","direction","handleSortColumn","apply","gridBreakPoint","onCollapse","handleOnCollapse","PaginationWrapper","variant","Component","propTypes","any","array","object","SystemCvesTable","CVETableContext","Consumer","SystemCveToolbarWithContext","handleCveDescription","showRemediationButton","selectedCvesCount","size","undefined","filterCategories","filtersCVSSScore","filtersSeverity","filtersBusinessRisk","filtersPublishDate","filtersStatus","kebabOptions","kebabItemEditStatus","showStatusModal","status_id","isDisabled","kebabItemToggleCvesDescription","kebabItemDownloadJSON","downloadReport","kebabItemDownloadCSV","Fragment","className","ToolbarGroup","SelectAllCheckbox","selectedItems","selectorHandler","items","fetchResource","ops","multiRow","SearchFilter","placeholder","value","Filters","filterValues","Remediation","systemId","BaseKebab","dropdownItems","ToolbarItem","FilterChips","filterCveId","bool","defaultProps","totalNumber","SystemCveToolbar","React","createContext","title","transforms","sortable","classNames","columnTransforms","cellFormatters","expandable","SystemCves","processError","error","status","parseInt","NoVulnerabilityData","GenericError","dataReload","cveList","page","reloadPage","pages","setState","state","page_size","config","cvssEntry","CVSSOptions","find","cvss_filter","values","split","parseFloat","from","to","cvss_from","cvss_to","publicEntry","PublicDateOptions","publish_date","public_from","format","public_to","sendRequest","cveNames","updateStateSet","Set","isExpanded","createUrlParams","allParams","allowedParams","keys","forEach","includes","queryString","qs","stringify","history","push","fetchData","system","then","cveIds","payload","fetchCveListBySystem","Number","MAX_SAFE_INTEGER","data_format","response","JSON","downloadFile","Date","toISOString","hasDifferentStatus","Array","some","element","StatusModal","CvePairStatusModal","updateRef","inventories","queryObject","parse","location","search","errors","Provider","Stack","StackItem","SystemCveTableToolbar","SystemCveTable","func","withRouter","connect","SystemCvesStore","entityDetails","createCveListBySystem","dispatch","cvePromise","SystemDetail","isOptOut","optOutSystemHandler","setHeader","breadcrumbs","paths","vulnerabilities","systems","display_name","isActive","buttonAction","opt_out","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","action","type","FETCH_SYSTEM_DETAILS","LOAD_ENTITY_FULFILLED","activeApps","name","component","LOAD_ENTITY_REJECTED","InventoryDetail","checkItem","newList","systemList","toggleLinkHover","linkHovered","optOutSystem","inventoryId","fetchSystemDetails","addNotification","description","match","removeListener","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","pfReactTable","inventoryConnector","mergeWithEntities","mergeWithDetail","ReducerRegistry","register","InventoryHeader","InventoryDetailHead","InventoryBody","AppInfo","systemDetails","Page","VulnerabilityHeader","showTabs","hideBack","onClick","optOutSystemAction","notification","useState","inventoryList","useStatusSelect","toString","getCvestatus","getDefaultStatus","StatusSelect","statusId","setStatusId","setSelectProps","setProps","useJustificationInput","justification","getCveJustification","getDefaultLabel","JustificationInput","setJustification","setJustificationProps","inventory","getDefaultCheckboxState","checkboxState","setCheckboxState","inventoryIds","useEffect","modalTitle","onSave","setStatusParams","inventory_id","status_text","setSystemCveStatus","onSuccessNotification","gutter","isInline","fieldId","label","isChecked","onChange","checked"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { Table, TableBody, TableHeader } from '@patternfly/react-table';\nimport { SkeletonTable, TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { EmptyCVEList, EmptyCVEListForSystem, FilterNotFoundForSystem } from '../../../Helpers/constants';\nimport { systemCveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCvesTableWithContext extends Component {\n    static propTypes = {\n        context: propTypes.any,\n        header: propTypes.array,\n        entity: propTypes.object\n    };\n\n    noCves = () => {\n        const { entity, context } = this.props;\n        const { cves } = context;\n        const filterFields = ['filter', 'cvss_from', 'cvss_to', 'public_from', 'public_to', 'impact', 'status_id'].filter(\n            item => Object.prototype.hasOwnProperty.call(cves.meta, item) && cves.meta[item]\n        );\n        if (filterFields.length !== 0) {\n            return FilterNotFoundForSystem;\n        } else if (entity) {\n            return EmptyCVEListForSystem;\n        } else if (cves.data.length === 0) {\n            return EmptyCVEList;\n        }\n    };\n\n    handleOnCollapse(event, rowKey, isOpen) {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const cveName = cves.data[rowKey] && cves.data[rowKey].id;\n        methods.openCves(isOpen, cveName, expandCveDescription);\n    }\n\n    handleOnSelect = (event, isSelected, rowId) => {\n        const { context } = this.props;\n        const { cves, methods } = context;\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    render() {\n        const { context, header } = this.props;\n        const { params, cves, methods } = context;\n        const { selectedCves, openedCves } = params;\n        const rows = cves.data\n        .map(cve => (selectedCves.has(cve.id) && { ...cve, selected: true }) || cve)\n        .map(cve => (openedCves.has(cve.id) && { ...cve, isOpen: true }) || cve);\n\n        return (\n            <Fragment>\n                {!cves.isLoading ? (\n                    <Fragment>\n                        <Table\n                            aria-label={'Vulnerability CVE table'}\n                            onSelect={this.handleOnSelect}\n                            cells={header}\n                            rows={rows}\n                            actions={systemCveTableRowActions(methods)}\n                            sortBy={createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], cves.meta.sort)}\n                            onSort={(event, key, direction) =>\n                                handleSortColumn(\n                                    key,\n                                    direction,\n                                    [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                    cves.meta.sort,\n                                    methods.apply\n                                )\n                            }\n                            gridBreakPoint={'grid-lg'}\n                            onCollapse={(event, rowKey, isOpen) => this.handleOnCollapse(event, rowKey, isOpen)}\n                        >\n                            {(!cves.isLoading && cves.data.length === 0 && this.noCves()) || (\n                                <Fragment>\n                                    <TableHeader />\n                                    <TableBody />\n                                </Fragment>\n                            )}\n                        </Table>\n                        <TableToolbar>\n                            <PaginationWrapper variant=\"bottom\" meta={cves.meta} apply={methods.apply} />\n                        </TableToolbar>\n                    </Fragment>\n                ) : (\n                    <SkeletonTable colSize={2} rowSize={20} />\n                )}\n            </Fragment>\n        );\n    }\n}\n\nconst SystemCvesTable = props => (\n    <CVETableContext.Consumer>{context => <SystemCvesTableWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCvesTable;\n","/* eslint-disable camelcase */\nimport { ToolbarGroup, ToolbarItem } from '@patternfly/react-core';\nimport { TableToolbar } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n    filtersBusinessRisk,\n    filtersCVSSScore,\n    filtersPublishDate,\n    filtersSeverity,\n    filtersStatus,\n    filterCveId\n} from '../../../Helpers/constants';\nimport BaseKebab from '../../PresentationalComponents/DownloadReportKebab/BaseKebab';\nimport {\n    kebabItemDownloadCSV,\n    kebabItemDownloadJSON,\n    kebabItemEditStatus,\n    kebabItemToggleCvesDescription\n} from '../../PresentationalComponents/DownloadReportKebab/KebabItems';\nimport FilterChips from '../../PresentationalComponents/Filters/FilterChips';\nimport Filters from '../../PresentationalComponents/Filters/Filters';\nimport SearchFilter from '../../PresentationalComponents/Filters/SearchFilter';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport Remediation from '../Remediation/Remediation';\nimport SelectAllCheckbox from '../../PresentationalComponents/SelectAllCheckbox';\nimport { CVETableContext } from './SystemCves';\n\nclass SystemCveToolbarWithContext extends Component {\n    static propTypes = {\n        showRemediationButton: propTypes.bool,\n        entity: propTypes.object,\n        context: propTypes.object\n    };\n\n    static defaultProps = {\n        showRemediationButton: false,\n        totalNumber: 0,\n        apply: () => undefined,\n        downloadReport: () => undefined\n    };\n\n    handleCveDescription = () => {\n        const { context } = this.props;\n        const { cves, methods, params } = context;\n        const { expandCveDescription } = params;\n        const isOpen = !expandCveDescription;\n        const openedCves = !expandCveDescription ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(isOpen, openedCves, !expandCveDescription);\n    }\n\n    render() {\n        const { showRemediationButton, entity, context } = this.props;\n        const { cves, params, methods } = context;\n        const { selectedCves, expandCveDescription, filter } = params;\n        const selectedCvesCount =\n            this.props.showRemediationButton === true ? (selectedCves && selectedCves.size) || 0 : undefined;\n        const filterCategories = [filtersCVSSScore, filtersSeverity, filtersBusinessRisk, filtersPublishDate, filtersStatus];\n        const kebabOptions = [\n            kebabItemEditStatus(\n                methods.showStatusModal,\n                [...selectedCves].map(item => ({ id: item, status_id: '0' })),\n                [],\n                { isDisabled: !selectedCvesCount }\n            ),\n            kebabItemToggleCvesDescription(this.handleCveDescription, expandCveDescription),\n            kebabItemDownloadJSON(methods.downloadReport),\n            kebabItemDownloadCSV(methods.downloadReport)\n        ];\n        return (\n            <React.Fragment>\n                <TableToolbar className=\"space-between-toolbar-items\">\n                    <ToolbarGroup className=\"vulnerability-toolbar-spacing\">\n                        {showRemediationButton && (\n                            <SelectAllCheckbox\n                                selectedItems={selectedCves}\n                                selectorHandler={methods.selectCves}\n                                items={cves}\n                                fetchResource={ops => methods.fetchResource({ ...params, ...ops })}\n                                multiRow\n                            />\n                        )}\n                        <SearchFilter\n                            placeholder=\"Find a CVE...\"\n                            value={filter}\n                            apply={methods.apply}\n\n                        />\n                        <Filters\n                            filterValues={params}\n                            filterCategories={filterCategories}\n                            apply={methods.apply}\n                        />\n                        {showRemediationButton && <Remediation systemId={entity.id} selectedCves={selectedCves} />}\n                        <BaseKebab dropdownItems={kebabOptions} />\n                    </ToolbarGroup>\n\n                    <ToolbarGroup>\n                        <PaginationWrapper apply={methods.apply} meta={cves.meta} />\n                    </ToolbarGroup>\n                </TableToolbar>\n                <TableToolbar className=\"pf-u-pt-0\">\n                    <ToolbarGroup>\n                        <ToolbarItem>\n                            <FilterChips\n                                filterValues={params}\n                                filterCategories={[filterCveId, ...filterCategories]}\n                                apply={methods.apply}\n                            />\n                        </ToolbarItem>\n                    </ToolbarGroup>\n                </TableToolbar>\n            </React.Fragment>\n        );\n    }\n}\n\nconst SystemCveToolbar = props => (\n    <CVETableContext.Consumer>{context => <SystemCveToolbarWithContext context={context} {...props} />}</CVETableContext.Consumer>\n);\nexport default SystemCveToolbar;\n","/* eslint-disable camelcase */\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport { classNames, expandable, sortable } from '@patternfly/react-table';\nimport { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/files/helpers';\nimport propTypes from 'prop-types';\nimport qs from 'query-string';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { CVSSOptions, GenericError, NoVulnerabilityData, PublicDateOptions } from '../../../Helpers/constants';\nimport { updateStateSet } from '../../../Helpers/MiscHelper';\nimport { createCveListBySystem } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListBySystem } from '../../../Store/Actions/Actions';\nimport '../CVEs/vulnerabilities.scss';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport SystemCveTable from './SystemCveTable';\nimport SystemCveTableToolbar from './SystemCveTableToolbar';\n\nexport const CVETableContext = React.createContext({});\n\nconst header = [\n    {\n        title: 'CVE ID',\n        key: 'synopsis',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')],\n        cellFormatters: [expandable]\n    },\n    {\n        title: 'Publish date',\n        key: 'public_date',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'CVSS base score',\n        key: 'cvss_score',\n        transforms: [sortable, classNames('col-width-10')]\n    },\n    {\n        title: 'Impact',\n        key: 'impact',\n        transforms: [sortable, classNames('col-width-10')],\n        columnTransforms: [classNames('no-wrap')]\n    },\n\n    { title: 'Business risk', key: 'business_risk', transforms: [sortable, classNames('col-width-10')] },\n    { title: 'Status', key: 'status', transforms: [sortable, classNames('col-width-10')] }\n];\n\nclass SystemCves extends Component {\n    static propTypes = {\n        entity: propTypes.object,\n        cveList: propTypes.any,\n        fetchData: propTypes.func,\n        history: propTypes.object,\n        location: propTypes.object\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedCves: new Set(),\n            openedCves: new Set(),\n            StatusModal: () => null,\n            expandCveDescription: false\n        };\n    }\n\n    componentDidMount() {\n        const defaultParams = { sort: '-public_date' };\n        const queryObject = qs.parse(this.props.location.search);\n        this.apply({ ...defaultParams, ...queryObject });\n    }\n\n    processError = error => {\n        const { status } = error;\n        const statusCode = parseInt(status);\n        if (statusCode === 404 && this.props.entity) {\n            return NoVulnerabilityData;\n        } else {\n            return GenericError;\n        }\n    };\n\n    dataReload = () => {\n        const { meta, data } = this.props.cveList;\n        const { page, pages } = meta;\n        const reloadPage = page === pages && data.length / 2 === 1 ? 1 : page;\n\n        this.setState(\n            {\n                ...this.state,\n                page: reloadPage,\n                page_size: meta.page_size\n            },\n            this.apply\n        );\n    }\n\n    apply = (config = {}) => {\n\n        if (Object.prototype.hasOwnProperty.call(config, 'cvss_filter')) {\n            let cvssEntry = CVSSOptions.find(item => item.value === config.cvss_filter);\n\n            if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter !== 'undefined') {\n                let values = config.cvss_filter.split(/[^0-9]+/).filter(item => parseFloat(item));\n                cvssEntry = { from: values[0], to: values[1] };\n            } else if (typeof cvssEntry === 'undefined' && typeof config.cvss_filter === 'undefined') {\n                cvssEntry = { from: undefined, to: undefined };\n            }\n\n            config.cvss_from = cvssEntry.from;\n            config.cvss_to = cvssEntry.to;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(config, 'publish_date')) {\n            let publicEntry = PublicDateOptions.find(item => item.value === config.publish_date);\n\n            if (typeof publicEntry !== 'undefined') {\n                config.public_from = publicEntry.from && publicEntry.from.format('YYYY-MM-DD');\n                config.public_to = publicEntry.to && publicEntry.to.format('YYYY-MM-DD');\n            } else {\n                config.public_from = undefined;\n                config.public_to = undefined;\n                config.publish_date = undefined;\n            }\n        }\n\n        this.setState({ ...this.state, ...config }, this.sendRequest);\n    };\n\n    selectCves = (isSelected, cveNames) => {\n        let { selectedCves } = this.state;\n        if (cveNames) {\n            selectedCves = updateStateSet(selectedCves, cveNames, isSelected);\n        } else {\n            selectedCves = new Set();\n        }\n\n        this.setState({ ...this.state, selectedCves: new Set(selectedCves) });\n    };\n\n    // @TODO System has different mechanism to store opened, unify the mechanism with CVE\n    openCves = (isOpen, cveNames, isExpanded) => {\n        let { openedCves, expandCveDescription } = this.state;\n\n        // if expanded, collapse rows\n        if (expandCveDescription && !cveNames.length) {\n            openedCves = cveNames;\n        }\n\n        if (cveNames) {\n            openedCves = updateStateSet(openedCves, cveNames, isOpen);\n        } else {\n            openedCves = new Set();\n        }\n\n        this.setState({ ...this.state, openedCves: new Set(openedCves), expandCveDescription: isExpanded });\n    };\n\n    createUrlParams = allParams => {\n        const params = { ...allParams };\n        const allowedParams = [\n            'cvss_filter',\n            'publish_date',\n            'filter',\n            'limit',\n            'offset',\n            'page',\n            'page_size',\n            'sort',\n            'impact',\n            'business_risk_id',\n            'status_id'\n        ];\n        Object.keys(allParams).forEach(\n            key =>\n                (params[key] === undefined || params[key] === '' || !allowedParams.includes(key) || params[key] === false) &&\n                delete params[key]\n        );\n        const queryString = qs.stringify(params);\n        this.props.history.push('?' + queryString);\n    };\n\n    sendRequest = () => {\n        const { fetchData, entity } = this.props;\n        const { expandCveDescription } = this.state;\n        fetchData && fetchData({ ...this.state, system: entity.id })\n        .then(({ data }) => {\n            if (expandCveDescription) {\n                const cveIds = data && data.map(cve => cve.id);\n                this.openCves(true, cveIds, expandCveDescription);\n            }\n        });\n        this.createUrlParams(this.state);\n    };\n\n    downloadReport = format => {\n        const params = { ...this.state };\n        const { entity } = this.props;\n        let { payload } = fetchCveListBySystem({\n            ...params,\n            page_size: Number.MAX_SAFE_INTEGER,\n            data_format: format,\n            page: 1,\n            system: entity.id\n        });\n\n        payload &&\n            payload.then(({ data: response }) => {\n                const data = format === 'json' ? JSON.stringify(response) : response;\n                return downloadFile(data, `vulnerability_cves-${new Date().toISOString()}`, format);\n            });\n    };\n\n    showStatusModal = cves => {\n\n        let hasDifferentStatus;\n        if (cves.length > 1) {\n            const selectedCves = Array.from(this.props.cveList.data.filter(cve => cves.some(element => element.id === cve.id)));\n\n            hasDifferentStatus = selectedCves.some(element => {\n                return selectedCves.filter(cve => cve.status_id === element.status_id).length > 1 ? false : true;\n            });\n        }\n\n        this.setState({\n            StatusModal: () => (\n                <CvePairStatusModal\n                    cves={cves}\n                    updateRef={this.dataReload}\n                    inventories={[{ id: this.props.entity && this.props.entity.id }]}\n                    hasDifferentStatus={hasDifferentStatus}\n                />\n            )\n        });\n    };\n\n    render() {\n        const { cveList, entity } = this.props;\n        const { apply, downloadReport, selectCves, openCves, showStatusModal } = this;\n        const { StatusModal } = this.state;\n        const cves = cveList;\n        const { errors } = cves;\n\n        if (!errors) {\n            return (\n                <CVETableContext.Provider\n                    value={{\n                        cves,\n                        params: this.state,\n                        methods: {\n                            apply,\n                            downloadReport,\n                            selectCves,\n                            openCves,\n                            showStatusModal,\n                            fetchResource: params => fetchCveListBySystem({ ...params, system: entity.id })\n                        }\n                    }}\n                >\n                    <StatusModal />\n\n                    <Stack>\n                        <StackItem>\n                            <SystemCveTableToolbar showRemediationButton entity={entity} />\n                        </StackItem>\n                        <StackItem>\n                            <SystemCveTable header={header} entity={entity} />\n                        </StackItem>\n                    </Stack>\n                </CVETableContext.Provider>\n            );\n        } else {\n            return this.processError(errors);\n        }\n    }\n}\n\nfunction mapStateToProps({ SystemCvesStore, entityDetails: { entity } }) {\n    return {\n        cveList: SystemCvesStore && createCveListBySystem(entity.id, SystemCvesStore.cveList),\n        entity\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: params => {\n            const cvePromise = fetchCveListBySystem(params);\n            dispatch(cvePromise);\n            return cvePromise.payload;\n        }\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemCves)\n);\n","import { InvalidObject } from '@redhat-cloud-services/frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { SystemExludedFromAnalysis } from '../../../Helpers/constants';\nimport { setHeader } from '../../../Store/Actions/Actions';\nimport { paths } from '../../../Utilities/Routes';\nimport Vulnerabilities from '../SystemCves/SystemCves';\n\nclass SystemDetail extends React.Component {\n    static propTypes = {\n        setHeader: propTypes.func,\n        entity: propTypes.object,\n        isOptOut: propTypes.bool,\n        optOutSystemHandler: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity, isOptOut, optOutSystemHandler } = this.props;\n        this.props.setHeader({\n            breadcrumbs: [\n                { title: paths.vulnerabilities.title, to: paths.vulnerabilities.to },\n                { title: paths.systems.title, to: paths.systems.to },\n                { title: (entity && entity.display_name) || 'Invalid System', isActive: true }\n            ]\n        });\n\n        if (!entity) {\n            return <InvalidObject />;\n        }\n\n        if (!isOptOut) {\n            return (\n                <React.Fragment>\n                    <Vulnerabilities entity={entity.id} />\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <SystemExludedFromAnalysis buttonAction={() => optOutSystemHandler(false)} />\n                </React.Fragment>\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setHeader: header => dispatch(setHeader(header))\n    };\n};\n\nfunction mapStateToProps({ entityDetails: { entity, opt_out: isOptOut } }) {\n    return {\n        entity,\n        isOptOut\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(SystemDetail)\n);\n","import React from 'react';\nimport SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\nimport { FETCH_SYSTEM_DETAILS } from '../ActionTypes';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = (INVENTORY_ACTION_TYPES, optOutSystemHandler) => (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_SYSTEM_DETAILS + '_FULFILLED':\n            return {\n                ...state,\n                ...action.payload.data\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail optOutSystemHandler={optOutSystemHandler} />\n                    }\n                ]\n            };\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_REJECTED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [\n                    {\n                        title: 'Vulnerabilities',\n                        name: 'vulnerabilities',\n                        component: () => <SystemDetail />\n                    }\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Page } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications';\nimport * as pfReactTable from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { fetchSystemDetails, optOutSystemAction } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport VulnerabilityHeader from '../VulnerabilityHeader/VulnerabilityHeader';\n\nclass InventoryDetail extends React.Component {\n    static propTypes = {\n        fetchSystemDetails: propTypes.func,\n        systemDetails: propTypes.object,\n        optOutSystem: propTypes.func,\n        match: propTypes.object,\n        addNotification: propTypes.func\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId,\n            removeListener: () => {},\n            linkHovered: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchSystemDetails(this.state.inventoryId);\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons,\n            pfReactTable\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES, this.optOutSystem))\n        });\n\n        this.setState({\n            InventoryHeader: inventoryConnector().InventoryDetailHead,\n            InventoryBody: inventoryConnector().AppInfo\n        });\n        this.state.removeListener();\n    }\n\n    checkItem = (key, value) => {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    };\n\n    toggleLinkHover = value => {\n        this.setState({ ...this.state, linkHovered: value });\n    };\n\n    optOutSystem = value => {\n        this.props.optOutSystem(this.state.inventoryId, value).then(() => {\n            this.props.fetchSystemDetails(this.state.inventoryId);\n            value === true\n                ? this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully excluded from vulnerability analysis'\n                })\n                : this.props.addNotification({\n                    variant: 'success',\n                    title: 'System successfully resumed vulnerability analysis',\n                    description: 'There may be 24 hours before data is available'\n                });\n        });\n    };\n\n    render() {\n        const { InventoryHeader, InventoryBody } = this.state;\n        const { systemDetails = {} } = this.props;\n        const { opt_out: isOptOut = false, entity } = systemDetails;\n\n        return (\n            <Page>\n                <VulnerabilityHeader title=\"\" showTabs={false}>\n                    {InventoryHeader && (\n                        <InventoryHeader\n                            hideBack\n                            actions={\n                                entity && [\n                                    isOptOut\n                                        ? {\n                                            title: 'Resume vulnerability analysis',\n                                            onClick: () => this.optOutSystem(false)\n                                        }\n                                        : {\n                                            title: 'Exclude from vulnerability analysis',\n                                            onClick: () => this.optOutSystem(true)\n                                        }\n                                ]\n                            }\n                        />\n                    )}\n                </VulnerabilityHeader>\n\n                {InventoryBody && (\n                    <Main>\n                        <React.Fragment>\n                            <InventoryBody optOutSystemHandler={this.optOutSystem} />\n                        </React.Fragment>\n                    </Main>\n                )}\n            </Page>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        systemDetails: state.entityDetails\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        optOutSystem: (system, status) => dispatch(optOutSystemAction(system, status)),\n        fetchSystemDetails: system => dispatch(fetchSystemDetails(system)),\n        addNotification: notification => dispatch(addNotification(notification))\n    };\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n","export * from './components';\n//# sourceMappingURL=index.js.map","export * from './transformers';\nexport * from './headerUtils';\nexport * from './formatters';\nexport * from './utils';\n//# sourceMappingURL=index.js.map","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\n\nexport const CvePairStatusModal = ({ cves, updateRef, inventories, hasDifferentStatus = false }) => {\n    const [cveList] = useState(cves);\n    const [inventoryList] = useState(inventories);\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getDefaultStatus());\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getDefaultLabel());\n    const [checkboxState, setCheckboxState] = useState(getDefaultCheckboxState());\n    const inventoryIds = inventoryList.map(item => item.id);\n\n    useEffect(() => {\n        if (checkboxState) {\n            const props = { isDisabled: true };\n            setSelectProps(props);\n            setJustificationProps(props);\n        }\n    }, []);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !checkboxState\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultStatus() {\n        // system has different status\n        if (inventoryList && inventoryList.length > 0 && inventoryList[0].status_id) {\n            return getSystemsStatus();\n        }\n\n        if (cveList && cveList.length > 0) {\n            return getCvestatus();\n        }\n\n    }\n\n    function getDefaultLabel() {\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) {\n            return getSystemsJustification();\n        }\n\n        if (cveList && cveList.length === 1) {\n            return getCveJustification();\n        }\n    }\n\n    function getDefaultCheckboxState() {\n        // system has the same status as cve\n        if (inventoryList && inventoryList.length === 1 && inventoryList[0].status_id) {\n            let [inventory] = inventoryList;\n            return cveList.some(cve => (cve.status_id === inventory.status_id));\n        }\n\n        if (cveList && cveList.length === 1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSystemsStatus() {\n        return (inventoryList && inventoryList[0].status_id.toString()) || '0';\n    }\n\n    function getSystemsJustification() {\n        return (inventoryList && inventoryList.length === 1 && inventoryList[0].justification) || '';\n    }\n\n    function getCvestatus() {\n        return (cveList && cveList[0].status_id.toString()) || '0';\n    }\n\n    function getCveJustification() {\n        return (cveList && cveList.length === 1 && cveList[0].justification) || '';\n    }\n\n    function handleCheckboxChange(checked) {\n        const props = { isDisabled: checked };\n        setCheckboxState(checked);\n        setSelectProps(props);\n        setStatusId(getCvestatus());\n        setJustification(getCveJustification());\n        setJustificationProps(props);\n    }\n\n    const successNotification = {\n        variant: 'success',\n        title: 'CVE status updated'\n    };\n\n    let modalTitle = 'Set status for this CVE and system pair';\n    if (inventoryIds.length > 1 || cves.length > 1) {\n        modalTitle = 'Set status for these CVE and system pairs';\n    }\n\n    return (\n        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title={modalTitle}>\n            <Stack gutter={'md'}>\n                <StackItem>\n                    {hasDifferentStatus ?\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title=\"Selected pairs have different statuses. Changes will be applied to all \" />\n                        : ''}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId={'overall'}>\n                            <Checkbox\n                                label=\"Use overall CVE status\"\n                                id=\"alt-form-checkbox-1\"\n                                name=\"alt-form-checkbox-1\"\n                                isChecked={checkboxState}\n                                onChange={handleCheckboxChange}\n                            />\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cves: propTypes.array,\n    updateRef: propTypes.func,\n    inventories: propTypes.array,\n    hasDifferentStatus: propTypes.bool\n};\n\nexport default CvePairStatusModal;\n"],"sourceRoot":""}