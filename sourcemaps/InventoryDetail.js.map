{"version":3,"sources":["webpack:///./src/Helpers/Dispatcher.js","webpack:///./src/Helpers/CVEHelper.js","webpack:///./src/Store/Selectors/CVESelectors.js","webpack:///./node_modules/reselect/lib/index.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Helpers/VulnerabilitiesHelper.js","webpack:///./src/Components/SmartComponents/SystemDetail/SystemDetail.js","webpack:///./src/Store/Reducers/SystemDetailStore.js","webpack:///./src/Components/SmartComponents/InventoryDetail/InventoryDetail.js"],"names":["__webpack_require__","d","__webpack_exports__","dispatchAction","_red_hat_insights_insights_frontend_components_components_Notifications__WEBPACK_IMPORTED_MODULE_0__","_Utilities_ReducerRegistry__WEBPACK_IMPORTED_MODULE_1__","actionCreator","store","ReducerRegistry","getStore","dispatch","catch","res","json","then","arr","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","errors","Symbol","iterator","next","done","err","value","addNotification","variant","title","status","description","detail","return","statusText","createExposedSystemsTable","affectedSystems","isLoading","payload","asMutable","data","meta","createMitreLink","item","react_default","a","createElement","href","sCveDetailsPage","sExposedSystemsTable","sAllSystems","createSelector","state","CVEStore","cveDetails","cves","impact","MiscHelper","attributes","public_date","synopsis","package_list","map","key","rh_link","mitre_link","cvss3_score","affectedSystemsByCVE","SystemsStore","defaultEqualityCheck","b","defaultMemoize","func","equalityCheck","arguments","length","lastArgs","lastResult","prev","i","areArgumentsShallowlyEqual","apply","createSelectorCreator","memoize","_len","memoizeOptions","Array","_key","_len2","funcs","_key2","recomputations","resultFunc","pop","dependencies","isArray","every","dep","dependencyTypes","join","Error","getDependencies","memoizedResultFunc","concat","selector","params","push","resetRecomputations","exports","__esModule","createStructuredSelector","selectors","selectorCreator","objectKeys","Object","keys","_len3","values","_key3","reduce","composition","index","CVEs","props","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","entity","Component","Vulnerabilities","VulnerabilitiesCves","React","defaultProps","header","width","hasSort","Fragment","info_circle_icon","fetchResource","fetchCveListByAccount","dataMapper","cveList","row","id","cells","cvss_score","systems_affected","showAllCheckbox","propTypes","array","bool","shape","routerParams","SystemDetail","affectedSystemId","string","connect","entityDetails","inventory_id","initialState","loaded","systemDetailStore","INVENTORY_ACTION_TYPES","type","LOAD_ENTITY_FULFILLED","objectSpread_default","activeApps","name","component","InventoryDetail","_this","checkItem","bind","assertThisInitialized_default","InventoryCmp","removeListener","_this2","setState","middlewareListener","addNew","on","callback","fetchData","cve","fetchInventory","insights","loadInventory","react","reactRouterDom","reactCore","reactIcons","inventoryConnector","mergeWithEntities","mergeWithDetail","register","newList","systemList","selected","Card","CardBody","items","dataShape","fetchAffectedSystemsByCVE"],"mappings":"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","file":"js/InventoryDetail.js","sourcesContent":["import { addNotification } from '@red-hat-insights/insights-frontend-components/components/Notifications';\nimport ReducerRegistry from '../Utilities/ReducerRegistry';\nexport function dispatchAction(actionCreator) {\n    const store = ReducerRegistry.getStore();\n    return store.dispatch(actionCreator).catch(res => {\n        if ('json' in res) {\n            let parsedMessage = res.json();\n            parsedMessage.then(arr => {\n                for (let err of arr.errors) {\n                    store.dispatch(\n                        addNotification({\n                            variant: 'danger',\n                            title: 'Error ' + err.status,\n                            description: err.detail\n                        })\n                    );\n                }\n            });\n        } else {\n            store.dispatch(\n                addNotification({\n                    variant: 'danger',\n                    title: 'Error ' + res.status,\n                    description: res.statusText\n                })\n            );\n        }\n    });\n}\n","import React from 'react';\nimport { createApiCall } from './APIHelper';\nimport * as MiscHelper from './MiscHelper';\n\nexport function getCveDetails(synopsis) {\n    let endpoint = '/cves/' + synopsis + '/details/';\n    let result = createApiCall(endpoint, 'get');\n    return result;\n}\n\nexport function getAffectedSystemsByCVE(synopsis) {\n    let endpoint = '/cves/' + synopsis + '/affectedsystems/';\n    let result = createApiCall(endpoint, 'get');\n    return result;\n}\n\nexport function createExposedSystemsTable(affectedSystems) {\n    // TODO: Use correct API format instead this one\n    let isLoading = affectedSystems.isLoading;\n    if (!isLoading) {\n        let payload = affectedSystems.payload.asMutable();\n        let { data, meta } = payload;\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading };\n}\n\nexport function createCveDetailsPage(cves) {\n    let isLoading = cves.isLoading;\n    if (!isLoading) {\n        let payload = cves.payload.asMutable();\n        let { data, meta } = payload;\n        data = {\n            impact: MiscHelper.processImpactForTable(data.attributes.impact),\n            public_date: MiscHelper.processDate(data.attributes.public_date),\n            description: data.attributes.description,\n            synopsis: data.attributes.synopsis,\n            package_list: data.attributes.package_list.map(item => <li key={item}>{item}</li>),\n            rh_link: createRHDBLink(data.attributes.synopsis),\n            mitre_link: createMitreLink(data.attributes.synopsis),\n            cvss3_score: data.attributes.cvss3_score\n        };\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading };\n}\n\nfunction createRHDBLink(item) {\n    return <a href={'https://access.redhat.com/security/cve/' + item}>Red Hat CVE Database</a>;\n}\n\nfunction createMitreLink(item) {\n    return <a href={'https://cve.mitre.org/cgi-bin/cvename.cgi?name=' + item}>MITRE Database</a>;\n}\n","import { createSelector } from 'reselect';\nimport { createCveDetailsPage, createExposedSystemsTable } from '../../Helpers/CVEHelper';\n\nconst cveListWithSystemsSelector = state => state.CVEStore.affectedSystemsByCVE;\nconst systemsListAllSelector = state => state.SystemsStore;\nconst cveDetailsPageSelector = state => state.CVEStore.cveDetails;\n\nexport const sCveDetailsPage = createSelector(\n    [cveDetailsPageSelector],\n    createCveDetailsPage\n);\nexport const sExposedSystemsTable = createSelector(\n    [cveListWithSystemsSelector],\n    createExposedSystemsTable\n);\n\nexport const sAllSystems = createSelector(\n    [systemsListAllSelector],\n    createExposedSystemsTable\n);\n","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","import { InfoCircleIcon } from '@patternfly/react-icons';\nimport { routerParams, Vulnerabilities, VulnerabilitiesCves } from '@red-hat-insights/insights-frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilitiesHelper';\nimport { fetchCveListByAccount } from '../../../Store/Actions/Actions';\n\nclass CVEs extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const { entity } = this.props;\n        const Component = (entity && Vulnerabilities) || VulnerabilitiesCves;\n        const params = (entity && { entity }) || this.props;\n        return <Component {...params} />;\n    }\n}\n\nCVEs.defaultProps = {\n    header: [\n        { title: ' ', key: 'impact', width: 3 },\n        { title: 'Name', key: 'synopsis', width: 10 },\n        { title: 'Description', key: 'description', hasSort: false },\n        {\n            title: (\n                <React.Fragment>\n                    {'CVSS Base Score'} <InfoCircleIcon />\n                </React.Fragment>\n            ),\n            key: 'cvss_score',\n            width: 10\n        },\n        { title: 'Systems Exposed', key: 'systems_affected', width: 3 },\n        { title: 'Publish date', key: 'public_date', width: 10 }\n    ],\n    fetchResource: fetchCveListByAccount,\n    dataMapper: createCveListByAccount,\n    showAllCheckbox: true\n};\n\nCVEs.propTypes = {\n    dataMapper: propTypes.func,\n    fetchResource: propTypes.func,\n    header: propTypes.array,\n    showAllCheckbox: propTypes.bool,\n    entity: propTypes.shape({})\n};\n\nexport default routerParams(CVEs);\n","import * as MiscHelper from './MiscHelper';\n\nexport function createCveListByAccount(cveList) {\n    let isLoading = cveList.isLoading;\n    if (!isLoading) {\n        let payload = cveList.payload.asMutable();\n        let data = payload.data;\n        let meta = payload.meta;\n        data = data.map(row => ({\n            id: row.id,\n            cells: [\n                MiscHelper.processImpactForTable(row.attributes.impact),\n                row.attributes.synopsis,\n                MiscHelper.truncate(row.attributes.description, 200),\n                MiscHelper.processCvssScore(row.attributes.cvss_score),\n                row.attributes.systems_affected,\n                MiscHelper.processDate(row.attributes.public_date)\n            ]\n        }));\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading };\n}\n\nexport function createCveListBySystem(cveList) {\n    let isLoading = cveList.isLoading;\n    if (!isLoading) {\n        let payload = cveList.payload.asMutable();\n        let data = payload.data;\n        let meta = payload.meta;\n        data = data.map(row => ({\n            id: row.id,\n            cells: [\n                MiscHelper.processImpactForTable(row.attributes.impact),\n                row.attributes.synopsis,\n                MiscHelper.truncate(row.attributes.description, 200),\n                MiscHelper.processCvssScore(row.attributes.cvss_score),\n                MiscHelper.processDate(row.attributes.public_date)\n            ]\n        }));\n        return { data, meta, isLoading };\n    }\n\n    return { data: [], meta: {}, isLoading };\n}\n\nexport function createCurrentVulnerabilitiesCard(impacts) {\n    let dataSet = impacts.payload;\n    let isLoading = impacts.isLoading;\n    if (!isLoading) {\n        dataSet = impacts.payload;\n    }\n\n    dataSet = { content: dataSet, isLoading };\n    return dataSet;\n}\n","import { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport CVEs from '../CVEs/CVEs';\n\nclass SystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <CVEs entity={this.props.affectedSystemId} />\n            </React.Fragment>\n        );\n    }\n}\n\nSystemDetail.propTypes = {\n    affectedSystemId: propTypes.string\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystemId: state.entityDetails.entity.inventory_id\n    };\n}\n\nexport default routerParams(\n    connect(\n        mapStateToProps,\n        null\n    )(SystemDetail)\n);\n","import SystemDetail from '../../Components/SmartComponents/SystemDetail/SystemDetail';\n\nlet initialState = {\n    loaded: false\n};\n\n// Reducer\nexport const systemDetailStore = INVENTORY_ACTION_TYPES => (state = initialState, action) => {\n    switch (action.type) {\n        case INVENTORY_ACTION_TYPES.LOAD_ENTITY_FULFILLED:\n            return {\n                ...state,\n                loaded: true,\n                activeApps: [{ title: 'Vulnerabilities', name: 'vulnerabilities', component: SystemDetail }]\n            };\n        default:\n            return state;\n    }\n};\n","import * as reactCore from '@patternfly/react-core';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport * as reactIcons from '@patternfly/react-icons';\nimport { routerParams } from '@red-hat-insights/insights-frontend-components';\nimport propTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as reactRouterDom from 'react-router-dom';\nimport { dispatchAction } from '../../../Helpers/Dispatcher';\nimport { dataShape } from '../../../Helpers/MiscHelper';\nimport { fetchAffectedSystemsByCVE } from '../../../Store/Actions/Actions';\nimport { systemDetailStore } from '../../../Store/Reducers/SystemDetailStore';\nimport { sExposedSystemsTable } from '../../../Store/Selectors/CVESelectors';\nimport ReducerRegistry, { middlewareListener } from '../../../Utilities/ReducerRegistry';\n\nclass InventoryDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checkItem = this.checkItem.bind(this);\n        this.state = {\n            InventoryCmp: () => <div>Loading...</div>,\n            removeListener: () => {}\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            removeListener: middlewareListener.addNew({\n                on: 'LOAD_ENTITIES_FULFILLED',\n                callback: () => this.props.fetchData(this.props.cve)\n            })\n        });\n        this.fetchInventory();\n    }\n\n    async fetchInventory() {\n        const { inventoryConnector, mergeWithEntities, mergeWithDetail, INVENTORY_ACTION_TYPES } = await insights.loadInventory({\n            react: React,\n            reactRouterDom,\n            reactCore,\n            reactIcons\n        });\n\n        ReducerRegistry.register({\n            ...mergeWithEntities(),\n            ...mergeWithDetail(systemDetailStore(INVENTORY_ACTION_TYPES))\n        });\n\n        this.setState({\n            InventoryCmp: inventoryConnector().InventoryDetail\n        });\n        this.state.removeListener();\n    }\n\n    checkItem(key, value) {\n        let newList = this.state.systemList;\n        newList[key].selected = value;\n        this.setState({ systemList: newList });\n    }\n\n    render() {\n        const { InventoryCmp } = this.state;\n        const { data } = this.props.affectedSystems;\n        return (\n            <Card>\n                <CardBody>\n                    <InventoryCmp items={data.map(item => item.inventory_id)} />\n                </CardBody>\n            </Card>\n        );\n    }\n}\n\nInventoryDetail.propTypes = {\n    cve: propTypes.string,\n    fetchData: propTypes.func,\n    affectedSystems: dataShape\n};\n\nfunction mapStateToProps(state) {\n    return {\n        affectedSystems: sExposedSystemsTable(state)\n    };\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        fetchData: cve => dispatchAction(fetchAffectedSystemsByCVE(cve))\n    };\n};\n\nexport default routerParams(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(InventoryDetail)\n);\n"],"sourceRoot":""}