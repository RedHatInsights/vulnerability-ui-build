{"version":3,"file":"js/4210.1639474442583.ba4d7d6585519db54c8c.js","mappings":"8fASMA,GAAcC,EAAAA,EAAAA,OAAK,kBACrB,uHAKEC,GAAcD,EAAAA,EAAAA,OAAK,kBACrB,wKAKEE,GAAUF,EAAAA,EAAAA,OAAK,kBACjB,mCAKEG,GAAiBH,EAAAA,EAAAA,OAAK,kBACxB,gIAKEI,GAAoBJ,EAAAA,EAAAA,OAAK,kBAC3B,mJAIEK,GAAUL,EAAAA,EAAAA,OAAK,kBACjB,uHAGEM,EAAgB,SAAC,GAA6C,IAAhCC,EAAgC,EAA3CC,UAAsBC,EAAqB,EAArBA,MAAUC,GAAW,YAChE,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAWA,IATAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,uGACOC,EAAAA,EAAAA,MADP,OACRC,EADQ,OAEdJ,GAAcI,MAAAA,GAAA,UAAAA,EAAQC,YAAR,eAAcC,aAAc,GAF5B,2CAAH,qDAKfJ,MACD,IAECN,EAAO,CACP,IAAMW,EAAUV,EAAKW,SAASC,UAAYZ,EAAKW,SAASC,SAASC,MAAM,KAAK,GAC5EC,SAASf,MAAT,UAAoBW,EAAU,GAAH,OAAMA,EAAN,OAAqB,GAAhD,YAAsDX,EAAtD,cAAiEgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,kBAGxF,OACI,kBAAC,MAAD,UACQhB,EADR,CAEIiB,OAAQ,SAAAC,GAAU,OACbhB,EAA2B,kBAACL,EAAcqB,GAA7B,kBAAC1B,EAAD,WAM9BI,EAAcuB,UAAY,CACtBrB,UAAWsB,IAAAA,KACXrB,MAAOqB,IAAAA,QAGJ,IAAMC,EAAS,WAClB,IACIC,GADWC,EAAAA,EAAAA,MACKX,SACpB,OAEI,kBAAC,EAAAY,SAAD,CAAUC,SAAUC,EAAAA,UAChB,kBAAC,KAAD,KACI,kBAAC,KAAD,CACIC,KAAMC,EAAAA,GAAAA,YAAAA,GACNC,GAAID,EAAAA,GAAAA,kBAAAA,KAGR,kBAAChC,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,eAAAA,GACN9B,UAAWL,EACXM,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,cAG9B,kBAACpB,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,kBAAAA,GACN9B,UAAWJ,IAGf,kBAACE,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,KAAAA,GACN9B,UAAWP,EACXQ,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,cAG9B,kBAACpB,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,SAAAA,GACN9B,UAAWP,EACXQ,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,cAG9B,kBAACpB,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,YAAAA,GACN9B,UAAWT,EACXU,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,iBAG9B,kBAACpB,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,QAAAA,GACN9B,UAAWN,EACXO,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAG9B,kBAACpB,EAAD,CACIkC,OAAK,EACLR,KAAMM,EAAAA,GAAAA,QAAAA,GACN9B,UAAWH,EACXI,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,oBAE9B,kBAAC,KAAD,CACIC,OAAQ,kBACJc,GAAAA,CAAKH,EAAAA,IAAO,SAAAI,GAAC,OAAIA,EAAEH,KAAOP,KAAQ,KAAO,kBAAC,KAAD,CAAUO,GAAID,EAAAA,GAAAA,SAAAA,W,4CC7G/E,QArBuB,WACnB,OACI,kBAACK,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKpB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,mBAA6B,CAAEoB,EAAG,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAe,2BAAIA,OAE7E,uBACIC,KAAK,6BACLC,OAAO,SACPC,IAAI,sBACJC,MAAO,CAAEC,MAAO,wCAChBC,UAAU,cAET5B,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,e,yBCExC4B,EAAAA,EAAAA,SAAyB,CAAEC,cAAAA,EAAAA,KA6D3B,SAAeC,EAAAA,EAAAA,IA3DH,WACR,IAAQC,GAASC,EAAAA,EAAAA,MAATD,KACAnC,GAAaW,EAAAA,EAAAA,MAAbX,SACR,GAAwCqC,EAAAA,EAAAA,IAAQ,CAACC,EAAAA,GAAAA,oBAAjD,eAAQC,GAAR,kBAA2BC,EAA3B,KACA,GAA4DnD,EAAAA,EAAAA,WAAS,GAArE,eAAOoD,EAAP,KAAgCC,EAAhC,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,UAAQ,iBAAO,CAC/BC,KAD+B,SAC1BC,GAAU,QAAU,QAAR,EAAAC,gBAAA,mBAAUC,cAAV,SAAkBL,YAAY,CAAEM,GAAI,OAAQH,SAAAA,KAC7DI,QAF+B,SAEvBJ,GAAU,QAAU,QAAR,EAAAC,gBAAA,mBAAUC,cAAV,SAAkBL,YAAY,CAAEM,GAAI,UAAWH,SAAAA,KACnEK,QAH+B,SAGvBL,GAAU,QAAU,QAAR,EAAAC,gBAAA,mBAAUC,cAAV,SAAkBL,YAAY,CAAEM,GAAI,UAAWH,SAAAA,QACnE,IAoCJ,OAlCAxD,EAAAA,EAAAA,YAAU,WAAM,gBACJ,QAAR,EAAAyD,gBAAA,mBAAUC,cAAV,SAAkBI,OACV,QAAR,EAAAL,gBAAA,mBAAUC,cAAV,SAAkBK,YAAY,iBAE9B,IAAMC,EAAU,UAAGP,gBAAH,iBAAG,EAAUC,cAAb,aAAG,EAAkBO,GAAG,kBAAkB,SAAAC,GAAS,UACvD,QAAR,EAAAT,gBAAA,mBAAUC,cAAV,mBAAkBS,wBAAlB,iBAAqC,GACjCD,EAAME,WACNzB,EAAK,IAAD,OAAKuB,EAAMG,aACcC,IAA7BjB,EAAYa,EAAMG,OAAuBhB,EAAYa,EAAMG,QAAO,GAAQhB,EAAYE,MAAK,OAInG,OAAO,kBAAMS,OAGd,KAEHhE,EAAAA,EAAAA,YAAU,WAAM,UACNuE,EAAmB/D,EAASC,MAAM,KAAK,IACrC,QAAR,EAAAgD,gBAAA,eAAUC,SACNa,QACkCD,IAAlCjB,EAAYkB,IACZlB,EAAYkB,IAAkB,GAElC,IAAMP,EAAU,UAAGP,gBAAH,iBAAG,EAAUC,cAAb,aAAG,EAAkBO,GAAG,wBAAwB,YAAc,YAAXO,EAAW,EAAXA,KAC/D,sBAAgCf,gBAAhC,iBAAgC,EAAUC,cAA1C,iBAAgC,EAAkBe,uBAAlD,aAAgC,SAAoCD,GAAM,GAAM,UAAhF,QAAyF,CAAC,KAAM,KAAM,MAAtG,eAAOE,EAAP,KAAkBC,EAAlB,KAAwBC,EAAxB,KACAzB,GAAS0B,EAAAA,EAAAA,IAAgB,CAAEH,UAAAA,EAAWC,KAAAA,EAAMC,KAAAA,QAGhD,OAAO,kBAAMZ,OACd,CAACX,EAAa7C,EAAU2C,IAE3B2B,OAAO5B,yBAA2B,SAAA6B,GAAU,OAAI7B,EAAyB6B,IAGrE/B,EAAY,kBAACgC,EAAA,EAAD,CAASC,UAAQ,IAAMlC,EAC/B,kBAAC,EAAAzB,SAAD,KACI,kBAAC4D,EAAA,GAAD,MACCjC,GAA2B,kBAAC,EAAD,MAC5B,kBAAChC,EAAD,OAEF,kBAACkE,EAAA,EAAD,U,uKCtERC,EAAa,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,YAClB,OACI,kBAAC,IAAD,CAAcC,IAAI,gBACd,kBAACC,EAAA,EAAD,CAAgBD,IAAK9D,EAAAA,GAAAA,KAAAA,MAAkBgE,UAAU,GAC7C,kBAAC,KAAD,CAAM/D,GAAID,EAAAA,GAAAA,KAAAA,IAAgBA,EAAAA,GAAAA,KAAAA,QAG7B6D,MAAAA,OALL,EAKKA,EAAaI,KAAI,SAAAC,GAAI,OAClB,kBAACH,EAAA,EAAD,CAAgBD,IAAKI,EAAK/F,MAAO6F,SAAUE,EAAKF,UAExCE,EAAKC,OAEGD,EAAKF,SAAWE,EAAK/F,MAAQ,kBAAC,KAAD,CAAM8B,GAAIiE,EAAKjE,IAAKiE,EAAK/F,OAGtD,kBAACiG,EAAA,EAAD,CAAUrD,UAAU,8BASpD6C,EAAWrE,UAAY,CACnBsE,YAAatE,IAAAA,OAGjB,U,2JC1BM8E,EAAe,SAAC,GAA0C,IAAxCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,SAAaC,GAAY,YAC5D,GAA4BnG,EAAAA,EAAAA,WAAS,GAArC,eAAOoG,EAAP,KAAeC,EAAf,KACMvF,GAAOwF,EAAAA,EAAAA,KAEb,OACI,kBAACC,EAAA,GAAD,QACIC,OACI,kBAACC,EAAA,EAAD,CACIC,SAAU,kBAAML,GAAWD,IAC3BO,gBAAiBC,EAAAA,GACjBC,WAAYX,EACZxD,UAAU,mBAET5B,EAAKgG,cAAc/F,EAAAA,EAAAA,UAG5BqF,OAAQA,EACRH,cAAeA,GACXE,KAKhBH,EAAa9E,UAAY,CACrB+E,cAAe9E,IAAAA,MACf+E,SAAU/E,IAAAA,MAGd,UC7BA,IAAM4F,EAAS,SAAC,GAAqF,IAAnFjH,EAAmF,EAAnFA,MAAOkH,EAA4E,EAA5EA,QAASxB,EAAmE,EAAnEA,YAAayB,EAAsD,EAAtDA,eAAgBC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,OAEpF,OACI,kBAACC,EAAA,EAAD,KACKJ,GAAkB,kBAAC,EAAD,CAAYzB,YAAaA,IAE5C,kBAAC8B,EAAA,EAAD,CAAOC,WAAS,EAACC,aAAW,GACxB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiB5H,MAAOA,KAG3B,GAAG6H,OAAOP,GAAQxB,KAAI,SAACC,EAAM+B,GAAP,OACnB,kBAACH,EAAA,EAAD,CAAWhC,IAAKmC,GACX/B,MAIT,kBAAC4B,EAAA,EAAD,CAAWI,UAAQ,IAElBb,EAAQc,OAAS,GACd,kBAACL,EAAA,EAAD,KACI,kBAAC,EAAD,CAAcxB,cAAee,EAASe,SAAS,QAAQC,OAAQb,MAK1ED,IAKbH,EAAOkB,aAAe,CAClBhB,gBAAgB,EAChBD,QAAS,GACTlH,MAAOgB,EAAAA,EAAAA,cAAmBC,EAAAA,EAAAA,aAG9BgG,EAAO7F,UAAY,CACfsE,YAAatE,IAAAA,MACb8F,QAAS9F,IAAAA,MACTpB,MAAOoB,IAAAA,IACP+F,eAAgB/F,IAAAA,KAChBgG,SAAUhG,IAAAA,IACViG,cAAejG,IAAAA,OACfkG,OAAQlG,IAAAA,UAAoB,CAACA,IAAAA,QAAmBA,IAAAA,QAAkBA,IAAAA,YAGtE,W,iJChDMoE,EAAe,SAAC,GAAyE,IAAvExE,EAAuE,EAAvEA,KAAuE,IAAjEhB,MAAAA,OAAiE,MAAzDgB,EAAKgG,cAAc/F,EAAAA,EAAAA,uBAAsC,EAC3F,OACI,kBAAC,aAAD,KACI,kBAAC,IAAD,CACIjB,MAAOA,EACPmH,gBAAgB,IAEpB,kBAAC,IAAD,KACI,kBAAC,KAAD,SAMhB3B,EAAapE,UAAY,CACrBJ,KAAMI,IAAAA,IACNpB,MAAOoB,IAAAA,QAGX,SAAegH,EAAAA,EAAAA,IAAW5C,I,izBCfnB,IAAM6C,EAAkB,SAACC,GAC5B,IAAM9E,GAAWC,EAAAA,EAAAA,MAEX8E,EAAe,EAAH,CACdC,QAAS,QACNF,GAuBP,OApBAjI,EAAAA,EAAAA,YAAU,WACN,OAAO,WACEiI,EAAOG,cACRjF,GAASkF,EAAAA,EAAAA,UAGlB,CAAClF,IAcG,CAZiB,SAAC,GAAD,IAAGmF,EAAH,EAAGA,IAAQL,GAAX,mBACpB9E,GACIoF,EAAAA,EAAAA,IAAmB,EAAD,GACd5I,MAAO2I,GACJJ,GACAD,MAIY,kBACvB9E,GAASkF,EAAAA,EAAAA,UAKJG,EAAiB,SAACC,EAAD,GAAgD,IAAnC9E,EAAmC,EAAnCA,GAAI+E,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAEnDC,EAAW,mCAAG,WAChBC,EADgB,6GAEdC,EAFc,EAEdA,QAASC,EAFK,EAELA,eAAgBC,EAFX,EAEWA,KAAgBC,EAF3B,EAEiBC,SAAmBC,EAFpC,EAEoCA,oBAE9CC,EAJU,UAImB,QAAnBL,EAA2B,GAAK,KAJhC,OAIsCD,GAEhDO,EANU,OAOTF,GAPS,IAQZH,KAAAA,EACAM,UAAWL,EACXG,KAAAA,IAGJV,MAAAA,GAAAA,EAAY,KAAQW,IAbJ,SAeIZ,EAAS,EAAD,KAEjB9E,GAAM,CAAEA,GAAAA,IACR0F,IAlBK,cAeVE,EAfU,yBAsBT,CACHC,QAA+B,mBAAfb,EACVA,EAAW,CAAEY,MAAAA,EAAOE,MAAO9F,IAC3B4F,MAAAA,GAFG,UAEHA,EAAO/E,YAFJ,aAEH,EAAaiB,KAAI,SAAAiE,GAAG,UAAO/F,GAAI+F,EAAI/F,IAAO+F,EAAIC,eACpDC,MAAOL,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAaC,YACpB2I,KAAMO,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAa4I,KACnBC,QAASM,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAakJ,UACtBlJ,KAAM,CACF4I,KAAMO,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAa4I,KACnBI,KAAMG,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAagJ,KACnBE,UAAWC,MAAAA,GAAF,UAAEA,EAAOnJ,YAAT,aAAE,EAAakJ,aAhChB,2CAAH,wDAqCjB,OAAOV,GAGEiB,EAAmB,SAAAC,GAC5B,MAAiC9B,EAAgB,CAAEG,QAAS,YAArD4B,GAAP,eACA,EAAiC/B,EAAgB,CAAEG,QAAS,SAAU6B,aAAa,IAA5EC,GAAP,eACM9G,GAAWC,EAAAA,EAAAA,MACXzC,GAAOwF,EAAAA,EAAAA,KASb,OAAO,SAAC+D,EAAcC,EAAYC,GAC9B,IAAMC,EAAQC,OAAOC,KAAKL,GAAcvC,OAExCxE,GAASqH,EAAAA,EAAAA,IAAoBF,OAAOC,KAAKL,GAAeE,IACnDK,MAAK,WACFV,EAAuBK,EACjB,CACE9B,IAAK3H,EAAKgG,cAAc/F,EAAAA,EAAAA,2BAAqC,CAAEyJ,MAAAA,EAAOF,WAAAA,KAExE,CACE7B,IAAK3H,EAAKgG,cAAc/F,EAAAA,EAAAA,gCAA0C,CAAEyJ,MAAAA,EAAOF,WAAAA,IAC3EO,YAAa/J,EAAKgG,cAAc/F,EAAAA,EAAAA,qCARhD,OAWa,SAAA+J,GACLV,EAAwC,QAAjBU,EAAMC,OACvBC,EAAAA,GACAT,EACI,CACE9B,IAAK3H,EAAKgG,cAAc/F,EAAAA,EAAAA,gCAA0C,CAAEyJ,MAAAA,EAAOF,WAAAA,IAC3EO,YAAa/J,EAAKgG,cAAc/F,EAAAA,EAAAA,+BAAyC,CAAEyJ,MAAAA,KAE7E,CACE/B,IAAK3H,EAAKgG,cAAc/F,EAAAA,EAAAA,gCAA0C,CAAEyJ,MAAAA,EAAOF,WAAAA,IAC3EO,YAAa/J,EAAKgG,cAAc/F,EAAAA,EAAAA,+BAAyC,CAAEyJ,MAAAA,SArB/F,QAwBeP,KAKjBgB,EAAkB,SAAC,GAAD,IAAGnH,EAAH,EAAGA,GAAkBoH,EAArB,EAAOC,aAAP,MAAwC,CAAErH,GAAIA,GAAUoH,EAAaE,UAAU,IAE1FC,EAAgB,SAAC,GAAgG,IAA9FC,EAA8F,EAA9FA,QAASC,EAAqF,EAArFA,aAAcC,EAAuE,EAAvEA,kBAAmBC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,cAAsC,IAAvBC,SAAAA,OAAuB,SACpH7K,GAAOwF,EAAAA,EAAAA,KACL/F,EAAe+K,EAAf/K,KAAMoE,EAAS2G,EAAT3G,KAERiH,EAAmBjH,IAAWkH,MAAMC,QAAQnH,IAASA,EAAKmD,QAAW6D,EAAYhH,EAAKmD,OAAS,EAAInD,EAAKmD,QAOxGiE,EAAiB,WACnB,IAAIC,EAAW,GACfvB,OAAOC,KAAKa,GAAcU,SAAQ,SAACnI,GAQ/B,OAPAkI,EAASlJ,KACL,CACIgB,GAAAA,EACAsH,UAAU,IAIXY,KAGXP,EAAaO,IAGXE,EAAe,mCAAG,8FAEIR,EAAc,CAAEjC,UAAWlJ,EAAK4L,WAAYhD,KAAM,IAFtD,cAEdiD,QAEExB,MAAK,gBAAGjG,EAAH,EAAGA,KAAH,OAAc8G,EAAa9G,EAAKiB,IAAIqF,OAJ7B,2CAAH,qDAOrB,MAAO,CACHT,MAAOgB,EACPa,UAAWb,EACX3E,WAAgC,IAApBtG,EAAK4L,YAA0C,IAAtBX,EACrCxD,OAAQ,cACR0B,MAAO,CACH,CACI5J,MAAOgB,EAAKgG,cAAc/F,EAAAA,EAAAA,YAC1BuL,QAASP,GAEb,CACIjM,MAAO,GAAF,OAAKgB,EAAKgG,cAAc/F,EAAAA,EAAAA,WAAqB,CAAEyJ,MAAOoB,KAC3DU,QAxCa,WACrB,IAAQ3H,GAAS2G,MAAAA,EAAAA,EAAW,IAApB3G,KACR8G,EAAa9G,MAAAA,OAAD,EAACA,EAAMiB,IAAIqF,MAwCnB,CACInL,MAAO,GAAF,OAAKgB,EAAKgG,cAAc/F,EAAAA,EAAAA,UAAoB,CAAEyJ,MAAOjK,EAAK4L,cAC/DG,QAASJ,IAGjBK,SAAU,kBAAOf,EAAwCO,IAApBG,OAsBhClJ,EAAU,SAAAwJ,GAAwB,UAC3C,GAA4CxM,EAAAA,EAAAA,UAAS,IAArD,eAAOyM,EAAP,KAAuBC,EAAvB,KACA,GAA8B1M,EAAAA,EAAAA,WAAS,GAAvC,eAAO2M,EAAP,KAAgBC,EAAhB,KAOA,OALQ,QAAR,EAAAhJ,gBAAA,mBAAUC,cAAV,mBAAkBgJ,0BAAlB,gBAAuC,iBAAiBjC,MAAK,SAAAkC,GACzDJ,EAAkBI,GAClBF,GAAW,MAGXD,EACO,CAACH,EAAqB5G,KAAI,iBAAM,OAAK,GAGzC,CAAC4G,EAAqB5G,KAAI,SAAAmH,GAAmB,OAChDN,MAAAA,OADgD,EAChDA,EAAgB3K,MAAK,SAAA+D,GAAI,OA/BPmH,EA+B4BnH,EAAKoH,WA/BpBC,EA+BgCH,EA9B7DI,EAAYH,EAAYpM,MAAM,KAC9BwM,EAAYF,EAAYtM,MAAM,KAEhCuM,EAAUrF,SAAWsF,EAAUtF,QAI5BqF,EAAUE,OAAM,SAACC,EAAU1F,GAAX,OAAqB0F,IAAaF,EAAUxF,IAAuB,MAAb0F,GAAyC,MAArBF,EAAUxF,MARtF,IAACoF,EAAaE,EAC7BC,EACAC,SA6BqF,K","sources":["webpack:///./src/Utilities/Routes.js","webpack:///./src/Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner.js","webpack:///./src/App.js","webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/PresentationalComponents/StaticPages/NoAccessPage.js","webpack:///./src/Helpers/Hooks.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense, Fragment } from 'react';\nimport some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { getSystems } from '../Helpers/APIHelper';\nimport { PATHS } from '../Helpers/constants';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\n\nconst SystemsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ '../Components/SmartComponents/SystemsPage/SystemsPage'\n    )\n);\n\nconst LandingPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"LandingPage\" */ '../Components/SmartComponents/LandingPage/LandingPage'\n    )\n);\n\nconst Upgrade = lazy(() =>\n    import(\n        /* webpackChunkName: \"Upgrade\" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'\n    )\n);\n\nconst CVEDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"CVEDetailsPage\" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'\n    )\n);\n\nconst SystemDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"SystemDetailsPage\" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'\n    )\n);\nconst Reports = lazy(() =>\n    import(/* webpackChunkName: \"Reports\" */ '../Components/SmartComponents/Reports/ReportsPage')\n);\n\nconst InsightsRoute = ({ component: Component, title, ...rest }) => {\n    const [hasSystems, setHasSystems] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await getSystems();\n            setHasSystems(result?.meta?.total_items > 0);\n        };\n\n        fetchData();\n    }, []);\n\n    if (title) {\n        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];\n        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n    }\n\n    return (\n        <Route\n            {...rest}\n            render={routeProps => (\n                !hasSystems ? <Upgrade /> : <Component {...routeProps} />\n            )}\n        />\n    );\n};\n\nInsightsRoute.propTypes = {\n    component: PropTypes.func,\n    title: PropTypes.string\n};\n\nexport const Routes = () => {\n    let location = useLocation();\n    let path = location.pathname;\n    return (\n        // TODO: Discuss with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={PATHS.cvepagePath.to}\n                    to={PATHS.systemDetailsPage.to}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cveDetailsPage.to}\n                    component={CVEDetailsPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemDetailsPage.to}\n                    component={SystemDetailsPage}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.home.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cvesPage.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemsPage.to}\n                    component={SystemsPage}\n                    title={intl.formatMessage(messages.systemsHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.upgrade.to}\n                    component={Upgrade}\n                    title={intl.formatMessage(messages.upgradePageTitle)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.reports.to}\n                    component={Reports}\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                />\n                <Route\n                    render={() => (\n                        some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />\n                    )}\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Text } from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ReadOnlyBanner = () => {\n    return (\n        <Banner>\n            <Bullseye>\n                <Text>\n                    {intl.formatMessage(messages.readOnlyBannerText, { b: (...chunks) => <b>{chunks}</b> })}\n                </Text>\n                <a\n                    href=\"https://status.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ color: 'var(--pf-global--link--Color--light)' }}\n                    className=\"pf-u-ml-sm\"\n                >\n                    {intl.formatMessage(messages.learnMore)}\n                </a>\n            </Bullseye>\n        </Banner>\n    );\n};\n\nexport default ReadOnlyBanner;\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    Fragment\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport { setGlobalFilter } from './Store/Actions/Actions';\nimport { Routes } from './Utilities/Routes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';\nimport './App.scss';\nimport ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';\nimport { useRbac } from './Helpers/Hooks';\nimport { PERMISSIONS } from './Helpers/constants';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nReducerRegistry.register({ notifications });\n\nconst App = () => {\n    const { push } = useHistory();\n    const { pathname } = useLocation();\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);\n    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const appNavClick = useMemo(() => ({\n        cves(redirect) { insights?.chrome?.appNavClick({ id: 'cves', redirect }); },\n        systems(redirect) { insights?.chrome?.appNavClick({ id: 'systems', redirect }); },\n        reports(redirect) { insights?.chrome?.appNavClick({ id: 'reports', redirect }); }\n    }), []);\n\n    useEffect(() => {\n        insights?.chrome?.init();\n        insights?.chrome?.identifyApp('vulnerability');\n\n        const unregister = insights?.chrome?.on('APP_NAVIGATION', event => {\n            insights?.chrome?.hideGlobalFilter?.(false);\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves(true);\n            }\n        });\n\n        return () => unregister();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        const baseComponentUrl = pathname.split('/')[1];\n        insights?.chrome &&\n            baseComponentUrl &&\n            appNavClick[baseComponentUrl] !== undefined &&\n            appNavClick[baseComponentUrl](false);\n\n        const unregister = insights?.chrome?.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SIDs, tags] = insights?.chrome?.mapGlobalFilter?.(data, true, true) ?? [null, null, null];\n            dispatch(setGlobalFilter({ workloads, SIDs, tags }));\n        });\n\n        return () => unregister();\n    }, [appNavClick, pathname, dispatch]);\n\n    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);\n\n    return (\n        isLoading ? <Spinner centered /> : isUserAuthorized ?\n            <Fragment>\n                <NotificationPortal />\n                {isReadOnlyBannerVisible && <ReadOnlyBanner />}\n                <Routes />\n            </Fragment>\n            : <NoAccessPage />\n    );\n};\n\nexport default routerParams(App);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport { PATHS } from '../../../Helpers/constants';\n\nconst Breadcrumb = ({ breadcrumbs }) => {\n    return (\n        <PfBreadcrumb key=\"PfBreadcrumb\">\n            <BreadcrumbItem key={PATHS.home.title} isActive={false}>\n                <Link to={PATHS.home.to}>{PATHS.home.title}</Link>\n            </BreadcrumbItem>\n\n            {breadcrumbs?.map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {\n                        item.loaded\n                            ? (\n                                item.isActive ? item.title : <Link to={item.to}>{item.title}</Link>\n                            )\n                            : (\n                                <Skeleton className=\"breadcrumb-skeleton\"/>\n                            )\n                    }\n                </BreadcrumbItem>\n            ))}\n        </PfBreadcrumb>\n    );\n};\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.array\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst NoAccessPage = ({ intl, title = intl.formatMessage(messages.vulnerabilitiesHeader) }) => {\n    return (\n        <React.Fragment>\n            <Header\n                title={title}\n                showBreadcrumb={false}\n            />\n            <Main>\n                <NotAuthorized />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nNoAccessPage.propTypes = {\n    intl: propTypes.any,\n    title: propTypes.string\n};\n\nexport default injectIntl(NoAccessPage);\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport {\n    addNotification as addNotificationFEC,\n    clearNotifications as clearNotificationsFEC\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { optOutSystemsAction } from '../../src/Store/Actions/Actions';\nimport messages from '../Messages';\nimport { ReadOnlyNotification } from './constants';\nimport { useState } from 'react';\n\nexport const useNotification = (config) => {\n    const dispatch = useDispatch();\n\n    const globalConfig = {\n        variant: 'info',\n        ...config\n    };\n\n    useEffect(() => {\n        return () => {\n            if (!config.preventClear) {\n                dispatch(clearNotificationsFEC());\n            }\n        };\n    }, [dispatch]);\n\n    const addNotification = ({ msg, ...config }) =>\n        dispatch(\n            addNotificationFEC({\n                title: msg,\n                ...globalConfig,\n                ...config\n            })\n        );\n\n    const clearNotifications = () =>\n        dispatch(clearNotificationsFEC());\n\n    return [addNotification, clearNotifications];\n};\n\nexport const useGetEntities = (fetchApi, { id, setUrlParams, createRows }) => {\n\n    const getEntities = async (\n        _items,\n        { orderBy, orderDirection, page, per_page: perPage, vulnerabilityParams }\n    ) => {\n        const sort = `${orderDirection === 'ASC' ? '' : '-'}${orderBy}`;\n\n        const params = {\n            ...vulnerabilityParams,\n            page,\n            page_size: perPage,\n            sort\n        };\n\n        setUrlParams?.({ ...params });\n\n        const items = await fetchApi(\n            {\n                ...id && { id },\n                ...params\n            }\n        );\n\n        return {\n            results: typeof createRows === 'function'\n                ? createRows({ items, cveId: id })\n                : items?.data?.map(row => ({ id: row.id, ...row.attributes })),\n            total: items?.meta?.total_items,\n            page: items?.meta?.page,\n            perPage: items?.meta?.page_size,\n            meta: {\n                page: items?.meta?.page,\n                sort: items?.meta?.sort,\n                page_size: items?.meta?.page_size\n            }\n        };\n    };\n\n    return getEntities;\n};\n\nexport const useOptOutSystems = onRefreshInventory => {\n    const [addSuccessNotification] = useNotification({ variant: 'success' });\n    const [addFailureNotification] = useNotification({ variant: 'danger', autoDismiss: false });\n    const dispatch = useDispatch();\n    const intl = useIntl();\n\n    /**\n     * Excludes/included provided system(s), if toggling one system systemId and systemName have to be set.\n     * If toggling multiple systems, these two params are ignored and system info will be extracted from selectedRows.\n     * @param {object} affectedRows - object with keys representing ids of systems to opt out/in\n     * @param {?string} systemName - display name of a system if only a single system is toggled\n     * @param {bool} isIncluded - if true systems will be excluded, else included\n     */\n    return (affectedRows, systemName, isIncluded) => {\n        const count = Object.keys(affectedRows).length;\n\n        dispatch(optOutSystemsAction(Object.keys(affectedRows), isIncluded))\n            .then(() => {\n                addSuccessNotification(isIncluded\n                    ? {\n                        msg: intl.formatMessage(messages.notificationExcludeSuccess, { count, systemName })\n                    }\n                    : {\n                        msg: intl.formatMessage(messages.notificationIncludeSuccessTitle, { count, systemName }),\n                        description: intl.formatMessage(messages.notificationIncludeSuccessBody)\n                    }\n                );\n            }).catch(error => {\n                addFailureNotification(error.status === '503'\n                    ? ReadOnlyNotification\n                    : isIncluded\n                        ? {\n                            msg: intl.formatMessage(messages.notificationExcludeFailureTitle, { count, systemName }),\n                            description: intl.formatMessage(messages.notificationExcludeFailureBody, { count })\n                        }\n                        : {\n                            msg: intl.formatMessage(messages.notificationIncludeFailureTitle, { count, systemName }),\n                            description: intl.formatMessage(messages.notificationIncludeFailureBody, { count })\n                        }\n                );\n            }).finally(onRefreshInventory);\n    };\n};\n\n// Temp solution to suppoint\nconst mapSelectedRows = ({ id, inventory_id: inventoryId }) => ({ id: id ? id : inventoryId, selected: true });\n\nexport const useBulkSelect = ({ rawData, selectedRows, selectedRowsCount, handleSelect, fetchResource, multiRow = false }) => {\n    const intl = useIntl();\n    const { meta, data } = rawData;\n\n    const selectPageNumber = data && (((Array.isArray(data) && data.length) && multiRow) ? data.length / 2 : data.length);\n\n    const handleSelectPage = () => {\n        const { data } = rawData ?? {};\n        handleSelect(data?.map(mapSelectedRows));\n    };\n\n    const handleUnselect = () => {\n        let toSelect = [];\n        Object.keys(selectedRows).forEach((id) => {\n            toSelect.push(\n                {\n                    id,\n                    selected: false\n                }\n            );\n\n            return toSelect;\n        });\n\n        handleSelect(toSelect);\n    };\n\n    const handleSelectAll = async () => {\n\n        let { payload } = await fetchResource({ page_size: meta.totalItems, page: 1 });\n\n        payload.then(({ data }) => handleSelect(data.map(mapSelectedRows)));\n    };\n\n    return {\n        count: selectedRowsCount,\n        checked: !!selectedRowsCount,\n        isDisabled: meta.totalItems === 0 && selectedRowsCount === 0,\n        ouiaId: 'bulk-select',\n        items: [\n            {\n                title: intl.formatMessage(messages.selectNone),\n                onClick: handleUnselect\n            },\n            {\n                title: `${intl.formatMessage(messages.selectPage, { count: selectPageNumber })}`,\n                onClick: handleSelectPage\n            },\n            {\n                title: `${intl.formatMessage(messages.selectAll, { count: meta.totalItems })}`,\n                onClick: handleSelectAll\n            }\n        ],\n        onSelect: () => !selectedRowsCount ? handleSelectAll() : handleUnselect()\n    };\n\n};\n\nconst matchPermissions = (permissionA, permissionB) => {\n    const segmentsA = permissionA.split(':');\n    const segmentsB = permissionB.split(':');\n\n    if (segmentsA.length !== segmentsB.length) {\n        return false;\n    }\n\n    return segmentsA.every((segmentA, index) => segmentA === segmentsB[index] || segmentA === '*' || segmentsB[index] === '*');\n};\n\n/**\n * Checks whether user has particular permissions\n * @param {array} requestedPermissions - array of strings each represening a permission (defined in constants.js > PERMISSIONS)\n * @returns {array} - array where first element is an array of bools, representing each permission from parameter array,\n * second element is bool whether permissions are loading\n */\nexport const useRbac = requestedPermissions => {\n    const [allPermissions, setAllPermissions] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    insights?.chrome?.getUserPermissions?.('vulnerability').then(permissions => {\n        setAllPermissions(permissions);\n        setLoading(false);\n    });\n\n    if (loading) {\n        return [requestedPermissions.map(() => []), true];\n    }\n\n    return [requestedPermissions.map(requestedPermission =>\n        allPermissions?.some(item => matchPermissions(item.permission, requestedPermission))), false];\n};\n"],"names":["SystemsPage","lazy","LandingPage","Upgrade","CVEDetailsPage","SystemDetailsPage","Reports","InsightsRoute","Component","component","title","rest","useState","hasSystems","setHasSystems","useEffect","fetchData","getSystems","result","meta","total_items","subPath","location","pathname","split","document","intl","messages","render","routeProps","propTypes","PropTypes","Routes","path","useLocation","Suspense","fallback","Fragment","from","PATHS","to","exact","some","p","Banner","Bullseye","Text","b","chunks","href","target","rel","style","color","className","ReducerRegistry","notifications","routerParams","push","useHistory","useRbac","PERMISSIONS","isUserAuthorized","isLoading","isReadOnlyBannerVisible","setReadOnlyBannerVisible","dispatch","useDispatch","appNavClick","useMemo","cves","redirect","insights","chrome","id","systems","reports","init","identifyApp","unregister","on","event","hideGlobalFilter","domEvent","navId","undefined","baseComponentUrl","data","mapGlobalFilter","workloads","SIDs","tags","setGlobalFilter","window","setVisible","Spinner","centered","NotificationPortal","NoAccessPage","Breadcrumb","breadcrumbs","key","BreadcrumbItem","isActive","map","item","loaded","Skeleton","BaseDropdown","dropdownItems","disabled","props","isOpen","setIsOpen","useIntl","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","formatMessage","Header","actions","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","concat","index","isFilled","length","position","ouiaId","defaultProps","injectIntl","useNotification","config","globalConfig","variant","preventClear","clearNotificationsFEC","msg","addNotificationFEC","useGetEntities","fetchApi","setUrlParams","createRows","getEntities","_items","orderBy","orderDirection","page","perPage","per_page","vulnerabilityParams","sort","params","page_size","items","results","cveId","row","attributes","total","useOptOutSystems","onRefreshInventory","addSuccessNotification","autoDismiss","addFailureNotification","affectedRows","systemName","isIncluded","count","Object","keys","optOutSystemsAction","then","description","error","status","ReadOnlyNotification","mapSelectedRows","inventoryId","inventory_id","selected","useBulkSelect","rawData","selectedRows","selectedRowsCount","handleSelect","fetchResource","multiRow","selectPageNumber","Array","isArray","handleUnselect","toSelect","forEach","handleSelectAll","totalItems","payload","checked","onClick","onSelect","requestedPermissions","allPermissions","setAllPermissions","loading","setLoading","getUserPermissions","permissions","requestedPermission","permissionA","permission","permissionB","segmentsA","segmentsB","every","segmentA"],"sourceRoot":""}