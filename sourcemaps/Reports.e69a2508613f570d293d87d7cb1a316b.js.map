{"version":3,"file":"js/Reports.1687257292591.718d61b396cb59994a2f.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CounterItem.js","webpack:///./src/Components/SmartComponents/Reports/Executive/FirstPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/SecondPage.js","webpack:///./src/Components/SmartComponents/Reports/Executive/ThirdPage.js","webpack:///./src/Components/SmartComponents/Reports/BuildExecReport.js","webpack:///./src/Components/SmartComponents/Reports/DownloadExecutive.js","webpack:///./src/Components/PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter.js","webpack:///./src/Components/SmartComponents/Modals/ReportConfigModal.js","webpack:///./src/Components/SmartComponents/Reports/Common/buildOSGroups.js","webpack:///./src/Components/PresentationalComponents/CustomIcons/CustomIcons.js","webpack:///./src/Components/SmartComponents/Reports/ReportsPage.js","webpack:///./src/Helpers/DownloadReport.js"],"sourcesContent":["import React from 'react';\nimport { Text, View } from '@react-pdf/renderer';\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst CounterItem = ({ counter, label }) => {\n    return (\n        <View>\n            <Text style={styles.counter}>\n                {counter}\n            </Text >\n            <Text style={styles.counterLabel}>\n                {label}\n            </Text>\n        </View>\n    );\n};\n\nCounterItem.propTypes = {\n    counter: PropTypes.number,\n    label: PropTypes.string\n};\n\nexport default CounterItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Section, Panel, PanelItem } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { DateFormat as dateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { Text } from '@react-pdf/renderer';\n\nimport CounterItem from '../Common/CounterItem';\nimport messages from '../../../../Messages';\n\nimport styles from '../Common/styles';\n\nconst FirstPage = ({ data,  intl }) => {\n    const { totalSystems, totalCves, totalRules } = data;\n    return (\n        <Fragment key=\"exec-first-page\">\n            <Text style={[styles.generated, styles.mb24]}>\n                {intl.formatMessage(messages.executiveReportGenerated,\n                    {\n                        date: dateFormat({ date: new Date(), type: 'exact' }).props.children\n                    }\n                )}\n            </Text>\n            <Text style={styles.mb16}>\n                {intl.formatMessage(messages.executiveReportHeader)}\n            </Text>\n            <Text style={styles.mb8}>\n                {intl.formatMessage(messages.executiveReportSubHeader, {\n                    systems: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderSystems, { systems: totalSystems })}\n                        </Text>\n                    ),\n                    cves: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderCVEs, { cves: totalCves })}\n                        </Text>\n                    ),\n                    rules: (\n                        <Text style={styles.bold}>\n                            {intl.formatMessage(messages.executiveReportHeaderRules, { rules: totalRules })}\n                        </Text>\n                    )\n                })}\n            </Text>\n\n            <Section withColumn={false}>\n                <Panel>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalSystems}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedSystems, { systems: totalSystems })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalCves}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedCVEs, { cves: totalCves })}\n                        />\n                    </PanelItem>\n                    <PanelItem style={styles.counterPanel}>\n                        <CounterItem\n                            counter={totalRules}\n                            label={intl.formatMessage(messages.executiveReportAnalyzedRules, { rules: totalRules })}\n                        />\n                    </PanelItem>\n                </Panel>\n\n            </Section>\n        </Fragment>\n    );\n};\n\nFirstPage.propTypes = {\n    data: PropTypes.exact({\n        totalSystems: PropTypes.number,\n        totalCves: PropTypes.number,\n        totalRules: PropTypes.number\n    }),\n    intl: PropTypes.any\n};\nexport default FirstPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text  } from '@react-pdf/renderer';\nimport { truncate } from 'lodash';\n\nimport styles from '../Common/styles';\nimport CVElabels from '../Common/CVElabels';\nimport messages from '../../../../Messages';\n\nconst SecondPage = ({ data, intl }) => {\n    const cveDesc = (description) => <Text style={styles.mb8}> {truncate(description, { length: 400 })}</Text>;\n\n    const {\n        recentCvesData,\n        CVSSChart,\n        CVSSData,\n        CVSSHeader,\n        topCves\n    } = data;\n\n    const [legendHeader, ...restCVSSHeader] = CVSSHeader;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.cvesHeader)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportCvesByCVSS)}\n            >\n                <Column>\n                    <Chart\n                        chartType=\"pie\"\n                        subTitle=\"Cves\"\n                        title=\"100\"\n                        data={CVSSChart}\n                        colorSchema=\"orange\"\n                        legendHeader={legendHeader}\n                    />\n                </Column>\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[restCVSSHeader, ...CVSSData]}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRecentlyPublishedCves)}\n            >\n                <Panel style={{ flex: 1 }}>\n                    {\n                        recentCvesData.map(([label, value])=> (\n                            <Fragment key={label}>\n                                <PanelItem style={{ flex: 1 }} title={label}>\n                                    {value}\n                                </PanelItem>\n                            </Fragment>\n                        ))\n                    }\n                </Panel>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3)}\n                withColumn={false}\n            >\n                {\n                    topCves.map(({\n                        synopsis,\n                        known_exploit: hasExploit,\n                        rule_presence: hasRule,\n                        description,\n                        cvss3_score: cvss3,\n                        systems_affected: systemsAffected\n                    }) => (\n                        <Panel\n                            key={synopsis}\n                            title={synopsis}\n                            description={cveDesc(description)}\n                            labels={<CVElabels hasExploit={hasExploit} hasRule={hasRule} intl={intl} />}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportPanelTitle)}>\n                                {Number.parseFloat(cvss3).toFixed(1)}\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {systemsAffected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nSecondPage.propTypes = {\n    data: PropTypes.exact({\n        recentCvesData: PropTypes.array,\n        CVSSChart: PropTypes.array,\n        CVSSData: PropTypes.array,\n        CVSSHeader: PropTypes.array,\n        topCves: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default SecondPage;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Section,\n    Column,\n    Chart,\n    Table,\n    Panel,\n    PanelItem,\n    InsightsLabel\n} from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport { Text } from '@react-pdf/renderer';\nimport truncate from 'lodash/truncate';\n\nimport styles from '../Common/styles';\nimport messages from '../../../../Messages';\n\nconst ThirdPage = ({ data, intl }) => {\n\n    const rulesDesc = (rule, associatedCves) => (\n        <Fragment>\n            <Text style={styles.mb8}>{`${truncate(rule, { length: 320 })}\\n\\n`}</Text>\n            {intl.formatMessage(messages.associatedCves)} {associatedCves.map(cves => cves).join(', ')}\n        </Fragment>\n    );\n\n    const { topRules, rulesHeader, rulesBySeverityMap, rulesChart } = data;\n\n    return (\n        <Fragment key=\"first-section\">\n            <Text style={styles.header}>{intl.formatMessage(messages.rules)}</Text>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportRulesSection)}\n            >\n                <Column>\n                    <Table\n                        withHeader\n                        rows={[\n                            rulesHeader,\n                            ...rulesBySeverityMap\n                        ]}\n                    />\n                </Column>\n                <Column>\n                    <Chart\n                        chartType=\"bar\"\n                        subTitle=\"rules\"\n                        title=\"Rules\"\n                        data={rulesChart}\n                        colorSchema=\"orange\"\n                        legend={false}\n                    />\n                </Column>\n            </Section>\n            <Section\n                titleProps={{ style: styles.sectionTitle }}\n                title={intl.formatMessage(messages.executiveReportTop3Rules)} withColumn={false}\n            >\n                {\n                    topRules.map((rule, key) => (\n                        <Panel\n                            key={key}\n                            title={rule.name}\n                            description={rulesDesc(rule.description, rule.associated_cves)}\n                        >\n                            <PanelItem title={intl.formatMessage(messages.executiveReportRulePanelTitle)}>\n                                <InsightsLabel variant={rule.severity}/>\n                            </PanelItem>\n                            <PanelItem title={intl.formatMessage(messages.systemsExposed)}>\n                                {rule.systems_affected.toString()}\n                            </PanelItem>\n                        </Panel>\n                    ))\n\n                }\n            </Section>\n        </Fragment>\n    );\n};\n\nThirdPage.propTypes = {\n    data: PropTypes.exact({\n        topRules: PropTypes.array,\n        rulesHeader: PropTypes.array,\n        rulesBySeverityMap: PropTypes.array,\n        rulesChart: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default ThirdPage;\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CVSSHeader, rulesHeader, CVSSMapping, EXEC_RULES_SEVERITY_MAP, recentCvesMapping } from '../../../Helpers/constants';\n\nimport messages from '../../../Messages';\n\nimport FirstPage from './Executive/FirstPage';\nimport SecondPage  from './Executive/SecondPage';\nimport ThirdPage  from './Executive/ThirdPage';\n\nconst BuildExecReport = ({ data, intl }) => {\n\n    const {\n        cves_by_severity: cvesBySeverity,\n        recent_cves: recentCves,\n        top_cves: topCves,\n        cves_total: totalCves,\n        system_count: totalSystems,\n        top_rules: topRules,\n        rules_total: totalRules,\n        rules_by_severity: rulesBySeverity\n    } = data;\n\n    // if there's no CVE with N/A CVSS do not display N/A in graph/table\n    if (cvesBySeverity?.na?.count === 0) {\n        delete cvesBySeverity.na;\n        delete CVSSMapping.na;\n    }\n\n    const rulesBySeverityMap = Object.keys(rulesBySeverity).reverse().map(severity =>{\n        return [\n            EXEC_RULES_SEVERITY_MAP[severity],\n            ...Object.values(rulesBySeverity[severity]).map(value => value.toString())\n        ];\n    });\n\n    const CVSSData = Object.values(cvesBySeverity).reverse().map((\n        { count, percentage, known_exploit_count: knownExploitsCount }) =>\n        [intl.formatMessage(messages.executiveReportOfTotal,\n            {\n                count,\n                percentage\n            }\n        ), knownExploitsCount.toString()]\n    );\n\n    const mapFields = (fields, data, percentageInfo = false) => {\n        let arr = [];\n\n        for (const field in fields) {\n            let { [field]: label } = fields;\n            let { [field]: fieldData } = data;\n\n            let value = fieldData.count !== undefined ? fieldData.count : fieldData;\n\n            if (percentageInfo && fieldData.percentage) {\n                value = fieldData.percentage;\n            }\n\n            arr.push([label, value.toString()]);\n        }\n\n        return arr;\n    };\n\n    const recentCvesData = mapFields(recentCvesMapping, { ...recentCves });\n\n    const cvssDataMap = mapFields(CVSSMapping, { ...cvesBySeverity }, true);\n\n    const CVSSChart = cvssDataMap.map(([x, y]) => ({ x, y: Number(y) }));\n\n    const rulesChart = rulesBySeverityMap.map(([name, , y]) => ({ name, x: name, y: Number(y) }));\n\n    const coverPageData = { totalSystems, totalCves, totalRules };\n\n    const cvesData = { recentCvesData, CVSSChart, CVSSData, CVSSHeader, topCves };\n\n    const rulesData = { topRules, rulesHeader, rulesBySeverityMap, rulesChart };\n\n    return [\n        <FirstPage key=\"first-page\" intl={intl} data={coverPageData} />,\n        <SecondPage key=\"second-page-cves\" intl={intl} data={cvesData} />,\n        <ThirdPage key=\"third-page-rules\" intl={intl} data={rulesData} />\n    ];\n};\n\nBuildExecReport.propTypes = {\n    data: PropTypes.exact({\n        cves_by_severity: PropTypes.object,\n        recent_cves: PropTypes.object,\n        top_cves: PropTypes.array,\n        cves_total: PropTypes.number,\n        system_count: PropTypes.number,\n        rules_by_severity: PropTypes.object,\n        rules_total: PropTypes.number,\n        top_rules: PropTypes.array\n    }),\n    intl: PropTypes.any\n};\n\nexport default BuildExecReport;\n","\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getExecutiveReport } from '../../../Helpers/APIHelper';\nimport messages from '../../../Messages';\nimport buildExecReport from './BuildExecReport';\nimport { Fragment } from 'react';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport FooterPDF from './Common/FooterPDF';\nimport { NotAuthorizedNotification } from '../../../Helpers/constants';\n\nconst DownloadExecutive = () => {\n    const intl = useIntl();\n    const [isLoading, setLoading] = useState(false);\n    const [renderPDF, setRenderPDF] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    const dataFetch = async () => {\n        let data;\n\n        try {\n            data = await getExecutiveReport();\n        }\n        catch (error) {\n            clearNotifications();\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        const report = buildExecReport({ data, intl });\n        setSecurityRulesPresent(() => data.top_cves.some(cve => cve.rule_presence === true));\n        setExploit(() => data.top_cves.some(cve => cve.known_exploit === true));\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [...report];\n    };\n\n    const [date] = new Date().toISOString().split('T');\n\n    const onDownloadButtonClick = () => {\n        setRenderPDF(true);\n        setLoading(true);\n\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    };\n\n    return (\n        <Fragment>\n            {isLoading\n                ? intl.formatMessage(messages.loading)\n                : <a onClick={() => onDownloadButtonClick()}>\n                    {intl.formatMessage(messages.executiveReportCardButton)}\n                </a>\n            }\n            {\n                renderPDF && <DownloadButton\n                    fallback={<div />}\n                    type={intl.formatMessage(messages.executiveReportTitle)}\n                    fileName={`vulnerability_executive-report--${date}.pdf`}\n                    buttonProps={{ variant: 'link', isInline: true }}\n                    groupName=\"Red Hat Insights\"\n                    asyncFunction={dataFetch}\n                    allPagesHaveTitle={false}\n                    showButton={false}\n                    footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                    onSuccess={() => {\n                        setRenderPDF(false);\n                    }}\n\n                />\n            }\n        </Fragment>\n    );\n\n};\n\nexport default DownloadExecutive;\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\n\nconst SelectCustomSorter = ({ sorterData, setSorterData, selectProps, options }) => {\n    const [isOpen, setOpen] = useState(false);\n\n    const handleOnSelectChange = (optionName) => {\n        const optionValue = options.find(item => item.label === optionName).value;\n        setSorterData(optionValue);\n        setOpen(false);\n    };\n\n    return (\n        <Select\n            variant=\"single\"\n            direction=\"up\"\n            aria-label=\"Select Input\"\n            onToggle={() => setOpen(!isOpen)}\n            isOpen={isOpen}\n            placeholderText={options.find(item => item.value === sorterData).label}\n            key=\"custom-sorter\"\n            onSelect={(event, optionName) => { handleOnSelectChange(optionName); }}\n            width=\"auto\"\n            {... selectProps}\n        >\n            {options.map(item =>\n                <SelectOption width=\"100%\" key={item.label} value={item.label}/>\n            )}\n        </Select>\n    );\n};\n\nSelectCustomSorter.propTypes = {\n    sorterData: propTypes.object,\n    setSorterData: propTypes.func,\n    selectProps: propTypes.object,\n    options: propTypes.array\n};\n\nexport default SelectCustomSorter;\n","import React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Modal,\n    Button,\n    Form,\n    FormGroup,\n    TextInput,\n    Checkbox,\n    TextArea,\n    ToggleGroup,\n    ToggleGroupItem\n} from '@patternfly/react-core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    CVE_REPORT_FILTERS,\n    PDF_REPORT_USER_NOTE_MAX_LENGTH,\n    CUSTOM_REPORT_SORT_OPTIONS\n} from '../../../Helpers/constants';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport styles from '../Reports/Common/styles';\nimport { isCvssRangeValid } from '../../PresentationalComponents/Filters/CustomFilters/CvssCustomFilter';\nimport SelectCustomSorter from '../../PresentationalComponents/Sorters/CustomSorters/SelectCustomSorter';\nimport TagFilter from '../../PresentationalComponents/Filters/CustomFilters/TagFilter';\nimport { fetchOperatingSystems } from '../../../Store/Actions/Actions';\nimport buildOSGroups from '../Reports/Common/buildOSGroups';\n\nconst ReportConfigModal = ({\n    isOpen: isModalOpen,\n    handleModalClose,\n    filterData,\n    sorterData,\n    setFilterData,\n    setSorterData,\n    handleDownloadButton,\n    columnsToInclude,\n    setColumnsToInclude,\n    userNotes,\n    setUserNotes,\n    reportTitle,\n    setReportTitle,\n    inheritGlobalTags,\n    setInheritGlobalTags,\n    globalFilterTags\n}) => {\n    const dispatch = useDispatch();\n    const [includeAllColumns, setIncludeAllColumns] = useState(true);\n    const operatingSystems = useSelector(({ ReportsPageStore }) => ReportsPageStore?.operatingSystems?.data);\n    const osGroups = buildOSGroups(operatingSystems || []);\n\n    const activeFilters = [\n        'rule_presence',\n        'known_exploit',\n        'impact',\n        'cvss_filter',\n        'business_risk_id',\n        'status_id',\n        'publish_date',\n        'rhel_version'\n    ];\n\n    const handleCheckboxChange = (parameter, value) => {\n        if (value) {\n            setColumnsToInclude([...columnsToInclude, parameter]);\n        } else {\n            setColumnsToInclude(\n                columnsToInclude.filter((item) => item !== parameter)\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (includeAllColumns) {\n            setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        }\n\n    }, [includeAllColumns, setColumnsToInclude]);\n\n    useEffect(() => {\n        dispatch(fetchOperatingSystems());\n    }, [dispatch]);\n\n    return (\n        <Modal\n            width=\"50rem\"\n            title={intl.formatMessage(messages.configModalTitle)}\n            ouiaId=\"custom-report-modal\"\n            isOpen={isModalOpen}\n            onClose={() => {\n                handleModalClose();\n                setInheritGlobalTags(true);\n            }}\n            actions={[\n                <Button\n                    key=\"export\"\n                    variant=\"primary\"\n                    onClick={handleDownloadButton}\n                    isDisabled={\n                        !isCvssRangeValid(filterData.cvss_filter.from, filterData.cvss_filter.to) ||\n                        userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH\n                    }\n                >\n                    {intl.formatMessage(messages.configModalExportReport)}\n                </Button>,\n                <Button\n                    key=\"cancel\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                        handleModalClose();\n                        setInheritGlobalTags(true);\n                    }}\n                >\n                    {intl.formatMessage(messages.cancel)}\n                </Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label={intl.formatMessage(messages.customReportTitleLabel)} fieldId=\"horizontal-form-name\">\n                    <TextInput\n                        value={reportTitle}\n                        onChange={(value) => setReportTitle(value)}\n                        type=\"text\"\n                        className=\"report-text-input\"\n                        id=\"horizontal-form-name\"\n                    />\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportFilterDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        {activeFilters &&\n                            activeFilters.map((filterId) => {\n                                return (\n                                    CVE_REPORT_FILTERS[filterId]?.component({\n                                        ...CVE_REPORT_FILTERS[filterId],\n                                        filterData,\n                                        setFilterData,\n                                        selectProps: {\n                                            className: 'pf-u-mr-sm pf-u-mb-sm',\n                                            ...CVE_REPORT_FILTERS[filterId].selectProps\n                                        },\n                                        options: CVE_REPORT_FILTERS[filterId].items,\n                                        filterId,\n                                        filterName: CVE_REPORT_FILTERS[filterId].title,\n                                        ...(filterId === 'rhel_version' ? {\n                                            // overriding parameters specific to the OS filter\n                                            options: Object.values(osGroups).flat(),\n                                            groups: osGroups\n                                        } : {})\n                                    })\n                                );\n                            })}\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label={intl.formatMessage(messages.tagFilterTitle)}\n                >\n                    <TagFilter\n                        onEdit={() => setInheritGlobalTags(false)}\n                        selectedTags={filterData.tags}\n                        setSelectedTags={tags => setFilterData({ ...filterData, tags })}\n                        globalTags={globalFilterTags}\n                        inheritGlobalTags={inheritGlobalTags}\n                    />\n                    {globalFilterTags?.length > 0 && inheritGlobalTags &&\n                        <div className=\"pf-u-font-size-sm pf-u-mt-sm\">\n                            {intl.formatMessage(messages.tagFilterGlobal)}\n                            <a className=\"pf-u-ml-md\" onClick={() => {\n                                setInheritGlobalTags(false);\n                                filterData.tags = [];\n                            }}>\n                                {intl.formatMessage(messages.tagFilterClear)}\n                            </a>\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportDataToIncludeLabel)}\n                >\n                    <ToggleGroup aria-label=\"Default with single selectable\">\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleAll)}\n                            isSelected={includeAllColumns}\n                            onChange={() => setIncludeAllColumns(true)} />\n                        <ToggleGroupItem\n                            text={intl.formatMessage(messages.customReportDataToggleCustom)}\n                            isSelected={!includeAllColumns}\n                            onChange={() => setIncludeAllColumns(false)} />\n                    </ToggleGroup>\n\n                    {includeAllColumns ||\n                        <div style={styles.columns}>\n                            <Checkbox\n                                id=\"cve_id\"\n                                label=\"CVE ID\"\n                                isChecked\n                                isDisabled\n                                className=\"pf-u-mb-md\"\n                            />\n                            {\n                                Object.entries(CVE_REPORT_FILTERS)\n                                    .filter(([, value]) => value.hasColumn !== false)\n                                    .map(([key, value]) =>\n                                        <Checkbox\n                                            id={key}\n                                            key={key}\n                                            label={value.title}\n                                            isChecked={columnsToInclude.includes(key)}\n                                            onChange={(newValue) =>\n                                                handleCheckboxChange(key, newValue)\n                                            }\n                                            className=\"pf-u-mb-md\"\n                                        />\n                                    )\n                            }\n                        </div>\n                    }\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportSortDataByLabel)}\n                >\n                    <div className=\"custom-report-select-wrapper\">\n                        <SelectCustomSorter sorterData={sorterData} setSorterData={setSorterData}\n                            selectProps={{ className: 'pf-u-mr-sm pf-u-mb-sm' }}\n                            options={CUSTOM_REPORT_SORT_OPTIONS} />\n                    </div>\n                </FormGroup>\n\n                <FormGroup\n                    label={intl.formatMessage(messages.customReportUserNotesLabel)}\n                    fieldId=\"user-notes-box\"\n                    helperTextInvalid={intl.formatMessage(messages.customReportUserNoteTooLong)}\n                    validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                >\n                    <TextArea\n                        value={userNotes}\n                        onChange={(value) => setUserNotes(value)}\n                        type=\"text\"\n                        id=\"user-notes-box\"\n                        className=\"report-text-input\"\n                        resizeOrientation=\"vertical\"\n                        style={{ minHeight: '4em' }}\n                        validated={userNotes.length > PDF_REPORT_USER_NOTE_MAX_LENGTH && 'error'}\n                    />\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n};\n\nReportConfigModal.propTypes = {\n    isOpen: propTypes.bool,\n    filterData: propTypes.object,\n    sorterData: propTypes.object,\n    setFilterData: propTypes.func,\n    setSorterData: propTypes.func,\n    handleModalClose: propTypes.func,\n    handleDownloadButton: propTypes.func,\n    columnsToInclude: propTypes.array,\n    setColumnsToInclude: propTypes.func,\n    userNotes: propTypes.string,\n    setUserNotes: propTypes.func,\n    reportTitle: propTypes.string,\n    setReportTitle: propTypes.func,\n    inheritGlobalTags: propTypes.bool,\n    setInheritGlobalTags: propTypes.func,\n    globalFilterTags: propTypes.array\n};\n\nexport default ReportConfigModal;\n","import { compareVersions } from '../../../../Helpers/MiscHelper';\n\nconst buildOSGroups = (osVersions = []) => {\n    let groups = osVersions.reduce((acc, version) => {\n        const { major, minor } = version;\n        const groupName = `RHEL ${major}`;\n\n        acc[groupName] = [\n            ...(acc[groupName] || []),\n            {\n                label: `RHEL ${major}.${minor}`,\n                value: `${major}.${minor}`\n            }\n        ];\n\n        return acc;\n    }, {});\n\n    // sort by group, desc\n    groups = Object.entries(groups);\n    groups.sort((a, b) => compareVersions(a[0], b[0], false));\n\n    // sort versions, desc\n    groups = groups.map(([groupName, versions]) => [\n        groupName,\n        Array.from(versions).sort((a, b) =>\n            compareVersions(a.value, b.value, false)\n        )\n    ]);\n\n    return Object.fromEntries(groups);\n};\n\nexport default buildOSGroups;\n","import React from 'react';\nimport chartPieSolid from '../../../../static/images/chart-pie-solid.svg';\nimport PropTypes from 'prop-types';\n\nexport const ChartPieSolid = ({ style }) => (\n    <img style={style} src={chartPieSolid} alt=\"Static pie solid\" />\n);\n\nChartPieSolid.propTypes = {\n    style: PropTypes.object\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Grid, GridItem, Card, CardTitle, CardBody, CardFooter } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { FileAltIcon } from '@patternfly/react-icons';\nimport DownloadExecutive from './DownloadExecutive';\nimport ReportConfigModal from '../Modals/ReportConfigModal';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { ChartPieSolid } from '../../PresentationalComponents/CustomIcons/CustomIcons';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport { buildFilters, constructReportParameters } from '../../../Helpers/ReportsHelper';\nimport { CVE_REPORT_FILTERS, DEFAULT_FILTER_DATA, CUSTOM_REPORT_DEFAULT_SORT, PERMISSIONS } from '../../../Helpers/constants';\nimport styles from './Common/styles';\nimport { clearNotifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useRbac } from '../../../Helpers/Hooks';\nimport NoAccessPage from '../../PresentationalComponents/StaticPages/NoAccessPage';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nconst ReportsPage = () => {\n    const [[canDoAdvancedReporting, canReadVulnerabilities, canReadInventory], isLoading]\n        = useRbac([PERMISSIONS.advancedReporting, PERMISSIONS.readVulnerabilityResults, PERMISSIONS.readHosts], '');\n\n    const [isModalOpen, setModalOpen] = useState(false);\n    const [downloadCVEReport, setDownloadCVEReport] = useState(false);\n    const [reportTitle, setReportTitle] = useState(intl.formatMessage(messages.customReportDefaultTitle));\n    const [userNotes, setUserNotes] = useState('');\n    const [columnsToInclude, setColumnsToInclude] = useState(Object.keys(CVE_REPORT_FILTERS));\n    const [filterData, setFilterData] = useState(DEFAULT_FILTER_DATA);\n    const [sorterData, setSorterData] = useState(CUSTOM_REPORT_DEFAULT_SORT);\n    const [inheritGlobalTags, setInheritGlobalTags] = useState(true);\n\n    const globalFilterTags = useSelector(({ ReportsPageStore }) => ReportsPageStore.parameters.tags) ?? [];\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleModalClose = () => {\n        setReportTitle(intl.formatMessage(messages.customReportDefaultTitle));\n        setUserNotes('');\n        setColumnsToInclude(Object.keys(CVE_REPORT_FILTERS));\n        setFilterData(DEFAULT_FILTER_DATA);\n        setSorterData(CUSTOM_REPORT_DEFAULT_SORT);\n        setDownloadCVEReport(false);\n        setModalOpen(false);\n    };\n\n    const handleDownloadButton = () => {\n        setDownloadCVEReport(true);\n        setModalOpen(false);\n    };\n\n    const dissectTag = tag => {\n        const [namespace, keyValue] = tag.split('/');\n        const [key, value] = keyValue.split('=');\n        return { string: tag, namespace, key, value };\n    };\n\n    return (\n        isLoading ? <Spinner centered /> :\n            (canDoAdvancedReporting && canReadInventory) ? (\n                <React.Fragment>\n                    <Header title={intl.formatMessage(messages.reportsPageTitle)} showBreadcrumb={false} />\n                    <Main>\n                        <Grid hasGutter lg={3} md={4} sm={12}>\n                            <GridItem>\n                                <Card className=\"report-card\">\n                                    <CardTitle>\n                                        <ChartPieSolid style={styles.pieChartIcon} />\n                                        <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                            {intl.formatMessage(messages.executiveReportCardTitle)}\n                                        </span>\n                                    </CardTitle>\n                                    <CardBody>\n                                        {intl.formatMessage(messages.executiveReportCardDescription)}\n                                    </CardBody>\n                                    <CardFooter>\n                                        <DownloadExecutive />\n                                    </CardFooter>\n                                </Card>\n                            </GridItem>\n                            {canReadVulnerabilities &&\n                                <GridItem>\n                                    <Card className=\"report-card\">\n                                        <CardTitle>\n                                            <FileAltIcon size=\"lg\" color=\"var(--pf-global--link--Color)\" />\n                                            <span className=\"pf-u-ml-sm\" style={styles.cardTitle}>\n                                                {intl.formatMessage(messages.customReportCardTitle)}\n                                            </span>\n                                        </CardTitle>\n                                        <CardBody>\n                                            {intl.formatMessage(messages.customReportCardDescription)}\n                                        </CardBody>\n                                        <CardFooter>\n                                            <a className=\"create-report\" onClick={() => setModalOpen(true)}>\n                                                {intl.formatMessage(messages.customReportCardButton)}\n                                            </a>\n                                        </CardFooter>\n                                    </Card>\n                                </GridItem>\n                            }\n                        </Grid>\n                    </Main>\n                    <ReportConfigModal\n                        isOpen={isModalOpen}\n                        columnsToInclude={columnsToInclude}\n                        setColumnsToInclude={setColumnsToInclude}\n                        filterData={filterData}\n                        sorterData={sorterData}\n                        userNotes={userNotes}\n                        reportTitle={reportTitle}\n                        setReportTitle={setReportTitle}\n                        setUserNotes={setUserNotes}\n                        setFilterData={setFilterData}\n                        setSorterData={setSorterData}\n                        handleModalClose={(handleModalClose)}\n                        handleDownloadButton={handleDownloadButton}\n                        inheritGlobalTags={inheritGlobalTags}\n                        setInheritGlobalTags={setInheritGlobalTags}\n                        globalFilterTags={globalFilterTags}\n                    />\n\n                    {downloadCVEReport && <DownloadCVEsReport\n                        key=\"download\"\n                        reportData={{\n                            header: columnsToInclude,\n                            reportTitle,\n                            userNotes\n                        }}\n                        showButton={false}\n                        onSuccess={handleModalClose}\n                        params={constructReportParameters({ ...filterData, tags: inheritGlobalTags\n                            ? globalFilterTags?.map(dissectTag) : filterData.tags }, sorterData)}\n                        filters={buildFilters({ ...filterData, tags: inheritGlobalTags\n                            ? globalFilterTags?.map(dissectTag) : filterData.tags })}\n                        isReportDynamic\n                        label={messages.configModalExportReport}\n                    />}\n                </React.Fragment>\n            ) : (\n                <NoAccessPage\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                    emptyStateTitle={intl.formatMessage(messages.emptyStateNoAccessReportsPage)}\n                />\n            )\n    );\n};\n\nexport default ReportsPage;\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { intl } from '../Utilities/IntlProvider';\nimport messages from '../Messages';\nimport { NotAuthorizedNotification } from './constants';\n\nclass DownloadReport {\n    constructor() {\n        this.defaultParams = {\n            page: 1,\n            page_size: Math.min(Number.MAX_SAFE_INTEGER, 9007199254740991)\n        };\n\n        this.params = {\n            cve: null\n        };\n\n        this.pages = ['systems-exposed', 'system-cves', 'cves', 'system-list'];\n        this.formats = ['csv', 'json'];\n\n        this.notifications = {\n            start: {\n                variant: 'info',\n                title: intl.formatMessage(messages.notificationReportDownloadStart)\n            },\n            success: {\n                variant: 'success',\n                title: intl.formatMessage(messages.notificationReportDownloadSuccess)\n            },\n            failure: {\n                variant: 'danger',\n                autoDismiss: false,\n                title: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            }\n        };\n    }\n\n    filename = (page) => {\n        const date = new Date().toISOString().replace(/[T:]/g, '-').split('.')[0] + '-utc';\n\n        switch (page) {\n            case 'reports':\n                return `vulnerability_cves-report--${new Date().toISOString().split('T')[0]}`;\n            case 'systems-exposed':\n                return `vulnerability_systems-exposed-${this.params.cve}--${date}`;\n            case 'system-list':\n                return `vulnerability_systems--${date}`;\n            default:\n                return `vulnerability_cves--${date}`;\n\n        }\n    };\n\n    checkTypes = (fetchData, page, format) => {\n        if (typeof fetchData !== 'function') {\n            throw `exec expects the 1st param to be funtion. Received ${typeof fetchData}`;\n        }\n\n        if (!this.pages.includes(page)) {\n            throw `Page ${page} does not exist`;\n        }\n\n        if (!this.formats.includes(format)) {\n            throw `Format ${format} is not supported`;\n        }\n    };\n\n    /**\n     * Execute and download the report\n     *\n     * @param {Function} fetchData - Function to be called in order to fetch data.\n     * @param {Object || Array} params - Object to be sent as request params. If you need to pass extra argument, pass an array.\n     * @param {String} format - Supported formats to download are CSV and JSON.\n     * @param {String} page - Name of the page based on which the filename will be determined.\n     * @returns {void}\n     */\n    exec = async (fetchData, params, format, page, showNotification, clearNotification) => {\n        showNotification(this.notifications.start);\n\n        this.checkTypes(fetchData, page, format);\n        this.params.cve = params?.id || null;\n\n        try {\n            let { payload } = await fetchData({\n                ...params.id && { id: params.id },\n                ...params,\n                ...this.defaultParams,\n                data_format: format,\n                report: 'true'\n            });\n\n            let { data: response } = await payload;\n            let data = format === 'json' ? JSON.stringify(response) : response;\n\n            downloadFile(data, this.filename(page), format);\n\n            clearNotification();\n            showNotification(this.notifications.success);\n        } catch (error) {\n            clearNotification();\n            showNotification(error.status === '403' ? NotAuthorizedNotification : this.notifications.failure);\n\n            throw `${error}`;\n        }\n    };\n}\n\nexport default new DownloadReport();\n"],"names":["CounterItem","counter","label","style","styles","propTypes","PropTypes","FirstPage","data","intl","totalSystems","totalCves","totalRules","Fragment","key","formatMessage","messages","date","dateFormat","Date","type","props","children","systems","cves","rules","withColumn","SecondPage","cveDesc","description","length","recentCvesData","CVSSChart","CVSSData","CVSSHeader","topCves","legendHeader","restCVSSHeader","titleProps","title","chartType","subTitle","colorSchema","withHeader","rows","flex","map","value","synopsis","hasExploit","known_exploit","hasRule","rule_presence","cvss3","cvss3_score","systemsAffected","systems_affected","labels","CVElabels","Number","parseFloat","toFixed","toString","ThirdPage","rulesDesc","rule","associatedCves","truncate","join","topRules","rulesHeader","rulesBySeverityMap","rulesChart","legend","name","associated_cves","variant","severity","BuildExecReport","cvesBySeverity","cves_by_severity","recentCves","recent_cves","top_cves","cves_total","system_count","top_rules","rules_total","rulesBySeverity","rules_by_severity","na","count","CVSSMapping","Object","keys","reverse","EXEC_RULES_SEVERITY_MAP","values","percentage","knownExploitsCount","known_exploit_count","mapFields","fields","percentageInfo","arr","field","fieldData","undefined","push","recentCvesMapping","x","y","coverPageData","cvesData","rulesData","useIntl","useState","isLoading","setLoading","renderPDF","setRenderPDF","setSecurityRulesPresent","setExploit","useNotification","addNotification","clearNotifications","dataFetch","getExecutiveReport","status","NotAuthorizedNotification","autoDismiss","msg","report","buildExecReport","some","cve","toISOString","split","onClick","fallback","fileName","buttonProps","isInline","groupName","asyncFunction","allPagesHaveTitle","showButton","footer","FooterPDF","onSuccess","SelectCustomSorter","sorterData","setSorterData","selectProps","options","isOpen","setOpen","Select","direction","onToggle","placeholderText","find","item","onSelect","event","optionName","optionValue","handleOnSelectChange","width","SelectOption","ReportConfigModal","isModalOpen","handleModalClose","filterData","setFilterData","handleDownloadButton","columnsToInclude","setColumnsToInclude","userNotes","setUserNotes","reportTitle","setReportTitle","inheritGlobalTags","setInheritGlobalTags","globalFilterTags","dispatch","useDispatch","includeAllColumns","setIncludeAllColumns","osGroups","groups","reduce","acc","version","major","minor","entries","sort","a","b","compareVersions","versions","Array","from","fromEntries","buildOSGroups","useSelector","ReportsPageStore","operatingSystems","activeFilters","useEffect","CVE_REPORT_FILTERS","fetchOperatingSystems","Modal","ouiaId","onClose","actions","Button","isDisabled","isCvssRangeValid","cvss_filter","to","PDF_REPORT_USER_NOTE_MAX_LENGTH","Form","FormGroup","fieldId","TextInput","onChange","className","id","filterId","component","items","filterName","flat","TagFilter","onEdit","selectedTags","tags","setSelectedTags","globalTags","ToggleGroup","ToggleGroupItem","text","isSelected","Checkbox","isChecked","filter","hasColumn","includes","newValue","parameter","handleCheckboxChange","CUSTOM_REPORT_SORT_OPTIONS","helperTextInvalid","validated","TextArea","resizeOrientation","minHeight","ChartPieSolid","src","chartPieSolid","alt","useRbac","PERMISSIONS","canDoAdvancedReporting","canReadVulnerabilities","canReadInventory","setModalOpen","downloadCVEReport","setDownloadCVEReport","DEFAULT_FILTER_DATA","CUSTOM_REPORT_DEFAULT_SORT","parameters","dissectTag","tag","namespace","string","Spinner","centered","Header","showBreadcrumb","Main","Grid","hasGutter","lg","md","sm","GridItem","Card","CardTitle","CardBody","CardFooter","size","color","DownloadCVEsReport","reportData","header","params","constructReportParameters","filters","buildFilters","isReportDynamic","NoAccessPage","emptyStateTitle","filename","page","replace","checkTypes","fetchData","format","pages","formats","exec","showNotification","clearNotification","notifications","start","defaultParams","data_format","payload","response","JSON","stringify","downloadFile","success","failure","this","page_size","Math","min","MAX_SAFE_INTEGER"],"sourceRoot":""}