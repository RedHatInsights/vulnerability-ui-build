{"version":3,"file":"js/SystemsExposedTable.a6908e89eb1453099ade.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/js/components/Spinner/Spinner.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter.js","webpack:///./src/Components/SmartComponents/Modals/CvePairStatusModal.js","webpack:///./src/Components/SmartComponents/Remediation/Remediation.js","webpack:///./src/Components/SmartComponents/SystemsExposedTable/SystemsExposedTable.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spinner = exports.spinnerSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nconst spinner_1 = tslib_1.__importDefault(require(\"@patternfly/react-styles/css/components/Spinner/spinner\"));\nconst react_styles_1 = require(\"@patternfly/react-styles\");\nvar spinnerSize;\n(function (spinnerSize) {\n    spinnerSize[\"sm\"] = \"sm\";\n    spinnerSize[\"md\"] = \"md\";\n    spinnerSize[\"lg\"] = \"lg\";\n    spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize = exports.spinnerSize || (exports.spinnerSize = {}));\nconst Spinner = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', size = 'xl', 'aria-valuetext': ariaValueText = 'Loading...', isSVG = false, diameter, isInline = false, 'aria-label': ariaLabel, 'aria-labelledBy': ariaLabelledBy } = _a, props = tslib_1.__rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", \"isInline\", 'aria-label', 'aria-labelledBy']);\n    const Component = isSVG ? 'svg' : 'span';\n    return (React.createElement(Component, Object.assign({ className: (0, react_styles_1.css)(spinner_1.default.spinner, isInline ? spinner_1.default.modifiers.inline : spinner_1.default.modifiers[size], className), role: \"progressbar\", \"aria-valuetext\": ariaValueText }, (isSVG && { viewBox: '0 0 100 100' }), (diameter && { style: { '--pf-c-spinner--diameter': diameter } }), (ariaLabel && { 'aria-label': ariaLabel }), (ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy }), (!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' }), props), isSVG ? (React.createElement(\"circle\", { className: spinner_1.default.spinnerPath, cx: \"50\", cy: \"50\", r: \"45\", fill: \"none\" })) : (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerClipper) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerLeadBall) }),\n        React.createElement(\"span\", { className: (0, react_styles_1.css)(spinner_1.default.spinnerTailBall) })))));\n};\nexports.Spinner = Spinner;\nexports.Spinner.displayName = 'Spinner';\n//# sourceMappingURL=Spinner.js.map","\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { REMEDIATION_OPTIONS } from '../../../../Helpers/constants';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\n\nconst remediationFilter = (apply, currentFilter = {}) => {\n    let { remediation: currentValue } = currentFilter;\n\n    const filterByRemediation = values => {\n        apply({\n            remediation: (values.length > '0' && values.filter(value => value !== ',').join(',')) || '',\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterRemediation),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'remediation',\n        key: 'remediation',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByRemediation(value);\n            },\n            items: REMEDIATION_OPTIONS.map(item => ({ label: item.label, value: item.value })),\n            value: (currentValue ? currentValue.split(',') : [])\n        }\n    };\n};\n\nexport default remediationFilter;\n","import { Checkbox, Form, FormGroup, Stack, StackItem, Alert, Split, Tooltip, SplitItem } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport propTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { setSystemCveStatus } from '../../../Helpers/APIHelper';\nimport BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const CvePairStatusModal = ({ cveList, updateRef, inventoryList, intl, type }) => {\n    const {\n        JustificationInput,\n        justification,\n        setJustification,\n        setProps: setJustificationProps\n    } = useJustificationInput(getJustification());\n    const [isOverallChecked, setOverallCheckbox] = useState(getDefaultCheckboxState());\n    const { StatusSelect, statusId, setStatusId, setProps: setSelectProps } = useStatusSelect(getCveStatus());\n    const inventoryIds = inventoryList.map(item => item.id || item.inventory_id);\n    const inventoryNames = inventoryList.map(item => item.display_name);\n\n    useEffect(() => {\n        setSelectProps({ isDisabled: isOverallChecked, ouiaId: 'status-select' });\n        setJustificationProps({ disabled: isOverallChecked });\n        setStatusId(getCveStatus());\n        setJustification(getJustification());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isOverallChecked, setSelectProps, setJustificationProps]);\n\n    const handleSave = () => {\n        const cveIds = cveList.map(item => item.id);\n        const setStatusParams = !isOverallChecked\n            ? {\n                status_id: parseInt(statusId),\n                cve: cveIds,\n                status_text: justification,\n                inventory_id: inventoryIds\n            }\n            : { cve: cveIds, inventory_id: inventoryIds };\n        return setSystemCveStatus(setStatusParams).then(updateRef);\n    };\n\n    function getDefaultCheckboxState() {\n        switch (type) {\n            case 'systemsExposed': {\n                const sameAsOverall = inventoryList.every(item =>\n                    item.status_id === cveList[0]?.status_id && item.justification === cveList[0]?.justification\n                );\n\n                if (sameAsOverall) { // overall is only one therefore they are also same to each other\n                    return true;\n                }\n\n                break;\n            }\n\n            case 'systemDetail': {\n                const sameAsEachOther = cveList.every((item, _, arr) =>\n                    item.status_id === arr[0]?.status_id && item.justification === arr[0]?.justification\n                );\n\n                const sameAsOverall = cveList.every(item =>\n                    item.status_id === item.cve_status_id && item.justification === item.cve_justification\n                );\n\n                if (sameAsEachOther && sameAsOverall) {\n                    return true;\n                }\n\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function getCveStatus() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].status_id;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? inventoryList[0]?.status_id : '0';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) => item.cve_status_id === arr[0].cve_status_id);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_id : '0';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) => item.status_id === arr[0].status_id);\n\n                    return sameAsEachOther ? cveList[0]?.status_id : '0';\n                }\n            }\n        }\n    }\n\n    function getJustification() {\n        switch (type) {\n            case 'systemsExposed': {\n                if (isOverallChecked) {\n                    return cveList[0].justification;\n                }\n                else {\n                    const sameAsEachOther = inventoryList.every((item, _, arr) =>\n                        item.justification === arr[0]?.justification);\n\n                    return sameAsEachOther ? inventoryList[0]?.justification || '' : '';\n                }\n            }\n\n            case 'systemDetail': {\n                if (isOverallChecked) {\n                    const sameOverallAsEachOther = cveList.every((item, _, arr) =>\n                        item.cve_status_text === arr[0]?.cve_status_text);\n\n                    return sameOverallAsEachOther ? cveList[0]?.cve_status_text || '' : '';\n                }\n                else {\n                    const sameAsEachOther = cveList.every((item, _, arr) =>\n                        item.status_text === arr[0]?.status_text);\n\n                    return sameAsEachOther ? cveList[0]?.status_text || '' : '';\n                }\n            }\n        }\n    }\n\n    const showDifferentStatusesWarning = () => {\n        switch (type) {\n            case 'systemsExposed': {\n                return inventoryList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n\n            case 'systemDetail': {\n                return cveList.some((item, _, arr) => item.status_id !== arr[0]?.status_id);\n            }\n        }\n    };\n\n    const onSuccessNotification = {\n        variant: 'success',\n        title: type === 'systemsExposed'\n            ? intl.formatMessage(messages.notificationSystemStatusUpdateSuccessful,\n                { count: inventoryList.length || 0, systemName: inventoryNames[0] })\n            : intl.formatMessage(messages.notificationStatusUpdateSuccessful, { count: cveList.length || 0 })\n    };\n\n    const onFailureNotification = {\n        variant: 'danger',\n        autoDismiss: false,\n        title: intl.formatMessage(messages.notificationStatusUpdateFailureTitle),\n        description: intl.formatMessage(messages.notificationStatusUpdateFailureBody)\n    };\n\n    const modalTitle = intl.formatMessage(messages.cvePairStatusModalTitle, { count: inventoryIds.length * cveList.length });\n\n    return (\n        <BaseModal\n            items={cveList}\n            onSave={handleSave}\n            onSuccessNotification={onSuccessNotification}\n            onFailureNotification={onFailureNotification}\n            title={modalTitle}\n            ouiaId=\"status-modal\"\n        >\n            <Stack hasGutter>\n                {showDifferentStatusesWarning() &&\n                    <StackItem>\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.cvePairStatusModalAlert)}\n                        />\n                    </StackItem>\n                }\n                <StackItem>\n                    {intl.formatMessage(\n                        messages.cvePairStatusModalSelected,\n                        {\n                            cveCount: cveList.length || 0,\n                            cveId: cveList[0]?.id, // only used when length is 1\n                            systemCount: inventoryList.length || 0,\n                            systemName: inventoryNames[0], // only used when length is 1\n                            b: (...chunks) => <b>{chunks}</b> // explicitly specifying what is wrapped <b> should be bold\n                        }\n                    )}\n                </StackItem>\n                <StackItem>\n                    <Form key=\"key\">\n                        <FormGroup fieldId=\"overall\">\n                            <Split>\n                                <SplitItem>\n                                    <Checkbox\n                                        label={intl.formatMessage(messages.cvePairStatusModalUseOverallCheckbox)}\n                                        id=\"alt-form-checkbox-1\"\n                                        name=\"alt-form-checkbox-1\"\n                                        isChecked={isOverallChecked}\n                                        onChange={checked => setOverallCheckbox(checked)}\n                                    />\n                                </SplitItem>\n                                <SplitItem>\n                                    <Tooltip\n                                        content={intl.formatMessage(messages.cvePairStatusModalUseOverallTooltip)}\n                                    >\n                                        <OutlinedQuestionCircleIcon\n                                            className=\"pf-u-ml-xs\"\n                                            color=\"var(--pf-global--Color--200)\"\n                                            style={{ verticalAlign: '0' }}\n                                        />\n                                    </Tooltip>\n                                </SplitItem>\n                            </Split>\n                        </FormGroup>\n                        {StatusSelect}\n                        {JustificationInput}\n                    </Form>\n                </StackItem>\n            </Stack>\n        </BaseModal>\n    );\n};\n\nCvePairStatusModal.propTypes = {\n    cveList: propTypes.array,\n    updateRef: propTypes.func,\n    inventoryList: propTypes.array,\n    intl: propTypes.any,\n    type: propTypes.oneOf(['systemsExposed', 'systemDetail'])\n};\n\nexport default injectIntl(CvePairStatusModal);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useDispatch } from 'react-redux';\nimport messages from '../../../Messages';\nimport { FormattedMessage } from 'react-intl';\nimport { mergeObjectPropertyBy } from '../../../Helpers/MiscHelper';\nimport { Spinner } from '@patternfly/react-core';\nimport { spinnerSize } from '@patternfly/react-core/dist/js/components/Spinner/Spinner';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\n\nconst Remediation = ({ cves, systems, manyRules, isDisabled }) => {\n    const dispatch = useDispatch();\n\n    const baseIssueTemplate = (cve, system) => ({\n        id: `vulnerabilities:${cve}`,\n        description: cve,\n        systems: [system]\n    });\n\n    /*eslint-disable camelcase*/\n    const remediationProvider = (cvesProvider = [], systemsProvider = [], manyRules = false) => {\n        let cves = [].concat(cvesProvider);\n        let systems = [].concat(systemsProvider);\n        let issues = [];\n\n        // CVE Details page where cves === 1 and systems > 1...N and cves linked rules > 1...N\n        if (manyRules && cves.length === 1) {\n            let [cve] = cves;\n            issues = systems.reduce((prev, { id: systemID, rule }) => {\n                let issue = baseIssueTemplate(cve.id, systemID);\n\n                if (rule) {\n                    issue.id = `${issue.id}:${rule?.rule?.rule_id}`;\n                }\n\n                return [...prev, issue];\n            }, []);\n\n            issues = mergeObjectPropertyBy(issues, 'systems');\n        }\n\n        // System cves where systems === 1 & cves > 1..N and cves linked rules === 1\n        if (!manyRules && systems?.length === 1) {\n            const [systemID] = systems;\n\n            issues = cves.reduce((acc, { id: cveID, rule, rule_id }) => {\n                let issue = baseIssueTemplate(cveID, systemID);\n\n                if (rule?.rule_id) {\n                    issue.id = `${issue.id}:${rule.rule_id}`;\n                } else if (rule_id) {\n                    issue.id = `${issue.id}:${rule_id}`;\n                }\n\n                return [...acc, issue];\n            }, []);\n        }\n\n        return cves.length && systems.length ? { issues } : false;\n    };\n    /*eslint-enable camelcase*/\n\n    return (\n        <AsyncComponent\n            appName=\"remediations\"\n            module=\"./RemediationButton\"\n            fallback={<Spinner size={spinnerSize.lg} />}\n            isDisabled={isDisabled}\n            dataProvider={() => remediationProvider(cves, systems, manyRules)}\n            onRemediationCreated={result => dispatch(addNotification(result.getNotification()))}\n        >\n            <FormattedMessage {...messages.remediateLabel} />\n        </AsyncComponent>\n    );\n};\n\nRemediation.propTypes = {\n    cves: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string,\n        propTypes.shape({\n            id: propTypes.string,\n            rules: propTypes.array\n        })\n    ]),\n    systems: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.string\n    ]),\n    manyRules: propTypes.bool,\n    isDisabled: propTypes.bool\n};\n\nexport default Remediation;\n","import propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useUrlParams } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport CvePairStatusModal from '../Modals/CvePairStatusModal';\nimport ReducerRegistry from '../../../Utilities/ReducerRegistry';\nimport { systemExposedTableRowActions, createExposedSystemsRows } from '../../../Helpers/CVEHelper';\nimport { inventoryEntitiesReducer } from '../../../Store/Reducers/InventoryEntitiesReducer';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    fetchAffectedSystemsByCVE,\n    fetchCveDetails,\n    expandRow,\n    changeExposedSystemsParameters,\n    clearInventoryStore,\n    selectRows,\n    changeColumnsCveDetail,\n    fetchAffectedSystemIdsByCve\n} from '../../../Store/Actions/Actions';\nimport {\n    SYSTEMS_EXPOSED_HEADER,\n    SYSTEMS_EXPOSED_ALLOWED_PARAMS,\n    PERMISSIONS,\n    ANSIBLE_REMEDIATION,\n    RULE_PRESENCE_OPTIONS,\n    DEFAULT_PAGE_SIZE,\n    CVE_DETAILS_FILTER_PARAMS\n} from '../../../Helpers/constants';\nimport { TableVariant } from '@patternfly/react-table';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { EmptyStateNoSystems } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { useBulkSelect, useColumnManagement, useGetEntities, useRbac } from '../../../Helpers/Hooks';\nimport * as APIHelper from '../../../Helpers/APIHelper';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\nimport { buildActiveFilters, exportConfig, isFilterInDefaultState, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport Remediation from '../Remediation/Remediation';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport useOsVersionFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/OsVersionFilter';\nimport remediationFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/RemediationFilter';\nimport advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';\nimport useFeatureFlag from '../../../Utilities/useFeatureFlag';\n\nconst SystemsExposedTable = ({\n    intl, cveName, cveStatusDetails, filterRuleValues,\n    hasSecurityRule, canEditPairStatus, canExport, inventoryRef, refreshInventory\n}) => {\n    const [[canReadHostsInventory], isLoadingInventory] = useRbac([\n        PERMISSIONS.readHosts\n    ], 'inventory');\n\n    const dispatch = useDispatch();\n    const [isAllExpanded, setIsAllExpanded] = useState(false);\n    const [StatusModal, setStatusModal] = useState(() => () => null);\n    const [urlParameters, setUrlParams] = useUrlParams(SYSTEMS_EXPOSED_ALLOWED_PARAMS);\n    const inventoryGroupsEnabled = useFeatureFlag('hbi.ui.inventory-groups');\n\n    const items = useSelector(({ entities }) => entities?.rows || [], shallowEqual);\n    const totalItems = useSelector(({ entities }) => entities?.total);\n    const meta = useSelector(({ entities }) => entities?.meta);\n    const error = useSelector(({ entities }) => entities?.error || {});\n    const selectedRows = useSelector(({ entities }) => entities?.selectedRows || []);\n    const selectedRowsCount = useSelector(({ entities }) => entities?.selectedRowsCount ?? 0);\n    const isLoaded = useSelector(({ entities }) => entities?.loaded || false);\n\n    const parameters = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.parameters,\n        shallowEqual\n    );\n    const columns = useSelector(\n        ({ CVEDetailsPageStore }) => CVEDetailsPageStore.columns\n    );\n    const filteredColumns = columns.filter(column => !column.inventoryGroupsFeatureFlag || inventoryGroupsEnabled);\n\n    const apply = (params) => dispatch(changeExposedSystemsParameters(params));\n\n    const handleSelect = (payload, selecting) => dispatch(selectRows(payload, selecting));\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(filteredColumns, newColumns => dispatch(changeColumnsCveDetail(newColumns)));\n\n    useEffect(() => apply(urlParameters), []);\n\n    useEffect(() => setUrlParams({ ...parameters }), [parameters]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearInventoryStore());\n        };\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (meta?.cves_without_errata === true) {\n            if (!parameters.advisory_available && !parameters.ignore_default_params) {\n                apply({ advisory_available: 'true' });\n            }\n        }\n    }, [meta?.cves_without_errata]);\n\n    const downloadReport = format => {\n        DownloadReport.exec(\n            fetchAffectedSystemsByCVE,\n            { id: cveName, ...parameters },\n            format,\n            'systems-exposed',\n            notification => dispatch(addNotification(notification)), () => dispatch(clearNotifications())\n        );\n    };\n\n    const showStatusModal = (cves, inventories) => {\n        setStatusModal(\n            () => () =>\n                <CvePairStatusModal\n                    cveList={cves}\n                    updateRef={() => {\n                        refreshInventory();\n                        dispatch(fetchCveDetails(cveName));\n                    }}\n                    inventoryList={inventories}\n                    type=\"systemsExposed\"\n                />\n        );\n    };\n\n    const expandAll = (rawData, isAllExpanded) => {\n        rawData.data.forEach(row => {\n            dispatch((expandRow(row.id, !isAllExpanded)));\n        });\n        setIsAllExpanded(!isAllExpanded);\n    };\n\n    const getEntities = useGetEntities(\n        APIHelper.getAffectedSystemsByCVE,\n        {\n            id: cveName,\n            createRows: createExposedSystemsRows\n        }\n    );\n\n    const [columnCounter, setColumnCount] = useState(0);\n    useEffect(() => setColumnCount(columnCounter + 1), [columns]);\n\n    const mergeColumns = inventoryColumns => {\n        return filteredColumns\n            .filter(column => column.isShown ?? column.isShownByDefault)\n            .map(column => ({ ...inventoryColumns.find(({ key }) => column.key === key), ...column }));\n    };\n\n    const rawData = { data: items, meta: { totalItems }, isLoaded };\n\n    const remediableSystems = selectedRows.filter(system => system.remediation === ANSIBLE_REMEDIATION);\n\n    const kebabOptions = [\n        ...isLoaded ? [\n            <Remediation\n                manyRules\n                isDisabled={selectedRows.length === 0}\n                systems={remediableSystems}\n                cves={{ id: cveName, rules: filterRuleValues }}\n                key=\"remediation\"\n            />\n        ] : [],\n        ...canEditPairStatus ? [{\n            label: intl.formatMessage(messages.editStatus),\n            onClick: () => showStatusModal([cveStatusDetails], selectedRows),\n            props: { isDisabled: !selectedRowsCount }\n        }] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => setColumnManagementModalOpen(true)\n        }\n    ];\n\n    const searchFilter = useSearchFilter(\n        'filter',\n        messages.systemsSearchName,\n        messages.searchFilterByName,\n        parameters.filter,\n        apply\n    );\n\n    const advisoryNameFilter = useSearchFilter(\n        'advisory',\n        messages.advisoryName,\n        messages.searchFilterByAdvisoryName,\n        parameters.advisory,\n        apply\n    );\n\n    const osVersionFilter = useOsVersionFilter(\n        parameters.rhel_version,\n        apply\n    );\n\n    const bulkSelectProps = useBulkSelect({\n        rawData,\n        selectedRows,\n        selectedRowsCount,\n        handleSelect,\n        fetchResource: ops => fetchAffectedSystemIdsByCve({ id: cveName, ...parameters, ...ops })\n    });\n\n    if (isAllExpanded) {\n        if (rawData.data.filter(row => row.isOpen === undefined).length > 0) {\n            expandAll(rawData, false);\n        }\n    }\n\n    const onCollapse = (e, rowIndex, isOpen, rowData) => {\n        const collapseAll = rowIndex === undefined;\n\n        collapseAll\n            ? expandAll(rawData, isAllExpanded)\n            : dispatch(expandRow(rowData.id, isOpen));\n    };\n\n    const canSelect = canEditPairStatus;\n\n    const defaultFilters = { ...meta?.cves_without_errata ? { advisory_available: 'true' } : {} };\n\n    return (\n        <Fragment>\n            {StatusModal && <StatusModal />}\n            {ColumnManagementModal}\n            {isLoadingInventory ? <Spinner centered /> :\n                error?.hasError && !canReadHostsInventory\n                    ? <ErrorHandler code={error?.errorCode} />\n                    : <InventoryTable\n                        disableDefaultColumns\n                        onLoad={({ mergeWithEntities }) => {\n                            ReducerRegistry.register({\n                                ...mergeWithEntities(\n                                    inventoryEntitiesReducer(SYSTEMS_EXPOSED_HEADER),\n                                    {\n                                        page: Number(parameters.page || 1),\n                                        perPage: DEFAULT_PAGE_SIZE,\n                                        ...(parameters.sort && {\n                                            sortBy: {\n                                                key: parameters.sort.replace(/^-/, ''),\n                                                direction: parameters.sort.match(/^-/) ? 'desc' : 'asc'\n                                            }\n                                        })\n                                    }\n                                )\n                            });\n                        }}\n                        tableProps={{\n                            isStickyHeader: true,\n                            canSelectAll: false,\n                            ...hasSecurityRule && {\n                                canCollapseAll: true,\n                                onCollapse\n                            },\n                            actionResolver: () => canEditPairStatus && totalItems &&\n                                systemExposedTableRowActions(showStatusModal, cveStatusDetails),\n                            variant: TableVariant.compact\n                        }}\n                        paginationProps={{\n                            isDisabled: !totalItems\n                        }}\n                        showTagModal\n                        isFullView\n                        ref={inventoryRef}\n                        autoRefresh\n                        key=\"inventory\"\n                        customFilters={{\n                            vulnerabilityParams: {\n                                ...parameters\n                            }\n                        }}\n                        columnsCounter={columnCounter}\n                        columns={defaultColumns => mergeColumns(defaultColumns)}\n                        getEntities={getEntities}\n                        hasCheckbox={canSelect && totalItems !== 0}\n                        showActions={totalItems !== 0}\n                        hideFilters={{ all: true, hostGroupFilter: false }}\n                        noSystemsTable={<EmptyStateNoSystems />}\n                        actionsConfig={{\n                            actions: kebabOptions,\n                            dropdownProps: { ouiaId: 'toolbar-actions' }\n                        }}\n                        expandable={hasSecurityRule}\n                        exportConfig={canExport && {\n                            isDisabled: totalItems === 0,\n                            ouiaId: 'export',\n                            ...exportConfig({ downloadReport })\n                        }}\n                        activeFiltersConfig={{\n                            filters: buildActiveFilters({ ...parameters }, filterRuleValues),\n                            onDelete: (_, chips, reset) => removeFilters(chips, apply, reset, defaultFilters),\n                            deleteTitle: intl.formatMessage(messages.resetFilters),\n                            showDeleteButton: !isFilterInDefaultState(parameters, defaultFilters, CVE_DETAILS_FILTER_PARAMS)\n                        }}\n                        bulkSelect={canSelect ? bulkSelectProps : undefined}\n                        filterConfig={{\n                            items: [\n                                searchFilter,\n                                securityRuleFilter(\n                                    apply,\n                                    parameters,\n                                    filterRuleValues,\n                                    {\n                                        isDynamic: true,\n                                        dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== 'true')\n                                    }\n                                ),\n                                statusFilter(apply, parameters),\n                                ...meta?.cves_without_errata ? [advisoryAvailabilityFilter(apply, parameters)] : [],\n                                advisoryNameFilter,\n                                ...osVersionFilter,\n                                remediationFilter(apply, parameters)\n                            ]\n                        }}\n                    />\n            }\n        </Fragment>\n    );\n};\n\nSystemsExposedTable.propTypes = {\n    intl: propTypes.object,\n    cveName: propTypes.string,\n    cveStatusDetails: propTypes.object,\n    filterRuleValues: propTypes.array,\n    hasSecurityRule: propTypes.bool,\n    canEditPairStatus: propTypes.bool,\n    canExport: propTypes.bool,\n    inventoryRef: propTypes.object,\n    refreshInventory: propTypes.func\n};\n\nexport default injectIntl(SystemsExposedTable);\n"],"names":["exports","tslib_1","__importStar","__importDefault","spinnerSize","apply","currentValue","arguments","length","undefined","remediation","label","intl","formatMessage","messages","filterRemediation","type","conditionalFilterType","checkbox","urlParam","key","filterValues","onChange","event","value","values","filter","join","page","items","REMEDIATION_OPTIONS","map","item","split","CvePairStatusModal","_ref","_cveList$7","cveList","updateRef","inventoryList","_useJustificationInpu","useJustificationInput","getJustification","JustificationInput","justification","setJustification","setJustificationProps","setProps","_useState","useState","every","_cveList$","_cveList$2","status_id","sameAsEachOther","_","arr","_arr$","_arr$2","sameAsOverall","cve_status_id","cve_justification","getDefaultCheckboxState","_useState2","_slicedToArray","isOverallChecked","setOverallCheckbox","_useStatusSelect","useStatusSelect","getCveStatus","StatusSelect","statusId","setStatusId","setSelectProps","inventoryIds","id","inventory_id","inventoryNames","display_name","_inventoryList$","_cveList$3","_cveList$4","_arr$3","_inventoryList$2","_cveList$5","_cveList$6","_arr$4","cve_status_text","_arr$5","status_text","useEffect","isDisabled","ouiaId","disabled","onSuccessNotification","variant","title","notificationSystemStatusUpdateSuccessful","count","systemName","notificationStatusUpdateSuccessful","onFailureNotification","autoDismiss","notificationStatusUpdateFailureTitle","description","notificationStatusUpdateFailureBody","modalTitle","cvePairStatusModalTitle","React","BaseModal","onSave","cveIds","setStatusParams","cve","parseInt","setSystemCveStatus","then","Stack","hasGutter","some","_arr$6","_arr$7","showDifferentStatusesWarning","StackItem","Alert","isInline","cvePairStatusModalAlert","cvePairStatusModalSelected","cveCount","cveId","systemCount","b","_len","chunks","Array","_key","Form","FormGroup","fieldId","Split","SplitItem","Checkbox","cvePairStatusModalUseOverallCheckbox","name","isChecked","checked","Tooltip","content","cvePairStatusModalUseOverallTooltip","OutlinedQuestionCircleIcon","className","color","style","verticalAlign","propTypes","injectIntl","Remediation","cves","systems","manyRules","dispatch","useDispatch","baseIssueTemplate","system","concat","AsyncComponent","appName","module","fallback","Spinner","size","lg","dataProvider","systemsProvider","issues","reduce","prev","_ref2","_rule$rule","systemID","rule","issue","rule_id","_toConsumableArray","mergeObjectPropertyBy","acc","_ref3","cveID","remediationProvider","onRemediationCreated","result","addNotification","getNotification","FormattedMessage","remediateLabel","rules","SystemsExposedTable","cveName","cveStatusDetails","filterRuleValues","hasSecurityRule","canEditPairStatus","canExport","inventoryRef","refreshInventory","_useRbac","useRbac","PERMISSIONS","readHosts","_useRbac2","canReadHostsInventory","isLoadingInventory","isAllExpanded","setIsAllExpanded","_useState3","_useState4","StatusModal","setStatusModal","_useUrlParams","useUrlParams","SYSTEMS_EXPOSED_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParams","inventoryGroupsEnabled","useFeatureFlag","useSelector","entities","rows","shallowEqual","totalItems","total","meta","_ref4","error","_ref5","selectedRows","_ref6","selectedRowsCount","_ref7","_entities$selectedRow","isLoaded","_ref8","loaded","parameters","_ref9","CVEDetailsPageStore","columns","_ref10","filteredColumns","column","inventoryGroupsFeatureFlag","params","changeExposedSystemsParameters","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveDetail","_useColumnManagement2","ColumnManagementModal","setColumnManagementModalOpen","_objectSpread","clearInventoryStore","cves_without_errata","advisory_available","ignore_default_params","showStatusModal","inventories","fetchCveDetails","expandAll","rawData","data","forEach","row","expandRow","getEntities","useGetEntities","APIHelper","createRows","createExposedSystemsRows","_useState5","_useState6","columnCounter","setColumnCount","remediableSystems","ANSIBLE_REMEDIATION","kebabOptions","editStatus","onClick","props","columnManagementModalTitle","searchFilter","useSearchFilter","systemsSearchName","searchFilterByName","advisoryNameFilter","advisoryName","searchFilterByAdvisoryName","advisory","osVersionFilter","useOsVersionFilter","rhel_version","bulkSelectProps","useBulkSelect","handleSelect","payload","selecting","selectRows","fetchResource","ops","fetchAffectedSystemIdsByCve","isOpen","canSelect","defaultFilters","Fragment","centered","hasError","ErrorHandler","code","errorCode","InventoryTable","disableDefaultColumns","onLoad","_ref12","mergeWithEntities","ReducerRegistry","register","inventoryEntitiesReducer","SYSTEMS_EXPOSED_HEADER","Number","perPage","DEFAULT_PAGE_SIZE","sort","sortBy","replace","direction","match","tableProps","isStickyHeader","canSelectAll","canCollapseAll","onCollapse","e","rowIndex","rowData","actionResolver","systemExposedTableRowActions","TableVariant","compact","paginationProps","showTagModal","isFullView","ref","autoRefresh","customFilters","vulnerabilityParams","columnsCounter","defaultColumns","inventoryColumns","_column$isShown","isShown","isShownByDefault","find","_ref11","hasCheckbox","showActions","hideFilters","all","hostGroupFilter","noSystemsTable","EmptyStateNoSystems","actionsConfig","actions","dropdownProps","expandable","exportConfig","downloadReport","format","DownloadReport","exec","fetchAffectedSystemsByCVE","notification","clearNotifications","activeFiltersConfig","filters","buildActiveFilters","onDelete","chips","reset","removeFilters","deleteTitle","resetFilters","showDeleteButton","isFilterInDefaultState","CVE_DETAILS_FILTER_PARAMS","bulkSelect","filterConfig","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","statusFilter","advisoryAvailabilityFilter","remediationFilter"],"sourceRoot":""}