{"version":3,"file":"js/LandingPage.f9eb6f24935bdc2e9175.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/CVEs/CVEsTable.js","webpack:///./src/Components/PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter.js","webpack:///./src/Components/SmartComponents/CVEs/CVEsTableToolbar.js","webpack:///./src/Components/SmartComponents/CVEs/CVEs.js","webpack:///./src/Components/SmartComponents/Dashbar/Dashbar.js","webpack:///./src/Components/SmartComponents/LandingPage/LandingPage.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Table, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport { cveTableRowActions } from '../../../Helpers/CVEHelper';\nimport { createSortBy, handleSortColumn } from '../../../Helpers/MiscHelper';\nimport PaginationWrapper from '../../PresentationalComponents/PaginationWrapper/PaginationWrapper';\nimport { EmptyStateNoCVEs } from '../../PresentationalComponents/EmptyStates/EmptyStates';\nimport { CVETableContext } from './CVEs';\nimport messages from '../../../Messages';\nimport { DEFAULT_PAGE_SIZE } from '../../../Helpers/constants';\n\nconst CVEsTableWithContext = ({ context, header, canEditStatusOrBusinessRisk }) => {\n    const noCves = () => {\n        return ([{\n            heightAuto: true,\n            cells: [\n                {\n                    props: { colSpan: header?.length },\n                    title:\n                        <EmptyStateNoCVEs\n                            secondParagraph={context.cves.meta.cves_without_errata === null\n                                ? messages.emptyStateThereShouldBeCVEsFeatureDisabled\n                                : context.cves.meta.cves_without_errata\n                                    ? messages.emptyStateThereShouldBeCVEsNoErrata\n                                    : messages.emptyStateThereShouldBeCVEs\n                            }\n                        />\n                }\n            ]\n        }]);\n    };\n\n    const { cves, methods, selectedCves, expandedRows, isAllExpanded, params } = context;\n    const isEmpty = cves.data.length === 0;\n\n    const handleOnSelect = (event, isSelected, rowId) => {\n        const cveName = cves.data[rowId] && cves.data[rowId].id;\n        methods.selectCves(isSelected, cveName);\n    };\n\n    const rows = cves.data && cves.data\n        .map(cve => (selectedCves.find(selectedCve => selectedCve.id === cve.id) && { ...cve, selected: true }) || cve)\n        .map((cve, index) => {\n            const current = index % 2 === 0 ? expandedRows.includes(cve.id) : undefined;\n            return ({ ...cve, isOpen: current });\n        });\n\n    const onCollapseAll = () => {\n        const expandedRows = !isAllExpanded ? cves.data.filter(cve => cve.id).map(cve => cve.id) : [];\n        methods.openCves(expandedRows);\n    };\n\n    const onCollapse = (e, rowIndex) => {\n        const collapseAll = rowIndex === undefined;\n\n        collapseAll\n            ? onCollapseAll()\n            : methods.openCves(rowIndex);\n    };\n\n    return (\n        <Fragment>\n            {!cves.isLoading ? (\n                <Table\n                    canSelectAll={false}\n                    aria-label=\"Vulnerability CVE table\"\n                    cells={header}\n                    rows={isEmpty ? noCves() : rows}\n                    onSelect={!isEmpty ? handleOnSelect : undefined}\n                    canCollapseAll\n                    onCollapse={isEmpty ? undefined : onCollapse}\n                    actionResolver={canEditStatusOrBusinessRisk && cves.data.length > 0 ?\n                        (rowData, rowIndex) => cveTableRowActions(methods, rowIndex.rowIndex) : undefined}\n                    sortBy={!isEmpty ?\n                        createSortBy([{ key: 'collapse' }, { key: 'checkbox' }, ...header], params.sort) : undefined}\n                    onSort={!isEmpty ?\n                        (event, key, direction) =>\n                            handleSortColumn(\n                                key,\n                                direction,\n                                [{ key: 'collapse' }, { key: 'checkbox' }, ...header],\n                                params.sort,\n                                methods.apply\n                            ) : undefined\n                    }\n                    ouiaId=\"cves-table\"\n                    isStickyHeader\n                    variant={TableVariant.compact}\n                    isExpandable\n                >\n                    <TableHeader />\n                    <TableBody />\n                </Table>\n            ) : (\n                <SkeletonTable\n                    columns={header}\n                    rowSize={parseInt(params.page_size) || DEFAULT_PAGE_SIZE}\n                    variant={TableVariant.compact}\n                    sortBy={createSortBy([{ key: 'checkbox' }, ...header], params.sort)}\n                    isSelectable\n                />)\n            }\n            <PaginationWrapper meta={cves.meta} apply={methods.apply} />\n        </Fragment>\n    );\n\n};\n\nCVEsTableWithContext.propTypes = {\n    context: propTypes.any,\n    header: propTypes.array,\n    canEditStatusOrBusinessRisk: propTypes.bool\n};\n\nconst CVEsTable = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default CVEsTable;\n","import { conditionalFilterType } from '@redhat-cloud-services/frontend-components/ConditionalFilter';\nimport { intl } from '../../../../Utilities/IntlProvider';\nimport messages from '../../../../Messages';\nimport { AFFECTING_FILTER_OPTIONS } from '../../../../Helpers/constants';\n\nconst affectingFilter = (apply, currentFilter = {}) => {\n    let { affecting: currentValue } = currentFilter;\n\n    const filterByAffecting = (values) => {\n        apply({\n            affecting: values.length > 0 ? values?.join(',') : undefined,\n            page: 1\n        });\n    };\n\n    return {\n        label: intl.formatMessage(messages.filterSystemsExposed),\n        type: conditionalFilterType.checkbox,\n        urlParam: 'affecting',\n        filterValues: {\n            onChange: (event, value) => {\n                filterByAffecting(value);\n            },\n            items: AFFECTING_FILTER_OPTIONS.map(({ label, value }) => ({ label, value })),\n            value: currentValue?.split(',')\n        }\n    };\n};\n\nexport default affectingFilter;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport { CVETableContext } from './CVEs';\nimport selectAllCheckbox from '../../../Helpers/selectAllCheckboxHelper';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport affectingFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AffectingFilter';\nimport publishDateFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/PublishDateFilter';\nimport useCvssBaseScoreFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/CvssBaseScoreFilter';\nimport impactFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/ImpactFilter';\nimport useSearchFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SearchFilter';\nimport securityRuleFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/SecurityRuleFilter';\nimport businessRiskFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/BusinessRiskFilter';\nimport knownExploitFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/KnownExploitFilter';\nimport statusFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/StatusFilter';\nimport advisoryAvailabilityFilter from '../../PresentationalComponents/Filters/PrimaryToolbarFilters/AdvisoryAvailabilityFilter';\nimport { kebabItemDownloadPDF } from '../../PresentationalComponents/Kebab/KebabItems';\nimport DownloadCVEsReport from '../Reports/DownloadCVEsReport';\nimport {\n    handleChangePage,\n    handleSetPageSize,\n    exportConfig,\n    buildActiveFilters,\n    removeFilters,\n    isFilterInDefaultState\n} from '../../../Helpers/TableToolbarHelper';\nimport {\n    CVES_DEFAULT_FILTERS,\n    CVES_FILTER_PARAMS,\n    DEFAULT_PAGE_SIZE,\n    ONLY_NON_VULNERABLE_SYSTEMS,\n    RULE_PRESENCE_OPTIONS\n} from '../../../Helpers/constants';\nimport { fetchCvesIds } from '../../../Store/Actions/Actions';\nimport { setCvesWithoutErrata } from '../../../Helpers/APIHelper';\n\nconst CVEsTableToolbarWithContext = ({ context, canEditStatusOrBusinessRisk, canExport, canToggleCvesWithoutErrata, intl }) => {\n    const [exportPDF, setExportPDF] = useState(false);\n\n    const { cves, params, methods, selectedCves } = context;\n    const { isLoading } = cves;\n\n    const { filter } = params;\n    const selectedCvesCount = selectedCves && selectedCves.length;\n\n    const [showCvesWithoutErrata, setShowCvesWithoutErrata] = useState(null);\n\n    useEffect(() => {\n        if (!isLoading) {\n            setShowCvesWithoutErrata(cves?.meta?.cves_without_errata);\n        }\n    }, [cves?.meta?.cves_without_errata, isLoading]);\n\n    const selectOptions = selectAllCheckbox({\n        selectedItems: selectedCves,\n        selectorHandler: methods.selectCves,\n        items: cves,\n        fetchResource: ops => fetchCvesIds({ ...params, ...ops }),\n        multiRow: true\n    });\n\n    const actions = [\n        '', // #NOTE empty intentionally, Remediation holder\n        ...canEditStatusOrBusinessRisk ? [\n            {\n                label: intl.formatMessage(messages.editBusinessRisk),\n                onClick: () => methods.showBusinessRiskModal(selectedCves.map(({\n                    id,\n                    business_risk_id,\n                    business_risk_text,\n                    attributes\n                }) => ({\n                    id,\n                    business_risk_id: attributes ? attributes.business_risk_id : business_risk_id,\n                    justification: attributes ? attributes.business_risk_text : business_risk_text\n                })), true),\n                props: { isDisabled: !selectedCvesCount }\n            },\n            {\n                label: intl.formatMessage(messages.editStatus),\n                onClick: () => methods.showStatusModal(selectedCves.map(({\n                    id,\n                    exposed_systems_count,\n                    status_justification,\n                    status_id,\n                    attributes\n                }) => ({\n                    id,\n                    exposed_systems_count: attributes ? attributes.systems_affected : exposed_systems_count,\n                    justification: attributes ? attributes.status_text : status_justification,\n                    status_id: attributes ? attributes.status_id : status_id\n                }), []), true),\n                props: { isDisabled: !selectedCvesCount }\n            }\n        ] : [],\n        {\n            label: intl.formatMessage(messages.columnManagementModalTitle),\n            onClick: () => methods.setColumnManagementModalOpen(true)\n        },\n        ...canToggleCvesWithoutErrata && showCvesWithoutErrata !== null ? [(\n            showCvesWithoutErrata ?\n                {\n                    label: intl.formatMessage(messages.hideCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(false).then(() => methods.apply({ page: 1 }))\n                } :\n                {\n                    label: intl.formatMessage(messages.showCvesWithoutAdvisories),\n                    onClick: () => setCvesWithoutErrata(true).then(() => methods.apply({ page: 1 }))\n                }\n        )] : []\n    ];\n\n    return (\n        <React.Fragment>\n            <PrimaryToolbar\n                pagination={{\n                    isDisabled: cves.meta.total_items === 0,\n                    itemCount: cves.meta.total_items || 0,\n                    page: cves.meta.page || 1,\n                    perPage: cves.meta.page_size || DEFAULT_PAGE_SIZE,\n                    ouiaId: 'pagination-top',\n                    onSetPage: (_event, page) => handleChangePage(_event, page, methods.apply),\n                    onPerPageSelect: (_event, perPage) => handleSetPageSize(_event, perPage, methods.apply)\n                }}\n                actionsConfig={{\n                    actions,\n                    dropdownProps: { ouiaId: 'toolbar-actions' }\n                }}\n                bulkSelect={{\n                    count: selectedCvesCount,\n                    items: selectOptions.items,\n                    isDisabled: cves.meta.total_items === 0 && selectedCvesCount === 0,\n                    checked: Boolean(selectedCvesCount),\n                    ouiaId: 'bulk-select',\n                    onSelect: () => selectOptions.handleOnCheckboxChange()\n                }}\n                filterConfig={{\n                    items: [\n                        useSearchFilter('filter', messages.cve, messages.searchFilterByCveID, filter, methods.apply),\n                        securityRuleFilter(methods.apply, params, [],\n                            {\n                                isDynamic: false,\n                                dropdownItems: RULE_PRESENCE_OPTIONS.filter(item => item.value !== ONLY_NON_VULNERABLE_SYSTEMS)\n                            }\n                        ),\n                        knownExploitFilter(methods.apply, params),\n                        impactFilter(methods.apply, params),\n                        useCvssBaseScoreFilter(methods.apply, params),\n                        businessRiskFilter(methods.apply, params),\n                        affectingFilter(methods.apply, params),\n                        publishDateFilter(methods.apply, params),\n                        statusFilter(methods.apply, params),\n                        ...showCvesWithoutErrata ? [advisoryAvailabilityFilter(methods.apply, params)] : []\n                    ]\n                }}\n                activeFiltersConfig={{\n                    filters: buildActiveFilters(params),\n                    onDelete: (_, chips, reset) => removeFilters(chips, methods.apply, reset, CVES_DEFAULT_FILTERS),\n                    deleteTitle: intl.formatMessage(messages.resetFilters),\n                    showDeleteButton: !isFilterInDefaultState(params, CVES_DEFAULT_FILTERS, CVES_FILTER_PARAMS)\n                }}\n                exportConfig={canExport && {\n                    isDisabled: cves.meta.total_items === 0,\n                    extraItems: [kebabItemDownloadPDF(exportPDF, setExportPDF)],\n                    ouiaId: 'export',\n                    ...exportConfig(methods)\n                }}\n            />\n            {exportPDF &&\n                <DownloadCVEsReport\n                    showButton={false}\n                    params={params}\n                    filters={buildActiveFilters(params)}\n                    onSuccess={() => setExportPDF(false)}\n                />\n            }\n\n        </React.Fragment>\n    );\n};\n\nCVEsTableToolbarWithContext.propTypes = {\n    context: propTypes.object,\n    intl: propTypes.object,\n    canEditStatusOrBusinessRisk: propTypes.bool,\n    canExport: propTypes.bool,\n    canToggleCvesWithoutErrata: propTypes.bool\n};\n\nCVEsTableToolbarWithContext.defaultProps = {\n    totalNumber: 0,\n    apply: () => undefined,\n    downloadReport: () => undefined\n};\n\nconst CVEsTableToolbar = props => (\n    <CVETableContext.Consumer>\n        {context => <CVEsTableToolbarWithContext context={context} {...props} />}\n    </CVETableContext.Consumer>\n);\n\nexport default injectIntl(CVEsTableToolbar);\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { CVES_ALLOWED_PARAMS, PERMISSIONS, SERVICE_NAME } from '../../../Helpers/constants';\nimport { createCveListByAccount } from '../../../Helpers/VulnerabilityHelper';\nimport { constructFilterParameters, updateRef, useUrlParams } from '../../../Helpers/MiscHelper';\nimport BusinessRiskModal from '../Modals/BusinessRiskModal';\nimport StatusModal from '../Modals/CveStatusModal';\nimport CVEsTable from './CVEsTable';\nimport CVEsTableToolbar from './CVEsTableToolbar';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    changeCveListParameters,\n    fetchCveListByAccount,\n    selectCve,\n    expandCve,\n    clearCVEsStore,\n    changeColumnsCveList\n} from '../../../Store/Actions/Actions';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ErrorHandler from '../../PresentationalComponents/ErrorHandler/ErrorHandler';\nimport { Spinner } from '@redhat-cloud-services/frontend-components/Spinner';\nimport { useColumnManagement, useRbac } from '../../../Helpers/Hooks';\nimport { NotAuthorized } from '../../PresentationalComponents/EmptyStates/EmptyStates';\n\nexport const CVETableContext = React.createContext({});\n\nexport const CVEs = ({ rbac }) => {\n    const dispatch = useDispatch();\n    const [CveStatusModal, setStatusModal] = useState(() => () => null);\n    const [CveBusinessRiskModal, setBusinessRiskModal] = useState(() => () => null);\n    const [isFirstLoad, setFirstLoad] = useState(true);\n\n    const [[\n        canEditStatusOrBusinessRisk,\n        canEditPairStatus,\n        canExport,\n        canReadVulnerabilityResults,\n        canToggleCvesWithoutErrata\n    ], isRbacLoading] = rbac;\n\n    const cveList = useSelector(\n        ({ CVEsStore }) => CVEsStore.cveList\n    );\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n    const columns = useSelector(\n        ({ CVEsStore }) => CVEsStore.columns\n    );\n    const selectedCves = useSelector(\n        ({ CVEsStore }) => CVEsStore.selectedCves\n    );\n    const expandedRows = useSelector(\n        ({ CVEsStore }) => CVEsStore.expandedRows\n    );\n    const isAllExpanded = useSelector(\n        ({ CVEsStore }) => CVEsStore.isAllExpanded\n    );\n\n    const [ColumnManagementModal, setColumnManagementModalOpen]\n        = useColumnManagement(columns, newColumns => dispatch(changeColumnsCveList(newColumns)));\n\n    const cves = useMemo(() => createCveListByAccount(cveList, columns), [cveList, columns]);\n    const [urlParameters, setUrlParam] = useUrlParams(['show_irrelevant', ...CVES_ALLOWED_PARAMS]);\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    useEffect(() => {\n        apply(urlParameters);\n    }, []);\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        }\n        else {\n            dispatch(fetchCveListByAccount(parameters));\n            setUrlParam({ ...parameters });\n        }\n    }, [parameters, isFirstLoad]);\n\n    useEffect(() => {\n        return () => {\n            dispatch(clearCVEsStore());\n            dispatch(clearNotifications());\n        };\n    }, [dispatch]);\n\n    const handleCveSelect = (isSelected, cveNames) => {\n        dispatch(selectCve(cveNames || []));\n    };\n\n    const downloadReport = format => {\n        DownloadReport.exec(fetchCveListByAccount, parameters, format, 'cves', notification => dispatch(\n            addNotification(notification)), () => dispatch(clearNotifications()));\n    };\n\n    const showBusinessRiskModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setBusinessRiskModal(() => () =>\n            <BusinessRiskModal\n                cves={cvesList}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const showStatusModal = (cvesList, goToFirstPage) => {\n        const { meta } = cves;\n        setStatusModal(() => () =>\n            <StatusModal\n                cves={cvesList}\n                canEditPairStatus={canEditPairStatus}\n                updateRef={() => {\n                    setFirstLoad(true);\n                    dispatch(clearCVEsStore());\n                    updateRef(goToFirstPage ? { ...meta, page: 1 } : meta, parameters, apply);\n                }}\n            />\n        );\n    };\n\n    const openCves = (cves) => {\n        dispatch(expandCve(cves));\n    };\n\n    if (!cves.errors) {\n        return (\n            isRbacLoading ? <Spinner centered /> : canReadVulnerabilityResults ?\n                (\n                    <CVETableContext.Provider\n                        value={{\n                            cves,\n                            params: parameters,\n                            selectedCves,\n                            expandedRows,\n                            isAllExpanded,\n                            methods: {\n                                apply,\n                                downloadReport,\n                                selectCves: handleCveSelect,\n                                showBusinessRiskModal,\n                                showStatusModal,\n                                openCves,\n                                setColumnManagementModalOpen\n                            }\n                        }}\n                    >\n                        <CveBusinessRiskModal />\n                        <CveStatusModal />\n\n                        {ColumnManagementModal}\n\n                        <Stack>\n                            <StackItem>\n                                <CVEsTableToolbar\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                    canExport={canExport}\n                                    canToggleCvesWithoutErrata={canToggleCvesWithoutErrata}\n                                />\n                            </StackItem>\n                            <StackItem>\n                                <CVEsTable\n                                    header={columns.filter(column => column.isShown ?? column.isShownByDefault)}\n                                    canEditStatusOrBusinessRisk={canEditStatusOrBusinessRisk}\n                                />\n                            </StackItem>\n                        </Stack>\n                    </CVETableContext.Provider>\n                ) : <NotAuthorized serviceName={SERVICE_NAME} />\n        );\n    } else {\n        return <ErrorHandler code={cves.errors.status} />;\n    }\n};\n\nCVEs.propTypes = {\n    rbac: PropTypes.array.isRequired\n};\n\nconst CVEsWithRbac = () => {\n    const rbac = useRbac([\n        PERMISSIONS.setCveStatusAndBusinessRisk,\n        PERMISSIONS.setPairStatus,\n        PERMISSIONS.basicReporting,\n        PERMISSIONS.readVulnerabilityResults,\n        PERMISSIONS.toggleCvesWithoutErrata\n    ]);\n\n    return <CVEs rbac={rbac} />;\n};\n\nexport default CVEsWithRbac;\n","import React, { useEffect, useState } from 'react';\nimport { Card, Grid, GridItem, StackItem, Stack, Alert, CardBody, Text, TextVariants, TextContent } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { impactList, CVES_DEFAULT_FILTERS } from '../../../Helpers/constants';\nimport { constructFilterParameters, sanitizeLinks } from '../../../Helpers/MiscHelper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeCveListParameters } from '../../../Store/Actions/Actions';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport propTypes from 'prop-types';\nimport { buildActiveFilters, removeFilters } from '../../../Helpers/TableToolbarHelper';\nimport { getAnnouncement, getDashbar } from '../../../Helpers/APIHelper';\nimport WithLoader, { LoaderType } from '../../PresentationalComponents/WithLoader/WithLoader';\nimport { useIntl } from 'react-intl';\nimport sanitizeHtml from 'sanitize-html';\n\nconst DashbarItem = ({ title, count, impact, onLinkClick, hasIcon }) => {\n    return (\n        <Card isFullHeight className=\"card-box\">\n            <CardBody>\n                <TextContent>\n                    <Text component={TextVariants.h4}>\n                        <b>{title}</b>\n                    </Text>\n                    <Text className=\"pf-u-font-size-lg pf-u-font-weight-bold pf-u-mt-xs\">\n                        <a onClick={onLinkClick}>\n                            {hasIcon && (<SecurityIcon\n                                color={impactList[impact]?.iconColor}\n                                size=\"sm\"\n                                className=\"pf-u-mr-sm\" />\n                            )}\n                            {count}\n                        </a>\n                    </Text>\n                </TextContent>\n            </CardBody>\n        </Card>\n    );\n};\n\nexport { DashbarItem };\n\nDashbarItem.propTypes = {\n    title: propTypes.node,\n    count: propTypes.number.isRequired,\n    impact: propTypes.oneOf(Object.keys(impactList)),\n    onLinkClick: propTypes.func.isRequired,\n    hasIcon: propTypes.bool\n};\n\nconst Dashbar = () => {\n    const intl = useIntl();\n    const dispatch = useDispatch();\n    const [isFirstLoad, setFirstLoad] = useState(true);\n    const [dashbar, setDashbar] = useState({});\n    const [announcement, setAnnouncement] = useState({});\n    const [isDashbarLoading, setDashbarLoading] = useState(true);\n\n    const parameters = useSelector(\n        ({ CVEsStore }) => CVEsStore.parameters\n    );\n\n    const apply = (filterParams = {}) => {\n        const params = constructFilterParameters(filterParams);\n        dispatch(changeCveListParameters(params));\n    };\n\n    // reset filters and apply passed ones\n    const applyOnly = (filterParams = {}) => {\n        const chips = buildActiveFilters(parameters);\n        removeFilters(chips, apply, true, filterParams);\n    };\n\n    const fetchAnnouncements = async () => {\n        let data = {};\n\n        try {\n            data = await getAnnouncement();\n        }\n        catch (error) {\n            if (error.status !== '404') {\n                throw error;\n            }\n        }\n\n        setAnnouncement(data);\n    };\n\n    const fetchDashbar = async () => {\n        let data = await getDashbar(parameters);\n\n        setDashbar(data);\n        setDashbarLoading(false);\n    };\n\n    useEffect(() => {\n        if (isFirstLoad) {\n            setFirstLoad(false);\n        } else {\n            fetchAnnouncements();\n            fetchDashbar();\n        }\n    }, [parameters, isFirstLoad]);\n\n    const insertSanitizedHtml = text => ({ __html: sanitizeHtml(text) });\n\n    return (\n        <Main style={{ paddingBottom: 0 }}>\n            <Stack hasGutter>\n                <StackItem>\n                    {!isDashbarLoading ? (\n                        <Grid hasGutter id=\"dashbar\">\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarKnownExploitsTitle} />}\n                                    count={dashbar?.exploitable_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, known_exploit: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarSecurityRulesTitle} />}\n                                    count={dashbar?.cves_with_rule}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, rule_presence: 'true' })}\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarCriticalVulnerabilitiesTitle} />}\n                                    count={dashbar?.critical_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '7' })}\n                                    impact=\"Critical\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <DashbarItem\n                                    title={<FormattedMessage {...messages.dashbarImportantVulnerabilitiesTitle} />}\n                                    count={dashbar?.important_cves}\n                                    onLinkClick={() => applyOnly({ ...CVES_DEFAULT_FILTERS, impact: '5' })}\n                                    impact=\"Important\"\n                                    hasIcon\n                                />\n                            </GridItem>\n                        </Grid>\n                    ) : (\n                        <Grid hasGutter>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                            <GridItem span={12} md={3}>\n                                <WithLoader isLoading={isDashbarLoading}\n                                    variant={LoaderType.inlineSkeleton} style={{ height: '100px' }} />\n                            </GridItem>\n                        </Grid>\n                    )}\n                </StackItem>\n                {announcement?.message && (\n                    <StackItem id=\"announcement\">\n                        <Alert\n                            variant=\"warning\"\n                            isInline\n                            title={intl.formatMessage(messages.dashbarAnnouncementTitle)}\n                        >\n                            <span dangerouslySetInnerHTML={\n                                insertSanitizedHtml(sanitizeLinks(announcement.message))\n                            } />\n                        </Alert>\n                    </StackItem>\n                )}\n            </Stack>\n        </Main>\n    );\n};\n\nexport default Dashbar;\n","import React, { Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Popover } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport CVEs from '../CVEs/CVEs';\nimport Dashbar from '../Dashbar/Dashbar';\n\nconst LandingPage = () => {\n    // eslint-disable-next-line max-len\n    const PRODUCT_DOC = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2023/html/assessing_and_monitoring_security_vulnerabilities_on_rhel_systems/index';\n\n    const title = (\n        <Popover\n            enableFlip\n            position=\"right\"\n            headerContent={<FormattedMessage {...messages.ovalPopoverHeader} />}\n            bodyContent={<FormattedMessage {...messages.ovalPopoverBody} />}\n            footerContent={<a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n                <FormattedMessage {...messages.learnMore} /> <ExternalLinkAltIcon />\n            </a>}\n        >\n            <span>\n                <FormattedMessage {...messages.cvesHeader} />\n                <OutlinedQuestionCircleIcon\n                    color=\"var(--pf-global--secondary-color--100)\"\n                    className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n                    style={{ verticalAlign: '0' }}\n                />\n            </span>\n        </Popover>\n    );\n\n    return (\n        <Fragment>\n            <Header title={title} showBreadcrumb={false} />\n            <Dashbar />\n            <Main>\n                <CVEs />\n            </Main>\n        </Fragment>\n    );\n};\n\nexport default LandingPage;\n"],"names":["CVEsTableWithContext","_ref","context","header","canEditStatusOrBusinessRisk","cves","methods","selectedCves","expandedRows","isAllExpanded","params","isEmpty","data","length","rows","map","cve","find","selectedCve","id","_objectSpread","selected","index","current","includes","undefined","isOpen","React","Fragment","isLoading","SkeletonTable","columns","rowSize","parseInt","page_size","DEFAULT_PAGE_SIZE","variant","TableVariant","compact","sortBy","createSortBy","key","concat","_toConsumableArray","sort","isSelectable","Table","canSelectAll","cells","heightAuto","props","colSpan","title","EmptyStateNoCVEs","secondParagraph","meta","cves_without_errata","messages","emptyStateThereShouldBeCVEsFeatureDisabled","emptyStateThereShouldBeCVEsNoErrata","emptyStateThereShouldBeCVEs","onSelect","event","isSelected","rowId","cveName","selectCves","canCollapseAll","onCollapse","e","rowIndex","filter","openCves","onCollapseAll","actionResolver","rowData","cveTableRowActions","onSort","direction","handleSortColumn","apply","ouiaId","isStickyHeader","isExpandable","TableHeader","TableBody","PaginationWrapper","propTypes","CVETableContext","Consumer","_extends","currentValue","arguments","affecting","label","intl","formatMessage","filterSystemsExposed","type","conditionalFilterType","checkbox","urlParam","filterValues","onChange","value","values","join","page","items","AFFECTING_FILTER_OPTIONS","split","CVEsTableToolbarWithContext","_cves$meta2","canExport","canToggleCvesWithoutErrata","_useState","useState","_useState2","_slicedToArray","exportPDF","setExportPDF","selectedCvesCount","_useState3","_useState4","showCvesWithoutErrata","setShowCvesWithoutErrata","useEffect","_cves$meta","selectOptions","selectAllCheckbox","selectedItems","selectorHandler","fetchResource","ops","fetchCvesIds","multiRow","actions","editBusinessRisk","onClick","showBusinessRiskModal","_ref2","business_risk_id","business_risk_text","attributes","justification","isDisabled","editStatus","showStatusModal","_ref3","exposed_systems_count","status_justification","status_id","systems_affected","status_text","columnManagementModalTitle","setColumnManagementModalOpen","hideCvesWithoutAdvisories","setCvesWithoutErrata","then","showCvesWithoutAdvisories","PrimaryToolbar","pagination","total_items","itemCount","perPage","onSetPage","_event","handleChangePage","onPerPageSelect","handleSetPageSize","actionsConfig","dropdownProps","bulkSelect","count","checked","Boolean","handleOnCheckboxChange","filterConfig","useSearchFilter","searchFilterByCveID","securityRuleFilter","isDynamic","dropdownItems","RULE_PRESENCE_OPTIONS","item","ONLY_NON_VULNERABLE_SYSTEMS","knownExploitFilter","impactFilter","useCvssBaseScoreFilter","businessRiskFilter","affectingFilter","publishDateFilter","statusFilter","advisoryAvailabilityFilter","activeFiltersConfig","filters","buildActiveFilters","onDelete","_","chips","reset","removeFilters","CVES_DEFAULT_FILTERS","deleteTitle","resetFilters","showDeleteButton","isFilterInDefaultState","CVES_FILTER_PARAMS","exportConfig","extraItems","kebabItemDownloadPDF","DownloadCVEsReport","showButton","onSuccess","defaultProps","totalNumber","downloadReport","injectIntl","CVEs","rbac","dispatch","useDispatch","CveStatusModal","setStatusModal","CveBusinessRiskModal","setBusinessRiskModal","_useState5","_useState6","isFirstLoad","setFirstLoad","_rbac","_rbac$","canEditPairStatus","canReadVulnerabilityResults","isRbacLoading","cveList","useSelector","CVEsStore","parameters","_ref4","_ref5","_ref6","_ref7","_useColumnManagement","useColumnManagement","newColumns","changeColumnsCveList","_useColumnManagement2","ColumnManagementModal","useMemo","createCveListByAccount","_useUrlParams","useUrlParams","CVES_ALLOWED_PARAMS","_useUrlParams2","urlParameters","setUrlParam","filterParams","constructFilterParameters","changeCveListParameters","fetchCveListByAccount","clearCVEsStore","clearNotifications","errors","ErrorHandler","code","status","Spinner","centered","Provider","format","DownloadReport","exec","notification","addNotification","cveNames","selectCve","cvesList","goToFirstPage","BusinessRiskModal","updateRef","StatusModal","expandCve","Stack","StackItem","CVEsTableToolbar","CVEsTable","column","_column$isShown","isShown","isShownByDefault","NotAuthorized","serviceName","SERVICE_NAME","PropTypes","isRequired","useRbac","PERMISSIONS","setCveStatusAndBusinessRisk","setPairStatus","basicReporting","readVulnerabilityResults","toggleCvesWithoutErrata","DashbarItem","_impactList$impact","impact","onLinkClick","hasIcon","Card","isFullHeight","className","CardBody","TextContent","Text","component","TextVariants","h4","SecurityIcon","color","impactList","iconColor","size","Object","keys","text","useIntl","dashbar","setDashbar","announcement","setAnnouncement","_useState7","_useState8","isDashbarLoading","setDashbarLoading","applyOnly","fetchAnnouncements","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","getAnnouncement","sent","t0","stop","fetchDashbar","_callee2","_context2","getDashbar","Main","style","paddingBottom","hasGutter","Grid","GridItem","span","md","WithLoader","LoaderType","inlineSkeleton","height","FormattedMessage","dashbarKnownExploitsTitle","exploitable_cves","known_exploit","dashbarSecurityRulesTitle","cves_with_rule","rule_presence","dashbarCriticalVulnerabilitiesTitle","critical_cves","dashbarImportantVulnerabilitiesTitle","important_cves","message","Alert","isInline","dashbarAnnouncementTitle","dangerouslySetInnerHTML","sanitizeLinks","__html","sanitizeHtml","Popover","enableFlip","position","headerContent","ovalPopoverHeader","bodyContent","ovalPopoverBody","footerContent","href","target","rel","learnMore","ExternalLinkAltIcon","cvesHeader","OutlinedQuestionCircleIcon","verticalAlign","Header","showBreadcrumb","Dashbar"],"sourceRoot":""}