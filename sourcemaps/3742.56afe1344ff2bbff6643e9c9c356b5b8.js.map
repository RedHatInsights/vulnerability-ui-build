{"version":3,"file":"js/3742.7c0d0fb87024ccb484e0.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/Reports/Common/CVElabels.js","webpack:///./src/Components/SmartComponents/Reports/Common/FooterPDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/firstPagePDF.js","webpack:///./src/Components/SmartComponents/Reports/Common/tablePage.js","webpack:///./src/Components/SmartComponents/Reports/DownloadCVEsReport.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { View } from '@react-pdf/renderer';\nimport { InsightsLabel } from '@redhat-cloud-services/frontend-components-pdf-generator';\n\nimport styles from './styles';\nimport messages from '../../../../Messages';\n\nconst CVElabels = ({ intl, hasRule, hasExploit, isSmall = false }) => (\n    <View style={styles.labelsWrapper}>\n        {hasExploit &&\n            <View style={{ ...styles.label, width: isSmall ? 62 : 70 }}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 62 : 75}\n                    variant={4}\n                    label={intl.formatMessage(messages.knownExploit)}\n                    textStyle={isSmall ? { ...styles.smallText, left: -56 } : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#c9190b',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n        {hasRule &&\n            <View style={styles.label}>\n                <InsightsLabel\n                    icon={false}\n                    width={isSmall ? 59 : 63}\n                    label={intl.formatMessage(messages.securityRuleLabel)}\n                    textStyle={isSmall ? styles.smallText : undefined}\n                    labelStyle={{\n                        border: 'solid',\n                        borderWidth: 1,\n                        borderColor: '#bee1f4',\n                        height: isSmall ? 12 : 20\n                    }}\n                />\n            </View>\n        }\n    </View>\n);\n\nCVElabels.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool,\n    intl: propTypes.any,\n    isSmall: propTypes.bool\n};\n\nexport default CVElabels;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { View, Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport messages from '../../../../Messages';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\n\nconst FooterPDF = ({ hasRule, hasExploit }) => {\n\n    return (\n        <View>\n            { hasExploit && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.knownExploitPDFFooter)}\n                </Text>\n            )}\n\n            { hasRule && (\n                <Text style={styles.footer}>\n                    {intlFormatWithBold(messages.securityRulePDFFooter)}\n                </Text>\n            )}\n\n        </View>\n    );\n};\n\nFooterPDF.propTypes = {\n    hasRule: propTypes.bool,\n    hasExploit: propTypes.bool\n};\n\nexport default FooterPDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Paragraph } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport messages from '../../../../Messages';\nimport tablePage from './tablePage';\nimport {\n    PUBLIC_DATE_OPTIONS,\n    DEFAULT_FILTER_DATA,\n    FILTERS, CVE_REPORT_FILTERS,\n    SYSTEM_REPORT_FILTERS\n} from '../../../../Helpers/constants';\nimport { intlFormatWithBold } from '../../../../Helpers/ReportsHelper';\nimport styles from './styles';\nimport CheckboxCustomFilter\n    from '../../../PresentationalComponents/Filters/CustomFilters/CheckboxCustomFilter';\n\nconst firstPagePDF = ({ data, meta, filters, intl, isReportDynamic, reportData, user, type }) => {\n    // if data isn't converted to object convert it\n    const filtersBuilder = (isReportDynamic) ? filters : filters.reduce((obj, item) => {\n        obj[item.key] = {\n            filter: item.category,\n            values: item.key === 'publish_date'\n                ? PUBLIC_DATE_OPTIONS.find(val => val.value === item.chips[0].value).timespan_label\n                : item.chips.map(({ name }) => name).join(', '),\n            isAllChosen: (type === 'cves' ? CVE_REPORT_FILTERS : SYSTEM_REPORT_FILTERS)[item.key]?.component\n                === CheckboxCustomFilter\n                ? (item.chips.length === FILTERS[item.key]?.items?.length || item.allChosen)\n                : null\n        };\n        return obj;\n    }, {});\n\n    let cvefilterStringSegments = [\n        { name: 'impact', msg: messages.CVEsPDFreportFiltersSeverity, lowercase: true },\n        { name: 'business_risk_id', msg: messages.CVEsPDFreportFiltersBusinessRisk, lowercase: true },\n        { name: 'status_id', msg: messages.CVEsPDFreportFiltersStatus, lowercase: true },\n        { name: 'rule_presence', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'known_exploit', msg: messages.CVEsPDFreportFiltersDefinedValue, lowercase: true },\n        { name: 'rhel_version', msg: messages.CVEsPDFreportFiltersOsVersion }\n    ];\n\n    let systemsFilterStringSegments = [\n        { name: 'filter', msg: messages.systemsPDFreportFiltersSearchTerm, lowercase: true },\n        { name: 'rhel_version', msg: messages.systemsPDFreportFiltersOsVersion }\n    ];\n\n    let filterStringSegments = type === 'cves' ? cvefilterStringSegments : systemsFilterStringSegments;\n\n    // find and tag first present filter segment\n    for (let i = 0; i < filterStringSegments.length; i++) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isFirst = true;\n            break;\n        }\n    }\n\n    // find and tag last present filter segment\n    for (let i = filterStringSegments.length - 1; i >= 0; i--) {\n        if (filtersBuilder.hasOwnProperty(filterStringSegments[i].name)) {\n            filterStringSegments[i].isLast = true;\n            break;\n        }\n    }\n\n    const generateCvesFiltersParagraph = () =>\n        <Paragraph>\n            {\n                intlFormatWithBold(messages.customReportSearchTermCvssAndPublishDate,\n                    {\n                        hasSearchTerm: filtersBuilder.hasOwnProperty('filter') ? 'yes' : 'no',\n                        searchTerm: filtersBuilder.filter && filtersBuilder.filter.values,\n                        score: (\n                            filtersBuilder.cvss_filter && filtersBuilder.cvss_filter.values\n                        ) || DEFAULT_FILTER_DATA.cvss_filter.from.toFixed(1) + ' - ' +\n                            DEFAULT_FILTER_DATA.cvss_filter.to.toFixed(1),\n                        published: (\n                            filtersBuilder.publish_date && filtersBuilder.publish_date.values\n                        ) || intlFormatWithBold(messages.customReportTimespanAnytime)\n                    }\n                )\n            }\n            {\n                filterStringSegments.map(filter => (\n                    filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                ) && intlFormatWithBold(filter.msg,\n                    {\n                        values: filter.lowercase ?\n                            filtersBuilder[filter.name].values.toLowerCase() :\n                            filtersBuilder[filter.name].values,\n                        prefix: filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';'\n                    }\n                ))\n            }\n            {filtersBuilder.tags ? '.\\n\\n' : ''}\n            {\n                filtersBuilder.tags ? intl.formatMessage(messages.tagFilterParagraph) + ' ' +\n                filtersBuilder.tags.values.map(tag => `${tag.namespace}:${tag.key}=${tag.value}`).slice(0, 10).join(', ') : ''\n            }\n            {\n                filtersBuilder.tags?.values.length > 10 && ' '\n                + intl.formatMessage(messages.tagFilterParagraphAndMore, { count: filtersBuilder.tags.values.length - 10 })\n            }\n            {'.\\n\\n'}\n        </Paragraph>;\n\n    const generateSystemsFiltersParagraph = () => {\n        const includedValues = filters.find(filter => filter.key === 'excluded')?.multiValue;\n\n        return (Object.values(filtersBuilder)?.filter(filter => filter.isAllChosen !== true)?.length > 0 ? (\n            <Paragraph>\n                {\n                    intl.formatMessage(messages.systemsPDFreportSubHeader)\n                }\n                {\n                    includedValues?.length === 1 && (includedValues[0] === 'true'\n                        ? ' ' + intl.formatMessage(messages.systemsPDFreportFiltersDisabled)\n                        : ' ' + intl.formatMessage(messages.systemsPDFreportFiltersEnabled))\n                }\n                {\n                    filterStringSegments.map(filter => (\n                        filtersBuilder.hasOwnProperty(filter.name) && !filtersBuilder[filter.name]?.isAllChosen\n                    ) && intlFormatWithBold(filter.msg,\n                        {\n                            values: filter.lowercase ?\n                                filtersBuilder[filter.name].values.toLowerCase() :\n                                filtersBuilder[filter.name].values,\n                            prefix: filter.isFirst ? '' : (filter.isLast ? intl.formatMessage(messages.customReportAnd) : ';')\n                        }\n                    ))\n                }\n                {'.\\n\\n'}\n            </Paragraph>\n        ) : null\n        );\n    };\n\n    return (\n        <Fragment key=\"first-section\">\n            {\n                isReportDynamic && (\n                    <Paragraph>\n                        {intlFormatWithBold(messages.customReportIntroductionText)}\n                    </Paragraph>\n                )\n            }\n\n            {type === 'cves' ? generateCvesFiltersParagraph() : generateSystemsFiltersParagraph()}\n\n            {type === 'cves' && (\n                <Paragraph>\n                    <Text>\n                        {intlFormatWithBold(messages.CVEsPDFreportSubHeader, {\n                            cve_count: meta.total_items.toString(),\n                            system_count: meta.system_count.toString()\n                        })}\n\n                        {(isReportDynamic && reportData.header?.includes('known_exploit') || !isReportDynamic) &&\n                            intlFormatWithBold(messages.CVEsPDFreportSubHeaderExploit, {\n                                knownExploitCount: meta.knownExploitCount.toString()\n                            })\n                        }\n                    </Text>\n                </Paragraph>\n            )}\n\n            {\n                reportData && reportData.userNotes ?\n                    (\n                        <View style={styles.userNotes}>\n                            <Paragraph style={styles.userNotesTitle}>\n                                <Text style={styles.bold}>\n                                    {intl.formatMessage(messages.customReportUserNoteLabel)}\n                                </Text>\n                            </Paragraph>\n                            <Paragraph>\n                                <Text>{reportData.userNotes}</Text>\n                            </Paragraph>\n                            <Paragraph>\n                                {user && user.identity &&\n                                    <Text style={styles.italic}>\n                                        {intl.formatMessage(messages.customReportUserNotesGenerated, {\n                                            name: `${user.identity.user.first_name} ${user.identity.user.last_name}`\n                                        })}\n                                    </Text>\n                                }\n                            </Paragraph>\n                        </View>\n                    ) : null\n            }\n\n            <View style={styles.mt16}>\n                {tablePage({ data, intl, header: reportData && reportData.header, type, isReportDynamic })}\n            </View>\n        </Fragment>\n    );\n};\n\nfirstPagePDF.defaultProps = {\n    user: undefined\n};\n\nfirstPagePDF.propTypes = {\n    intl: PropTypes.any,\n    filters: PropTypes.array,\n    data: PropTypes.object,\n    meta: PropTypes.object,\n    reportData: PropTypes.object,\n    isReportDynamic: PropTypes.bool,\n    user: PropTypes.object,\n    type: PropTypes.string\n};\n\nexport default firstPagePDF;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, Link } from '@react-pdf/renderer';\nimport { Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { CVES_PATH } from '../../../../Helpers/constants';\nimport messages from '../../../../Messages';\nimport styles from './styles';\nimport { formatDate } from '../../../../Helpers/MiscHelper';\nimport CVElabels from '../Common/CVElabels';\n\nconst tablePage = ({ data, page, intl, header, type, isReportDynamic = false }) => {\n    const POSSIBLE_HEADERS = [\n        {\n            name: 'publish_date',\n            header: { value: intl.formatMessage(messages.publishDate) }\n        },\n        {\n            name: 'cvss_filter',\n            header: { value: intl.formatMessage(messages.cvssBaseScore) },\n            hit: 'cvss_score'\n        },\n        {\n            name: 'impact',\n            header: { value: intl.formatMessage(messages.impact) },\n            hit: 'impact'\n        },\n        {\n            name: 'affecting',\n            header: { value: intl.formatMessage(messages.systemsExposed) },\n            hit: 'systems_affected'\n        },\n        {\n            name: 'business_risk_id',\n            header: { value: intl.formatMessage(messages.businessRisk) },\n            hit: 'business_risk'\n        },\n        {\n            name: 'status_id',\n            header: { value: intl.formatMessage(messages.status) },\n            hit: 'status'\n        }\n    ];\n    // eslint-disable-next-line react/prop-types\n    const columnBuilder = ({ value, style }) => <Text key={value} style={style}>{value}</Text>;\n    let hitColumns = ['cvss_score', 'impact', 'systems_affected', 'business_risk', 'status'];\n\n    let headerContent = [];\n\n    // if the header is undefined we use default header (all params)\n    if (header) {\n        headerContent.push({ value: intl.formatMessage(messages.cveId) });\n        hitColumns = [];\n\n        POSSIBLE_HEADERS.forEach(item => {\n            if (header.includes(item.name)) {\n                headerContent.push(item.header);\n                item.hit && hitColumns.push(item.hit);\n            }\n        });\n    }\n    else if (type === 'cves') {\n        headerContent = [\n            { value: intl.formatMessage(messages.cveId) }\n        ].concat(POSSIBLE_HEADERS.map(item => item.header));\n    }\n    else {\n        hitColumns = ['display_name', 'os', 'cve_count', 'updated'];\n\n        headerContent = [\n            { value: intl.formatMessage(messages.systemsColumnHeaderName), id: 'name' },\n            { value: intl.formatMessage(messages.systemsColumnHeaderOSFull) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderCveCount) },\n            { value: intl.formatMessage(messages.systemsColumnHeaderUpdated) }\n        ];\n    }\n\n    const hasRules = (cve) => {\n        const hasRule = cve.rules && cve.rules.length > 0;\n        return isReportDynamic ? hasRule && header.includes('rule_presence') : hasRule;\n    };\n\n    const hasExploit = ({ known_exploit: knownExploit }) => (\n        isReportDynamic ? knownExploit && header.includes('known_exploit') : knownExploit\n    );\n\n    const cveRows = [\n        ...data.map(({ attributes: cve }) => {\n            const synopsisCell = (\n                <View style={[styles.bodyCell, styles.cveCell]}>\n                    <View>\n                        <Text>\n                            <Link\n                                style={styles.link}\n                                src={`${CVES_PATH}/${cve.synopsis}`}\n                            >\n                                {cve.synopsis}\n                            </Link>\n                        </Text>\n                    </View>\n                    <CVElabels hasExploit={hasExploit(cve)} hasRule={hasRules(cve)} intl={intl} isSmall />\n                </View>\n            );\n\n            const publishDateCell = (\n                (!header || header.includes('publish_date')) &&\n                <Text key={cve.public_date} style={[styles.bodyCell, styles.cveCell]}>\n                    {processDate(cve.public_date)}\n                </Text>\n            );\n\n            return [\n                synopsisCell,\n                publishDateCell,\n                ...hitColumns.map(item => columnBuilder({ value: cve[item], style: [styles.bodyCell, styles.cveCell] }))\n            ];\n        })\n    ];\n\n    const systemRows = [\n        ...data.map(({ attributes: system }) => {\n            return [\n                columnBuilder({ value: system.display_name, style: [styles.bodyCell, styles.systemNameCell] }),\n                columnBuilder({ value: system.os, style: [styles.bodyCell, styles.systemCell] }),\n                columnBuilder({\n                    value: system.opt_out\n                        ? intl.formatMessage(messages.systemsTableDisabled)\n                        : system.cve_count, style: [styles.bodyCell, styles.systemCell]\n                }),\n                columnBuilder({ value: formatDate(system.updated, true), style: [styles.bodyCell, styles.systemCell] })\n            ];\n        })\n    ];\n\n    return <Fragment key={page}>\n        <Table\n            withHeader\n            rows={[\n                headerContent.map(item => columnBuilder({\n                    ...item,\n                    style: [styles.headerCell, type === 'cves'\n                        ? styles.cveCell\n                        : item.id === 'name'\n                            ? styles.systemNameCell\n                            : styles.systemCell]\n                })),\n                ... (type === 'cves') ? cveRows : systemRows\n            ]}\n        />\n        {data.length === 0 && <Text>{intl.formatMessage(messages.customReportNoItems)}</Text>}\n    </Fragment>;\n};\n\ntablePage.propTypes = {\n    data: PropTypes.object,\n    intl: PropTypes.any,\n    page: PropTypes.number,\n    header: PropTypes.array,\n    type: PropTypes.string,\n    isReportDynamic: PropTypes.bool\n};\n\nexport default tablePage;\n","\nimport React, { useState, useEffect } from 'react';\nimport propTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { getCveListByAccount } from '../../../Helpers/APIHelper';\nimport { chunkArray } from '../../../Helpers/MiscHelper';\nimport { firstPagePDFLength } from '../../../Helpers/ReportsHelper';\nimport messages from '../../../Messages';\nimport firstPagePDF from './Common/firstPagePDF';\nimport tablePage from './Common/tablePage';\nimport FooterPDF from './Common/FooterPDF';\nimport DownloadReport from '../../../Helpers/DownloadReport';\nimport {\n    STATUS_OPTIONS,\n    BUSINESS_RISK_OPTIONS,\n    PDF_REPORT_PER_PAGE,\n    impactList,\n    NotAuthorizedNotification\n} from '../../../Helpers/constants';\nimport { useNotification } from '../../../Helpers/Hooks';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst DownloadCVEsReport = ({\n    filters,\n    params,\n    reportData = {},\n    buttonProps,\n    isReportDynamic = false,\n    label,\n    ...props\n}) => {\n    const intl = useIntl();\n    const chrome = useChrome();\n    const [loading, setLoading] = useState(false);\n    const [hasRule, setSecurityRulesPresent] = useState(false);\n    const [hasExploit, setExploit] = useState(false);\n    const [addNotification, clearNotifications] = useNotification();\n\n    useEffect(() => {\n        setLoading(true);\n        addNotification({ msg: intl.formatMessage(messages.notificationReportDownloadStart) });\n    }, []);\n\n    const otherPagesPDF = data => chunkArray(\n        data,\n        PDF_REPORT_PER_PAGE.otherPages,\n        ({ attributes }) => (attributes.rules.length > 0 || attributes.known_exploit)\n            ? PDF_REPORT_PER_PAGE.labelsHeightMultiplier\n            : 1\n    );\n    const cvesFetch = async () => {\n        let cves;\n        let meta;\n\n        try {\n            ({ data: cves, meta } = await getCveListByAccount({\n                ...params,\n                ...DownloadReport.defaultParams,\n                sort: params.sort || '-cvss_score',\n                affecting: 'true',\n                ...isReportDynamic\n                    ? { advanced_report: 'true' }\n                    : { report: 'true' }\n            }));\n        }\n        catch (error) {\n            clearNotifications();\n\n            addNotification(error.status === '403' ? NotAuthorizedNotification : {\n                variant: 'danger',\n                autoDismiss: false,\n                msg: intl.formatMessage(messages.notificationReportDownloadFailureTitle),\n                description: intl.formatMessage(messages.notificationReportDownloadFailureBody)\n            });\n\n            setLoading(false);\n\n            return [];\n        }\n\n        let user;\n        if (reportData && reportData.userNotes) {\n            user = await chrome.auth.getUser();\n        }\n\n        const processData = (cves, meta) => {\n            meta.knownExploitCount = cves.filter(({ attributes }) => attributes.known_exploit === true).length;\n\n            return cves.map(cve => {\n                if (!meta.hasRule) {\n                    meta.hasRule = cve.attributes.rules.length > 0;\n                }\n\n                return {\n                    ...cve,\n                    attributes: {\n                        ...cve.attributes,\n                        status: STATUS_OPTIONS.find(item =>\n                            item.value === cve.attributes.status_id.toString()).label,\n                        business_risk: BUSINESS_RISK_OPTIONS.find(item =>\n                            item.value === cve.attributes.business_risk_id.toString()).label,\n                        impact: impactList[cve.attributes.impact]?.title || intl.formatMessage(messages.impactListUnknown),\n                        cvss_score: parseFloat(cve.attributes.cvss3_score || cve.attributes.cvss2_score).toFixed(1)\n                    }\n                };\n            });\n        };\n\n        const data = processData(cves, meta);\n\n        setSecurityRulesPresent(() => {\n            return isReportDynamic ? meta.hasRule && reportData && reportData.header?.includes('rule_presence') : meta.hasRule;\n        });\n\n        setExploit(() => {\n            return isReportDynamic\n                ? meta.knownExploitCount > 0 && reportData && reportData.header?.includes('known_exploit')\n                : meta.knownExploitCount > 0;\n        });\n\n        const firstPage = firstPagePDF({\n            data: data.splice(0, firstPagePDFLength(reportData, params)),\n            meta,\n            filters,\n            intl,\n            isReportDynamic,\n            reportData,\n            user,\n            type: 'cves' // FIXME: firstPagePDF should be more abstract\n        });\n\n        const otherPages = otherPagesPDF(data);\n\n        setLoading(false);\n\n        clearNotifications();\n        addNotification({ variant: 'success', msg: intl.formatMessage(messages.notificationReportDownloadSuccess) });\n\n        return [\n            firstPage,\n            ...otherPages.map((cvePage, index) =>\n                tablePage({\n                    data: cvePage,\n                    page: index,\n                    intl,\n                    header: reportData && reportData.header,\n                    type: 'cves', // FIXME: same for tablePage\n                    isReportDynamic\n                })\n            )\n        ];\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                fallback={null}\n                orientation=\"landscape\"\n                size=\"A4\"\n                type=\"\"\n                fileName={`${DownloadReport.filename(isReportDynamic ? 'reports' : '')}.pdf`}\n                buttonProps={{ component: 'button', ...buttonProps }}\n                asyncFunction={cvesFetch}\n                allPagesHaveTitle={false}\n                footer={<FooterPDF intl={intl} hasRule={hasRule} hasExploit={hasExploit} />}\n                reportName={\n                    isReportDynamic\n                        ? reportData.reportTitle\n                        : intl.formatMessage(messages.cvePDFReportName)\n                }\n                label={\n                    loading\n                        ? intl.formatMessage(messages.loading)\n                        : intl.formatMessage(label)\n                }\n                {...props}\n            />\n        </div>\n    );\n};\n\nDownloadCVEsReport.defaultProps = {\n    label: messages.kebabExportAsPDF\n};\n\nDownloadCVEsReport.propTypes = {\n    filters: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    params: propTypes.object,\n    reportData: propTypes.object,\n    buttonProps: propTypes.object,\n    label: propTypes.oneOfType([\n        propTypes.array,\n        propTypes.object\n    ]),\n    isReportDynamic: propTypes.bool\n};\n\nexport default DownloadCVEsReport;\n"],"names":["CVElabels","_ref","intl","hasRule","hasExploit","_ref$isSmall","isSmall","React","View","style","styles","labelsWrapper","_objectSpread","label","width","InsightsLabel","icon","variant","formatMessage","messages","knownExploit","textStyle","smallText","left","undefined","labelStyle","border","borderWidth","borderColor","height","securityRuleLabel","propTypes","FooterPDF","Text","footer","intlFormatWithBold","knownExploitPDFFooter","securityRulePDFFooter","firstPagePDF","_reportData$header","data","meta","filters","isReportDynamic","reportData","user","type","filtersBuilder","reduce","obj","item","_item$key","_FILTERS$item$key","_FILTERS$item$key$ite","key","filter","category","values","PUBLIC_DATE_OPTIONS","find","val","value","chips","timespan_label","map","_ref2","name","join","isAllChosen","CVE_REPORT_FILTERS","SYSTEM_REPORT_FILTERS","component","CheckboxCustomFilter","length","FILTERS","items","allChosen","cvefilterStringSegments","msg","CVEsPDFreportFiltersSeverity","lowercase","CVEsPDFreportFiltersBusinessRisk","CVEsPDFreportFiltersStatus","CVEsPDFreportFiltersDefinedValue","CVEsPDFreportFiltersOsVersion","systemsFilterStringSegments","systemsPDFreportFiltersSearchTerm","systemsPDFreportFiltersOsVersion","filterStringSegments","i","hasOwnProperty","isFirst","isLast","_filters$find","_Object$values","_Object$values$filter","includedValues","_filtersBuilder$tags","Fragment","Paragraph","customReportIntroductionText","customReportSearchTermCvssAndPublishDate","hasSearchTerm","searchTerm","score","cvss_filter","DEFAULT_FILTER_DATA","from","toFixed","to","published","publish_date","customReportTimespanAnytime","_filtersBuilder$filte","toLowerCase","prefix","customReportAnd","tags","tagFilterParagraph","tag","concat","namespace","slice","tagFilterParagraphAndMore","count","multiValue","Object","systemsPDFreportSubHeader","systemsPDFreportFiltersDisabled","systemsPDFreportFiltersEnabled","_filtersBuilder$filte2","CVEsPDFreportSubHeader","cve_count","total_items","toString","system_count","header","includes","CVEsPDFreportSubHeaderExploit","knownExploitCount","userNotes","userNotesTitle","bold","customReportUserNoteLabel","identity","italic","customReportUserNotesGenerated","first_name","last_name","mt16","tablePage","defaultProps","PropTypes","page","_ref$isReportDynamic","POSSIBLE_HEADERS","publishDate","cvssBaseScore","hit","impact","systemsExposed","businessRisk","status","columnBuilder","hitColumns","headerContent","push","cveId","forEach","systemsColumnHeaderName","id","systemsColumnHeaderOSFull","systemsColumnHeaderCveCount","systemsColumnHeaderUpdated","hasRules","cve","rules","cveRows","_toConsumableArray","_ref4","_ref3","attributes","bodyCell","cveCell","Link","link","src","CVES_PATH","synopsis","known_exploit","public_date","processDate","systemRows","_ref5","system","display_name","systemNameCell","os","systemCell","opt_out","systemsTableDisabled","formatDate","updated","Table","withHeader","rows","headerCell","customReportNoItems","DownloadCVEsReport","params","_ref$reportData","buttonProps","props","_objectWithoutProperties","_excluded","useIntl","chrome","useChrome","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","setSecurityRulesPresent","_useState5","_useState6","setExploit","_useNotification","useNotification","_useNotification2","addNotification","clearNotifications","useEffect","notificationReportDownloadStart","otherPagesPDF","chunkArray","PDF_REPORT_PER_PAGE","otherPages","labelsHeightMultiplier","cvesFetch","_asyncToGenerator","_regeneratorRuntime","_callee","cves","_yield$getCveListByAc","processData","firstPage","_context","prev","next","getCveListByAccount","DownloadReport","defaultParams","sort","affecting","advanced_report","report","sent","t0","NotAuthorizedNotification","autoDismiss","notificationReportDownloadFailureTitle","description","notificationReportDownloadFailureBody","abrupt","auth","getUser","_impactList$cve$attri","STATUS_OPTIONS","status_id","business_risk","BUSINESS_RISK_OPTIONS","business_risk_id","impactList","title","impactListUnknown","cvss_score","parseFloat","cvss3_score","cvss2_score","_reportData$header2","splice","firstPagePDFLength","notificationReportDownloadSuccess","cvePage","index","stop","apply","arguments","DownloadButton","_extends","fallback","orientation","size","fileName","filename","asyncFunction","allPagesHaveTitle","reportName","reportTitle","cvePDFReportName","kebabExportAsPDF"],"sourceRoot":""}