{"version":3,"file":"js/4210.1646211339433.84d75626dcb39d2726c5.js","mappings":"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","sources":["webpack:///./src/Utilities/Routes.js","webpack:///./src/Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner.js","webpack:///./src/App.js","webpack:///./src/Components/PresentationalComponents/Header/Breadcrumb.js","webpack:///./src/Components/PresentationalComponents/BaseDropdown/BaseDropdown.js","webpack:///./src/Components/PresentationalComponents/Header/Header.js","webpack:///./src/Components/PresentationalComponents/StaticPages/NoAccessPage.js"],"sourcesContent":["import React, { useEffect, useState, lazy, Suspense, Fragment } from 'react';\nimport some from 'lodash/some';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { getSystems } from '../Helpers/APIHelper';\nimport { PATHS } from '../Helpers/constants';\nimport { intl } from './IntlProvider';\nimport messages from '../Messages';\n\nconst SystemsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"Systems\" */ '../Components/SmartComponents/SystemsPage/SystemsPage'\n    )\n);\n\nconst LandingPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"LandingPage\" */ '../Components/SmartComponents/LandingPage/LandingPage'\n    )\n);\n\nconst Upgrade = lazy(() =>\n    import(\n        /* webpackChunkName: \"Upgrade\" */ '../Components/PresentationalComponents/StaticPages/UpgradePage'\n    )\n);\n\nconst CVEDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"CVEDetailsPage\" */ '../Components/SmartComponents/CVEDetailsPage/CVEDetailsPage'\n    )\n);\n\nconst SystemDetailsPage = lazy(() =>\n    import(\n        /* webpackChunkName: \"SystemDetailsPage\" */ '../Components/SmartComponents/SystemDetailsPage/SystemDetailsPage'\n    )\n);\nconst Reports = lazy(() =>\n    import(/* webpackChunkName: \"Reports\" */ '../Components/SmartComponents/Reports/ReportsPage')\n);\n\nconst InsightsRoute = ({ component: Component, title, ...rest }) => {\n    const [hasSystems, setHasSystems] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await getSystems();\n            setHasSystems(result?.meta?.total_items > 0);\n        };\n\n        fetchData();\n    }, []);\n\n    if (title) {\n        const subPath = rest.location.pathname && rest.location.pathname.split('/')[2];\n        document.title = `${subPath ? `${subPath} - ` : ''} ${title} - ${intl.formatMessage(messages.pageTitleSuffix)}`;\n    }\n\n    return (\n        <Route\n            {...rest}\n            render={routeProps => (\n                !hasSystems ? <Upgrade /> : <Component {...routeProps} />\n            )}\n        />\n    );\n};\n\nInsightsRoute.propTypes = {\n    component: PropTypes.func,\n    title: PropTypes.string\n};\n\nexport const Routes = () => {\n    let location = useLocation();\n    let path = location.pathname;\n    return (\n        // TODO: Discuss with UX some nice loading placeholder\n        <Suspense fallback={Fragment}>\n            <Switch>\n                <Redirect\n                    from={PATHS.cvepagePath.to}\n                    to={PATHS.systemDetailsPage.to}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cveDetailsPage.to}\n                    component={CVEDetailsPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemDetailsPage.to}\n                    component={SystemDetailsPage}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.home.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.cvesPage.to}\n                    component={LandingPage}\n                    title={intl.formatMessage(messages.cvesHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.systemsPage.to}\n                    component={SystemsPage}\n                    title={intl.formatMessage(messages.systemsHeader)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.upgrade.to}\n                    component={Upgrade}\n                    title={intl.formatMessage(messages.upgradePageTitle)}\n                />\n\n                <InsightsRoute\n                    exact\n                    path={PATHS.reports.to}\n                    component={Reports}\n                    title={intl.formatMessage(messages.reportsPageTitle)}\n                />\n                <Route\n                    render={() => (\n                        some(PATHS, p => p.to === path) ? null : <Redirect to={PATHS.cvesPage.to} />\n                    )}\n                />\n            </Switch>\n        </Suspense>\n    );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Text } from '@patternfly/react-core';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport messages from '../../../Messages';\n\nconst ReadOnlyBanner = () => {\n    return (\n        <Banner>\n            <Bullseye>\n                <Text>\n                    {intl.formatMessage(messages.readOnlyBannerText, { b: (...chunks) => <b>{chunks}</b> })}\n                </Text>\n                <a\n                    href=\"https://status.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    style={{ color: 'var(--pf-global--link--Color--light)' }}\n                    className=\"pf-u-ml-sm\"\n                >\n                    {intl.formatMessage(messages.learnMore)}\n                </a>\n            </Bullseye>\n        </Banner>\n    );\n};\n\nexport default ReadOnlyBanner;\n","import React, {\n    useEffect,\n    useState,\n    useMemo,\n    Fragment\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport routerParams from '@redhat-cloud-services/frontend-components-utilities/RouterParams';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer as notifications } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry from './Utilities/ReducerRegistry';\nimport { setGlobalFilter } from './Store/Actions/Actions';\nimport { Routes } from './Utilities/Routes';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport NoAccessPage from './Components/PresentationalComponents/StaticPages/NoAccessPage';\nimport './App.scss';\nimport ReadOnlyBanner from './Components/PresentationalComponents/ReadOnlyBanner/ReadOnlyBanner';\nimport { useRbac } from './Helpers/Hooks';\nimport { PERMISSIONS } from './Helpers/constants';\nimport Spinner from '@redhat-cloud-services/frontend-components/Spinner';\n\nReducerRegistry.register({ notifications });\n\nconst App = () => {\n    const { push } = useHistory();\n    const { pathname } = useLocation();\n    const [[isUserAuthorized], isLoading] = useRbac([PERMISSIONS.accessApplication]);\n    const [isReadOnlyBannerVisible, setReadOnlyBannerVisible] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const appNavClick = useMemo(() => ({\n        cves(redirect) { insights?.chrome?.appNavClick({ id: 'cves', redirect }); },\n        systems(redirect) { insights?.chrome?.appNavClick({ id: 'systems', redirect }); },\n        reports(redirect) { insights?.chrome?.appNavClick({ id: 'reports', redirect }); }\n    }), []);\n\n    useEffect(() => {\n        insights?.chrome?.init();\n        insights?.chrome?.identifyApp('vulnerability');\n\n        const unregister = insights?.chrome?.on('APP_NAVIGATION', event => {\n            insights?.chrome?.hideGlobalFilter?.(false);\n            if (event.domEvent) {\n                push(`/${event.navId}`);\n                appNavClick[event.navId] !== undefined ? appNavClick[event.navId](true) : appNavClick.cves(true);\n            }\n        });\n\n        return () => unregister();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        const baseComponentUrl = pathname.split('/')[1];\n        insights?.chrome &&\n            baseComponentUrl &&\n            appNavClick[baseComponentUrl] !== undefined &&\n            appNavClick[baseComponentUrl](false);\n\n        const unregister = insights?.chrome?.on('GLOBAL_FILTER_UPDATE', ({ data }) => {\n            const [workloads, SIDs, tags] = insights?.chrome?.mapGlobalFilter?.(data, true, true) ?? [null, null, null];\n            dispatch(setGlobalFilter({ workloads, SIDs, tags }));\n        });\n\n        return () => unregister();\n    }, [appNavClick, pathname, dispatch]);\n\n    window.setReadOnlyBannerVisible = setVisible => setReadOnlyBannerVisible(setVisible);\n\n    return (\n        isLoading ? <Spinner centered /> : isUserAuthorized ?\n            <Fragment>\n                <NotificationPortal />\n                {isReadOnlyBannerVisible && <ReadOnlyBanner />}\n                <Routes />\n            </Fragment>\n            : <NoAccessPage />\n    );\n};\n\nexport default routerParams(App);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb as PfBreadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Skeleton } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nimport { PATHS } from '../../../Helpers/constants';\n\nconst Breadcrumb = ({ breadcrumbs }) => {\n    return (\n        <PfBreadcrumb key=\"PfBreadcrumb\">\n            <BreadcrumbItem key={PATHS.home.title} isActive={false}>\n                <Link to={PATHS.home.to}>{PATHS.home.title}</Link>\n            </BreadcrumbItem>\n\n            {breadcrumbs?.map(item => (\n                <BreadcrumbItem key={item.title} isActive={item.isActive}>\n                    {\n                        item.loaded\n                            ? (\n                                item.isActive ? item.title : <Link to={item.to}>{item.title}</Link>\n                            )\n                            : (\n                                <Skeleton className=\"breadcrumb-skeleton\"/>\n                            )\n                    }\n                </BreadcrumbItem>\n            ))}\n        </PfBreadcrumb>\n    );\n};\n\nBreadcrumb.propTypes = {\n    breadcrumbs: propTypes.array\n};\n\nexport default Breadcrumb;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport {\n    Dropdown,\n    DropdownToggle\n} from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport messages from '../../../Messages';\n\nconst BaseDropdown = ({ dropdownItems, disabled, ...props }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const intl = useIntl();\n\n    return (\n        <Dropdown\n            toggle={\n                <DropdownToggle\n                    onToggle={() => setIsOpen(!isOpen)}\n                    toggleIndicator={CaretDownIcon}\n                    isDisabled={disabled}\n                    className=\"dropdown-toggle\"\n                >\n                    {intl.formatMessage(messages.actions)}\n                </DropdownToggle>\n            }\n            isOpen={isOpen}\n            dropdownItems={dropdownItems}\n            {...props}\n        />\n    );\n};\n\nBaseDropdown.propTypes = {\n    dropdownItems: PropTypes.array,\n    disabled: PropTypes.bool\n};\n\nexport default BaseDropdown;\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Breadcrumb from './Breadcrumb';\nimport messages from '../../../Messages';\nimport { intl } from '../../../Utilities/IntlProvider';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport BaseDropdown from '../BaseDropdown/BaseDropdown';\n\nconst Header = ({ title, actions, breadcrumbs, showBreadcrumb, children, actionsOuiaId, labels }) => {\n\n    return (\n        <PageHeader>\n            {showBreadcrumb && <Breadcrumb breadcrumbs={breadcrumbs} />}\n\n            <Split hasGutter isWrappable>\n                <SplitItem>\n                    <PageHeaderTitle title={title} />\n                </SplitItem>\n\n                {[].concat(labels).map((item, index) => (\n                    <SplitItem key={index}>\n                        {item}\n                    </SplitItem>\n                ))}\n\n                <SplitItem isFilled />\n\n                {actions.length > 0 &&\n                    <SplitItem>\n                        <BaseDropdown dropdownItems={actions} position=\"right\" ouiaId={actionsOuiaId} />\n                    </SplitItem>\n                }\n            </Split>\n\n            {children}\n        </PageHeader>\n    );\n};\n\nHeader.defaultProps = {\n    showBreadcrumb: true,\n    actions: [],\n    title: intl.formatMessage(messages.cvesHeader)\n};\n\nHeader.propTypes = {\n    breadcrumbs: propTypes.array,\n    actions: propTypes.array,\n    title: propTypes.any,\n    showBreadcrumb: propTypes.bool,\n    children: propTypes.any,\n    actionsOuiaId: propTypes.string,\n    labels: propTypes.oneOfType([propTypes.element, propTypes.arrayOf(propTypes.element)])\n};\n\nexport default Header;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport messages from '../../../Messages';\nimport Header from '../../PresentationalComponents/Header/Header';\nimport { NotAuthorized } from '../EmptyStates/EmptyStates';\n\nconst NoAccessPage = ({ intl, title = intl.formatMessage(messages.vulnerabilitiesHeader), emptyStateTitle }) => {\n    return (\n        <React.Fragment>\n            <Header\n                title={title}\n                showBreadcrumb={false}\n            />\n            <Main>\n                <NotAuthorized\n                    title={emptyStateTitle}\n                />\n            </Main>\n        </React.Fragment>\n    );\n};\n\nNoAccessPage.propTypes = {\n    intl: propTypes.any,\n    title: propTypes.string,\n    emptyStateTitle: propTypes.string\n};\n\nexport default injectIntl(NoAccessPage);\n"],"names":["SystemsPage","lazy","LandingPage","Upgrade","CVEDetailsPage","SystemDetailsPage","Reports","InsightsRoute","Component","component","title","rest","useState","hasSystems","setHasSystems","useEffect","fetchData","getSystems","result","meta","total_items","subPath","location","pathname","split","document","intl","messages","render","routeProps","propTypes","PropTypes","Routes","path","useLocation","Suspense","fallback","Fragment","from","PATHS","to","exact","some","p","Banner","Bullseye","Text","b","chunks","href","target","rel","style","color","className","ReducerRegistry","notifications","routerParams","push","useHistory","useRbac","PERMISSIONS","isUserAuthorized","isLoading","isReadOnlyBannerVisible","setReadOnlyBannerVisible","dispatch","useDispatch","appNavClick","useMemo","cves","redirect","insights","chrome","id","systems","reports","init","identifyApp","unregister","on","event","hideGlobalFilter","domEvent","navId","undefined","baseComponentUrl","data","mapGlobalFilter","workloads","SIDs","tags","setGlobalFilter","window","setVisible","Spinner","centered","NotificationPortal","NoAccessPage","Breadcrumb","breadcrumbs","key","BreadcrumbItem","isActive","map","item","loaded","Skeleton","BaseDropdown","dropdownItems","disabled","props","isOpen","setIsOpen","useIntl","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","isDisabled","formatMessage","Header","actions","showBreadcrumb","children","actionsOuiaId","labels","PageHeader","Split","hasGutter","isWrappable","SplitItem","PageHeaderTitle","concat","index","isFilled","length","position","ouiaId","defaultProps","emptyStateTitle","injectIntl"],"sourceRoot":""}